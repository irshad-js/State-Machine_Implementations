<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="0">
 <framework name="qpn"/>
 <package name="HSM" stereotype="0x00">
  <class name="Clock_Alarm" superclass="qpn::QHsm">
   <documentation>Main Class that implements the logic for the state machine structure</documentation>
   <attribute name="currentTime" type="uint32_t" visibility="0x02" properties="0x01"/>
   <attribute name="alarmTime" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarmStatus" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="object" type="Clock_Alarm" visibility="0x02" properties="0x01">
    <documentation>Main object</documentation>
   </attribute>
   <attribute name="timeout_AlarmMessage" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="timeout_AlarmMain" type="uint8_t" visibility="0x02" properties="0x00"/>
   <operation name="get_current_time" type="uint32_t" visibility="0x00" properties="0x01"/>
   <operation name="update_current_time" type="void" visibility="0x00" properties="0x01">
    <code>if(++Clock_Alarm_currentTime &gt;= SecondsInDay)
{
    Clock_Alarm_currentTime = 0;
}
</code>
   </operation>
   <operation name="set_current_time" type="void" visibility="0x00" properties="0x01">
    <parameter name="new_current_time" type="uint32_t"/>
    <code>Clock_Alarm_currentTime = new_current_time;</code>
   </operation>
   <statechart properties="0x01">
    <initial target="../1/2">
     <action>Clock_Alarm_set_current_time(INITIAL_CURRENT_TIME);
me-&gt;alarmTime = INITIAL_ALARM_TIME;
me-&gt;alarmStatus = 0;</action>
     <initial_glyph conn="15,30,5,0,10,-4">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="MainClock">
     <history type="deep" target="../2">
      <history_glyph conn="20,50,3,2,6,-8"/>
     </history>
     <tran trig="ALARM">
      <action>me-&gt;timeout_AlarmMain =0;</action>
      <choice target="../../../2">
       <guard>( me-&gt;alarmStatus == ALARM_ON &amp;&amp; (Clock_Alarm_currentTime/1000) == (me-&gt;alarmTime/1000))</guard>
       <choice_glyph conn="67,73,5,1,-6">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="67,64,2,-1,9">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="Ticking">
      <documentation>The state where milliseconds are updated</documentation>
      <entry>if(me-&gt;alarmStatus == 1){
    sprintf(DisplayStringFirstLine,&quot;Alarm - YES&quot;);
}
else{
    sprintf(DisplayStringFirstLine,&quot;Alarm - NO&quot;);
}

sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,((Clock_Alarm_currentTime/1000U/60U/60U)%24),((Clock_Alarm_currentTime/1000U/60U)%60U),((Clock_Alarm_currentTime/1000U)%60U)); 
sprintf(DisplayStringThirdLine,&quot;State TICK&quot;);
RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</entry>
      <tran trig="SET" target="../../3/1">
       <tran_glyph conn="40,32,1,3,7,-3,4">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../3/2">
       <tran_glyph conn="36,42,2,3,2,15">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="TICK">
       <action>if(me-&gt;alarmStatus == 1){
    sprintf(DisplayStringFirstLine,&quot;Alarm - YES&quot;);
}
else{
    sprintf(DisplayStringFirstLine,&quot;Alarm - NO&quot;);
}

sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,((Clock_Alarm_currentTime/1000U/60U/60U)%24),((Clock_Alarm_currentTime/1000U/60U)%60U),((Clock_Alarm_currentTime/1000U)%60U)); 
sprintf(DisplayStringThirdLine,&quot;State TICK&quot;);
RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</action>
       <tran_glyph conn="21,36,3,-1,10">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="21,26,19,16">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="SettingsParent">
      <documentation>Consolidated state that does time setting</documentation>
      <tran trig="OK" target="../../2">
       <action>            if(me-&gt;alarmStatus == 1){
                sprintf(DisplayStringFirstLine,&quot;Alarm - YES&quot;);
            }
            else{
                sprintf(DisplayStringFirstLine,&quot;Alarm - NO&quot;);
            }

            sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,((Clock_Alarm_currentTime/1000U/60U/60U)%24),((Clock_Alarm_currentTime/1000U/60U)%60U),((Clock_Alarm_currentTime/1000U)%60U));
            sprintf(DisplayStringThirdLine,&quot;Clock Set&quot;);
            RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</action>
       <tran_glyph conn="49,51,3,2,-17,-9">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state name="SetClock">
       <documentation>State that sets the clock</documentation>
       <initial target="../1">
        <initial_glyph conn="55,34,5,2,12,1">
         <action box="0,-2,10,2"/>
        </initial_glyph>
       </initial>
       <state name="SetHour">
        <entry>            if(me-&gt;alarmStatus == 1){
                sprintf(DisplayStringFirstLine,&quot;Alarm - YES&quot;);
            }
            else{
                sprintf(DisplayStringFirstLine,&quot;Alarm - NO&quot;);
            }

            sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,((Clock_Alarm_currentTime/1000U/60U/60U)%24),((Clock_Alarm_currentTime/1000U/60U)%60U),((Clock_Alarm_currentTime/1000U)%60U));
            sprintf(DisplayStringThirdLine,&quot;Hour Set&quot;);
            RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</entry>
        <tran trig="SET">
         <action>int hours = ((Clock_Alarm_currentTime/1000U/60U/60U)%24);
  int minutes = ((Clock_Alarm_currentTime/1000U/60U)%60);
  int seconds = ((Clock_Alarm_currentTime/1000U)%60);
  hours = (hours+1)%24;
  if(me-&gt;alarmStatus == 1){
    sprintf(DisplayStringFirstLine,&quot;Alarm - YES&quot;);
  }
  else{
    sprintf(DisplayStringFirstLine,&quot;Alarm - NO&quot;);
  }

  sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,hours,minutes,seconds);
  sprintf(DisplayStringThirdLine,&quot;Hour Set&quot;);
  Clock_Alarm_currentTime = (hours*60*60*1000)+(minutes*60*1000)+(seconds*1000);
RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</action>
         <tran_glyph conn="63,28,3,-1,8,4">
          <action box="-4,1,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../2">
         <action>  int hours = ((Clock_Alarm_currentTime/1000U/60U/60U)%24);
  int minutes = ((Clock_Alarm_currentTime/1000U/60U)%60);
  int seconds = ((Clock_Alarm_currentTime/1000U)%60);
  minutes = (minutes+1)%60;
  if(me-&gt;alarmStatus == 1){
    sprintf(DisplayStringFirstLine,&quot;Alarm - YES&quot;);
  }
  else{
    sprintf(DisplayStringFirstLine,&quot;Alarm - NO&quot;);
  }

  sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,hours,minutes,seconds);
  sprintf(DisplayStringThirdLine,&quot;Clock Set&quot;);
RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</action>
         <tran_glyph conn="73,28,1,3,2,1,2">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="63,25,10,10">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="SetMin">
        <entry>            if(me-&gt;alarmStatus == 1){
                sprintf(DisplayStringFirstLine,&quot;Alarm - YES&quot;);
            }
            else{
                sprintf(DisplayStringFirstLine,&quot;Alarm - NO&quot;);
            }

            sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,((Clock_Alarm_currentTime/1000U/60U/60U)%24),((Clock_Alarm_currentTime/1000U/60U)%60U),((Clock_Alarm_currentTime/1000U)%60U));
            sprintf(DisplayStringThirdLine,&quot;Minute Set&quot;);
            RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);
RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</entry>
        <tran trig="SET">
         <action>  int hours = ((Clock_Alarm_currentTime/1000U/60U/60U)%24);
  int minutes = ((Clock_Alarm_currentTime/1000U/60U)%60);
  int seconds = ((Clock_Alarm_currentTime/1000U)%60);
  minutes = (minutes+1)%60;
  if(me-&gt;alarmStatus == 1){
    sprintf(DisplayStringFirstLine,&quot;Alarm - YES&quot;);
  }
  else{
    sprintf(DisplayStringFirstLine,&quot;Alarm - NO&quot;);
  }

  sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,hours,minutes,seconds);
  sprintf(DisplayStringThirdLine,&quot;Minute Set&quot;);

  Clock_Alarm_currentTime = (hours*60*60*1000)+(minutes*60*1000)+(seconds*1000);
RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</action>
         <tran_glyph conn="77,30,3,-1,7,2">
          <action box="1,2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="77,26,14,9">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="51,20,47,18"/>
      </state>
      <state name="SetAlarm">
       <documentation>State that sets the Alarm time</documentation>
       <initial target="../1">
        <initial_glyph conn="57,50,5,3,-2,-4,4">
         <action box="-3,1,10,2"/>
        </initial_glyph>
       </initial>
       <state name="SetHour_Alarm">
        <entry>int hours = ((me-&gt;alarmTime/1000U/60U/60U)%24);
int minutes = ((me-&gt;alarmTime/1000U/60U)%60);
int seconds = ((me-&gt;alarmTime/1000U)%60);
if(me-&gt;alarmStatus == 1){
  sprintf(DisplayStringFirstLine,&quot;Alarm - YES&quot;);
}
else{
  sprintf(DisplayStringFirstLine,&quot;Alarm - NO&quot;);
}

sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,hours,minutes,seconds);
sprintf(DisplayStringThirdLine,&quot;Alarm Hour&quot;);
RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</entry>
        <tran trig="SET">
         <action>int hours = ((me-&gt;alarmTime/1000U/60U/60U)%24);
int minutes = ((me-&gt;alarmTime/1000U/60U)%60);
int seconds = ((me-&gt;alarmTime/1000U)%60);
hours = (hours+1)%24;
if(me-&gt;alarmStatus == 1){
  sprintf(DisplayStringFirstLine,&quot;Alarm - YES&quot;);
}
else{
  sprintf(DisplayStringFirstLine,&quot;Alarm - NO&quot;);
}

sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,hours,minutes,seconds);
sprintf(DisplayStringThirdLine,&quot;Alarm Hour&quot;);
me-&gt;alarmTime = (hours*60*60*1000)+(minutes*60*1000)+(seconds*1000);

RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</action>
         <tran_glyph conn="59,47,3,-1,7,1">
          <action box="3,0,8,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../2">
         <tran_glyph conn="71,46,1,3,2">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="59,43,12,6">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="SetMin_Alarm">
        <entry>int hours = ((me-&gt;alarmTime/1000U/60U/60U)%24);
int minutes = ((me-&gt;alarmTime/1000U/60U)%60);
int seconds = ((me-&gt;alarmTime/1000U)%60);
if(me-&gt;alarmStatus == 1){
  sprintf(DisplayStringFirstLine,&quot;Alarm - YES&quot;);
}
else{
  sprintf(DisplayStringFirstLine,&quot;Alarm - NO&quot;);
}

sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,hours,minutes,seconds);
sprintf(DisplayStringThirdLine,&quot;Alarm Min&quot;);
RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</entry>
        <tran trig="SET">
         <action>int hours = ((me-&gt;alarmTime/1000U/60U/60U)%24);
int minutes = ((me-&gt;alarmTime/1000U/60U)%60);
int seconds = ((me-&gt;alarmTime/1000U)%60);
minutes = (minutes+1)%60;
if(me-&gt;alarmStatus == 1){
  sprintf(DisplayStringFirstLine,&quot;Alarm - YES&quot;);
}
else{
  sprintf(DisplayStringFirstLine,&quot;Alarm - NO&quot;);
}

sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,hours,minutes,seconds);
sprintf(DisplayStringThirdLine,&quot;Alarm Min&quot;);
me-&gt;alarmTime = (hours*60*60*1000)+(minutes*60*1000)+(seconds*1000);

RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</action>
         <tran_glyph conn="85,46,1,-1,-7,1">
          <action box="-4,0,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../3">
         <tran_glyph conn="85,45,1,0,7,3">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="73,43,12,6">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="Arm_Alarm">
        <entry>int hours = ((me-&gt;alarmTime/1000U/60U/60U)%24);
int minutes = ((me-&gt;alarmTime/1000U/60U)%60);
int seconds = ((me-&gt;alarmTime/1000U)%60);
if(me-&gt;alarmStatus == 1){
  sprintf(DisplayStringFirstLine,&quot;Alarm - YES&quot;);
}
else{
  sprintf(DisplayStringFirstLine,&quot;Alarm - NO&quot;);
}

sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,hours,minutes,seconds);
sprintf(DisplayStringThirdLine,&quot;Alarm 1/0&quot;);
RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</entry>
        <tran trig="SET">
         <action>
int hours = ((me-&gt;alarmTime/1000U/60U/60U)%24);
int minutes = ((me-&gt;alarmTime/1000U/60U)%60);
int seconds = ((me-&gt;alarmTime/1000U)%60);

if(me-&gt;alarmStatus == 1){
  sprintf(DisplayStringFirstLine,&quot;Released&quot;);
  me-&gt;alarmStatus = 0;
}
else{
  me-&gt;alarmStatus = 1;
  sprintf(DisplayStringFirstLine,&quot;Armed&quot;);
}

sprintf(DisplayStringSecondLine,&quot;%02d-%02d-%02d&quot;,hours,minutes,seconds);
sprintf(DisplayStringThirdLine,&quot;Alarm 1/0&quot;);

RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</action>
         <tran_glyph conn="97,51,1,-1,-7,1">
          <action box="-4,0,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="85,48,12,6">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="51,39,47,16"/>
      </state>
      <state_glyph node="49,14,53,45"/>
     </state>
     <state_glyph node="20,8,85,56"/>
    </state>
    <state name="NotifyAlarm">
     <documentation>The state is called when the alarm goes off</documentation>
     <entry>(me-&gt;timeout_AlarmMessage) =0;
sprintf(DisplayStringFirstLine,&quot;* - Alarm - *&quot;);
sprintf(DisplayStringSecondLine,&quot; Alarm &quot;);
sprintf(DisplayStringThirdLine,&quot;* - Alarm - *&quot;);
RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</entry>
     <exit>me-&gt;alarmStatus = ALARM_OFF;</exit>
     <initial target="../3">
      <initial_glyph conn="22,83,5,2,6,-1">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="OK" target="../../1" cpref="../../1/0">
      <action>me-&gt;alarmStatus == ALARM_OFF;</action>
      <tran_glyph conn="20,72,3,3,-10,-22,9">
       <action box="0,0,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TICK">
      <choice target="../../../1/2">
       <guard>++(me-&gt;timeout_AlarmMain) == 16</guard>
       <choice_glyph conn="12,81,5,3,-5,-43,7,-5,7">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="20,81,3,-1,-8">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="MessageON">
      <entry>(me-&gt;timeout_AlarmMessage) = 0;
sprintf(DisplayStringFirstLine,&quot;* - Alarm - *&quot;);
sprintf(DisplayStringSecondLine,&quot; Alarm &quot;);
sprintf(DisplayStringThirdLine,&quot;* - Alarm - *&quot;);
RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</entry>
      <tran trig="TICK">
       <choice target="../../../4">
        <guard>( ++(me-&gt;timeout_AlarmMessage) == 1 &amp;&amp; ++(me-&gt;timeout_AlarmMain) &lt; 15 )</guard>
        <choice_glyph conn="40,84,5,2,8,-2">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="34,82,2,-1,2,6">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="25,73,14,9">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="MessageOFF">
      <entry>(me-&gt;timeout_AlarmMessage) = 0;
sprintf(DisplayStringFirstLine,&quot;*     - - -         *&quot;);
sprintf(DisplayStringSecondLine,&quot;    - - - &quot;);
sprintf(DisplayStringThirdLine,&quot;*     - - -         *&quot;);
RefreshDisplay(&amp;DisplayStringFirstLine,&amp;DisplayStringSecondLine,&amp;DisplayStringThirdLine);</entry>
      <tran trig="TICK">
       <choice target="../../../3">
        <guard>( ++(me-&gt;timeout_AlarmMessage) == 1 &amp;&amp; ++(me-&gt;timeout_AlarmMain) &lt; 15 )</guard>
        <choice_glyph conn="42,72,5,0,-11,1">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="51,73,0,-1,-1,-9">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="42,73,14,9">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="20,68,41,18">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="126,89"/>
   </statechart>
  </class>
  <attribute name="SuperClass_Qhsm_Clock" type="QHsm * const" visibility="0x00" properties="0x00">
   <code>= &amp;Clock_Alarm_object.super;</code>
  </attribute>
  <operation name="Clock_Alarm_Constructor" type="void" visibility="0x00" properties="0x00">
   <code>QHsm_ctor(&amp;Clock_Alarm_object.super,Q_STATE_CAST(&amp;Clock_Alarm_initial));</code>
  </operation>
  <directory name="../src">
   <file name="ClockAlarm_SM.c" properties="external"/>
   <file name="ClockAlarm_SM.h">
    <text>#ifndef CLOCK_H
#define CLOCK_H
#include &quot;qpn.h&quot;
#include &quot;csrc/u8g2.h&quot;
#include&lt;kernel.h&gt;
#include &lt;stdio.h&gt;

#define SecondsInDay 86400000
#define INITIAL_CURRENT_TIME (13UL*60UL*60UL*1000UL)+(45*60*1000)+(45*1000)
#define INITIAL_ALARM_TIME (13UL*60UL*60UL*1000UL)+(46*60*1000)+(00*1000)

enum ClockAlarm_Signals{
    SET_SIG= Q_USER_SIG,
    OK_SIG,
    ALARM_SIG,
    TICK_SIG,
    MAX_SIG

};

enum Alarm_Status{
    ALARM_OFF,
    ALARM_ON
};

$declare${HSM::SuperClass_Qhsm_Clock}
$declare${HSM::Clock_Alarm_Constructor}

extern uint32_t milliSecondCounter;

void MilliSecondInterrupt_Cb(struct k_timer * Handle);

void RefreshDisplay(char * FirstLine,char * SecondLine,char * ThirdLine);

#define Offset 20

#endif</text>
   </file>
  </directory>
 </package>
</model>
