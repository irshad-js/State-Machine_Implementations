
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20000d80 	.word	0x20000d80
}
   4:	00002d15 	.word	0x00002d15
   8:	00006801 	.word	0x00006801
   c:	00002ccd 	.word	0x00002ccd
  10:	00002ccd 	.word	0x00002ccd
  14:	00002ccd 	.word	0x00002ccd
  18:	00002ccd 	.word	0x00002ccd
	...
  2c:	00002959 	.word	0x00002959
  30:	00002ccd 	.word	0x00002ccd
  34:	00000000 	.word	0x00000000
  38:	00002901 	.word	0x00002901
  3c:	00007297 	.word	0x00007297

00000040 <_irq_vector_table>:
  40:	00002a45 00002a45 00002a45 00002a45     E*..E*..E*..E*..
  50:	00002a45 00002a45 00002a45 00002a45     E*..E*..E*..E*..
  60:	00002a45 00002a45 00002a45 00002a45     E*..E*..E*..E*..
  70:	00002a45 00002a45 00002a45 00002a45     E*..E*..E*..E*..
  80:	00002a45 00002a45 00002a45 00002a45     E*..E*..E*..E*..
  90:	00002a45 00002a45 00002a45 00002a45     E*..E*..E*..E*..
  a0:	00002a45 00002a45 00002a45 00002a45     E*..E*..E*..E*..
  b0:	00002a45 00002a45 00002a45 00002a45     E*..E*..E*..E*..
  c0:	00002a45 00002a45 00002a45 00002a45     E*..E*..E*..E*..
  d0:	00002a45 00002a45 00002a45              E*..E*..E*..

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b96c 	b.w	3cc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	468e      	mov	lr, r1
     118:	2b00      	cmp	r3, #0
     11a:	f040 8082 	bne.w	222 <CONFIG_FLASH_SIZE+0x22>
     11e:	428a      	cmp	r2, r1
     120:	4617      	mov	r7, r2
     122:	d946      	bls.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     124:	fab2 f282 	clz	r2, r2
     128:	b14a      	cbz	r2, 13e <__udivmoddi4+0x32>
     12a:	f1c2 0120 	rsb	r1, r2, #32
     12e:	fa05 f302 	lsl.w	r3, r5, r2
     132:	fa20 f101 	lsr.w	r1, r0, r1
     136:	4097      	lsls	r7, r2
     138:	ea41 0e03 	orr.w	lr, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     142:	0c23      	lsrs	r3, r4, #16
     144:	fbbe fcf8 	udiv	ip, lr, r8
     148:	b2b9      	uxth	r1, r7
     14a:	fb08 ee1c 	mls	lr, r8, ip, lr
     14e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     152:	fb0c f001 	mul.w	r0, ip, r1
     156:	4298      	cmp	r0, r3
     158:	d90a      	bls.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     15a:	18fb      	adds	r3, r7, r3
     15c:	f10c 35ff 	add.w	r5, ip, #4294967295
     160:	f080 8116 	bcs.w	390 <CONFIG_FLASH_SIZE+0x190>
     164:	4298      	cmp	r0, r3
     166:	f240 8113 	bls.w	390 <CONFIG_FLASH_SIZE+0x190>
     16a:	f1ac 0c02 	sub.w	ip, ip, #2
     16e:	443b      	add	r3, r7
     170:	1a1b      	subs	r3, r3, r0
     172:	b2a4      	uxth	r4, r4
     174:	fbb3 f0f8 	udiv	r0, r3, r8
     178:	fb08 3310 	mls	r3, r8, r0, r3
     17c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     180:	fb00 f101 	mul.w	r1, r0, r1
     184:	42a1      	cmp	r1, r4
     186:	d909      	bls.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     188:	193c      	adds	r4, r7, r4
     18a:	f100 33ff 	add.w	r3, r0, #4294967295
     18e:	f080 8101 	bcs.w	394 <CONFIG_FLASH_SIZE+0x194>
     192:	42a1      	cmp	r1, r4
     194:	f240 80fe 	bls.w	394 <CONFIG_FLASH_SIZE+0x194>
     198:	3802      	subs	r0, #2
     19a:	443c      	add	r4, r7
     19c:	1a64      	subs	r4, r4, r1
     19e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a2:	2100      	movs	r1, #0
     1a4:	b11e      	cbz	r6, 1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     1a6:	40d4      	lsrs	r4, r2
     1a8:	2300      	movs	r3, #0
     1aa:	e9c6 4300 	strd	r4, r3, [r6]
     1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b2:	b902      	cbnz	r2, 1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     1b4:	deff      	udf	#255	; 0xff
     1b6:	fab2 f282 	clz	r2, r2
     1ba:	2a00      	cmp	r2, #0
     1bc:	d14f      	bne.n	25e <CONFIG_FLASH_SIZE+0x5e>
     1be:	1bcb      	subs	r3, r1, r7
     1c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c4:	fa1f f887 	uxth.w	r8, r7
     1c8:	2101      	movs	r1, #1
     1ca:	fbb3 fcfe 	udiv	ip, r3, lr
     1ce:	0c25      	lsrs	r5, r4, #16
     1d0:	fb0e 331c 	mls	r3, lr, ip, r3
     1d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1d8:	fb08 f30c 	mul.w	r3, r8, ip
     1dc:	42ab      	cmp	r3, r5
     1de:	d907      	bls.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     1e0:	197d      	adds	r5, r7, r5
     1e2:	f10c 30ff 	add.w	r0, ip, #4294967295
     1e6:	d202      	bcs.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     1e8:	42ab      	cmp	r3, r5
     1ea:	f200 80e7 	bhi.w	3bc <CONFIG_FLASH_SIZE+0x1bc>
     1ee:	4684      	mov	ip, r0
     1f0:	1aed      	subs	r5, r5, r3
     1f2:	b2a3      	uxth	r3, r4
     1f4:	fbb5 f0fe 	udiv	r0, r5, lr
     1f8:	fb0e 5510 	mls	r5, lr, r0, r5
     1fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     200:	fb08 f800 	mul.w	r8, r8, r0
     204:	45a0      	cmp	r8, r4
     206:	d907      	bls.n	218 <CONFIG_FLASH_SIZE+0x18>
     208:	193c      	adds	r4, r7, r4
     20a:	f100 33ff 	add.w	r3, r0, #4294967295
     20e:	d202      	bcs.n	216 <CONFIG_FLASH_SIZE+0x16>
     210:	45a0      	cmp	r8, r4
     212:	f200 80d7 	bhi.w	3c4 <CONFIG_FLASH_SIZE+0x1c4>
     216:	4618      	mov	r0, r3
     218:	eba4 0408 	sub.w	r4, r4, r8
     21c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     220:	e7c0      	b.n	1a4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5a>
     222:	428b      	cmp	r3, r1
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	2e00      	cmp	r6, #0
     228:	f000 80af 	beq.w	38a <CONFIG_FLASH_SIZE+0x18a>
     22c:	2100      	movs	r1, #0
     22e:	e9c6 0500 	strd	r0, r5, [r6]
     232:	4608      	mov	r0, r1
     234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     238:	fab3 f183 	clz	r1, r3
     23c:	2900      	cmp	r1, #0
     23e:	d14b      	bne.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
     240:	42ab      	cmp	r3, r5
     242:	d302      	bcc.n	24a <CONFIG_FLASH_SIZE+0x4a>
     244:	4282      	cmp	r2, r0
     246:	f200 80b7 	bhi.w	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     24a:	1a84      	subs	r4, r0, r2
     24c:	eb65 0303 	sbc.w	r3, r5, r3
     250:	2001      	movs	r0, #1
     252:	469e      	mov	lr, r3
     254:	2e00      	cmp	r6, #0
     256:	d0aa      	beq.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     258:	e9c6 4e00 	strd	r4, lr, [r6]
     25c:	e7a7      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     25e:	f1c2 0c20 	rsb	ip, r2, #32
     262:	fa01 f302 	lsl.w	r3, r1, r2
     266:	4097      	lsls	r7, r2
     268:	fa20 f00c 	lsr.w	r0, r0, ip
     26c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     270:	fa21 fc0c 	lsr.w	ip, r1, ip
     274:	4318      	orrs	r0, r3
     276:	fbbc f1fe 	udiv	r1, ip, lr
     27a:	0c05      	lsrs	r5, r0, #16
     27c:	fb0e cc11 	mls	ip, lr, r1, ip
     280:	fa1f f887 	uxth.w	r8, r7
     284:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     288:	fb01 f308 	mul.w	r3, r1, r8
     28c:	42ab      	cmp	r3, r5
     28e:	fa04 f402 	lsl.w	r4, r4, r2
     292:	d909      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     294:	197d      	adds	r5, r7, r5
     296:	f101 3cff 	add.w	ip, r1, #4294967295
     29a:	f080 808b 	bcs.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     29e:	42ab      	cmp	r3, r5
     2a0:	f240 8088 	bls.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     2a4:	3902      	subs	r1, #2
     2a6:	443d      	add	r5, r7
     2a8:	1aeb      	subs	r3, r5, r3
     2aa:	b285      	uxth	r5, r0
     2ac:	fbb3 f0fe 	udiv	r0, r3, lr
     2b0:	fb0e 3310 	mls	r3, lr, r0, r3
     2b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2b8:	fb00 f308 	mul.w	r3, r0, r8
     2bc:	42ab      	cmp	r3, r5
     2be:	d907      	bls.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     2c0:	197d      	adds	r5, r7, r5
     2c2:	f100 3cff 	add.w	ip, r0, #4294967295
     2c6:	d271      	bcs.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2c8:	42ab      	cmp	r3, r5
     2ca:	d96f      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2cc:	3802      	subs	r0, #2
     2ce:	443d      	add	r5, r7
     2d0:	1aeb      	subs	r3, r5, r3
     2d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d6:	e778      	b.n	1ca <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x80>
     2d8:	f1c1 0c20 	rsb	ip, r1, #32
     2dc:	408b      	lsls	r3, r1
     2de:	fa22 f70c 	lsr.w	r7, r2, ip
     2e2:	431f      	orrs	r7, r3
     2e4:	fa20 f40c 	lsr.w	r4, r0, ip
     2e8:	fa05 f301 	lsl.w	r3, r5, r1
     2ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f0:	fa25 f50c 	lsr.w	r5, r5, ip
     2f4:	431c      	orrs	r4, r3
     2f6:	0c23      	lsrs	r3, r4, #16
     2f8:	fbb5 f9fe 	udiv	r9, r5, lr
     2fc:	fa1f f887 	uxth.w	r8, r7
     300:	fb0e 5519 	mls	r5, lr, r9, r5
     304:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     308:	fb09 fa08 	mul.w	sl, r9, r8
     30c:	45aa      	cmp	sl, r5
     30e:	fa02 f201 	lsl.w	r2, r2, r1
     312:	fa00 f301 	lsl.w	r3, r0, r1
     316:	d908      	bls.n	32a <CONFIG_FLASH_SIZE+0x12a>
     318:	197d      	adds	r5, r7, r5
     31a:	f109 30ff 	add.w	r0, r9, #4294967295
     31e:	d247      	bcs.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     320:	45aa      	cmp	sl, r5
     322:	d945      	bls.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     324:	f1a9 0902 	sub.w	r9, r9, #2
     328:	443d      	add	r5, r7
     32a:	eba5 050a 	sub.w	r5, r5, sl
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fe 	udiv	r0, r5, lr
     334:	fb0e 5510 	mls	r5, lr, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f808 	mul.w	r8, r0, r8
     340:	45a0      	cmp	r8, r4
     342:	d907      	bls.n	354 <CONFIG_FLASH_SIZE+0x154>
     344:	193c      	adds	r4, r7, r4
     346:	f100 35ff 	add.w	r5, r0, #4294967295
     34a:	d22d      	bcs.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     34c:	45a0      	cmp	r8, r4
     34e:	d92b      	bls.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     350:	3802      	subs	r0, #2
     352:	443c      	add	r4, r7
     354:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     358:	eba4 0408 	sub.w	r4, r4, r8
     35c:	fba0 8902 	umull	r8, r9, r0, r2
     360:	454c      	cmp	r4, r9
     362:	46c6      	mov	lr, r8
     364:	464d      	mov	r5, r9
     366:	d319      	bcc.n	39c <CONFIG_FLASH_SIZE+0x19c>
     368:	d016      	beq.n	398 <CONFIG_FLASH_SIZE+0x198>
     36a:	b15e      	cbz	r6, 384 <CONFIG_FLASH_SIZE+0x184>
     36c:	ebb3 020e 	subs.w	r2, r3, lr
     370:	eb64 0405 	sbc.w	r4, r4, r5
     374:	fa04 fc0c 	lsl.w	ip, r4, ip
     378:	40ca      	lsrs	r2, r1
     37a:	ea4c 0202 	orr.w	r2, ip, r2
     37e:	40cc      	lsrs	r4, r1
     380:	e9c6 2400 	strd	r2, r4, [r6]
     384:	2100      	movs	r1, #0
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	4631      	mov	r1, r6
     38c:	4630      	mov	r0, r6
     38e:	e70e      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     390:	46ac      	mov	ip, r5
     392:	e6ed      	b.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     394:	4618      	mov	r0, r3
     396:	e701      	b.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     398:	4543      	cmp	r3, r8
     39a:	d2e6      	bcs.n	36a <CONFIG_FLASH_SIZE+0x16a>
     39c:	ebb8 0e02 	subs.w	lr, r8, r2
     3a0:	eb69 0507 	sbc.w	r5, r9, r7
     3a4:	3801      	subs	r0, #1
     3a6:	e7e0      	b.n	36a <CONFIG_FLASH_SIZE+0x16a>
     3a8:	4628      	mov	r0, r5
     3aa:	e7d3      	b.n	354 <CONFIG_FLASH_SIZE+0x154>
     3ac:	4660      	mov	r0, ip
     3ae:	e78f      	b.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     3b0:	4681      	mov	r9, r0
     3b2:	e7ba      	b.n	32a <CONFIG_FLASH_SIZE+0x12a>
     3b4:	4661      	mov	r1, ip
     3b6:	e777      	b.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     3b8:	4608      	mov	r0, r1
     3ba:	e74b      	b.n	254 <CONFIG_FLASH_SIZE+0x54>
     3bc:	f1ac 0c02 	sub.w	ip, ip, #2
     3c0:	443d      	add	r5, r7
     3c2:	e715      	b.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     3c4:	3802      	subs	r0, #2
     3c6:	443c      	add	r4, r7
     3c8:	e726      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     3ca:	bf00      	nop

000003cc <__aeabi_idiv0>:
     3cc:	4770      	bx	lr
     3ce:	bf00      	nop

000003d0 <u8x8_gpio_and_delay>:
    default:return 0;
  }  
  return 1;
}

uint8_t u8x8_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,U8X8_UNUSED void *arg_ptr){
     3d0:	b538      	push	{r3, r4, r5, lr}

  switch (msg){
     3d2:	294a      	cmp	r1, #74	; 0x4a
     3d4:	d033      	beq.n	43e <CONFIG_MAIN_STACK_SIZE+0x3e>
     3d6:	d819      	bhi.n	40c <CONFIG_MAIN_STACK_SIZE+0xc>
     3d8:	2928      	cmp	r1, #40	; 0x28
     3da:	d02a      	beq.n	432 <CONFIG_MAIN_STACK_SIZE+0x32>
     3dc:	2929      	cmp	r1, #41	; 0x29
     3de:	d12c      	bne.n	43a <CONFIG_MAIN_STACK_SIZE+0x3a>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     3e0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
     3e4:	17d5      	asrs	r5, r2, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     3e6:	03e9      	lsls	r1, r5, #15
     3e8:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
     3ec:	03d0      	lsls	r0, r2, #15
     3ee:	f240 34e7 	movw	r4, #999	; 0x3e7
     3f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     3f6:	2300      	movs	r3, #0
     3f8:	1900      	adds	r0, r0, r4
     3fa:	f04f 0400 	mov.w	r4, #0
     3fe:	eb44 0101 	adc.w	r1, r4, r1
     402:	f7ff fe6b 	bl	dc <__aeabi_uldivmod>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     406:	f004 fe89 	bl	511c <z_impl_k_sleep>
     40a:	e016      	b.n	43a <CONFIG_MAIN_STACK_SIZE+0x3a>
     40c:	294b      	cmp	r1, #75	; 0x4b
     40e:	d114      	bne.n	43a <CONFIG_MAIN_STACK_SIZE+0x3a>
      }else gpio_pin_set(gpio0,DC_PIN,1);
      
      break;
    
    case U8X8_MSG_GPIO_RESET:  
      if(arg_int==0){
     410:	2a00      	cmp	r2, #0
     412:	d14b      	bne.n	4ac <CONFIG_MAIN_STACK_SIZE+0xac>
        gpio_pin_set(gpio0,RESET_PIN,0);
     414:	4b30      	ldr	r3, [pc, #192]	; (4d8 <CONFIG_MAIN_STACK_SIZE+0xd8>)
     416:	6818      	ldr	r0, [r3, #0]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
     418:	6903      	ldr	r3, [r0, #16]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     41a:	681b      	ldr	r3, [r3, #0]
     41c:	2b00      	cmp	r3, #0
     41e:	db3d      	blt.n	49c <CONFIG_MAIN_STACK_SIZE+0x9c>
     420:	2300      	movs	r3, #0
	if (value != 0)	{
     422:	2b00      	cmp	r3, #0
     424:	d03c      	beq.n	4a0 <CONFIG_MAIN_STACK_SIZE+0xa0>
	const struct gpio_driver_api *api =
     426:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     428:	68db      	ldr	r3, [r3, #12]
     42a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     42e:	4798      	blx	r3
     430:	e003      	b.n	43a <CONFIG_MAIN_STACK_SIZE+0x3a>
     432:	2021      	movs	r0, #33	; 0x21
     434:	2100      	movs	r1, #0
     436:	f004 fe71 	bl	511c <z_impl_k_sleep>
      
      break;
  
  }
  return 1;
}
     43a:	2001      	movs	r0, #1
     43c:	bd38      	pop	{r3, r4, r5, pc}
      if(arg_int==0){
     43e:	b9b2      	cbnz	r2, 46e <CONFIG_MAIN_STACK_SIZE+0x6e>
        gpio_pin_set(gpio0,DC_PIN,0);
     440:	4b25      	ldr	r3, [pc, #148]	; (4d8 <CONFIG_MAIN_STACK_SIZE+0xd8>)
     442:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
     444:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     446:	681b      	ldr	r3, [r3, #0]
     448:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
     44c:	d107      	bne.n	45e <CONFIG_MAIN_STACK_SIZE+0x5e>
     44e:	2300      	movs	r3, #0
	if (value != 0)	{
     450:	b13b      	cbz	r3, 462 <CONFIG_MAIN_STACK_SIZE+0x62>
	const struct gpio_driver_api *api =
     452:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     454:	68db      	ldr	r3, [r3, #12]
     456:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     45a:	4798      	blx	r3
     45c:	e7ed      	b.n	43a <CONFIG_MAIN_STACK_SIZE+0x3a>
		value = (value != 0) ? 0 : 1;
     45e:	2301      	movs	r3, #1
     460:	e7f6      	b.n	450 <CONFIG_MAIN_STACK_SIZE+0x50>
	const struct gpio_driver_api *api =
     462:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     464:	691b      	ldr	r3, [r3, #16]
     466:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     46a:	4798      	blx	r3
	return ret;
     46c:	e7e5      	b.n	43a <CONFIG_MAIN_STACK_SIZE+0x3a>
      }else gpio_pin_set(gpio0,DC_PIN,1);
     46e:	4b1a      	ldr	r3, [pc, #104]	; (4d8 <CONFIG_MAIN_STACK_SIZE+0xd8>)
     470:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
     472:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     474:	681b      	ldr	r3, [r3, #0]
     476:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
     47a:	d107      	bne.n	48c <CONFIG_MAIN_STACK_SIZE+0x8c>
     47c:	2301      	movs	r3, #1
	if (value != 0)	{
     47e:	b13b      	cbz	r3, 490 <CONFIG_MAIN_STACK_SIZE+0x90>
	const struct gpio_driver_api *api =
     480:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     482:	68db      	ldr	r3, [r3, #12]
     484:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     488:	4798      	blx	r3
     48a:	e7d6      	b.n	43a <CONFIG_MAIN_STACK_SIZE+0x3a>
		value = (value != 0) ? 0 : 1;
     48c:	2300      	movs	r3, #0
     48e:	e7f6      	b.n	47e <CONFIG_MAIN_STACK_SIZE+0x7e>
	const struct gpio_driver_api *api =
     490:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     492:	691b      	ldr	r3, [r3, #16]
     494:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     498:	4798      	blx	r3
	return ret;
     49a:	e7ce      	b.n	43a <CONFIG_MAIN_STACK_SIZE+0x3a>
		value = (value != 0) ? 0 : 1;
     49c:	2301      	movs	r3, #1
     49e:	e7c0      	b.n	422 <CONFIG_MAIN_STACK_SIZE+0x22>
	const struct gpio_driver_api *api =
     4a0:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     4a2:	691b      	ldr	r3, [r3, #16]
     4a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     4a8:	4798      	blx	r3
	return ret;
     4aa:	e7c6      	b.n	43a <CONFIG_MAIN_STACK_SIZE+0x3a>
      }else gpio_pin_set(gpio0,RESET_PIN,1);
     4ac:	4b0a      	ldr	r3, [pc, #40]	; (4d8 <CONFIG_MAIN_STACK_SIZE+0xd8>)
     4ae:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
     4b0:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     4b2:	681b      	ldr	r3, [r3, #0]
     4b4:	2b00      	cmp	r3, #0
     4b6:	db07      	blt.n	4c8 <CONFIG_MAIN_STACK_SIZE+0xc8>
     4b8:	2301      	movs	r3, #1
	if (value != 0)	{
     4ba:	b13b      	cbz	r3, 4cc <CONFIG_MAIN_STACK_SIZE+0xcc>
	const struct gpio_driver_api *api =
     4bc:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     4be:	68db      	ldr	r3, [r3, #12]
     4c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     4c4:	4798      	blx	r3
     4c6:	e7b8      	b.n	43a <CONFIG_MAIN_STACK_SIZE+0x3a>
		value = (value != 0) ? 0 : 1;
     4c8:	2300      	movs	r3, #0
     4ca:	e7f6      	b.n	4ba <CONFIG_MAIN_STACK_SIZE+0xba>
	const struct gpio_driver_api *api =
     4cc:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     4ce:	691b      	ldr	r3, [r3, #16]
     4d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     4d4:	4798      	blx	r3
	return ret;
     4d6:	e7b0      	b.n	43a <CONFIG_MAIN_STACK_SIZE+0x3a>
     4d8:	200001d4 	.word	0x200001d4

000004dc <ScanRotaryEncoder>:
void ScanRotaryEncoder(void){
     4dc:	b510      	push	{r4, lr}
     4de:	b082      	sub	sp, #8
  int Button = gpio_pin_get(gpio0,Rotary_Button);
     4e0:	4b2d      	ldr	r3, [pc, #180]	; (598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>)
     4e2:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
     4e4:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
     4e6:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	a901      	add	r1, sp, #4
     4ec:	4798      	blx	r3
	if (ret == 0) {
     4ee:	4603      	mov	r3, r0
     4f0:	b918      	cbnz	r0, 4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
		*value ^= data->invert;
     4f2:	6821      	ldr	r1, [r4, #0]
     4f4:	9a01      	ldr	r2, [sp, #4]
     4f6:	404a      	eors	r2, r1
     4f8:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
     4fa:	b913      	cbnz	r3, 502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
     4fc:	9b01      	ldr	r3, [sp, #4]
     4fe:	f3c3 3300 	ubfx	r3, r3, #12, #1
  if (Button == 0){
     502:	b933      	cbnz	r3, 512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
    Q_SIG(SuperClass_Qhsm_Clock) = OK_SIG;
     504:	4b25      	ldr	r3, [pc, #148]	; (59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>)
     506:	6818      	ldr	r0, [r3, #0]
     508:	2309      	movs	r3, #9
     50a:	7303      	strb	r3, [r0, #12]
    QHSM_DISPATCH(SuperClass_Qhsm_Clock);
     50c:	6803      	ldr	r3, [r0, #0]
     50e:	685b      	ldr	r3, [r3, #4]
     510:	4798      	blx	r3
  CurrentState =  gpio_pin_get(gpio0,Rotary_Clk);
     512:	4b21      	ldr	r3, [pc, #132]	; (598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>)
     514:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
     516:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
     518:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
     51a:	685b      	ldr	r3, [r3, #4]
     51c:	a901      	add	r1, sp, #4
     51e:	4798      	blx	r3
	if (ret == 0) {
     520:	4603      	mov	r3, r0
     522:	b918      	cbnz	r0, 52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
		*value ^= data->invert;
     524:	6821      	ldr	r1, [r4, #0]
     526:	9a01      	ldr	r2, [sp, #4]
     528:	404a      	eors	r2, r1
     52a:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
     52c:	b913      	cbnz	r3, 534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
     52e:	9b01      	ldr	r3, [sp, #4]
     530:	f3c3 0380 	ubfx	r3, r3, #2, #1
     534:	4a1a      	ldr	r2, [pc, #104]	; (5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>)
     536:	6013      	str	r3, [r2, #0]
  if(CurrentState != LastState){
     538:	4a1a      	ldr	r2, [pc, #104]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     53a:	6812      	ldr	r2, [r2, #0]
     53c:	429a      	cmp	r2, r3
     53e:	d105      	bne.n	54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>
  LastState = CurrentState;
     540:	4b17      	ldr	r3, [pc, #92]	; (5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>)
     542:	681a      	ldr	r2, [r3, #0]
     544:	4b17      	ldr	r3, [pc, #92]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     546:	601a      	str	r2, [r3, #0]
}
     548:	b002      	add	sp, #8
     54a:	bd10      	pop	{r4, pc}
    int TempState = gpio_pin_get(gpio0,Rotary_Data);
     54c:	4b12      	ldr	r3, [pc, #72]	; (598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>)
     54e:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
     550:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
     552:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
     554:	685b      	ldr	r3, [r3, #4]
     556:	a901      	add	r1, sp, #4
     558:	4798      	blx	r3
	if (ret == 0) {
     55a:	4603      	mov	r3, r0
     55c:	b918      	cbnz	r0, 566 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7e>
		*value ^= data->invert;
     55e:	6821      	ldr	r1, [r4, #0]
     560:	9a01      	ldr	r2, [sp, #4]
     562:	404a      	eors	r2, r1
     564:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
     566:	b913      	cbnz	r3, 56e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x86>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
     568:	9b01      	ldr	r3, [sp, #4]
     56a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    if (TempState != CurrentState){
     56e:	4a0c      	ldr	r2, [pc, #48]	; (5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>)
     570:	6812      	ldr	r2, [r2, #0]
     572:	429a      	cmp	r2, r3
     574:	d007      	beq.n	586 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9e>
      Q_SIG(SuperClass_Qhsm_Clock) = SET_SIG; 
     576:	4b09      	ldr	r3, [pc, #36]	; (59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>)
     578:	6818      	ldr	r0, [r3, #0]
     57a:	2308      	movs	r3, #8
     57c:	7303      	strb	r3, [r0, #12]
      QHSM_DISPATCH(SuperClass_Qhsm_Clock);
     57e:	6803      	ldr	r3, [r0, #0]
     580:	685b      	ldr	r3, [r3, #4]
     582:	4798      	blx	r3
     584:	e7dc      	b.n	540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>
      Q_SIG(SuperClass_Qhsm_Clock) = OK_SIG;
     586:	4b05      	ldr	r3, [pc, #20]	; (59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>)
     588:	6818      	ldr	r0, [r3, #0]
     58a:	2309      	movs	r3, #9
     58c:	7303      	strb	r3, [r0, #12]
      QHSM_DISPATCH(SuperClass_Qhsm_Clock);
     58e:	6803      	ldr	r3, [r0, #0]
     590:	685b      	ldr	r3, [r3, #4]
     592:	4798      	blx	r3
     594:	e7d4      	b.n	540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>
     596:	bf00      	nop
     598:	200001d4 	.word	0x200001d4
     59c:	00007b0c 	.word	0x00007b0c
     5a0:	200001c8 	.word	0x200001c8
     5a4:	200001cc 	.word	0x200001cc

000005a8 <DisplayInit>:
void DisplayInit(void){
     5a8:	b510      	push	{r4, lr}
	u8g2_Setup_st7565_zolen_128x64_1(&u8g2, U8G2_MIRROR, u8x8_byte_hw_spi, u8x8_gpio_and_delay);  
     5aa:	4c0b      	ldr	r4, [pc, #44]	; (5d8 <DisplayInit+0x30>)
     5ac:	4b0b      	ldr	r3, [pc, #44]	; (5dc <DisplayInit+0x34>)
     5ae:	4a0c      	ldr	r2, [pc, #48]	; (5e0 <DisplayInit+0x38>)
     5b0:	490c      	ldr	r1, [pc, #48]	; (5e4 <DisplayInit+0x3c>)
     5b2:	4620      	mov	r0, r4
     5b4:	f001 f98a 	bl	18cc <u8g2_Setup_st7565_zolen_128x64_1>
  u8g2_InitDisplay(&u8g2);
     5b8:	4620      	mov	r0, r4
     5ba:	f005 fe91 	bl	62e0 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
     5be:	2100      	movs	r1, #0
     5c0:	4620      	mov	r0, r4
     5c2:	f005 fe94 	bl	62ee <u8x8_SetPowerSave>
  u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
     5c6:	4908      	ldr	r1, [pc, #32]	; (5e8 <DisplayInit+0x40>)
     5c8:	4620      	mov	r0, r4
     5ca:	f005 fbb7 	bl	5d3c <u8g2_SetFont>
  u8g2_SetDrawColor(&u8g2,1);
     5ce:	2101      	movs	r1, #1
     5d0:	4620      	mov	r0, r4
     5d2:	f005 fc4f 	bl	5e74 <u8g2_SetDrawColor>
}
     5d6:	bd10      	pop	{r4, pc}
     5d8:	20000260 	.word	0x20000260
     5dc:	000003d1 	.word	0x000003d1
     5e0:	0000072d 	.word	0x0000072d
     5e4:	00008364 	.word	0x00008364
     5e8:	00007b10 	.word	0x00007b10

000005ec <main>:
void main(void){
     5ec:	b510      	push	{r4, lr}
     5ee:	b090      	sub	sp, #64	; 0x40
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     5f0:	4833      	ldr	r0, [pc, #204]	; (6c0 <main+0xd4>)
     5f2:	f003 fffb 	bl	45ec <z_impl_device_get_binding>
  gpio0 = device_get_binding("GPIO_0");
     5f6:	4c33      	ldr	r4, [pc, #204]	; (6c4 <main+0xd8>)
     5f8:	6020      	str	r0, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
     5fa:	f44f 7200 	mov.w	r2, #512	; 0x200
     5fe:	211e      	movs	r1, #30
     600:	f005 f82e 	bl	5660 <z_impl_gpio_pin_configure>
  gpio_pin_configure(gpio0, 31, GPIO_OUTPUT);
     604:	6820      	ldr	r0, [r4, #0]
     606:	f44f 7200 	mov.w	r2, #512	; 0x200
     60a:	211f      	movs	r1, #31
     60c:	f005 f828 	bl	5660 <z_impl_gpio_pin_configure>
  gpio_pin_configure(gpio0, Rotary_Clk, GPIO_INPUT);
     610:	6820      	ldr	r0, [r4, #0]
     612:	f44f 7280 	mov.w	r2, #256	; 0x100
     616:	2102      	movs	r1, #2
     618:	f005 f822 	bl	5660 <z_impl_gpio_pin_configure>
  gpio_pin_configure(gpio0, Rotary_Data, GPIO_INPUT);
     61c:	6820      	ldr	r0, [r4, #0]
     61e:	f44f 7280 	mov.w	r2, #256	; 0x100
     622:	2103      	movs	r1, #3
     624:	f005 f81c 	bl	5660 <z_impl_gpio_pin_configure>
  gpio_pin_configure(gpio0, Rotary_Button, GPIO_INPUT | (GPIO_ACTIVE_HIGH | GPIO_PULL_UP));
     628:	6820      	ldr	r0, [r4, #0]
     62a:	f44f 7288 	mov.w	r2, #272	; 0x110
     62e:	210c      	movs	r1, #12
     630:	f005 f816 	bl	5660 <z_impl_gpio_pin_configure>
  LastState = gpio_pin_get(gpio0,Rotary_Clk);
     634:	2102      	movs	r1, #2
     636:	6820      	ldr	r0, [r4, #0]
     638:	f005 f837 	bl	56aa <gpio_pin_get>
     63c:	4b22      	ldr	r3, [pc, #136]	; (6c8 <main+0xdc>)
     63e:	6018      	str	r0, [r3, #0]
  InitializeSPI();
     640:	f005 f84d 	bl	56de <InitializeSPI>
  DisplayInit();
     644:	f7ff ffb0 	bl	5a8 <DisplayInit>
  Clock_Alarm_Constructor();  
     648:	f000 fa8c 	bl	b64 <Clock_Alarm_Constructor>
  QHSM_INIT(SuperClass_Qhsm_Clock);
     64c:	4b1f      	ldr	r3, [pc, #124]	; (6cc <main+0xe0>)
     64e:	6818      	ldr	r0, [r3, #0]
     650:	6803      	ldr	r3, [r0, #0]
     652:	b173      	cbz	r3, 672 <main+0x86>
     654:	681b      	ldr	r3, [r3, #0]
     656:	4798      	blx	r3
  k_timer_init(&milliSecondInterrupt,MilliSecondInterrupt_Cb,NULL);
     658:	2200      	movs	r2, #0
     65a:	491d      	ldr	r1, [pc, #116]	; (6d0 <main+0xe4>)
     65c:	a802      	add	r0, sp, #8
     65e:	f007 f8ad 	bl	77bc <k_timer_init>
  k_timer_start(&milliSecondInterrupt,K_USEC(1000),K_USEC(1000));
     662:	2221      	movs	r2, #33	; 0x21
     664:	2300      	movs	r3, #0
		arch_syscall_invoke5(*(uintptr_t *)&timer, parm0.split.lo, parm0.split.hi, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
     666:	e9cd 2300 	strd	r2, r3, [sp]
     66a:	a802      	add	r0, sp, #8
     66c:	f004 ff7a 	bl	5564 <z_impl_k_timer_start>
     670:	e00d      	b.n	68e <main+0xa2>
  QHSM_INIT(SuperClass_Qhsm_Clock);
     672:	214c      	movs	r1, #76	; 0x4c
     674:	4817      	ldr	r0, [pc, #92]	; (6d4 <main+0xe8>)
     676:	f005 f832 	bl	56de <InitializeSPI>
    Q_SIG(SuperClass_Qhsm_Clock) = TICK_SIG;
     67a:	4b14      	ldr	r3, [pc, #80]	; (6cc <main+0xe0>)
     67c:	6818      	ldr	r0, [r3, #0]
     67e:	230b      	movs	r3, #11
     680:	7303      	strb	r3, [r0, #12]
    QHSM_DISPATCH(SuperClass_Qhsm_Clock);
     682:	6803      	ldr	r3, [r0, #0]
     684:	685b      	ldr	r3, [r3, #4]
     686:	4798      	blx	r3
    milliSecondCounter = 0;
     688:	4b13      	ldr	r3, [pc, #76]	; (6d8 <main+0xec>)
     68a:	2200      	movs	r2, #0
     68c:	601a      	str	r2, [r3, #0]
  ScanRotaryEncoder();
     68e:	f7ff ff25 	bl	4dc <ScanRotaryEncoder>
  if (milliSecondCounter >= 1000){
     692:	4b11      	ldr	r3, [pc, #68]	; (6d8 <main+0xec>)
     694:	681a      	ldr	r2, [r3, #0]
     696:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
     69a:	d2ee      	bcs.n	67a <main+0x8e>
   else if ( (milliSecondCounter%500) == 1)
     69c:	4b0f      	ldr	r3, [pc, #60]	; (6dc <main+0xf0>)
     69e:	fba3 1302 	umull	r1, r3, r3, r2
     6a2:	095b      	lsrs	r3, r3, #5
     6a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     6a8:	fb01 2313 	mls	r3, r1, r3, r2
     6ac:	2b01      	cmp	r3, #1
     6ae:	d1ee      	bne.n	68e <main+0xa2>
    Q_SIG(SuperClass_Qhsm_Clock) = ALARM_SIG;
     6b0:	4b06      	ldr	r3, [pc, #24]	; (6cc <main+0xe0>)
     6b2:	6818      	ldr	r0, [r3, #0]
     6b4:	230a      	movs	r3, #10
     6b6:	7303      	strb	r3, [r0, #12]
    QHSM_DISPATCH(SuperClass_Qhsm_Clock);
     6b8:	6803      	ldr	r3, [r0, #0]
     6ba:	685b      	ldr	r3, [r3, #4]
     6bc:	4798      	blx	r3
     6be:	e7e6      	b.n	68e <main+0xa2>
     6c0:	00007a18 	.word	0x00007a18
     6c4:	200001d4 	.word	0x200001d4
     6c8:	200001cc 	.word	0x200001cc
     6cc:	00007b0c 	.word	0x00007b0c
     6d0:	00000b79 	.word	0x00000b79
     6d4:	00007a20 	.word	0x00007a20
     6d8:	200001d8 	.word	0x200001d8
     6dc:	10624dd3 	.word	0x10624dd3

000006e0 <SPI_TX_Data>:
  SPiTxPointer = data;
     6e0:	4911      	ldr	r1, [pc, #68]	; (728 <SPI_TX_Data+0x48>)
     6e2:	6008      	str	r0, [r1, #0]
  NRF_SPIM1->TXD.MAXCNT = 1;
     6e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     6e8:	2201      	movs	r2, #1
     6ea:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
  NRF_SPIM1->TXD.PTR = &SPiTxPointer;
     6ee:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
  NRF_GPIO->OUTCLR = 1UL << SPIM_CSN_PIN;
     6f2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
     6f6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
     6fa:	f8c1 050c 	str.w	r0, [r1, #1292]	; 0x50c
  NRF_SPIM1->TASKS_START = 1;
     6fe:	611a      	str	r2, [r3, #16]
	while(NRF_SPIM1->EVENTS_ENDTX != 1 ){
     700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     704:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
     708:	2b01      	cmp	r3, #1
     70a:	d1f9      	bne.n	700 <SPI_TX_Data+0x20>
  NRF_SPIM1->EVENTS_ENDTX = 0;
     70c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     710:	2200      	movs	r2, #0
     712:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  NRF_SPIM1->TASKS_STOP = 1;
     716:	2201      	movs	r2, #1
     718:	615a      	str	r2, [r3, #20]
  NRF_GPIO->OUTSET = 1UL << SPIM_CSN_PIN;
     71a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     71e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
     722:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
     726:	4770      	bx	lr
     728:	200001d0 	.word	0x200001d0

0000072c <u8x8_byte_hw_spi>:
uint8_t u8x8_byte_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
     72c:	b538      	push	{r3, r4, r5, lr}
     72e:	4614      	mov	r4, r2
     730:	461d      	mov	r5, r3
  switch(msg) {
     732:	2917      	cmp	r1, #23
     734:	d009      	beq.n	74a <u8x8_byte_hw_spi+0x1e>
     736:	2920      	cmp	r1, #32
     738:	d00b      	beq.n	752 <u8x8_byte_hw_spi+0x26>
     73a:	2000      	movs	r0, #0
}
     73c:	bd38      	pop	{r3, r4, r5, pc}
        SPI_TX_Data((uint8_t)*data);
     73e:	f815 0b01 	ldrb.w	r0, [r5], #1
     742:	f7ff ffcd 	bl	6e0 <SPI_TX_Data>
        arg_int--;
     746:	3c01      	subs	r4, #1
     748:	b2e4      	uxtb	r4, r4
      while( arg_int > 0 ) {
     74a:	2c00      	cmp	r4, #0
     74c:	d1f7      	bne.n	73e <u8x8_byte_hw_spi+0x12>
  return 1;
     74e:	2001      	movs	r0, #1
     750:	e7f4      	b.n	73c <u8x8_byte_hw_spi+0x10>
      if(arg_int==0){
     752:	b9ba      	cbnz	r2, 784 <u8x8_byte_hw_spi+0x58>
        gpio_pin_set(gpio0,DC_PIN,0);
     754:	4b17      	ldr	r3, [pc, #92]	; (7b4 <u8x8_byte_hw_spi+0x88>)
     756:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
     758:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     75a:	681b      	ldr	r3, [r3, #0]
     75c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
     760:	d108      	bne.n	774 <u8x8_byte_hw_spi+0x48>
     762:	2300      	movs	r3, #0
	if (value != 0)	{
     764:	b143      	cbz	r3, 778 <u8x8_byte_hw_spi+0x4c>
	const struct gpio_driver_api *api =
     766:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     768:	68db      	ldr	r3, [r3, #12]
     76a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     76e:	4798      	blx	r3
  return 1;
     770:	2001      	movs	r0, #1
	return ret;
     772:	e7e3      	b.n	73c <u8x8_byte_hw_spi+0x10>
		value = (value != 0) ? 0 : 1;
     774:	2301      	movs	r3, #1
     776:	e7f5      	b.n	764 <u8x8_byte_hw_spi+0x38>
	const struct gpio_driver_api *api =
     778:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     77a:	691b      	ldr	r3, [r3, #16]
     77c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     780:	4798      	blx	r3
     782:	e7f5      	b.n	770 <u8x8_byte_hw_spi+0x44>
        gpio_pin_set(gpio0,DC_PIN,1);
     784:	4b0b      	ldr	r3, [pc, #44]	; (7b4 <u8x8_byte_hw_spi+0x88>)
     786:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
     788:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     78a:	681b      	ldr	r3, [r3, #0]
     78c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
     790:	d108      	bne.n	7a4 <u8x8_byte_hw_spi+0x78>
     792:	2301      	movs	r3, #1
	if (value != 0)	{
     794:	b143      	cbz	r3, 7a8 <u8x8_byte_hw_spi+0x7c>
	const struct gpio_driver_api *api =
     796:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     798:	68db      	ldr	r3, [r3, #12]
     79a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     79e:	4798      	blx	r3
  return 1;
     7a0:	2001      	movs	r0, #1
	return ret;
     7a2:	e7cb      	b.n	73c <u8x8_byte_hw_spi+0x10>
		value = (value != 0) ? 0 : 1;
     7a4:	2300      	movs	r3, #0
     7a6:	e7f5      	b.n	794 <u8x8_byte_hw_spi+0x68>
	const struct gpio_driver_api *api =
     7a8:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     7aa:	691b      	ldr	r3, [r3, #16]
     7ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     7b0:	4798      	blx	r3
     7b2:	e7f5      	b.n	7a0 <u8x8_byte_hw_spi+0x74>
     7b4:	200001d4 	.word	0x200001d4

000007b8 <QHsm_init_>:
* @param[in,out] me pointer (see @ref oop)
*
* @note
* Must be called only ONCE after the QHsm_ctor().
*/
void QHsm_init_(QHsm * const me) {
     7b8:	b570      	push	{r4, r5, r6, lr}
     7ba:	b086      	sub	sp, #24
    QStateHandler t = me->state;
     7bc:	6846      	ldr	r6, [r0, #4]

    /** @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (QHsmVtable const *)0)
     7be:	6803      	ldr	r3, [r0, #0]
     7c0:	b17b      	cbz	r3, 7e2 <QHsm_init_+0x2a>
     7c2:	4605      	mov	r5, r0
     7c4:	6883      	ldr	r3, [r0, #8]
     7c6:	b163      	cbz	r3, 7e2 <QHsm_init_+0x2a>
     7c8:	4a1e      	ldr	r2, [pc, #120]	; (844 <CONFIG_ISR_STACK_SIZE+0x44>)
     7ca:	4296      	cmp	r6, r2
     7cc:	d109      	bne.n	7e2 <QHsm_init_+0x2a>
                      && (me->temp != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    r = (*me->temp)(me); /* execute the top-most initial transition */
     7ce:	4798      	blx	r3

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == Q_RET_TRAN);
     7d0:	2808      	cmp	r0, #8
     7d2:	d10a      	bne.n	7ea <QHsm_init_+0x32>
    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];
        int_fast8_t ip = 0; /* transition entry path index */

        path[0] = me->temp;
     7d4:	68ab      	ldr	r3, [r5, #8]
     7d6:	9301      	str	r3, [sp, #4]
        Q_SIG(me) = QEP_EMPTY_SIG_;
     7d8:	2400      	movs	r4, #0
     7da:	732c      	strb	r4, [r5, #12]
        (void)(*me->temp)(me);
     7dc:	4628      	mov	r0, r5
     7de:	4798      	blx	r3
        while (me->temp != t) {
     7e0:	e00e      	b.n	800 <CONFIG_ISR_STACK_SIZE>
    Q_REQUIRE_ID(200, (me->vptr != (QHsmVtable const *)0)
     7e2:	21c8      	movs	r1, #200	; 0xc8
     7e4:	4818      	ldr	r0, [pc, #96]	; (848 <CONFIG_ISR_STACK_SIZE+0x48>)
     7e6:	f004 ff7a 	bl	56de <InitializeSPI>
    Q_ASSERT_ID(210, r == Q_RET_TRAN);
     7ea:	21d2      	movs	r1, #210	; 0xd2
     7ec:	4816      	ldr	r0, [pc, #88]	; (848 <CONFIG_ISR_STACK_SIZE+0x48>)
     7ee:	f004 ff76 	bl	56de <InitializeSPI>
            ++ip;
            Q_ASSERT_ID(220, ip < (int_fast8_t)Q_DIM(path));
            path[ip] = me->temp;
     7f2:	aa06      	add	r2, sp, #24
     7f4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
     7f8:	f842 3c14 	str.w	r3, [r2, #-20]
            (void)(*me->temp)(me);
     7fc:	4628      	mov	r0, r5
     7fe:	4798      	blx	r3
        while (me->temp != t) {
     800:	68ab      	ldr	r3, [r5, #8]
     802:	42b3      	cmp	r3, r6
     804:	d006      	beq.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
            ++ip;
     806:	3401      	adds	r4, #1
            Q_ASSERT_ID(220, ip < (int_fast8_t)Q_DIM(path));
     808:	2c04      	cmp	r4, #4
     80a:	ddf2      	ble.n	7f2 <QHsm_init_+0x3a>
     80c:	21dc      	movs	r1, #220	; 0xdc
     80e:	480e      	ldr	r0, [pc, #56]	; (848 <CONFIG_ISR_STACK_SIZE+0x48>)
     810:	f004 ff65 	bl	56de <InitializeSPI>
        }
        me->temp = path[0];
     814:	9e01      	ldr	r6, [sp, #4]
     816:	60ae      	str	r6, [r5, #8]

        /* retrace the entry path in reverse (desired) order... */
        Q_SIG(me) = Q_ENTRY_SIG;
     818:	2301      	movs	r3, #1
     81a:	732b      	strb	r3, [r5, #12]
        do {
            (void)(*path[ip])(me); /* enter path[ip] */
     81c:	ab06      	add	r3, sp, #24
     81e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     822:	f853 3c14 	ldr.w	r3, [r3, #-20]
     826:	4628      	mov	r0, r5
     828:	4798      	blx	r3
            --ip;
        } while (ip >= 0);
     82a:	3c01      	subs	r4, #1
     82c:	d5f6      	bpl.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>

        t = path[0]; /* current state becomes the new source */

        Q_SIG(me) = Q_INIT_SIG;
     82e:	2303      	movs	r3, #3
     830:	732b      	strb	r3, [r5, #12]
        r = (*t)(me);
     832:	4628      	mov	r0, r5
     834:	47b0      	blx	r6
    } while (r == Q_RET_TRAN);
     836:	2808      	cmp	r0, #8
     838:	d0cc      	beq.n	7d4 <QHsm_init_+0x1c>

    me->state = t; /* change the current active state */
     83a:	606e      	str	r6, [r5, #4]
    me->temp  = t; /* mark the configuration as stable */
     83c:	60ae      	str	r6, [r5, #8]
}
     83e:	b006      	add	sp, #24
     840:	bd70      	pop	{r4, r5, r6, pc}
     842:	bf00      	nop
     844:	00005745 	.word	0x00005745
     848:	00007a30 	.word	0x00007a30

0000084c <QHsm_tran_>:
* @returns
* the depth of the entry path stored in the @p path parameter.
*/
static int_fast8_t QHsm_tran_(QHsm * const me,
                              QStateHandler path[QHSM_MAX_NEST_DEPTH_])
{
     84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     850:	4605      	mov	r5, r0
    int_fast8_t ip = (int_fast8_t)(-1); /* transition entry path index */
    int_fast8_t iq; /* helper transition entry path index */
    QStateHandler t = path[0];
     852:	680b      	ldr	r3, [r1, #0]
    QStateHandler s = path[2];
     854:	f8d1 9008 	ldr.w	r9, [r1, #8]
    QState r;

    /* (a) check source==target (transition to self) */
    if (s == t) {
     858:	454b      	cmp	r3, r9
     85a:	d01c      	beq.n	896 <QHsm_tran_+0x4a>
     85c:	460c      	mov	r4, r1
        Q_SIG(me) = Q_EXIT_SIG;
        (void)(*s)(me);      /* exit the source */
        ip = 0; /* enter the target */
    }
    else {
        Q_SIG(me) = QEP_EMPTY_SIG_;
     85e:	2200      	movs	r2, #0
     860:	7302      	strb	r2, [r0, #12]
        (void)(*t)(me); /* find superstate of target */
     862:	4798      	blx	r3
        t = me->temp;
     864:	68ae      	ldr	r6, [r5, #8]

        /* (b) check source==target->super */
        if (s == t) {
     866:	45b1      	cmp	r9, r6
     868:	d07c      	beq.n	964 <QHsm_tran_+0x118>
            ip = 0; /* enter the target */
        }
        else {
            Q_SIG(me) = QEP_EMPTY_SIG_;
     86a:	2300      	movs	r3, #0
     86c:	732b      	strb	r3, [r5, #12]
            (void)(*s)(me); /* find superstate of source */
     86e:	4628      	mov	r0, r5
     870:	47c8      	blx	r9

            /* (c) check source->super==target->super */
            if (me->temp == t) {
     872:	68ab      	ldr	r3, [r5, #8]
     874:	42b3      	cmp	r3, r6
     876:	d015      	beq.n	8a4 <QHsm_tran_+0x58>
                (void)(*s)(me);     /* exit the source */
                ip = 0; /* enter the target */
            }
            else {
                /* (d) check source->super==target */
                if (me->temp == path[0]) {
     878:	6822      	ldr	r2, [r4, #0]
     87a:	4293      	cmp	r3, r2
     87c:	d018      	beq.n	8b0 <QHsm_tran_+0x64>
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    iq = 0; /* indicate that LCA not found */
                    ip = 1; /* enter target and its superstate */
                    path[1] = t; /* save the superstate of target */
     87e:	6066      	str	r6, [r4, #4]
                    t = me->temp; /* save source->super */
     880:	f8d5 8008 	ldr.w	r8, [r5, #8]

                    /* find target->super->super... */
                    Q_SIG(me) = QEP_EMPTY_SIG_;
     884:	f04f 0a00 	mov.w	sl, #0
     888:	f885 a00c 	strb.w	sl, [r5, #12]
                    r = (*path[1])(me);
     88c:	6863      	ldr	r3, [r4, #4]
     88e:	4628      	mov	r0, r5
     890:	4798      	blx	r3
                    ip = 1; /* enter target and its superstate */
     892:	2701      	movs	r7, #1
                    while (r == Q_RET_SUPER) {
     894:	e018      	b.n	8c8 <QHsm_tran_+0x7c>
        Q_SIG(me) = Q_EXIT_SIG;
     896:	2302      	movs	r3, #2
     898:	7303      	strb	r3, [r0, #12]
        (void)(*s)(me);      /* exit the source */
     89a:	47c8      	blx	r9
        ip = 0; /* enter the target */
     89c:	2700      	movs	r7, #0
                }
            }
        }
    }
    return ip;
}
     89e:	4638      	mov	r0, r7
     8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                Q_SIG(me) = Q_EXIT_SIG;
     8a4:	2302      	movs	r3, #2
     8a6:	732b      	strb	r3, [r5, #12]
                (void)(*s)(me);     /* exit the source */
     8a8:	4628      	mov	r0, r5
     8aa:	47c8      	blx	r9
                ip = 0; /* enter the target */
     8ac:	2700      	movs	r7, #0
     8ae:	e7f6      	b.n	89e <QHsm_tran_+0x52>
                    Q_SIG(me) = Q_EXIT_SIG;
     8b0:	2302      	movs	r3, #2
     8b2:	732b      	strb	r3, [r5, #12]
                    (void)(*s)(me); /* exit the source */
     8b4:	4628      	mov	r0, r5
     8b6:	47c8      	blx	r9
    int_fast8_t ip = (int_fast8_t)(-1); /* transition entry path index */
     8b8:	f04f 37ff 	mov.w	r7, #4294967295
     8bc:	e7ef      	b.n	89e <QHsm_tran_+0x52>
                            Q_ASSERT_ID(510, ip < QHSM_MAX_NEST_DEPTH_);
     8be:	2e04      	cmp	r6, #4
     8c0:	dc0d      	bgt.n	8de <QHsm_tran_+0x92>
                            r = Q_RET_HANDLED; /* terminate loop */
     8c2:	2003      	movs	r0, #3
                            iq = 1; /* indicate that LCA found */
     8c4:	f04f 0a01 	mov.w	sl, #1
                    while (r == Q_RET_SUPER) {
     8c8:	b970      	cbnz	r0, 8e8 <QHsm_tran_+0x9c>
                        ++ip;
     8ca:	1c7e      	adds	r6, r7, #1
                        path[ip] = me->temp; /* store the entry path */
     8cc:	68ab      	ldr	r3, [r5, #8]
     8ce:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
                        if (me->temp == s) { /* is it the source? */
     8d2:	454b      	cmp	r3, r9
     8d4:	d0f3      	beq.n	8be <QHsm_tran_+0x72>
                            r = (*me->temp)(me); /* superstate of t */
     8d6:	4628      	mov	r0, r5
     8d8:	4798      	blx	r3
                        ++ip;
     8da:	4637      	mov	r7, r6
     8dc:	e7f4      	b.n	8c8 <QHsm_tran_+0x7c>
                            Q_ASSERT_ID(510, ip < QHSM_MAX_NEST_DEPTH_);
     8de:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
     8e2:	4821      	ldr	r0, [pc, #132]	; (968 <QHsm_tran_+0x11c>)
     8e4:	f004 fefb 	bl	56de <InitializeSPI>
                    if (iq == 0) {
     8e8:	f1ba 0f00 	cmp.w	sl, #0
     8ec:	d1d7      	bne.n	89e <QHsm_tran_+0x52>
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
     8ee:	2f04      	cmp	r7, #4
     8f0:	dc06      	bgt.n	900 <QHsm_tran_+0xb4>
                        Q_SIG(me) = Q_EXIT_SIG;
     8f2:	2302      	movs	r3, #2
     8f4:	732b      	strb	r3, [r5, #12]
                        (void)(*s)(me); /* exit the source */
     8f6:	4628      	mov	r0, r5
     8f8:	47c8      	blx	r9
                        iq = ip;
     8fa:	463b      	mov	r3, r7
                        r = Q_RET_IGNORED; /* LCA NOT found */
     8fc:	2104      	movs	r1, #4
     8fe:	e00a      	b.n	916 <QHsm_tran_+0xca>
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
     900:	f44f 7102 	mov.w	r1, #520	; 0x208
     904:	4818      	ldr	r0, [pc, #96]	; (968 <QHsm_tran_+0x11c>)
     906:	f004 feea 	bl	56de <InitializeSPI>
                                ip = (int_fast8_t)(iq - 1);
     90a:	1e5f      	subs	r7, r3, #1
                                r = Q_RET_HANDLED; /* LCA found */
     90c:	2103      	movs	r1, #3
                                iq = -1; /* force loop termination */
     90e:	f04f 33ff 	mov.w	r3, #4294967295
                        } while (iq >= 0);
     912:	2b00      	cmp	r3, #0
     914:	db05      	blt.n	922 <QHsm_tran_+0xd6>
                            if (t == path[iq]) { /* is this the LCA? */
     916:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
     91a:	4542      	cmp	r2, r8
     91c:	d0f5      	beq.n	90a <QHsm_tran_+0xbe>
                                --iq; /* try lower superstate of target */
     91e:	3b01      	subs	r3, #1
     920:	e7f7      	b.n	912 <QHsm_tran_+0xc6>
                        if (r != Q_RET_HANDLED) {
     922:	2903      	cmp	r1, #3
     924:	d0bb      	beq.n	89e <QHsm_tran_+0x52>
                            r = Q_RET_IGNORED; /* keep looping */
     926:	2604      	movs	r6, #4
     928:	e012      	b.n	950 <QHsm_tran_+0x104>
                                    Q_SIG(me) = QEP_EMPTY_SIG_;
     92a:	2300      	movs	r3, #0
     92c:	732b      	strb	r3, [r5, #12]
                                    (void)(*t)(me); /* find super of t */
     92e:	4628      	mov	r0, r5
     930:	47c0      	blx	r8
     932:	e013      	b.n	95c <QHsm_tran_+0x110>
                                        ip = (int_fast8_t)(iq - 1);
     934:	1e5f      	subs	r7, r3, #1
                                        r = Q_RET_HANDLED; /* break */
     936:	2603      	movs	r6, #3
                                        iq = -1; /* break out of inner loop */
     938:	f04f 33ff 	mov.w	r3, #4294967295
                                } while (iq >= 0);
     93c:	2b00      	cmp	r3, #0
     93e:	db05      	blt.n	94c <QHsm_tran_+0x100>
                                    if (t == path[iq]) {
     940:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
     944:	4542      	cmp	r2, r8
     946:	d0f5      	beq.n	934 <QHsm_tran_+0xe8>
                                        --iq;
     948:	3b01      	subs	r3, #1
     94a:	e7f7      	b.n	93c <QHsm_tran_+0xf0>
                            } while (r != Q_RET_HANDLED);
     94c:	2e03      	cmp	r6, #3
     94e:	d0a6      	beq.n	89e <QHsm_tran_+0x52>
                                Q_SIG(me) = Q_EXIT_SIG;
     950:	2302      	movs	r3, #2
     952:	732b      	strb	r3, [r5, #12]
                                if ((*t)(me) == Q_RET_HANDLED) {
     954:	4628      	mov	r0, r5
     956:	47c0      	blx	r8
     958:	2803      	cmp	r0, #3
     95a:	d0e6      	beq.n	92a <QHsm_tran_+0xde>
                                t = me->temp; /* set to super of t */
     95c:	f8d5 8008 	ldr.w	r8, [r5, #8]
                                iq = ip;
     960:	463b      	mov	r3, r7
     962:	e7ed      	b.n	940 <QHsm_tran_+0xf4>
            ip = 0; /* enter the target */
     964:	2700      	movs	r7, #0
    return ip;
     966:	e79a      	b.n	89e <QHsm_tran_+0x52>
     968:	00007a30 	.word	0x00007a30

0000096c <QHsm_dispatch_>:
void QHsm_dispatch_(QHsm * const me) {
     96c:	b5f0      	push	{r4, r5, r6, r7, lr}
     96e:	b087      	sub	sp, #28
    QStateHandler t = me->state;
     970:	6846      	ldr	r6, [r0, #4]
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
     972:	b11e      	cbz	r6, 97c <QHsm_dispatch_+0x10>
     974:	4605      	mov	r5, r0
     976:	6883      	ldr	r3, [r0, #8]
     978:	42b3      	cmp	r3, r6
     97a:	d005      	beq.n	988 <QHsm_dispatch_+0x1c>
     97c:	f44f 71c8 	mov.w	r1, #400	; 0x190
     980:	4836      	ldr	r0, [pc, #216]	; (a5c <QHsm_dispatch_+0xf0>)
     982:	f004 feac 	bl	56de <InitializeSPI>
    } while (r == Q_RET_SUPER);
     986:	b958      	cbnz	r0, 9a0 <QHsm_dispatch_+0x34>
        s = me->temp;
     988:	68ac      	ldr	r4, [r5, #8]
        r = (*s)(me); /* invoke state handler s */
     98a:	4628      	mov	r0, r5
     98c:	47a0      	blx	r4
        if (r == Q_RET_UNHANDLED) { /* unhandled due to a guard? */
     98e:	2802      	cmp	r0, #2
     990:	d1f9      	bne.n	986 <QHsm_dispatch_+0x1a>
            iq = (int_fast8_t)Q_SIG(me); /* save the original signal */
     992:	7b2f      	ldrb	r7, [r5, #12]
            Q_SIG(me) = QEP_EMPTY_SIG_; /* find the superstate */
     994:	2300      	movs	r3, #0
     996:	732b      	strb	r3, [r5, #12]
            r = (*s)(me); /* invoke state handler s */
     998:	4628      	mov	r0, r5
     99a:	47a0      	blx	r4
            Q_SIG(me) = (QSignal)iq; /* restore the original signal */
     99c:	732f      	strb	r7, [r5, #12]
     99e:	e7f2      	b.n	986 <QHsm_dispatch_+0x1a>
    if (r >= Q_RET_TRAN) {
     9a0:	2807      	cmp	r0, #7
     9a2:	d956      	bls.n	a52 <QHsm_dispatch_+0xe6>
        path[0] = me->temp; /* save the target of the transition */
     9a4:	68ab      	ldr	r3, [r5, #8]
     9a6:	9301      	str	r3, [sp, #4]
        path[1] = t;
     9a8:	9602      	str	r6, [sp, #8]
        path[2] = s;
     9aa:	9403      	str	r4, [sp, #12]
        for (; t != s; t = me->temp) {
     9ac:	e000      	b.n	9b0 <QHsm_dispatch_+0x44>
     9ae:	68ae      	ldr	r6, [r5, #8]
     9b0:	42a6      	cmp	r6, r4
     9b2:	d00a      	beq.n	9ca <QHsm_dispatch_+0x5e>
            Q_SIG(me) = Q_EXIT_SIG; /* find superstate of t */
     9b4:	2302      	movs	r3, #2
     9b6:	732b      	strb	r3, [r5, #12]
            if ((*t)(me) == Q_RET_HANDLED) {
     9b8:	4628      	mov	r0, r5
     9ba:	47b0      	blx	r6
     9bc:	2803      	cmp	r0, #3
     9be:	d1f6      	bne.n	9ae <QHsm_dispatch_+0x42>
                Q_SIG(me) = QEP_EMPTY_SIG_;
     9c0:	2300      	movs	r3, #0
     9c2:	732b      	strb	r3, [r5, #12]
                (void)(*t)(me); /* find superstate of t */
     9c4:	4628      	mov	r0, r5
     9c6:	47b0      	blx	r6
     9c8:	e7f1      	b.n	9ae <QHsm_dispatch_+0x42>
        ip = QHsm_tran_(me, path); /* take the state transition */
     9ca:	a901      	add	r1, sp, #4
     9cc:	4628      	mov	r0, r5
     9ce:	f7ff ff3d 	bl	84c <QHsm_tran_>
     9d2:	4604      	mov	r4, r0
        Q_SIG(me) = Q_ENTRY_SIG;
     9d4:	2301      	movs	r3, #1
     9d6:	732b      	strb	r3, [r5, #12]
        for (; ip >= 0; --ip) {
     9d8:	e007      	b.n	9ea <QHsm_dispatch_+0x7e>
            (void)(*path[ip])(me); /* enter path[ip] */
     9da:	ab06      	add	r3, sp, #24
     9dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     9e0:	f853 3c14 	ldr.w	r3, [r3, #-20]
     9e4:	4628      	mov	r0, r5
     9e6:	4798      	blx	r3
        for (; ip >= 0; --ip) {
     9e8:	3c01      	subs	r4, #1
     9ea:	2c00      	cmp	r4, #0
     9ec:	daf5      	bge.n	9da <QHsm_dispatch_+0x6e>
        t = path[0];      /* stick the target into register */
     9ee:	9e01      	ldr	r6, [sp, #4]
        me->temp = t; /* update the current state */
     9f0:	60ae      	str	r6, [r5, #8]
        Q_SIG(me) = Q_INIT_SIG;
     9f2:	2303      	movs	r3, #3
     9f4:	732b      	strb	r3, [r5, #12]
        while ((*t)(me) == Q_RET_TRAN) {
     9f6:	e01c      	b.n	a32 <QHsm_dispatch_+0xc6>
                ++ip;
     9f8:	3401      	adds	r4, #1
                path[ip] = me->temp;
     9fa:	aa06      	add	r2, sp, #24
     9fc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
     a00:	f842 3c14 	str.w	r3, [r2, #-20]
                (void)(*me->temp)(me); /* find the superstate */
     a04:	4628      	mov	r0, r5
     a06:	4798      	blx	r3
            while (me->temp != t) {
     a08:	68ab      	ldr	r3, [r5, #8]
     a0a:	42b3      	cmp	r3, r6
     a0c:	d1f4      	bne.n	9f8 <QHsm_dispatch_+0x8c>
            me->temp = path[0];
     a0e:	9b01      	ldr	r3, [sp, #4]
     a10:	60ab      	str	r3, [r5, #8]
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
     a12:	2c04      	cmp	r4, #4
     a14:	dc18      	bgt.n	a48 <QHsm_dispatch_+0xdc>
            Q_SIG(me) = Q_ENTRY_SIG;
     a16:	2301      	movs	r3, #1
     a18:	732b      	strb	r3, [r5, #12]
                (void)(*path[ip])(me); /* enter path[ip] */
     a1a:	ab06      	add	r3, sp, #24
     a1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     a20:	f853 3c14 	ldr.w	r3, [r3, #-20]
     a24:	4628      	mov	r0, r5
     a26:	4798      	blx	r3
            } while (ip >= 0);
     a28:	3c01      	subs	r4, #1
     a2a:	d5f6      	bpl.n	a1a <QHsm_dispatch_+0xae>
            t = path[0];
     a2c:	9e01      	ldr	r6, [sp, #4]
            Q_SIG(me) = Q_INIT_SIG;
     a2e:	2303      	movs	r3, #3
     a30:	732b      	strb	r3, [r5, #12]
        while ((*t)(me) == Q_RET_TRAN) {
     a32:	4628      	mov	r0, r5
     a34:	47b0      	blx	r6
     a36:	2808      	cmp	r0, #8
     a38:	d10b      	bne.n	a52 <QHsm_dispatch_+0xe6>
            path[0] = me->temp;
     a3a:	68ab      	ldr	r3, [r5, #8]
     a3c:	9301      	str	r3, [sp, #4]
            Q_SIG(me) = QEP_EMPTY_SIG_;
     a3e:	2400      	movs	r4, #0
     a40:	732c      	strb	r4, [r5, #12]
            (void)(*me->temp)(me); /* find the superstate */
     a42:	4628      	mov	r0, r5
     a44:	4798      	blx	r3
            while (me->temp != t) {
     a46:	e7df      	b.n	a08 <QHsm_dispatch_+0x9c>
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
     a48:	f44f 71cd 	mov.w	r1, #410	; 0x19a
     a4c:	4803      	ldr	r0, [pc, #12]	; (a5c <QHsm_dispatch_+0xf0>)
     a4e:	f004 fe46 	bl	56de <InitializeSPI>
    me->state = t; /* change the current active state */
     a52:	606e      	str	r6, [r5, #4]
    me->temp  = t; /* mark the configuration as stable */
     a54:	60ae      	str	r6, [r5, #8]
}
     a56:	b007      	add	sp, #28
     a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a5a:	bf00      	nop
     a5c:	00007a30 	.word	0x00007a30

00000a60 <QHsm_ctor>:
    me->vptr  = &vtable;
     a60:	4b02      	ldr	r3, [pc, #8]	; (a6c <QHsm_ctor+0xc>)
     a62:	6003      	str	r3, [r0, #0]
    me->state = Q_STATE_CAST(&QHsm_top);
     a64:	4b02      	ldr	r3, [pc, #8]	; (a70 <QHsm_ctor+0x10>)
     a66:	6043      	str	r3, [r0, #4]
    me->temp  = initial;
     a68:	6081      	str	r1, [r0, #8]
}
     a6a:	4770      	bx	lr
     a6c:	00007a38 	.word	0x00007a38
     a70:	00005745 	.word	0x00005745

00000a74 <Clock_Alarm_update_current_time>:
static uint32_t Clock_Alarm_get_current_time(void) {
}

/*.${HSM::Clock_Alarm::update_current_time} ................................*/
static void Clock_Alarm_update_current_time(void) {
    if(++Clock_Alarm_currentTime >= SecondsInDay)
     a74:	4a05      	ldr	r2, [pc, #20]	; (a8c <Clock_Alarm_update_current_time+0x18>)
     a76:	6813      	ldr	r3, [r2, #0]
     a78:	3301      	adds	r3, #1
     a7a:	6013      	str	r3, [r2, #0]
     a7c:	4a04      	ldr	r2, [pc, #16]	; (a90 <Clock_Alarm_update_current_time+0x1c>)
     a7e:	4293      	cmp	r3, r2
     a80:	d902      	bls.n	a88 <Clock_Alarm_update_current_time+0x14>
    {
        Clock_Alarm_currentTime = 0;
     a82:	4b02      	ldr	r3, [pc, #8]	; (a8c <Clock_Alarm_update_current_time+0x18>)
     a84:	2200      	movs	r2, #0
     a86:	601a      	str	r2, [r3, #0]
    }

}
     a88:	4770      	bx	lr
     a8a:	bf00      	nop
     a8c:	200001dc 	.word	0x200001dc
     a90:	05265bff 	.word	0x05265bff

00000a94 <Clock_Alarm_set_current_time>:

/*.${HSM::Clock_Alarm::set_current_time} ...................................*/
static void Clock_Alarm_set_current_time(uint32_t new_current_time) {
    Clock_Alarm_currentTime = new_current_time;
     a94:	4b01      	ldr	r3, [pc, #4]	; (a9c <Clock_Alarm_set_current_time+0x8>)
     a96:	6018      	str	r0, [r3, #0]
}
     a98:	4770      	bx	lr
     a9a:	bf00      	nop
     a9c:	200001dc 	.word	0x200001dc

00000aa0 <Clock_Alarm_initial>:

/*.${HSM::Clock_Alarm::SM} .................................................*/
static QState Clock_Alarm_initial(Clock_Alarm * const me) {
     aa0:	b510      	push	{r4, lr}
     aa2:	4604      	mov	r4, r0
    /*.${HSM::Clock_Alarm::SM::initial} */
    Clock_Alarm_set_current_time(INITIAL_CURRENT_TIME);
     aa4:	4805      	ldr	r0, [pc, #20]	; (abc <Clock_Alarm_initial+0x1c>)
     aa6:	f7ff fff5 	bl	a94 <Clock_Alarm_set_current_time>
    me->alarmTime = INITIAL_ALARM_TIME;
     aaa:	4b05      	ldr	r3, [pc, #20]	; (ac0 <Clock_Alarm_initial+0x20>)
     aac:	6163      	str	r3, [r4, #20]
    me->alarmStatus = 0;
     aae:	2300      	movs	r3, #0
     ab0:	7623      	strb	r3, [r4, #24]
    /* state history attributes */
    /* state history attributes */
    me->hist_MainClock = Q_STATE_CAST(&Clock_Alarm_Ticking);
     ab2:	4b04      	ldr	r3, [pc, #16]	; (ac4 <Clock_Alarm_initial+0x24>)
     ab4:	61e3      	str	r3, [r4, #28]
    return Q_TRAN(&Clock_Alarm_Ticking);
     ab6:	60a3      	str	r3, [r4, #8]
}
     ab8:	2008      	movs	r0, #8
     aba:	bd10      	pop	{r4, pc}
     abc:	02f3ff28 	.word	0x02f3ff28
     ac0:	02f439c0 	.word	0x02f439c0
     ac4:	00000bdd 	.word	0x00000bdd

00000ac8 <Clock_Alarm_MainClock>:
/*.${HSM::Clock_Alarm::SM::MainClock} ......................................*/
static QState Clock_Alarm_MainClock(Clock_Alarm * const me) {
    QState status_;
    switch (Q_SIG(me)) {
     ac8:	7b03      	ldrb	r3, [r0, #12]
     aca:	2b02      	cmp	r3, #2
     acc:	d005      	beq.n	ada <Clock_Alarm_MainClock+0x12>
     ace:	2b0a      	cmp	r3, #10
     ad0:	d007      	beq.n	ae2 <Clock_Alarm_MainClock+0x1a>
                status_ = Q_UNHANDLED();
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
     ad2:	4b10      	ldr	r3, [pc, #64]	; (b14 <Clock_Alarm_MainClock+0x4c>)
     ad4:	6083      	str	r3, [r0, #8]
     ad6:	2000      	movs	r0, #0
            break;
     ad8:	4770      	bx	lr
            me->hist_MainClock = QHsm_state(me);
     ada:	6843      	ldr	r3, [r0, #4]
     adc:	61c3      	str	r3, [r0, #28]
            status_ = Q_HANDLED();
     ade:	2003      	movs	r0, #3
            break;
     ae0:	4770      	bx	lr
            me->timeout_AlarmMain =0;
     ae2:	2300      	movs	r3, #0
     ae4:	7683      	strb	r3, [r0, #26]
            if (( me->alarmStatus == ALARM_ON && (Clock_Alarm_currentTime/1000) == (me->alarmTime/1000))) {
     ae6:	7e03      	ldrb	r3, [r0, #24]
     ae8:	2b01      	cmp	r3, #1
     aea:	d001      	beq.n	af0 <Clock_Alarm_MainClock+0x28>
                status_ = Q_UNHANDLED();
     aec:	2002      	movs	r0, #2
     aee:	4770      	bx	lr
            if (( me->alarmStatus == ALARM_ON && (Clock_Alarm_currentTime/1000) == (me->alarmTime/1000))) {
     af0:	4b09      	ldr	r3, [pc, #36]	; (b18 <Clock_Alarm_MainClock+0x50>)
     af2:	681a      	ldr	r2, [r3, #0]
     af4:	4909      	ldr	r1, [pc, #36]	; (b1c <Clock_Alarm_MainClock+0x54>)
     af6:	fba1 3202 	umull	r3, r2, r1, r2
     afa:	6943      	ldr	r3, [r0, #20]
     afc:	fba1 1303 	umull	r1, r3, r1, r3
     b00:	099b      	lsrs	r3, r3, #6
     b02:	ebb3 1f92 	cmp.w	r3, r2, lsr #6
     b06:	d001      	beq.n	b0c <Clock_Alarm_MainClock+0x44>
                status_ = Q_UNHANDLED();
     b08:	2002      	movs	r0, #2
        }
    }
    return status_;
}
     b0a:	4770      	bx	lr
                status_ = Q_TRAN(&Clock_Alarm_NotifyAlarm);
     b0c:	4b04      	ldr	r3, [pc, #16]	; (b20 <Clock_Alarm_MainClock+0x58>)
     b0e:	6083      	str	r3, [r0, #8]
     b10:	2008      	movs	r0, #8
     b12:	4770      	bx	lr
     b14:	00005745 	.word	0x00005745
     b18:	200001dc 	.word	0x200001dc
     b1c:	10624dd3 	.word	0x10624dd3
     b20:	00000d61 	.word	0x00000d61

00000b24 <Clock_Alarm_SetClock>:
    return status_;
}
/*.${HSM::Clock_Alarm::SM::MainClock::SettingsParent::SetClock} ............*/
static QState Clock_Alarm_SetClock(Clock_Alarm * const me) {
    QState status_;
    switch (Q_SIG(me)) {
     b24:	7b03      	ldrb	r3, [r0, #12]
     b26:	2b03      	cmp	r3, #3
     b28:	d003      	beq.n	b32 <Clock_Alarm_SetClock+0xe>
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_SetHour);
            break;
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_SettingsParent);
     b2a:	4b04      	ldr	r3, [pc, #16]	; (b3c <Clock_Alarm_SetClock+0x18>)
     b2c:	6083      	str	r3, [r0, #8]
     b2e:	2000      	movs	r0, #0
            break;
        }
    }
    return status_;
}
     b30:	4770      	bx	lr
            status_ = Q_TRAN(&Clock_Alarm_SetHour);
     b32:	4b03      	ldr	r3, [pc, #12]	; (b40 <Clock_Alarm_SetClock+0x1c>)
     b34:	6083      	str	r3, [r0, #8]
     b36:	2008      	movs	r0, #8
            break;
     b38:	4770      	bx	lr
     b3a:	bf00      	nop
     b3c:	00000f1d 	.word	0x00000f1d
     b40:	000014c5 	.word	0x000014c5

00000b44 <Clock_Alarm_SetAlarm>:
    return status_;
}
/*.${HSM::Clock_Alarm::SM::MainClock::SettingsParent::SetAlarm} ............*/
static QState Clock_Alarm_SetAlarm(Clock_Alarm * const me) {
    QState status_;
    switch (Q_SIG(me)) {
     b44:	7b03      	ldrb	r3, [r0, #12]
     b46:	2b03      	cmp	r3, #3
     b48:	d003      	beq.n	b52 <Clock_Alarm_SetAlarm+0xe>
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_SetHour_Alarm);
            break;
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_SettingsParent);
     b4a:	4b04      	ldr	r3, [pc, #16]	; (b5c <Clock_Alarm_SetAlarm+0x18>)
     b4c:	6083      	str	r3, [r0, #8]
     b4e:	2000      	movs	r0, #0
            break;
        }
    }
    return status_;
}
     b50:	4770      	bx	lr
            status_ = Q_TRAN(&Clock_Alarm_SetHour_Alarm);
     b52:	4b03      	ldr	r3, [pc, #12]	; (b60 <Clock_Alarm_SetAlarm+0x1c>)
     b54:	6083      	str	r3, [r0, #8]
     b56:	2008      	movs	r0, #8
            break;
     b58:	4770      	bx	lr
     b5a:	bf00      	nop
     b5c:	00000f1d 	.word	0x00000f1d
     b60:	00000ff9 	.word	0x00000ff9

00000b64 <Clock_Alarm_Constructor>:
void Clock_Alarm_Constructor(void) {
     b64:	b508      	push	{r3, lr}
    QHsm_ctor(&Clock_Alarm_object.super,Q_STATE_CAST(&Clock_Alarm_initial));
     b66:	4902      	ldr	r1, [pc, #8]	; (b70 <Clock_Alarm_Constructor+0xc>)
     b68:	4802      	ldr	r0, [pc, #8]	; (b74 <Clock_Alarm_Constructor+0x10>)
     b6a:	f7ff ff79 	bl	a60 <QHsm_ctor>
}
     b6e:	bd08      	pop	{r3, pc}
     b70:	00000aa1 	.word	0x00000aa1
     b74:	200001e0 	.word	0x200001e0

00000b78 <MilliSecondInterrupt_Cb>:
/*.$define${HSM::SuperClass_Qhsm_Clock} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${HSM::SuperClass_Qhsm_Clock} ...........................................*/
QHsm * const SuperClass_Qhsm_Clock = &Clock_Alarm_object.super;
/*.$enddef${HSM::SuperClass_Qhsm_Clock} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/

void MilliSecondInterrupt_Cb(struct k_timer * Handle){
     b78:	b508      	push	{r3, lr}

    Clock_Alarm_update_current_time();
     b7a:	f7ff ff7b 	bl	a74 <Clock_Alarm_update_current_time>

    milliSecondCounter+=1;
     b7e:	4a02      	ldr	r2, [pc, #8]	; (b88 <MilliSecondInterrupt_Cb+0x10>)
     b80:	6813      	ldr	r3, [r2, #0]
     b82:	3301      	adds	r3, #1
     b84:	6013      	str	r3, [r2, #0]

}
     b86:	bd08      	pop	{r3, pc}
     b88:	200001d8 	.word	0x200001d8

00000b8c <RefreshDisplay>:


void RefreshDisplay(char * FirstLine,char * SecondLine,char * ThirdLine){
     b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b8e:	4607      	mov	r7, r0
     b90:	460e      	mov	r6, r1
     b92:	4615      	mov	r5, r2

  u8g2_FirstPage(&u8g2);
     b94:	480f      	ldr	r0, [pc, #60]	; (bd4 <RefreshDisplay+0x48>)
     b96:	f004 fe1a 	bl	57ce <u8g2_FirstPage>

  do {

    u8g2_SetFont(&u8g2,u8g2_font_ncenB14_tr);
     b9a:	4c0e      	ldr	r4, [pc, #56]	; (bd4 <RefreshDisplay+0x48>)
     b9c:	490e      	ldr	r1, [pc, #56]	; (bd8 <RefreshDisplay+0x4c>)
     b9e:	4620      	mov	r0, r4
     ba0:	f005 f8cc 	bl	5d3c <u8g2_SetFont>

    u8g2_DrawStr(&u8g2,0,16,FirstLine);
     ba4:	463b      	mov	r3, r7
     ba6:	2210      	movs	r2, #16
     ba8:	2100      	movs	r1, #0
     baa:	4620      	mov	r0, r4
     bac:	f000 feea 	bl	1984 <u8g2_DrawStr>

    u8g2_DrawStr(&u8g2,0+Offset,16+Offset,SecondLine);
     bb0:	4633      	mov	r3, r6
     bb2:	2224      	movs	r2, #36	; 0x24
     bb4:	2114      	movs	r1, #20
     bb6:	4620      	mov	r0, r4
     bb8:	f000 fee4 	bl	1984 <u8g2_DrawStr>

    u8g2_DrawStr(&u8g2,0,16+40,ThirdLine);
     bbc:	462b      	mov	r3, r5
     bbe:	2238      	movs	r2, #56	; 0x38
     bc0:	2100      	movs	r1, #0
     bc2:	4620      	mov	r0, r4
     bc4:	f000 fede 	bl	1984 <u8g2_DrawStr>

  } while ( u8g2_NextPage(&u8g2) );
     bc8:	4620      	mov	r0, r4
     bca:	f004 fe0d 	bl	57e8 <u8g2_NextPage>
     bce:	2800      	cmp	r0, #0
     bd0:	d1e3      	bne.n	b9a <RefreshDisplay+0xe>

}
     bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bd4:	20000260 	.word	0x20000260
     bd8:	00007b10 	.word	0x00007b10

00000bdc <Clock_Alarm_Ticking>:
static QState Clock_Alarm_Ticking(Clock_Alarm * const me) {
     bdc:	b570      	push	{r4, r5, r6, lr}
     bde:	b082      	sub	sp, #8
    switch (Q_SIG(me)) {
     be0:	7b03      	ldrb	r3, [r0, #12]
     be2:	3b01      	subs	r3, #1
     be4:	2b0a      	cmp	r3, #10
     be6:	f200 8097 	bhi.w	d18 <Clock_Alarm_Ticking+0x13c>
     bea:	e8df f003 	tbb	[pc, r3]
     bee:	9506      	.short	0x9506
     bf0:	95959595 	.word	0x95959595
     bf4:	954e4a95 	.word	0x954e4a95
     bf8:	52          	.byte	0x52
     bf9:	00          	.byte	0x00
            if(me->alarmStatus == 1){
     bfa:	7e03      	ldrb	r3, [r0, #24]
     bfc:	2b01      	cmp	r3, #1
     bfe:	d03b      	beq.n	c78 <Clock_Alarm_Ticking+0x9c>
                sprintf(DisplayStringFirstLine,"Alarm - NO");
     c00:	4947      	ldr	r1, [pc, #284]	; (d20 <Clock_Alarm_Ticking+0x144>)
     c02:	4848      	ldr	r0, [pc, #288]	; (d24 <Clock_Alarm_Ticking+0x148>)
     c04:	f002 f98c 	bl	2f20 <sprintf>
            sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",((Clock_Alarm_currentTime/1000U/60U/60U)%24),((Clock_Alarm_currentTime/1000U/60U)%60U),((Clock_Alarm_currentTime/1000U)%60U));
     c08:	4b47      	ldr	r3, [pc, #284]	; (d28 <Clock_Alarm_Ticking+0x14c>)
     c0a:	6819      	ldr	r1, [r3, #0]
     c0c:	4a47      	ldr	r2, [pc, #284]	; (d2c <Clock_Alarm_Ticking+0x150>)
     c0e:	fba2 3201 	umull	r3, r2, r2, r1
     c12:	0d52      	lsrs	r2, r2, #21
     c14:	4e46      	ldr	r6, [pc, #280]	; (d30 <Clock_Alarm_Ticking+0x154>)
     c16:	fba6 3601 	umull	r3, r6, r6, r1
     c1a:	0bb6      	lsrs	r6, r6, #14
     c1c:	4b45      	ldr	r3, [pc, #276]	; (d34 <Clock_Alarm_Ticking+0x158>)
     c1e:	fba3 3101 	umull	r3, r1, r3, r1
     c22:	0989      	lsrs	r1, r1, #6
     c24:	4844      	ldr	r0, [pc, #272]	; (d38 <Clock_Alarm_Ticking+0x15c>)
     c26:	fba0 3406 	umull	r3, r4, r0, r6
     c2a:	0964      	lsrs	r4, r4, #5
     c2c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
     c30:	4c42      	ldr	r4, [pc, #264]	; (d3c <Clock_Alarm_Ticking+0x160>)
     c32:	fba4 5402 	umull	r5, r4, r4, r2
     c36:	0924      	lsrs	r4, r4, #4
     c38:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     c3c:	4d40      	ldr	r5, [pc, #256]	; (d40 <Clock_Alarm_Ticking+0x164>)
     c3e:	fba0 c001 	umull	ip, r0, r0, r1
     c42:	0940      	lsrs	r0, r0, #5
     c44:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     c48:	eba1 0080 	sub.w	r0, r1, r0, lsl #2
     c4c:	9000      	str	r0, [sp, #0]
     c4e:	eba6 0383 	sub.w	r3, r6, r3, lsl #2
     c52:	eba2 02c4 	sub.w	r2, r2, r4, lsl #3
     c56:	493b      	ldr	r1, [pc, #236]	; (d44 <Clock_Alarm_Ticking+0x168>)
     c58:	4628      	mov	r0, r5
     c5a:	f002 f961 	bl	2f20 <sprintf>
            sprintf(DisplayStringThirdLine,"State TICK");
     c5e:	4c3a      	ldr	r4, [pc, #232]	; (d48 <Clock_Alarm_Ticking+0x16c>)
     c60:	493a      	ldr	r1, [pc, #232]	; (d4c <Clock_Alarm_Ticking+0x170>)
     c62:	4620      	mov	r0, r4
     c64:	f002 f95c 	bl	2f20 <sprintf>
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
     c68:	4622      	mov	r2, r4
     c6a:	4629      	mov	r1, r5
     c6c:	482d      	ldr	r0, [pc, #180]	; (d24 <Clock_Alarm_Ticking+0x148>)
     c6e:	f7ff ff8d 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
     c72:	2003      	movs	r0, #3
}
     c74:	b002      	add	sp, #8
     c76:	bd70      	pop	{r4, r5, r6, pc}
                sprintf(DisplayStringFirstLine,"Alarm - YES");
     c78:	4935      	ldr	r1, [pc, #212]	; (d50 <Clock_Alarm_Ticking+0x174>)
     c7a:	482a      	ldr	r0, [pc, #168]	; (d24 <Clock_Alarm_Ticking+0x148>)
     c7c:	f002 f950 	bl	2f20 <sprintf>
     c80:	e7c2      	b.n	c08 <Clock_Alarm_Ticking+0x2c>
            status_ = Q_TRAN(&Clock_Alarm_SetClock);
     c82:	4b34      	ldr	r3, [pc, #208]	; (d54 <Clock_Alarm_Ticking+0x178>)
     c84:	6083      	str	r3, [r0, #8]
     c86:	2008      	movs	r0, #8
            break;
     c88:	e7f4      	b.n	c74 <Clock_Alarm_Ticking+0x98>
            status_ = Q_TRAN(&Clock_Alarm_SetAlarm);
     c8a:	4b33      	ldr	r3, [pc, #204]	; (d58 <Clock_Alarm_Ticking+0x17c>)
     c8c:	6083      	str	r3, [r0, #8]
     c8e:	2008      	movs	r0, #8
            break;
     c90:	e7f0      	b.n	c74 <Clock_Alarm_Ticking+0x98>
            if(me->alarmStatus == 1){
     c92:	7e03      	ldrb	r3, [r0, #24]
     c94:	2b01      	cmp	r3, #1
     c96:	d03a      	beq.n	d0e <Clock_Alarm_Ticking+0x132>
                sprintf(DisplayStringFirstLine,"Alarm - NO");
     c98:	4921      	ldr	r1, [pc, #132]	; (d20 <Clock_Alarm_Ticking+0x144>)
     c9a:	4822      	ldr	r0, [pc, #136]	; (d24 <Clock_Alarm_Ticking+0x148>)
     c9c:	f002 f940 	bl	2f20 <sprintf>
            sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",((Clock_Alarm_currentTime/1000U/60U/60U)%24),((Clock_Alarm_currentTime/1000U/60U)%60U),((Clock_Alarm_currentTime/1000U)%60U));
     ca0:	4b21      	ldr	r3, [pc, #132]	; (d28 <Clock_Alarm_Ticking+0x14c>)
     ca2:	6819      	ldr	r1, [r3, #0]
     ca4:	4a21      	ldr	r2, [pc, #132]	; (d2c <Clock_Alarm_Ticking+0x150>)
     ca6:	fba2 3201 	umull	r3, r2, r2, r1
     caa:	0d52      	lsrs	r2, r2, #21
     cac:	4e20      	ldr	r6, [pc, #128]	; (d30 <Clock_Alarm_Ticking+0x154>)
     cae:	fba6 3601 	umull	r3, r6, r6, r1
     cb2:	0bb6      	lsrs	r6, r6, #14
     cb4:	4b1f      	ldr	r3, [pc, #124]	; (d34 <Clock_Alarm_Ticking+0x158>)
     cb6:	fba3 3101 	umull	r3, r1, r3, r1
     cba:	0989      	lsrs	r1, r1, #6
     cbc:	481e      	ldr	r0, [pc, #120]	; (d38 <Clock_Alarm_Ticking+0x15c>)
     cbe:	fba0 3406 	umull	r3, r4, r0, r6
     cc2:	0964      	lsrs	r4, r4, #5
     cc4:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
     cc8:	4c1c      	ldr	r4, [pc, #112]	; (d3c <Clock_Alarm_Ticking+0x160>)
     cca:	fba4 5402 	umull	r5, r4, r4, r2
     cce:	0924      	lsrs	r4, r4, #4
     cd0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     cd4:	4d1a      	ldr	r5, [pc, #104]	; (d40 <Clock_Alarm_Ticking+0x164>)
     cd6:	fba0 c001 	umull	ip, r0, r0, r1
     cda:	0940      	lsrs	r0, r0, #5
     cdc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     ce0:	eba1 0080 	sub.w	r0, r1, r0, lsl #2
     ce4:	9000      	str	r0, [sp, #0]
     ce6:	eba6 0383 	sub.w	r3, r6, r3, lsl #2
     cea:	eba2 02c4 	sub.w	r2, r2, r4, lsl #3
     cee:	4915      	ldr	r1, [pc, #84]	; (d44 <Clock_Alarm_Ticking+0x168>)
     cf0:	4628      	mov	r0, r5
     cf2:	f002 f915 	bl	2f20 <sprintf>
            sprintf(DisplayStringThirdLine,"State TICK");
     cf6:	4c14      	ldr	r4, [pc, #80]	; (d48 <Clock_Alarm_Ticking+0x16c>)
     cf8:	4914      	ldr	r1, [pc, #80]	; (d4c <Clock_Alarm_Ticking+0x170>)
     cfa:	4620      	mov	r0, r4
     cfc:	f002 f910 	bl	2f20 <sprintf>
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
     d00:	4622      	mov	r2, r4
     d02:	4629      	mov	r1, r5
     d04:	4807      	ldr	r0, [pc, #28]	; (d24 <Clock_Alarm_Ticking+0x148>)
     d06:	f7ff ff41 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
     d0a:	2003      	movs	r0, #3
            break;
     d0c:	e7b2      	b.n	c74 <Clock_Alarm_Ticking+0x98>
                sprintf(DisplayStringFirstLine,"Alarm - YES");
     d0e:	4910      	ldr	r1, [pc, #64]	; (d50 <Clock_Alarm_Ticking+0x174>)
     d10:	4804      	ldr	r0, [pc, #16]	; (d24 <Clock_Alarm_Ticking+0x148>)
     d12:	f002 f905 	bl	2f20 <sprintf>
     d16:	e7c3      	b.n	ca0 <Clock_Alarm_Ticking+0xc4>
            status_ = Q_SUPER(&Clock_Alarm_MainClock);
     d18:	4b10      	ldr	r3, [pc, #64]	; (d5c <Clock_Alarm_Ticking+0x180>)
     d1a:	6083      	str	r3, [r0, #8]
     d1c:	2000      	movs	r0, #0
    return status_;
     d1e:	e7a9      	b.n	c74 <Clock_Alarm_Ticking+0x98>
     d20:	00007a4c 	.word	0x00007a4c
     d24:	20000200 	.word	0x20000200
     d28:	200001dc 	.word	0x200001dc
     d2c:	95217cb1 	.word	0x95217cb1
     d30:	45e7b273 	.word	0x45e7b273
     d34:	10624dd3 	.word	0x10624dd3
     d38:	88888889 	.word	0x88888889
     d3c:	aaaaaaab 	.word	0xaaaaaaab
     d40:	20000220 	.word	0x20000220
     d44:	00007a58 	.word	0x00007a58
     d48:	20000240 	.word	0x20000240
     d4c:	00007a68 	.word	0x00007a68
     d50:	00007a40 	.word	0x00007a40
     d54:	00000b25 	.word	0x00000b25
     d58:	00000b45 	.word	0x00000b45
     d5c:	00000ac9 	.word	0x00000ac9

00000d60 <Clock_Alarm_NotifyAlarm>:
static QState Clock_Alarm_NotifyAlarm(Clock_Alarm * const me) {
     d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (Q_SIG(me)) {
     d62:	7b03      	ldrb	r3, [r0, #12]
     d64:	3b01      	subs	r3, #1
     d66:	2b0a      	cmp	r3, #10
     d68:	d838      	bhi.n	ddc <Clock_Alarm_NotifyAlarm+0x7c>
     d6a:	e8df f003 	tbb	[pc, r3]
     d6e:	1f06      	.short	0x1f06
     d70:	37373723 	.word	0x37373723
     d74:	37273737 	.word	0x37273737
     d78:	2b          	.byte	0x2b
     d79:	00          	.byte	0x00
            (me->timeout_AlarmMessage) =0;
     d7a:	2300      	movs	r3, #0
     d7c:	7643      	strb	r3, [r0, #25]
            sprintf(DisplayStringFirstLine,"* - Alarm - *");
     d7e:	4f19      	ldr	r7, [pc, #100]	; (de4 <Clock_Alarm_NotifyAlarm+0x84>)
     d80:	4c19      	ldr	r4, [pc, #100]	; (de8 <Clock_Alarm_NotifyAlarm+0x88>)
     d82:	4639      	mov	r1, r7
     d84:	4620      	mov	r0, r4
     d86:	f002 f8cb 	bl	2f20 <sprintf>
            sprintf(DisplayStringSecondLine," Alarm ");
     d8a:	4d18      	ldr	r5, [pc, #96]	; (dec <Clock_Alarm_NotifyAlarm+0x8c>)
     d8c:	4918      	ldr	r1, [pc, #96]	; (df0 <Clock_Alarm_NotifyAlarm+0x90>)
     d8e:	4628      	mov	r0, r5
     d90:	f002 f8c6 	bl	2f20 <sprintf>
            sprintf(DisplayStringThirdLine,"* - Alarm - *");
     d94:	4e17      	ldr	r6, [pc, #92]	; (df4 <Clock_Alarm_NotifyAlarm+0x94>)
     d96:	4639      	mov	r1, r7
     d98:	4630      	mov	r0, r6
     d9a:	f002 f8c1 	bl	2f20 <sprintf>
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
     d9e:	4632      	mov	r2, r6
     da0:	4629      	mov	r1, r5
     da2:	4620      	mov	r0, r4
     da4:	f7ff fef2 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
     da8:	2003      	movs	r0, #3
}
     daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            me->alarmStatus = ALARM_OFF;
     dac:	2300      	movs	r3, #0
     dae:	7603      	strb	r3, [r0, #24]
            status_ = Q_HANDLED();
     db0:	2003      	movs	r0, #3
            break;
     db2:	e7fa      	b.n	daa <Clock_Alarm_NotifyAlarm+0x4a>
            status_ = Q_TRAN(&Clock_Alarm_MessageON);
     db4:	4b10      	ldr	r3, [pc, #64]	; (df8 <Clock_Alarm_NotifyAlarm+0x98>)
     db6:	6083      	str	r3, [r0, #8]
     db8:	2008      	movs	r0, #8
            break;
     dba:	e7f6      	b.n	daa <Clock_Alarm_NotifyAlarm+0x4a>
            status_ = Q_TRAN_HIST(me->hist_MainClock);
     dbc:	69c3      	ldr	r3, [r0, #28]
     dbe:	6083      	str	r3, [r0, #8]
     dc0:	200a      	movs	r0, #10
            break;
     dc2:	e7f2      	b.n	daa <Clock_Alarm_NotifyAlarm+0x4a>
            if (++(me->timeout_AlarmMain) == 16) {
     dc4:	7e83      	ldrb	r3, [r0, #26]
     dc6:	3301      	adds	r3, #1
     dc8:	b2db      	uxtb	r3, r3
     dca:	7683      	strb	r3, [r0, #26]
     dcc:	2b10      	cmp	r3, #16
     dce:	d001      	beq.n	dd4 <Clock_Alarm_NotifyAlarm+0x74>
                status_ = Q_UNHANDLED();
     dd0:	2002      	movs	r0, #2
    return status_;
     dd2:	e7ea      	b.n	daa <Clock_Alarm_NotifyAlarm+0x4a>
                status_ = Q_TRAN(&Clock_Alarm_Ticking);
     dd4:	4b09      	ldr	r3, [pc, #36]	; (dfc <Clock_Alarm_NotifyAlarm+0x9c>)
     dd6:	6083      	str	r3, [r0, #8]
     dd8:	2008      	movs	r0, #8
     dda:	e7e6      	b.n	daa <Clock_Alarm_NotifyAlarm+0x4a>
            status_ = Q_SUPER(&QHsm_top);
     ddc:	4b08      	ldr	r3, [pc, #32]	; (e00 <Clock_Alarm_NotifyAlarm+0xa0>)
     dde:	6083      	str	r3, [r0, #8]
     de0:	2000      	movs	r0, #0
            break;
     de2:	e7e2      	b.n	daa <Clock_Alarm_NotifyAlarm+0x4a>
     de4:	00007a74 	.word	0x00007a74
     de8:	20000200 	.word	0x20000200
     dec:	20000220 	.word	0x20000220
     df0:	00007a84 	.word	0x00007a84
     df4:	20000240 	.word	0x20000240
     df8:	00000e05 	.word	0x00000e05
     dfc:	00000bdd 	.word	0x00000bdd
     e00:	00005745 	.word	0x00005745

00000e04 <Clock_Alarm_MessageON>:
static QState Clock_Alarm_MessageON(Clock_Alarm * const me) {
     e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (Q_SIG(me)) {
     e06:	7b03      	ldrb	r3, [r0, #12]
     e08:	2b01      	cmp	r3, #1
     e0a:	d005      	beq.n	e18 <Clock_Alarm_MessageON+0x14>
     e0c:	2b0b      	cmp	r3, #11
     e0e:	d01c      	beq.n	e4a <Clock_Alarm_MessageON+0x46>
            status_ = Q_SUPER(&Clock_Alarm_NotifyAlarm);
     e10:	4b18      	ldr	r3, [pc, #96]	; (e74 <Clock_Alarm_MessageON+0x70>)
     e12:	6083      	str	r3, [r0, #8]
     e14:	2000      	movs	r0, #0
            break;
     e16:	e017      	b.n	e48 <Clock_Alarm_MessageON+0x44>
            (me->timeout_AlarmMessage) = 0;
     e18:	2300      	movs	r3, #0
     e1a:	7643      	strb	r3, [r0, #25]
            sprintf(DisplayStringFirstLine,"* - Alarm - *");
     e1c:	4f16      	ldr	r7, [pc, #88]	; (e78 <Clock_Alarm_MessageON+0x74>)
     e1e:	4c17      	ldr	r4, [pc, #92]	; (e7c <Clock_Alarm_MessageON+0x78>)
     e20:	4639      	mov	r1, r7
     e22:	4620      	mov	r0, r4
     e24:	f002 f87c 	bl	2f20 <sprintf>
            sprintf(DisplayStringSecondLine," Alarm ");
     e28:	4d15      	ldr	r5, [pc, #84]	; (e80 <Clock_Alarm_MessageON+0x7c>)
     e2a:	4916      	ldr	r1, [pc, #88]	; (e84 <Clock_Alarm_MessageON+0x80>)
     e2c:	4628      	mov	r0, r5
     e2e:	f002 f877 	bl	2f20 <sprintf>
            sprintf(DisplayStringThirdLine,"* - Alarm - *");
     e32:	4e15      	ldr	r6, [pc, #84]	; (e88 <Clock_Alarm_MessageON+0x84>)
     e34:	4639      	mov	r1, r7
     e36:	4630      	mov	r0, r6
     e38:	f002 f872 	bl	2f20 <sprintf>
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
     e3c:	4632      	mov	r2, r6
     e3e:	4629      	mov	r1, r5
     e40:	4620      	mov	r0, r4
     e42:	f7ff fea3 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
     e46:	2003      	movs	r0, #3
}
     e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (( ++(me->timeout_AlarmMessage) == 1 && ++(me->timeout_AlarmMain) < 15 )) {
     e4a:	7e43      	ldrb	r3, [r0, #25]
     e4c:	3301      	adds	r3, #1
     e4e:	b2db      	uxtb	r3, r3
     e50:	7643      	strb	r3, [r0, #25]
     e52:	2b01      	cmp	r3, #1
     e54:	d001      	beq.n	e5a <Clock_Alarm_MessageON+0x56>
                status_ = Q_UNHANDLED();
     e56:	2002      	movs	r0, #2
     e58:	e7f6      	b.n	e48 <Clock_Alarm_MessageON+0x44>
            if (( ++(me->timeout_AlarmMessage) == 1 && ++(me->timeout_AlarmMain) < 15 )) {
     e5a:	7e83      	ldrb	r3, [r0, #26]
     e5c:	3301      	adds	r3, #1
     e5e:	b2db      	uxtb	r3, r3
     e60:	7683      	strb	r3, [r0, #26]
     e62:	2b0e      	cmp	r3, #14
     e64:	d803      	bhi.n	e6e <Clock_Alarm_MessageON+0x6a>
                status_ = Q_TRAN(&Clock_Alarm_MessageOFF);
     e66:	4b09      	ldr	r3, [pc, #36]	; (e8c <Clock_Alarm_MessageON+0x88>)
     e68:	6083      	str	r3, [r0, #8]
     e6a:	2008      	movs	r0, #8
     e6c:	e7ec      	b.n	e48 <Clock_Alarm_MessageON+0x44>
                status_ = Q_UNHANDLED();
     e6e:	2002      	movs	r0, #2
    return status_;
     e70:	e7ea      	b.n	e48 <Clock_Alarm_MessageON+0x44>
     e72:	bf00      	nop
     e74:	00000d61 	.word	0x00000d61
     e78:	00007a74 	.word	0x00007a74
     e7c:	20000200 	.word	0x20000200
     e80:	20000220 	.word	0x20000220
     e84:	00007a84 	.word	0x00007a84
     e88:	20000240 	.word	0x20000240
     e8c:	00000e91 	.word	0x00000e91

00000e90 <Clock_Alarm_MessageOFF>:
static QState Clock_Alarm_MessageOFF(Clock_Alarm * const me) {
     e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (Q_SIG(me)) {
     e92:	7b03      	ldrb	r3, [r0, #12]
     e94:	2b01      	cmp	r3, #1
     e96:	d005      	beq.n	ea4 <Clock_Alarm_MessageOFF+0x14>
     e98:	2b0b      	cmp	r3, #11
     e9a:	d01c      	beq.n	ed6 <Clock_Alarm_MessageOFF+0x46>
            status_ = Q_SUPER(&Clock_Alarm_NotifyAlarm);
     e9c:	4b18      	ldr	r3, [pc, #96]	; (f00 <Clock_Alarm_MessageOFF+0x70>)
     e9e:	6083      	str	r3, [r0, #8]
     ea0:	2000      	movs	r0, #0
            break;
     ea2:	e017      	b.n	ed4 <Clock_Alarm_MessageOFF+0x44>
            (me->timeout_AlarmMessage) = 0;
     ea4:	2300      	movs	r3, #0
     ea6:	7643      	strb	r3, [r0, #25]
            sprintf(DisplayStringFirstLine,"*     - - -         *");
     ea8:	4f16      	ldr	r7, [pc, #88]	; (f04 <Clock_Alarm_MessageOFF+0x74>)
     eaa:	4c17      	ldr	r4, [pc, #92]	; (f08 <Clock_Alarm_MessageOFF+0x78>)
     eac:	4639      	mov	r1, r7
     eae:	4620      	mov	r0, r4
     eb0:	f002 f836 	bl	2f20 <sprintf>
            sprintf(DisplayStringSecondLine,"    - - - ");
     eb4:	4d15      	ldr	r5, [pc, #84]	; (f0c <Clock_Alarm_MessageOFF+0x7c>)
     eb6:	4916      	ldr	r1, [pc, #88]	; (f10 <Clock_Alarm_MessageOFF+0x80>)
     eb8:	4628      	mov	r0, r5
     eba:	f002 f831 	bl	2f20 <sprintf>
            sprintf(DisplayStringThirdLine,"*     - - -         *");
     ebe:	4e15      	ldr	r6, [pc, #84]	; (f14 <Clock_Alarm_MessageOFF+0x84>)
     ec0:	4639      	mov	r1, r7
     ec2:	4630      	mov	r0, r6
     ec4:	f002 f82c 	bl	2f20 <sprintf>
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
     ec8:	4632      	mov	r2, r6
     eca:	4629      	mov	r1, r5
     ecc:	4620      	mov	r0, r4
     ece:	f7ff fe5d 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
     ed2:	2003      	movs	r0, #3
}
     ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (( ++(me->timeout_AlarmMessage) == 1 && ++(me->timeout_AlarmMain) < 15 )) {
     ed6:	7e43      	ldrb	r3, [r0, #25]
     ed8:	3301      	adds	r3, #1
     eda:	b2db      	uxtb	r3, r3
     edc:	7643      	strb	r3, [r0, #25]
     ede:	2b01      	cmp	r3, #1
     ee0:	d001      	beq.n	ee6 <Clock_Alarm_MessageOFF+0x56>
                status_ = Q_UNHANDLED();
     ee2:	2002      	movs	r0, #2
     ee4:	e7f6      	b.n	ed4 <Clock_Alarm_MessageOFF+0x44>
            if (( ++(me->timeout_AlarmMessage) == 1 && ++(me->timeout_AlarmMain) < 15 )) {
     ee6:	7e83      	ldrb	r3, [r0, #26]
     ee8:	3301      	adds	r3, #1
     eea:	b2db      	uxtb	r3, r3
     eec:	7683      	strb	r3, [r0, #26]
     eee:	2b0e      	cmp	r3, #14
     ef0:	d803      	bhi.n	efa <Clock_Alarm_MessageOFF+0x6a>
                status_ = Q_TRAN(&Clock_Alarm_MessageON);
     ef2:	4b09      	ldr	r3, [pc, #36]	; (f18 <Clock_Alarm_MessageOFF+0x88>)
     ef4:	6083      	str	r3, [r0, #8]
     ef6:	2008      	movs	r0, #8
     ef8:	e7ec      	b.n	ed4 <Clock_Alarm_MessageOFF+0x44>
                status_ = Q_UNHANDLED();
     efa:	2002      	movs	r0, #2
    return status_;
     efc:	e7ea      	b.n	ed4 <Clock_Alarm_MessageOFF+0x44>
     efe:	bf00      	nop
     f00:	00000d61 	.word	0x00000d61
     f04:	00007a8c 	.word	0x00007a8c
     f08:	20000200 	.word	0x20000200
     f0c:	20000220 	.word	0x20000220
     f10:	00007aa4 	.word	0x00007aa4
     f14:	20000240 	.word	0x20000240
     f18:	00000e05 	.word	0x00000e05

00000f1c <Clock_Alarm_SettingsParent>:
static QState Clock_Alarm_SettingsParent(Clock_Alarm * const me) {
     f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f1e:	b083      	sub	sp, #12
     f20:	4604      	mov	r4, r0
    switch (Q_SIG(me)) {
     f22:	7b03      	ldrb	r3, [r0, #12]
     f24:	2b09      	cmp	r3, #9
     f26:	d004      	beq.n	f32 <Clock_Alarm_SettingsParent+0x16>
            status_ = Q_SUPER(&Clock_Alarm_MainClock);
     f28:	4b24      	ldr	r3, [pc, #144]	; (fbc <Clock_Alarm_SettingsParent+0xa0>)
     f2a:	6083      	str	r3, [r0, #8]
     f2c:	2000      	movs	r0, #0
}
     f2e:	b003      	add	sp, #12
     f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        if(me->alarmStatus == 1){
     f32:	7e03      	ldrb	r3, [r0, #24]
     f34:	2b01      	cmp	r3, #1
     f36:	d03c      	beq.n	fb2 <Clock_Alarm_SettingsParent+0x96>
                            sprintf(DisplayStringFirstLine,"Alarm - NO");
     f38:	4921      	ldr	r1, [pc, #132]	; (fc0 <Clock_Alarm_SettingsParent+0xa4>)
     f3a:	4822      	ldr	r0, [pc, #136]	; (fc4 <Clock_Alarm_SettingsParent+0xa8>)
     f3c:	f001 fff0 	bl	2f20 <sprintf>
                        sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",((Clock_Alarm_currentTime/1000U/60U/60U)%24),((Clock_Alarm_currentTime/1000U/60U)%60U),((Clock_Alarm_currentTime/1000U)%60U));
     f40:	4b21      	ldr	r3, [pc, #132]	; (fc8 <Clock_Alarm_SettingsParent+0xac>)
     f42:	6819      	ldr	r1, [r3, #0]
     f44:	4a21      	ldr	r2, [pc, #132]	; (fcc <Clock_Alarm_SettingsParent+0xb0>)
     f46:	fba2 3201 	umull	r3, r2, r2, r1
     f4a:	0d52      	lsrs	r2, r2, #21
     f4c:	4f20      	ldr	r7, [pc, #128]	; (fd0 <Clock_Alarm_SettingsParent+0xb4>)
     f4e:	fba7 3701 	umull	r3, r7, r7, r1
     f52:	0bbf      	lsrs	r7, r7, #14
     f54:	4d1f      	ldr	r5, [pc, #124]	; (fd4 <Clock_Alarm_SettingsParent+0xb8>)
     f56:	fba5 3101 	umull	r3, r1, r5, r1
     f5a:	098d      	lsrs	r5, r1, #6
     f5c:	491e      	ldr	r1, [pc, #120]	; (fd8 <Clock_Alarm_SettingsParent+0xbc>)
     f5e:	fba1 0307 	umull	r0, r3, r1, r7
     f62:	095b      	lsrs	r3, r3, #5
     f64:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
     f68:	481c      	ldr	r0, [pc, #112]	; (fdc <Clock_Alarm_SettingsParent+0xc0>)
     f6a:	fba0 6002 	umull	r6, r0, r0, r2
     f6e:	0900      	lsrs	r0, r0, #4
     f70:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     f74:	4e1a      	ldr	r6, [pc, #104]	; (fe0 <Clock_Alarm_SettingsParent+0xc4>)
     f76:	fba1 c105 	umull	ip, r1, r1, r5
     f7a:	0949      	lsrs	r1, r1, #5
     f7c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
     f80:	eba5 0181 	sub.w	r1, r5, r1, lsl #2
     f84:	9100      	str	r1, [sp, #0]
     f86:	eba7 0383 	sub.w	r3, r7, r3, lsl #2
     f8a:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
     f8e:	4915      	ldr	r1, [pc, #84]	; (fe4 <Clock_Alarm_SettingsParent+0xc8>)
     f90:	4630      	mov	r0, r6
     f92:	f001 ffc5 	bl	2f20 <sprintf>
                        sprintf(DisplayStringThirdLine,"Clock Set");
     f96:	4d14      	ldr	r5, [pc, #80]	; (fe8 <Clock_Alarm_SettingsParent+0xcc>)
     f98:	4914      	ldr	r1, [pc, #80]	; (fec <Clock_Alarm_SettingsParent+0xd0>)
     f9a:	4628      	mov	r0, r5
     f9c:	f001 ffc0 	bl	2f20 <sprintf>
                        RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
     fa0:	462a      	mov	r2, r5
     fa2:	4631      	mov	r1, r6
     fa4:	4807      	ldr	r0, [pc, #28]	; (fc4 <Clock_Alarm_SettingsParent+0xa8>)
     fa6:	f7ff fdf1 	bl	b8c <RefreshDisplay>
            status_ = Q_TRAN(&Clock_Alarm_Ticking);
     faa:	4b11      	ldr	r3, [pc, #68]	; (ff0 <Clock_Alarm_SettingsParent+0xd4>)
     fac:	60a3      	str	r3, [r4, #8]
     fae:	2008      	movs	r0, #8
            break;
     fb0:	e7bd      	b.n	f2e <Clock_Alarm_SettingsParent+0x12>
                            sprintf(DisplayStringFirstLine,"Alarm - YES");
     fb2:	4910      	ldr	r1, [pc, #64]	; (ff4 <Clock_Alarm_SettingsParent+0xd8>)
     fb4:	4803      	ldr	r0, [pc, #12]	; (fc4 <Clock_Alarm_SettingsParent+0xa8>)
     fb6:	f001 ffb3 	bl	2f20 <sprintf>
     fba:	e7c1      	b.n	f40 <Clock_Alarm_SettingsParent+0x24>
     fbc:	00000ac9 	.word	0x00000ac9
     fc0:	00007a4c 	.word	0x00007a4c
     fc4:	20000200 	.word	0x20000200
     fc8:	200001dc 	.word	0x200001dc
     fcc:	95217cb1 	.word	0x95217cb1
     fd0:	45e7b273 	.word	0x45e7b273
     fd4:	10624dd3 	.word	0x10624dd3
     fd8:	88888889 	.word	0x88888889
     fdc:	aaaaaaab 	.word	0xaaaaaaab
     fe0:	20000220 	.word	0x20000220
     fe4:	00007a58 	.word	0x00007a58
     fe8:	20000240 	.word	0x20000240
     fec:	00007ab0 	.word	0x00007ab0
     ff0:	00000bdd 	.word	0x00000bdd
     ff4:	00007a40 	.word	0x00007a40

00000ff8 <Clock_Alarm_SetHour_Alarm>:
static QState Clock_Alarm_SetHour_Alarm(Clock_Alarm * const me) {
     ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ffc:	b083      	sub	sp, #12
     ffe:	4604      	mov	r4, r0
    switch (Q_SIG(me)) {
    1000:	7b03      	ldrb	r3, [r0, #12]
    1002:	2b08      	cmp	r3, #8
    1004:	d04e      	beq.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    1006:	2b09      	cmp	r3, #9
    1008:	f000 80a9 	beq.w	115e <CONFIG_FPROTECT_BLOCK_SIZE+0x15e>
    100c:	2b01      	cmp	r3, #1
    100e:	d003      	beq.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
            status_ = Q_SUPER(&Clock_Alarm_SetAlarm);
    1010:	4b55      	ldr	r3, [pc, #340]	; (1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>)
    1012:	6083      	str	r3, [r0, #8]
    1014:	2000      	movs	r0, #0
    return status_;
    1016:	e03d      	b.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
            int hours = ((me->alarmTime/1000U/60U/60U)%24);
    1018:	6943      	ldr	r3, [r0, #20]
    101a:	4e54      	ldr	r6, [pc, #336]	; (116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>)
    101c:	fba6 2603 	umull	r2, r6, r6, r3
    1020:	0d76      	lsrs	r6, r6, #21
    1022:	4a53      	ldr	r2, [pc, #332]	; (1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>)
    1024:	fba2 1206 	umull	r1, r2, r2, r6
    1028:	0912      	lsrs	r2, r2, #4
    102a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    102e:	eba6 06c2 	sub.w	r6, r6, r2, lsl #3
            int minutes = ((me->alarmTime/1000U/60U)%60);
    1032:	4f50      	ldr	r7, [pc, #320]	; (1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>)
    1034:	fba7 2703 	umull	r2, r7, r7, r3
    1038:	0bbf      	lsrs	r7, r7, #14
    103a:	4d4f      	ldr	r5, [pc, #316]	; (1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>)
    103c:	fba5 1207 	umull	r1, r2, r5, r7
    1040:	0952      	lsrs	r2, r2, #5
    1042:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    1046:	eba7 0782 	sub.w	r7, r7, r2, lsl #2
            int seconds = ((me->alarmTime/1000U)%60);
    104a:	4a4c      	ldr	r2, [pc, #304]	; (117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>)
    104c:	fba2 2303 	umull	r2, r3, r2, r3
    1050:	099b      	lsrs	r3, r3, #6
    1052:	fba5 2503 	umull	r2, r5, r5, r3
    1056:	096d      	lsrs	r5, r5, #5
    1058:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    105c:	eba3 0585 	sub.w	r5, r3, r5, lsl #2
            if(me->alarmStatus == 1){
    1060:	7e03      	ldrb	r3, [r0, #24]
    1062:	2b01      	cmp	r3, #1
    1064:	d019      	beq.n	109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
              sprintf(DisplayStringFirstLine,"Alarm - NO");
    1066:	4946      	ldr	r1, [pc, #280]	; (1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>)
    1068:	4846      	ldr	r0, [pc, #280]	; (1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>)
    106a:	f001 ff59 	bl	2f20 <sprintf>
            sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",hours,minutes,seconds);
    106e:	4c46      	ldr	r4, [pc, #280]	; (1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>)
    1070:	9500      	str	r5, [sp, #0]
    1072:	463b      	mov	r3, r7
    1074:	4632      	mov	r2, r6
    1076:	4945      	ldr	r1, [pc, #276]	; (118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>)
    1078:	4620      	mov	r0, r4
    107a:	f001 ff51 	bl	2f20 <sprintf>
            sprintf(DisplayStringThirdLine,"Alarm Hour");
    107e:	4d44      	ldr	r5, [pc, #272]	; (1190 <CONFIG_FPROTECT_BLOCK_SIZE+0x190>)
    1080:	4944      	ldr	r1, [pc, #272]	; (1194 <CONFIG_FPROTECT_BLOCK_SIZE+0x194>)
    1082:	4628      	mov	r0, r5
    1084:	f001 ff4c 	bl	2f20 <sprintf>
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
    1088:	462a      	mov	r2, r5
    108a:	4621      	mov	r1, r4
    108c:	483d      	ldr	r0, [pc, #244]	; (1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>)
    108e:	f7ff fd7d 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
    1092:	2003      	movs	r0, #3
}
    1094:	b003      	add	sp, #12
    1096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
              sprintf(DisplayStringFirstLine,"Alarm - YES");
    109a:	493f      	ldr	r1, [pc, #252]	; (1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>)
    109c:	4839      	ldr	r0, [pc, #228]	; (1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>)
    109e:	f001 ff3f 	bl	2f20 <sprintf>
    10a2:	e7e4      	b.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
            int hours = ((me->alarmTime/1000U/60U/60U)%24);
    10a4:	6941      	ldr	r1, [r0, #20]
    10a6:	4b31      	ldr	r3, [pc, #196]	; (116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>)
    10a8:	fba3 2301 	umull	r2, r3, r3, r1
    10ac:	0d5b      	lsrs	r3, r3, #21
    10ae:	4a30      	ldr	r2, [pc, #192]	; (1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>)
    10b0:	fba2 0203 	umull	r0, r2, r2, r3
    10b4:	0912      	lsrs	r2, r2, #4
    10b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    10ba:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
            int minutes = ((me->alarmTime/1000U/60U)%60);
    10be:	4e2d      	ldr	r6, [pc, #180]	; (1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>)
    10c0:	fba6 3601 	umull	r3, r6, r6, r1
    10c4:	0bb6      	lsrs	r6, r6, #14
    10c6:	4b2c      	ldr	r3, [pc, #176]	; (1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>)
    10c8:	fba3 5006 	umull	r5, r0, r3, r6
    10cc:	0940      	lsrs	r0, r0, #5
    10ce:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    10d2:	eba6 0680 	sub.w	r6, r6, r0, lsl #2
            int seconds = ((me->alarmTime/1000U)%60);
    10d6:	4f29      	ldr	r7, [pc, #164]	; (117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>)
    10d8:	fba7 1701 	umull	r1, r7, r7, r1
    10dc:	09bf      	lsrs	r7, r7, #6
    10de:	fba3 1307 	umull	r1, r3, r3, r7
    10e2:	095b      	lsrs	r3, r3, #5
    10e4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    10e8:	eba7 0783 	sub.w	r7, r7, r3, lsl #2
            hours = (hours+1)%24;
    10ec:	3201      	adds	r2, #1
    10ee:	4b2b      	ldr	r3, [pc, #172]	; (119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>)
    10f0:	fb83 1302 	smull	r1, r3, r3, r2
    10f4:	17d5      	asrs	r5, r2, #31
    10f6:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
    10fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    10fe:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
            if(me->alarmStatus == 1){
    1102:	7e23      	ldrb	r3, [r4, #24]
    1104:	2b01      	cmp	r3, #1
    1106:	d025      	beq.n	1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
              sprintf(DisplayStringFirstLine,"Alarm - NO");
    1108:	491d      	ldr	r1, [pc, #116]	; (1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>)
    110a:	481e      	ldr	r0, [pc, #120]	; (1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>)
    110c:	f001 ff08 	bl	2f20 <sprintf>
            sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",hours,minutes,seconds);
    1110:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
    1114:	9700      	str	r7, [sp, #0]
    1116:	4633      	mov	r3, r6
    1118:	462a      	mov	r2, r5
    111a:	491c      	ldr	r1, [pc, #112]	; (118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>)
    111c:	4640      	mov	r0, r8
    111e:	f001 feff 	bl	2f20 <sprintf>
            sprintf(DisplayStringThirdLine,"Alarm Hour");
    1122:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1190 <CONFIG_FPROTECT_BLOCK_SIZE+0x190>
    1126:	491b      	ldr	r1, [pc, #108]	; (1194 <CONFIG_FPROTECT_BLOCK_SIZE+0x194>)
    1128:	4648      	mov	r0, r9
    112a:	f001 fef9 	bl	2f20 <sprintf>
            me->alarmTime = (hours*60*60*1000)+(minutes*60*1000)+(seconds*1000);
    112e:	f64e 2360 	movw	r3, #60000	; 0xea60
    1132:	fb03 f606 	mul.w	r6, r3, r6
    1136:	4b1a      	ldr	r3, [pc, #104]	; (11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>)
    1138:	fb03 6505 	mla	r5, r3, r5, r6
    113c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1140:	fb03 5507 	mla	r5, r3, r7, r5
    1144:	6165      	str	r5, [r4, #20]
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
    1146:	464a      	mov	r2, r9
    1148:	4641      	mov	r1, r8
    114a:	480e      	ldr	r0, [pc, #56]	; (1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>)
    114c:	f7ff fd1e 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
    1150:	2003      	movs	r0, #3
            break;
    1152:	e79f      	b.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
              sprintf(DisplayStringFirstLine,"Alarm - YES");
    1154:	4910      	ldr	r1, [pc, #64]	; (1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>)
    1156:	480b      	ldr	r0, [pc, #44]	; (1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>)
    1158:	f001 fee2 	bl	2f20 <sprintf>
    115c:	e7d8      	b.n	1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>
            status_ = Q_TRAN(&Clock_Alarm_SetMin_Alarm);
    115e:	4b11      	ldr	r3, [pc, #68]	; (11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>)
    1160:	6083      	str	r3, [r0, #8]
    1162:	2008      	movs	r0, #8
            break;
    1164:	e796      	b.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
    1166:	bf00      	nop
    1168:	00000b45 	.word	0x00000b45
    116c:	95217cb1 	.word	0x95217cb1
    1170:	aaaaaaab 	.word	0xaaaaaaab
    1174:	45e7b273 	.word	0x45e7b273
    1178:	88888889 	.word	0x88888889
    117c:	10624dd3 	.word	0x10624dd3
    1180:	00007a4c 	.word	0x00007a4c
    1184:	20000200 	.word	0x20000200
    1188:	20000220 	.word	0x20000220
    118c:	00007a58 	.word	0x00007a58
    1190:	20000240 	.word	0x20000240
    1194:	00007abc 	.word	0x00007abc
    1198:	00007a40 	.word	0x00007a40
    119c:	2aaaaaab 	.word	0x2aaaaaab
    11a0:	0036ee80 	.word	0x0036ee80
    11a4:	000011a9 	.word	0x000011a9

000011a8 <Clock_Alarm_SetMin_Alarm>:
static QState Clock_Alarm_SetMin_Alarm(Clock_Alarm * const me) {
    11a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    11ac:	b083      	sub	sp, #12
    11ae:	4604      	mov	r4, r0
    switch (Q_SIG(me)) {
    11b0:	7b03      	ldrb	r3, [r0, #12]
    11b2:	2b08      	cmp	r3, #8
    11b4:	d04e      	beq.n	1254 <Clock_Alarm_SetMin_Alarm+0xac>
    11b6:	2b09      	cmp	r3, #9
    11b8:	f000 80a9 	beq.w	130e <Clock_Alarm_SetMin_Alarm+0x166>
    11bc:	2b01      	cmp	r3, #1
    11be:	d003      	beq.n	11c8 <Clock_Alarm_SetMin_Alarm+0x20>
            status_ = Q_SUPER(&Clock_Alarm_SetAlarm);
    11c0:	4b55      	ldr	r3, [pc, #340]	; (1318 <Clock_Alarm_SetMin_Alarm+0x170>)
    11c2:	6083      	str	r3, [r0, #8]
    11c4:	2000      	movs	r0, #0
    return status_;
    11c6:	e03d      	b.n	1244 <Clock_Alarm_SetMin_Alarm+0x9c>
            int hours = ((me->alarmTime/1000U/60U/60U)%24);
    11c8:	6941      	ldr	r1, [r0, #20]
    11ca:	4e54      	ldr	r6, [pc, #336]	; (131c <Clock_Alarm_SetMin_Alarm+0x174>)
    11cc:	fba6 3601 	umull	r3, r6, r6, r1
    11d0:	0d76      	lsrs	r6, r6, #21
    11d2:	4b53      	ldr	r3, [pc, #332]	; (1320 <Clock_Alarm_SetMin_Alarm+0x178>)
    11d4:	fba3 2306 	umull	r2, r3, r3, r6
    11d8:	091b      	lsrs	r3, r3, #4
    11da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    11de:	eba6 06c3 	sub.w	r6, r6, r3, lsl #3
            int minutes = ((me->alarmTime/1000U/60U)%60);
    11e2:	4f50      	ldr	r7, [pc, #320]	; (1324 <Clock_Alarm_SetMin_Alarm+0x17c>)
    11e4:	fba7 3701 	umull	r3, r7, r7, r1
    11e8:	0bbf      	lsrs	r7, r7, #14
    11ea:	4d4f      	ldr	r5, [pc, #316]	; (1328 <Clock_Alarm_SetMin_Alarm+0x180>)
    11ec:	fba5 2307 	umull	r2, r3, r5, r7
    11f0:	095b      	lsrs	r3, r3, #5
    11f2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    11f6:	eba7 0783 	sub.w	r7, r7, r3, lsl #2
            int seconds = ((me->alarmTime/1000U)%60);
    11fa:	4b4c      	ldr	r3, [pc, #304]	; (132c <Clock_Alarm_SetMin_Alarm+0x184>)
    11fc:	fba3 3101 	umull	r3, r1, r3, r1
    1200:	0989      	lsrs	r1, r1, #6
    1202:	fba5 3501 	umull	r3, r5, r5, r1
    1206:	096d      	lsrs	r5, r5, #5
    1208:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    120c:	eba1 0585 	sub.w	r5, r1, r5, lsl #2
            if(me->alarmStatus == 1){
    1210:	7e03      	ldrb	r3, [r0, #24]
    1212:	2b01      	cmp	r3, #1
    1214:	d019      	beq.n	124a <Clock_Alarm_SetMin_Alarm+0xa2>
              sprintf(DisplayStringFirstLine,"Alarm - NO");
    1216:	4946      	ldr	r1, [pc, #280]	; (1330 <Clock_Alarm_SetMin_Alarm+0x188>)
    1218:	4846      	ldr	r0, [pc, #280]	; (1334 <Clock_Alarm_SetMin_Alarm+0x18c>)
    121a:	f001 fe81 	bl	2f20 <sprintf>
            sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",hours,minutes,seconds);
    121e:	4c46      	ldr	r4, [pc, #280]	; (1338 <Clock_Alarm_SetMin_Alarm+0x190>)
    1220:	9500      	str	r5, [sp, #0]
    1222:	463b      	mov	r3, r7
    1224:	4632      	mov	r2, r6
    1226:	4945      	ldr	r1, [pc, #276]	; (133c <Clock_Alarm_SetMin_Alarm+0x194>)
    1228:	4620      	mov	r0, r4
    122a:	f001 fe79 	bl	2f20 <sprintf>
            sprintf(DisplayStringThirdLine,"Alarm Min");
    122e:	4d44      	ldr	r5, [pc, #272]	; (1340 <Clock_Alarm_SetMin_Alarm+0x198>)
    1230:	4944      	ldr	r1, [pc, #272]	; (1344 <Clock_Alarm_SetMin_Alarm+0x19c>)
    1232:	4628      	mov	r0, r5
    1234:	f001 fe74 	bl	2f20 <sprintf>
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
    1238:	462a      	mov	r2, r5
    123a:	4621      	mov	r1, r4
    123c:	483d      	ldr	r0, [pc, #244]	; (1334 <Clock_Alarm_SetMin_Alarm+0x18c>)
    123e:	f7ff fca5 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
    1242:	2003      	movs	r0, #3
}
    1244:	b003      	add	sp, #12
    1246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
              sprintf(DisplayStringFirstLine,"Alarm - YES");
    124a:	493f      	ldr	r1, [pc, #252]	; (1348 <Clock_Alarm_SetMin_Alarm+0x1a0>)
    124c:	4839      	ldr	r0, [pc, #228]	; (1334 <Clock_Alarm_SetMin_Alarm+0x18c>)
    124e:	f001 fe67 	bl	2f20 <sprintf>
    1252:	e7e4      	b.n	121e <Clock_Alarm_SetMin_Alarm+0x76>
            int hours = ((me->alarmTime/1000U/60U/60U)%24);
    1254:	6943      	ldr	r3, [r0, #20]
    1256:	4e31      	ldr	r6, [pc, #196]	; (131c <Clock_Alarm_SetMin_Alarm+0x174>)
    1258:	fba6 2603 	umull	r2, r6, r6, r3
    125c:	0d76      	lsrs	r6, r6, #21
    125e:	4a30      	ldr	r2, [pc, #192]	; (1320 <Clock_Alarm_SetMin_Alarm+0x178>)
    1260:	fba2 1206 	umull	r1, r2, r2, r6
    1264:	0912      	lsrs	r2, r2, #4
    1266:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    126a:	eba6 06c2 	sub.w	r6, r6, r2, lsl #3
            int minutes = ((me->alarmTime/1000U/60U)%60);
    126e:	492d      	ldr	r1, [pc, #180]	; (1324 <Clock_Alarm_SetMin_Alarm+0x17c>)
    1270:	fba1 2103 	umull	r2, r1, r1, r3
    1274:	0b89      	lsrs	r1, r1, #14
    1276:	4d2c      	ldr	r5, [pc, #176]	; (1328 <Clock_Alarm_SetMin_Alarm+0x180>)
    1278:	fba5 0201 	umull	r0, r2, r5, r1
    127c:	0952      	lsrs	r2, r2, #5
    127e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    1282:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
            int seconds = ((me->alarmTime/1000U)%60);
    1286:	4f29      	ldr	r7, [pc, #164]	; (132c <Clock_Alarm_SetMin_Alarm+0x184>)
    1288:	fba7 1303 	umull	r1, r3, r7, r3
    128c:	099b      	lsrs	r3, r3, #6
    128e:	fba5 1703 	umull	r1, r7, r5, r3
    1292:	097f      	lsrs	r7, r7, #5
    1294:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    1298:	eba3 0787 	sub.w	r7, r3, r7, lsl #2
            minutes = (minutes+1)%60;
    129c:	3201      	adds	r2, #1
    129e:	fb85 3502 	smull	r3, r5, r5, r2
    12a2:	4415      	add	r5, r2
    12a4:	17d3      	asrs	r3, r2, #31
    12a6:	ebc3 1565 	rsb	r5, r3, r5, asr #5
    12aa:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    12ae:	eba2 0585 	sub.w	r5, r2, r5, lsl #2
            if(me->alarmStatus == 1){
    12b2:	7e23      	ldrb	r3, [r4, #24]
    12b4:	2b01      	cmp	r3, #1
    12b6:	d025      	beq.n	1304 <Clock_Alarm_SetMin_Alarm+0x15c>
              sprintf(DisplayStringFirstLine,"Alarm - NO");
    12b8:	491d      	ldr	r1, [pc, #116]	; (1330 <Clock_Alarm_SetMin_Alarm+0x188>)
    12ba:	481e      	ldr	r0, [pc, #120]	; (1334 <Clock_Alarm_SetMin_Alarm+0x18c>)
    12bc:	f001 fe30 	bl	2f20 <sprintf>
            sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",hours,minutes,seconds);
    12c0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1338 <Clock_Alarm_SetMin_Alarm+0x190>
    12c4:	9700      	str	r7, [sp, #0]
    12c6:	462b      	mov	r3, r5
    12c8:	4632      	mov	r2, r6
    12ca:	491c      	ldr	r1, [pc, #112]	; (133c <Clock_Alarm_SetMin_Alarm+0x194>)
    12cc:	4640      	mov	r0, r8
    12ce:	f001 fe27 	bl	2f20 <sprintf>
            sprintf(DisplayStringThirdLine,"Alarm Min");
    12d2:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1340 <Clock_Alarm_SetMin_Alarm+0x198>
    12d6:	491b      	ldr	r1, [pc, #108]	; (1344 <Clock_Alarm_SetMin_Alarm+0x19c>)
    12d8:	4648      	mov	r0, r9
    12da:	f001 fe21 	bl	2f20 <sprintf>
            me->alarmTime = (hours*60*60*1000)+(minutes*60*1000)+(seconds*1000);
    12de:	f64e 2360 	movw	r3, #60000	; 0xea60
    12e2:	fb03 f505 	mul.w	r5, r3, r5
    12e6:	4b19      	ldr	r3, [pc, #100]	; (134c <Clock_Alarm_SetMin_Alarm+0x1a4>)
    12e8:	fb03 5606 	mla	r6, r3, r6, r5
    12ec:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    12f0:	fb05 6707 	mla	r7, r5, r7, r6
    12f4:	6167      	str	r7, [r4, #20]
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
    12f6:	464a      	mov	r2, r9
    12f8:	4641      	mov	r1, r8
    12fa:	480e      	ldr	r0, [pc, #56]	; (1334 <Clock_Alarm_SetMin_Alarm+0x18c>)
    12fc:	f7ff fc46 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
    1300:	2003      	movs	r0, #3
            break;
    1302:	e79f      	b.n	1244 <Clock_Alarm_SetMin_Alarm+0x9c>
              sprintf(DisplayStringFirstLine,"Alarm - YES");
    1304:	4910      	ldr	r1, [pc, #64]	; (1348 <Clock_Alarm_SetMin_Alarm+0x1a0>)
    1306:	480b      	ldr	r0, [pc, #44]	; (1334 <Clock_Alarm_SetMin_Alarm+0x18c>)
    1308:	f001 fe0a 	bl	2f20 <sprintf>
    130c:	e7d8      	b.n	12c0 <Clock_Alarm_SetMin_Alarm+0x118>
            status_ = Q_TRAN(&Clock_Alarm_Arm_Alarm);
    130e:	4b10      	ldr	r3, [pc, #64]	; (1350 <Clock_Alarm_SetMin_Alarm+0x1a8>)
    1310:	6083      	str	r3, [r0, #8]
    1312:	2008      	movs	r0, #8
            break;
    1314:	e796      	b.n	1244 <Clock_Alarm_SetMin_Alarm+0x9c>
    1316:	bf00      	nop
    1318:	00000b45 	.word	0x00000b45
    131c:	95217cb1 	.word	0x95217cb1
    1320:	aaaaaaab 	.word	0xaaaaaaab
    1324:	45e7b273 	.word	0x45e7b273
    1328:	88888889 	.word	0x88888889
    132c:	10624dd3 	.word	0x10624dd3
    1330:	00007a4c 	.word	0x00007a4c
    1334:	20000200 	.word	0x20000200
    1338:	20000220 	.word	0x20000220
    133c:	00007a58 	.word	0x00007a58
    1340:	20000240 	.word	0x20000240
    1344:	00007ac8 	.word	0x00007ac8
    1348:	00007a40 	.word	0x00007a40
    134c:	0036ee80 	.word	0x0036ee80
    1350:	00001355 	.word	0x00001355

00001354 <Clock_Alarm_Arm_Alarm>:
static QState Clock_Alarm_Arm_Alarm(Clock_Alarm * const me) {
    1354:	b5f0      	push	{r4, r5, r6, r7, lr}
    1356:	b083      	sub	sp, #12
    1358:	4604      	mov	r4, r0
    switch (Q_SIG(me)) {
    135a:	7b03      	ldrb	r3, [r0, #12]
    135c:	2b01      	cmp	r3, #1
    135e:	d005      	beq.n	136c <Clock_Alarm_Arm_Alarm+0x18>
    1360:	2b08      	cmp	r3, #8
    1362:	d048      	beq.n	13f6 <Clock_Alarm_Arm_Alarm+0xa2>
            status_ = Q_SUPER(&Clock_Alarm_SetAlarm);
    1364:	4b48      	ldr	r3, [pc, #288]	; (1488 <Clock_Alarm_Arm_Alarm+0x134>)
    1366:	6083      	str	r3, [r0, #8]
    1368:	2000      	movs	r0, #0
    return status_;
    136a:	e03d      	b.n	13e8 <Clock_Alarm_Arm_Alarm+0x94>
            int hours = ((me->alarmTime/1000U/60U/60U)%24);
    136c:	6941      	ldr	r1, [r0, #20]
    136e:	4e47      	ldr	r6, [pc, #284]	; (148c <Clock_Alarm_Arm_Alarm+0x138>)
    1370:	fba6 3601 	umull	r3, r6, r6, r1
    1374:	0d76      	lsrs	r6, r6, #21
    1376:	4b46      	ldr	r3, [pc, #280]	; (1490 <Clock_Alarm_Arm_Alarm+0x13c>)
    1378:	fba3 2306 	umull	r2, r3, r3, r6
    137c:	091b      	lsrs	r3, r3, #4
    137e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1382:	eba6 06c3 	sub.w	r6, r6, r3, lsl #3
            int minutes = ((me->alarmTime/1000U/60U)%60);
    1386:	4f43      	ldr	r7, [pc, #268]	; (1494 <Clock_Alarm_Arm_Alarm+0x140>)
    1388:	fba7 3701 	umull	r3, r7, r7, r1
    138c:	0bbf      	lsrs	r7, r7, #14
    138e:	4d42      	ldr	r5, [pc, #264]	; (1498 <Clock_Alarm_Arm_Alarm+0x144>)
    1390:	fba5 2307 	umull	r2, r3, r5, r7
    1394:	095b      	lsrs	r3, r3, #5
    1396:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    139a:	eba7 0783 	sub.w	r7, r7, r3, lsl #2
            int seconds = ((me->alarmTime/1000U)%60);
    139e:	4b3f      	ldr	r3, [pc, #252]	; (149c <Clock_Alarm_Arm_Alarm+0x148>)
    13a0:	fba3 3101 	umull	r3, r1, r3, r1
    13a4:	0989      	lsrs	r1, r1, #6
    13a6:	fba5 3501 	umull	r3, r5, r5, r1
    13aa:	096d      	lsrs	r5, r5, #5
    13ac:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    13b0:	eba1 0585 	sub.w	r5, r1, r5, lsl #2
            if(me->alarmStatus == 1){
    13b4:	7e03      	ldrb	r3, [r0, #24]
    13b6:	2b01      	cmp	r3, #1
    13b8:	d018      	beq.n	13ec <Clock_Alarm_Arm_Alarm+0x98>
              sprintf(DisplayStringFirstLine,"Alarm - NO");
    13ba:	4939      	ldr	r1, [pc, #228]	; (14a0 <Clock_Alarm_Arm_Alarm+0x14c>)
    13bc:	4839      	ldr	r0, [pc, #228]	; (14a4 <Clock_Alarm_Arm_Alarm+0x150>)
    13be:	f001 fdaf 	bl	2f20 <sprintf>
            sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",hours,minutes,seconds);
    13c2:	4c39      	ldr	r4, [pc, #228]	; (14a8 <Clock_Alarm_Arm_Alarm+0x154>)
    13c4:	9500      	str	r5, [sp, #0]
    13c6:	463b      	mov	r3, r7
    13c8:	4632      	mov	r2, r6
    13ca:	4938      	ldr	r1, [pc, #224]	; (14ac <Clock_Alarm_Arm_Alarm+0x158>)
    13cc:	4620      	mov	r0, r4
    13ce:	f001 fda7 	bl	2f20 <sprintf>
            sprintf(DisplayStringThirdLine,"Alarm 1/0");
    13d2:	4d37      	ldr	r5, [pc, #220]	; (14b0 <Clock_Alarm_Arm_Alarm+0x15c>)
    13d4:	4937      	ldr	r1, [pc, #220]	; (14b4 <Clock_Alarm_Arm_Alarm+0x160>)
    13d6:	4628      	mov	r0, r5
    13d8:	f001 fda2 	bl	2f20 <sprintf>
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
    13dc:	462a      	mov	r2, r5
    13de:	4621      	mov	r1, r4
    13e0:	4830      	ldr	r0, [pc, #192]	; (14a4 <Clock_Alarm_Arm_Alarm+0x150>)
    13e2:	f7ff fbd3 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
    13e6:	2003      	movs	r0, #3
}
    13e8:	b003      	add	sp, #12
    13ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
              sprintf(DisplayStringFirstLine,"Alarm - YES");
    13ec:	4932      	ldr	r1, [pc, #200]	; (14b8 <Clock_Alarm_Arm_Alarm+0x164>)
    13ee:	482d      	ldr	r0, [pc, #180]	; (14a4 <Clock_Alarm_Arm_Alarm+0x150>)
    13f0:	f001 fd96 	bl	2f20 <sprintf>
    13f4:	e7e5      	b.n	13c2 <Clock_Alarm_Arm_Alarm+0x6e>
            int hours = ((me->alarmTime/1000U/60U/60U)%24);
    13f6:	6941      	ldr	r1, [r0, #20]
    13f8:	4e24      	ldr	r6, [pc, #144]	; (148c <Clock_Alarm_Arm_Alarm+0x138>)
    13fa:	fba6 3601 	umull	r3, r6, r6, r1
    13fe:	0d76      	lsrs	r6, r6, #21
    1400:	4b23      	ldr	r3, [pc, #140]	; (1490 <Clock_Alarm_Arm_Alarm+0x13c>)
    1402:	fba3 2306 	umull	r2, r3, r3, r6
    1406:	091b      	lsrs	r3, r3, #4
    1408:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    140c:	eba6 06c3 	sub.w	r6, r6, r3, lsl #3
            int minutes = ((me->alarmTime/1000U/60U)%60);
    1410:	4f20      	ldr	r7, [pc, #128]	; (1494 <Clock_Alarm_Arm_Alarm+0x140>)
    1412:	fba7 3701 	umull	r3, r7, r7, r1
    1416:	0bbf      	lsrs	r7, r7, #14
    1418:	4d1f      	ldr	r5, [pc, #124]	; (1498 <Clock_Alarm_Arm_Alarm+0x144>)
    141a:	fba5 2307 	umull	r2, r3, r5, r7
    141e:	095b      	lsrs	r3, r3, #5
    1420:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    1424:	eba7 0783 	sub.w	r7, r7, r3, lsl #2
            int seconds = ((me->alarmTime/1000U)%60);
    1428:	4b1c      	ldr	r3, [pc, #112]	; (149c <Clock_Alarm_Arm_Alarm+0x148>)
    142a:	fba3 3101 	umull	r3, r1, r3, r1
    142e:	0989      	lsrs	r1, r1, #6
    1430:	fba5 3501 	umull	r3, r5, r5, r1
    1434:	096d      	lsrs	r5, r5, #5
    1436:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    143a:	eba1 0585 	sub.w	r5, r1, r5, lsl #2
            if(me->alarmStatus == 1){
    143e:	7e03      	ldrb	r3, [r0, #24]
    1440:	2b01      	cmp	r3, #1
    1442:	d019      	beq.n	1478 <Clock_Alarm_Arm_Alarm+0x124>
              me->alarmStatus = 1;
    1444:	2301      	movs	r3, #1
    1446:	7603      	strb	r3, [r0, #24]
              sprintf(DisplayStringFirstLine,"Armed");
    1448:	491c      	ldr	r1, [pc, #112]	; (14bc <Clock_Alarm_Arm_Alarm+0x168>)
    144a:	4816      	ldr	r0, [pc, #88]	; (14a4 <Clock_Alarm_Arm_Alarm+0x150>)
    144c:	f001 fd68 	bl	2f20 <sprintf>
            sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",hours,minutes,seconds);
    1450:	4c15      	ldr	r4, [pc, #84]	; (14a8 <Clock_Alarm_Arm_Alarm+0x154>)
    1452:	9500      	str	r5, [sp, #0]
    1454:	463b      	mov	r3, r7
    1456:	4632      	mov	r2, r6
    1458:	4914      	ldr	r1, [pc, #80]	; (14ac <Clock_Alarm_Arm_Alarm+0x158>)
    145a:	4620      	mov	r0, r4
    145c:	f001 fd60 	bl	2f20 <sprintf>
            sprintf(DisplayStringThirdLine,"Alarm 1/0");
    1460:	4d13      	ldr	r5, [pc, #76]	; (14b0 <Clock_Alarm_Arm_Alarm+0x15c>)
    1462:	4914      	ldr	r1, [pc, #80]	; (14b4 <Clock_Alarm_Arm_Alarm+0x160>)
    1464:	4628      	mov	r0, r5
    1466:	f001 fd5b 	bl	2f20 <sprintf>
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
    146a:	462a      	mov	r2, r5
    146c:	4621      	mov	r1, r4
    146e:	480d      	ldr	r0, [pc, #52]	; (14a4 <Clock_Alarm_Arm_Alarm+0x150>)
    1470:	f7ff fb8c 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
    1474:	2003      	movs	r0, #3
            break;
    1476:	e7b7      	b.n	13e8 <Clock_Alarm_Arm_Alarm+0x94>
              sprintf(DisplayStringFirstLine,"Released");
    1478:	4911      	ldr	r1, [pc, #68]	; (14c0 <Clock_Alarm_Arm_Alarm+0x16c>)
    147a:	480a      	ldr	r0, [pc, #40]	; (14a4 <Clock_Alarm_Arm_Alarm+0x150>)
    147c:	f001 fd50 	bl	2f20 <sprintf>
              me->alarmStatus = 0;
    1480:	2300      	movs	r3, #0
    1482:	7623      	strb	r3, [r4, #24]
    1484:	e7e4      	b.n	1450 <Clock_Alarm_Arm_Alarm+0xfc>
    1486:	bf00      	nop
    1488:	00000b45 	.word	0x00000b45
    148c:	95217cb1 	.word	0x95217cb1
    1490:	aaaaaaab 	.word	0xaaaaaaab
    1494:	45e7b273 	.word	0x45e7b273
    1498:	88888889 	.word	0x88888889
    149c:	10624dd3 	.word	0x10624dd3
    14a0:	00007a4c 	.word	0x00007a4c
    14a4:	20000200 	.word	0x20000200
    14a8:	20000220 	.word	0x20000220
    14ac:	00007a58 	.word	0x00007a58
    14b0:	20000240 	.word	0x20000240
    14b4:	00007ad4 	.word	0x00007ad4
    14b8:	00007a40 	.word	0x00007a40
    14bc:	00007aec 	.word	0x00007aec
    14c0:	00007ae0 	.word	0x00007ae0

000014c4 <Clock_Alarm_SetHour>:
static QState Clock_Alarm_SetHour(Clock_Alarm * const me) {
    14c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14c8:	b082      	sub	sp, #8
    14ca:	4604      	mov	r4, r0
    switch (Q_SIG(me)) {
    14cc:	7b03      	ldrb	r3, [r0, #12]
    14ce:	2b08      	cmp	r3, #8
    14d0:	d04d      	beq.n	156e <Clock_Alarm_SetHour+0xaa>
    14d2:	2b09      	cmp	r3, #9
    14d4:	f000 80a9 	beq.w	162a <Clock_Alarm_SetHour+0x166>
    14d8:	2b01      	cmp	r3, #1
    14da:	d003      	beq.n	14e4 <Clock_Alarm_SetHour+0x20>
            status_ = Q_SUPER(&Clock_Alarm_SetClock);
    14dc:	4b7c      	ldr	r3, [pc, #496]	; (16d0 <Clock_Alarm_SetHour+0x20c>)
    14de:	6083      	str	r3, [r0, #8]
    14e0:	2000      	movs	r0, #0
    return status_;
    14e2:	e03c      	b.n	155e <Clock_Alarm_SetHour+0x9a>
                        if(me->alarmStatus == 1){
    14e4:	7e03      	ldrb	r3, [r0, #24]
    14e6:	2b01      	cmp	r3, #1
    14e8:	d03c      	beq.n	1564 <Clock_Alarm_SetHour+0xa0>
                            sprintf(DisplayStringFirstLine,"Alarm - NO");
    14ea:	497a      	ldr	r1, [pc, #488]	; (16d4 <Clock_Alarm_SetHour+0x210>)
    14ec:	487a      	ldr	r0, [pc, #488]	; (16d8 <Clock_Alarm_SetHour+0x214>)
    14ee:	f001 fd17 	bl	2f20 <sprintf>
                        sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",((Clock_Alarm_currentTime/1000U/60U/60U)%24),((Clock_Alarm_currentTime/1000U/60U)%60U),((Clock_Alarm_currentTime/1000U)%60U));
    14f2:	4b7a      	ldr	r3, [pc, #488]	; (16dc <Clock_Alarm_SetHour+0x218>)
    14f4:	681c      	ldr	r4, [r3, #0]
    14f6:	4a7a      	ldr	r2, [pc, #488]	; (16e0 <Clock_Alarm_SetHour+0x21c>)
    14f8:	fba2 3204 	umull	r3, r2, r2, r4
    14fc:	0d52      	lsrs	r2, r2, #21
    14fe:	4e79      	ldr	r6, [pc, #484]	; (16e4 <Clock_Alarm_SetHour+0x220>)
    1500:	fba6 3604 	umull	r3, r6, r6, r4
    1504:	0bb6      	lsrs	r6, r6, #14
    1506:	4978      	ldr	r1, [pc, #480]	; (16e8 <Clock_Alarm_SetHour+0x224>)
    1508:	fba1 3404 	umull	r3, r4, r1, r4
    150c:	09a4      	lsrs	r4, r4, #6
    150e:	4977      	ldr	r1, [pc, #476]	; (16ec <Clock_Alarm_SetHour+0x228>)
    1510:	fba1 3006 	umull	r3, r0, r1, r6
    1514:	0940      	lsrs	r0, r0, #5
    1516:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
    151a:	4875      	ldr	r0, [pc, #468]	; (16f0 <Clock_Alarm_SetHour+0x22c>)
    151c:	fba0 5002 	umull	r5, r0, r0, r2
    1520:	0900      	lsrs	r0, r0, #4
    1522:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1526:	4d73      	ldr	r5, [pc, #460]	; (16f4 <Clock_Alarm_SetHour+0x230>)
    1528:	fba1 7104 	umull	r7, r1, r1, r4
    152c:	0949      	lsrs	r1, r1, #5
    152e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    1532:	eba4 0181 	sub.w	r1, r4, r1, lsl #2
    1536:	9100      	str	r1, [sp, #0]
    1538:	eba6 0383 	sub.w	r3, r6, r3, lsl #2
    153c:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    1540:	496d      	ldr	r1, [pc, #436]	; (16f8 <Clock_Alarm_SetHour+0x234>)
    1542:	4628      	mov	r0, r5
    1544:	f001 fcec 	bl	2f20 <sprintf>
                        sprintf(DisplayStringThirdLine,"Hour Set");
    1548:	4c6c      	ldr	r4, [pc, #432]	; (16fc <Clock_Alarm_SetHour+0x238>)
    154a:	496d      	ldr	r1, [pc, #436]	; (1700 <Clock_Alarm_SetHour+0x23c>)
    154c:	4620      	mov	r0, r4
    154e:	f001 fce7 	bl	2f20 <sprintf>
                        RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
    1552:	4622      	mov	r2, r4
    1554:	4629      	mov	r1, r5
    1556:	4860      	ldr	r0, [pc, #384]	; (16d8 <Clock_Alarm_SetHour+0x214>)
    1558:	f7ff fb18 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
    155c:	2003      	movs	r0, #3
}
    155e:	b002      	add	sp, #8
    1560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                            sprintf(DisplayStringFirstLine,"Alarm - YES");
    1564:	4967      	ldr	r1, [pc, #412]	; (1704 <Clock_Alarm_SetHour+0x240>)
    1566:	485c      	ldr	r0, [pc, #368]	; (16d8 <Clock_Alarm_SetHour+0x214>)
    1568:	f001 fcda 	bl	2f20 <sprintf>
    156c:	e7c1      	b.n	14f2 <Clock_Alarm_SetHour+0x2e>
            int hours = ((Clock_Alarm_currentTime/1000U/60U/60U)%24);
    156e:	4b5b      	ldr	r3, [pc, #364]	; (16dc <Clock_Alarm_SetHour+0x218>)
    1570:	6819      	ldr	r1, [r3, #0]
    1572:	4b5b      	ldr	r3, [pc, #364]	; (16e0 <Clock_Alarm_SetHour+0x21c>)
    1574:	fba3 2301 	umull	r2, r3, r3, r1
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	4a5d      	ldr	r2, [pc, #372]	; (16f0 <Clock_Alarm_SetHour+0x22c>)
    157c:	fba2 0203 	umull	r0, r2, r2, r3
    1580:	0912      	lsrs	r2, r2, #4
    1582:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1586:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
              int minutes = ((Clock_Alarm_currentTime/1000U/60U)%60);
    158a:	4e56      	ldr	r6, [pc, #344]	; (16e4 <Clock_Alarm_SetHour+0x220>)
    158c:	fba6 3601 	umull	r3, r6, r6, r1
    1590:	0bb6      	lsrs	r6, r6, #14
    1592:	4b56      	ldr	r3, [pc, #344]	; (16ec <Clock_Alarm_SetHour+0x228>)
    1594:	fba3 5006 	umull	r5, r0, r3, r6
    1598:	0940      	lsrs	r0, r0, #5
    159a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    159e:	eba6 0680 	sub.w	r6, r6, r0, lsl #2
              int seconds = ((Clock_Alarm_currentTime/1000U)%60);
    15a2:	4f51      	ldr	r7, [pc, #324]	; (16e8 <Clock_Alarm_SetHour+0x224>)
    15a4:	fba7 1701 	umull	r1, r7, r7, r1
    15a8:	09bf      	lsrs	r7, r7, #6
    15aa:	fba3 1307 	umull	r1, r3, r3, r7
    15ae:	095b      	lsrs	r3, r3, #5
    15b0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    15b4:	eba7 0783 	sub.w	r7, r7, r3, lsl #2
              hours = (hours+1)%24;
    15b8:	3201      	adds	r2, #1
    15ba:	4b53      	ldr	r3, [pc, #332]	; (1708 <Clock_Alarm_SetHour+0x244>)
    15bc:	fb83 1302 	smull	r1, r3, r3, r2
    15c0:	17d5      	asrs	r5, r2, #31
    15c2:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
    15c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    15ca:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
              if(me->alarmStatus == 1){
    15ce:	7e23      	ldrb	r3, [r4, #24]
    15d0:	2b01      	cmp	r3, #1
    15d2:	d025      	beq.n	1620 <Clock_Alarm_SetHour+0x15c>
                sprintf(DisplayStringFirstLine,"Alarm - NO");
    15d4:	493f      	ldr	r1, [pc, #252]	; (16d4 <Clock_Alarm_SetHour+0x210>)
    15d6:	4840      	ldr	r0, [pc, #256]	; (16d8 <Clock_Alarm_SetHour+0x214>)
    15d8:	f001 fca2 	bl	2f20 <sprintf>
              sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",hours,minutes,seconds);
    15dc:	4c45      	ldr	r4, [pc, #276]	; (16f4 <Clock_Alarm_SetHour+0x230>)
    15de:	9700      	str	r7, [sp, #0]
    15e0:	4633      	mov	r3, r6
    15e2:	462a      	mov	r2, r5
    15e4:	4944      	ldr	r1, [pc, #272]	; (16f8 <Clock_Alarm_SetHour+0x234>)
    15e6:	4620      	mov	r0, r4
    15e8:	f001 fc9a 	bl	2f20 <sprintf>
              sprintf(DisplayStringThirdLine,"Hour Set");
    15ec:	f8df 810c 	ldr.w	r8, [pc, #268]	; 16fc <Clock_Alarm_SetHour+0x238>
    15f0:	4943      	ldr	r1, [pc, #268]	; (1700 <Clock_Alarm_SetHour+0x23c>)
    15f2:	4640      	mov	r0, r8
    15f4:	f001 fc94 	bl	2f20 <sprintf>
              Clock_Alarm_currentTime = (hours*60*60*1000)+(minutes*60*1000)+(seconds*1000);
    15f8:	f64e 2360 	movw	r3, #60000	; 0xea60
    15fc:	fb03 f606 	mul.w	r6, r3, r6
    1600:	4b42      	ldr	r3, [pc, #264]	; (170c <Clock_Alarm_SetHour+0x248>)
    1602:	fb03 6505 	mla	r5, r3, r5, r6
    1606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    160a:	fb03 5507 	mla	r5, r3, r7, r5
    160e:	4b33      	ldr	r3, [pc, #204]	; (16dc <Clock_Alarm_SetHour+0x218>)
    1610:	601d      	str	r5, [r3, #0]
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
    1612:	4642      	mov	r2, r8
    1614:	4621      	mov	r1, r4
    1616:	4830      	ldr	r0, [pc, #192]	; (16d8 <Clock_Alarm_SetHour+0x214>)
    1618:	f7ff fab8 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
    161c:	2003      	movs	r0, #3
            break;
    161e:	e79e      	b.n	155e <Clock_Alarm_SetHour+0x9a>
                sprintf(DisplayStringFirstLine,"Alarm - YES");
    1620:	4938      	ldr	r1, [pc, #224]	; (1704 <Clock_Alarm_SetHour+0x240>)
    1622:	482d      	ldr	r0, [pc, #180]	; (16d8 <Clock_Alarm_SetHour+0x214>)
    1624:	f001 fc7c 	bl	2f20 <sprintf>
    1628:	e7d8      	b.n	15dc <Clock_Alarm_SetHour+0x118>
              int hours = ((Clock_Alarm_currentTime/1000U/60U/60U)%24);
    162a:	4b2c      	ldr	r3, [pc, #176]	; (16dc <Clock_Alarm_SetHour+0x218>)
    162c:	681b      	ldr	r3, [r3, #0]
    162e:	4d2c      	ldr	r5, [pc, #176]	; (16e0 <Clock_Alarm_SetHour+0x21c>)
    1630:	fba5 2503 	umull	r2, r5, r5, r3
    1634:	0d6d      	lsrs	r5, r5, #21
    1636:	4a2e      	ldr	r2, [pc, #184]	; (16f0 <Clock_Alarm_SetHour+0x22c>)
    1638:	fba2 1205 	umull	r1, r2, r2, r5
    163c:	0912      	lsrs	r2, r2, #4
    163e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1642:	eba5 05c2 	sub.w	r5, r5, r2, lsl #3
              int minutes = ((Clock_Alarm_currentTime/1000U/60U)%60);
    1646:	4927      	ldr	r1, [pc, #156]	; (16e4 <Clock_Alarm_SetHour+0x220>)
    1648:	fba1 2103 	umull	r2, r1, r1, r3
    164c:	0b89      	lsrs	r1, r1, #14
    164e:	4e27      	ldr	r6, [pc, #156]	; (16ec <Clock_Alarm_SetHour+0x228>)
    1650:	fba6 0201 	umull	r0, r2, r6, r1
    1654:	0952      	lsrs	r2, r2, #5
    1656:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    165a:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
              int seconds = ((Clock_Alarm_currentTime/1000U)%60);
    165e:	4922      	ldr	r1, [pc, #136]	; (16e8 <Clock_Alarm_SetHour+0x224>)
    1660:	fba1 1303 	umull	r1, r3, r1, r3
    1664:	099b      	lsrs	r3, r3, #6
    1666:	fba6 1703 	umull	r1, r7, r6, r3
    166a:	097f      	lsrs	r7, r7, #5
    166c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    1670:	eba3 0787 	sub.w	r7, r3, r7, lsl #2
              minutes = (minutes+1)%60;
    1674:	3201      	adds	r2, #1
    1676:	fb86 3602 	smull	r3, r6, r6, r2
    167a:	18b3      	adds	r3, r6, r2
    167c:	17d6      	asrs	r6, r2, #31
    167e:	ebc6 1663 	rsb	r6, r6, r3, asr #5
    1682:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    1686:	eba2 0686 	sub.w	r6, r2, r6, lsl #2
              if(me->alarmStatus == 1){
    168a:	7e23      	ldrb	r3, [r4, #24]
    168c:	2b01      	cmp	r3, #1
    168e:	d01a      	beq.n	16c6 <Clock_Alarm_SetHour+0x202>
                sprintf(DisplayStringFirstLine,"Alarm - NO");
    1690:	4910      	ldr	r1, [pc, #64]	; (16d4 <Clock_Alarm_SetHour+0x210>)
    1692:	4811      	ldr	r0, [pc, #68]	; (16d8 <Clock_Alarm_SetHour+0x214>)
    1694:	f001 fc44 	bl	2f20 <sprintf>
              sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",hours,minutes,seconds);
    1698:	f8df 8058 	ldr.w	r8, [pc, #88]	; 16f4 <Clock_Alarm_SetHour+0x230>
    169c:	9700      	str	r7, [sp, #0]
    169e:	4633      	mov	r3, r6
    16a0:	462a      	mov	r2, r5
    16a2:	4915      	ldr	r1, [pc, #84]	; (16f8 <Clock_Alarm_SetHour+0x234>)
    16a4:	4640      	mov	r0, r8
    16a6:	f001 fc3b 	bl	2f20 <sprintf>
              sprintf(DisplayStringThirdLine,"Clock Set");
    16aa:	4d14      	ldr	r5, [pc, #80]	; (16fc <Clock_Alarm_SetHour+0x238>)
    16ac:	4918      	ldr	r1, [pc, #96]	; (1710 <Clock_Alarm_SetHour+0x24c>)
    16ae:	4628      	mov	r0, r5
    16b0:	f001 fc36 	bl	2f20 <sprintf>
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
    16b4:	462a      	mov	r2, r5
    16b6:	4641      	mov	r1, r8
    16b8:	4807      	ldr	r0, [pc, #28]	; (16d8 <Clock_Alarm_SetHour+0x214>)
    16ba:	f7ff fa67 	bl	b8c <RefreshDisplay>
            status_ = Q_TRAN(&Clock_Alarm_SetMin);
    16be:	4b15      	ldr	r3, [pc, #84]	; (1714 <Clock_Alarm_SetHour+0x250>)
    16c0:	60a3      	str	r3, [r4, #8]
    16c2:	2008      	movs	r0, #8
            break;
    16c4:	e74b      	b.n	155e <Clock_Alarm_SetHour+0x9a>
                sprintf(DisplayStringFirstLine,"Alarm - YES");
    16c6:	490f      	ldr	r1, [pc, #60]	; (1704 <Clock_Alarm_SetHour+0x240>)
    16c8:	4803      	ldr	r0, [pc, #12]	; (16d8 <Clock_Alarm_SetHour+0x214>)
    16ca:	f001 fc29 	bl	2f20 <sprintf>
    16ce:	e7e3      	b.n	1698 <Clock_Alarm_SetHour+0x1d4>
    16d0:	00000b25 	.word	0x00000b25
    16d4:	00007a4c 	.word	0x00007a4c
    16d8:	20000200 	.word	0x20000200
    16dc:	200001dc 	.word	0x200001dc
    16e0:	95217cb1 	.word	0x95217cb1
    16e4:	45e7b273 	.word	0x45e7b273
    16e8:	10624dd3 	.word	0x10624dd3
    16ec:	88888889 	.word	0x88888889
    16f0:	aaaaaaab 	.word	0xaaaaaaab
    16f4:	20000220 	.word	0x20000220
    16f8:	00007a58 	.word	0x00007a58
    16fc:	20000240 	.word	0x20000240
    1700:	00007af4 	.word	0x00007af4
    1704:	00007a40 	.word	0x00007a40
    1708:	2aaaaaab 	.word	0x2aaaaaab
    170c:	0036ee80 	.word	0x0036ee80
    1710:	00007ab0 	.word	0x00007ab0
    1714:	00001719 	.word	0x00001719

00001718 <Clock_Alarm_SetMin>:
static QState Clock_Alarm_SetMin(Clock_Alarm * const me) {
    1718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    171c:	b082      	sub	sp, #8
    switch (Q_SIG(me)) {
    171e:	7b03      	ldrb	r3, [r0, #12]
    1720:	2b01      	cmp	r3, #1
    1722:	d005      	beq.n	1730 <Clock_Alarm_SetMin+0x18>
    1724:	2b08      	cmp	r3, #8
    1726:	d04e      	beq.n	17c6 <Clock_Alarm_SetMin+0xae>
            status_ = Q_SUPER(&Clock_Alarm_SetClock);
    1728:	4b56      	ldr	r3, [pc, #344]	; (1884 <Clock_Alarm_SetMin+0x16c>)
    172a:	6083      	str	r3, [r0, #8]
    172c:	2000      	movs	r0, #0
    return status_;
    172e:	e042      	b.n	17b6 <Clock_Alarm_SetMin+0x9e>
                        if(me->alarmStatus == 1){
    1730:	7e03      	ldrb	r3, [r0, #24]
    1732:	2b01      	cmp	r3, #1
    1734:	d042      	beq.n	17bc <Clock_Alarm_SetMin+0xa4>
                            sprintf(DisplayStringFirstLine,"Alarm - NO");
    1736:	4954      	ldr	r1, [pc, #336]	; (1888 <Clock_Alarm_SetMin+0x170>)
    1738:	4854      	ldr	r0, [pc, #336]	; (188c <Clock_Alarm_SetMin+0x174>)
    173a:	f001 fbf1 	bl	2f20 <sprintf>
                        sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",((Clock_Alarm_currentTime/1000U/60U/60U)%24),((Clock_Alarm_currentTime/1000U/60U)%60U),((Clock_Alarm_currentTime/1000U)%60U));
    173e:	4b54      	ldr	r3, [pc, #336]	; (1890 <Clock_Alarm_SetMin+0x178>)
    1740:	6819      	ldr	r1, [r3, #0]
    1742:	4a54      	ldr	r2, [pc, #336]	; (1894 <Clock_Alarm_SetMin+0x17c>)
    1744:	fba2 3201 	umull	r3, r2, r2, r1
    1748:	0d52      	lsrs	r2, r2, #21
    174a:	4e53      	ldr	r6, [pc, #332]	; (1898 <Clock_Alarm_SetMin+0x180>)
    174c:	fba6 3601 	umull	r3, r6, r6, r1
    1750:	0bb6      	lsrs	r6, r6, #14
    1752:	4b52      	ldr	r3, [pc, #328]	; (189c <Clock_Alarm_SetMin+0x184>)
    1754:	fba3 3101 	umull	r3, r1, r3, r1
    1758:	0989      	lsrs	r1, r1, #6
    175a:	4851      	ldr	r0, [pc, #324]	; (18a0 <Clock_Alarm_SetMin+0x188>)
    175c:	fba0 3406 	umull	r3, r4, r0, r6
    1760:	0964      	lsrs	r4, r4, #5
    1762:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
    1766:	4c4f      	ldr	r4, [pc, #316]	; (18a4 <Clock_Alarm_SetMin+0x18c>)
    1768:	fba4 5402 	umull	r5, r4, r4, r2
    176c:	0924      	lsrs	r4, r4, #4
    176e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1772:	4d4d      	ldr	r5, [pc, #308]	; (18a8 <Clock_Alarm_SetMin+0x190>)
    1774:	fba0 7001 	umull	r7, r0, r0, r1
    1778:	0940      	lsrs	r0, r0, #5
    177a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    177e:	eba1 0080 	sub.w	r0, r1, r0, lsl #2
    1782:	9000      	str	r0, [sp, #0]
    1784:	eba6 0383 	sub.w	r3, r6, r3, lsl #2
    1788:	eba2 02c4 	sub.w	r2, r2, r4, lsl #3
    178c:	4947      	ldr	r1, [pc, #284]	; (18ac <Clock_Alarm_SetMin+0x194>)
    178e:	4628      	mov	r0, r5
    1790:	f001 fbc6 	bl	2f20 <sprintf>
                        sprintf(DisplayStringThirdLine,"Minute Set");
    1794:	4c46      	ldr	r4, [pc, #280]	; (18b0 <Clock_Alarm_SetMin+0x198>)
    1796:	4947      	ldr	r1, [pc, #284]	; (18b4 <Clock_Alarm_SetMin+0x19c>)
    1798:	4620      	mov	r0, r4
    179a:	f001 fbc1 	bl	2f20 <sprintf>
                        RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
    179e:	4e3b      	ldr	r6, [pc, #236]	; (188c <Clock_Alarm_SetMin+0x174>)
    17a0:	4622      	mov	r2, r4
    17a2:	4629      	mov	r1, r5
    17a4:	4630      	mov	r0, r6
    17a6:	f7ff f9f1 	bl	b8c <RefreshDisplay>
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
    17aa:	4622      	mov	r2, r4
    17ac:	4629      	mov	r1, r5
    17ae:	4630      	mov	r0, r6
    17b0:	f7ff f9ec 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
    17b4:	2003      	movs	r0, #3
}
    17b6:	b002      	add	sp, #8
    17b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                            sprintf(DisplayStringFirstLine,"Alarm - YES");
    17bc:	493e      	ldr	r1, [pc, #248]	; (18b8 <Clock_Alarm_SetMin+0x1a0>)
    17be:	4833      	ldr	r0, [pc, #204]	; (188c <Clock_Alarm_SetMin+0x174>)
    17c0:	f001 fbae 	bl	2f20 <sprintf>
    17c4:	e7bb      	b.n	173e <Clock_Alarm_SetMin+0x26>
              int hours = ((Clock_Alarm_currentTime/1000U/60U/60U)%24);
    17c6:	4b32      	ldr	r3, [pc, #200]	; (1890 <Clock_Alarm_SetMin+0x178>)
    17c8:	681b      	ldr	r3, [r3, #0]
    17ca:	4d32      	ldr	r5, [pc, #200]	; (1894 <Clock_Alarm_SetMin+0x17c>)
    17cc:	fba5 2503 	umull	r2, r5, r5, r3
    17d0:	0d6d      	lsrs	r5, r5, #21
    17d2:	4a34      	ldr	r2, [pc, #208]	; (18a4 <Clock_Alarm_SetMin+0x18c>)
    17d4:	fba2 1205 	umull	r1, r2, r2, r5
    17d8:	0912      	lsrs	r2, r2, #4
    17da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    17de:	eba5 05c2 	sub.w	r5, r5, r2, lsl #3
              int minutes = ((Clock_Alarm_currentTime/1000U/60U)%60);
    17e2:	492d      	ldr	r1, [pc, #180]	; (1898 <Clock_Alarm_SetMin+0x180>)
    17e4:	fba1 2103 	umull	r2, r1, r1, r3
    17e8:	0b89      	lsrs	r1, r1, #14
    17ea:	4c2d      	ldr	r4, [pc, #180]	; (18a0 <Clock_Alarm_SetMin+0x188>)
    17ec:	fba4 6201 	umull	r6, r2, r4, r1
    17f0:	0952      	lsrs	r2, r2, #5
    17f2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    17f6:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
              int seconds = ((Clock_Alarm_currentTime/1000U)%60);
    17fa:	4e28      	ldr	r6, [pc, #160]	; (189c <Clock_Alarm_SetMin+0x184>)
    17fc:	fba6 1303 	umull	r1, r3, r6, r3
    1800:	099b      	lsrs	r3, r3, #6
    1802:	fba4 1603 	umull	r1, r6, r4, r3
    1806:	0976      	lsrs	r6, r6, #5
    1808:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    180c:	eba3 0686 	sub.w	r6, r3, r6, lsl #2
              minutes = (minutes+1)%60;
    1810:	3201      	adds	r2, #1
    1812:	fb84 3402 	smull	r3, r4, r4, r2
    1816:	4414      	add	r4, r2
    1818:	17d3      	asrs	r3, r2, #31
    181a:	ebc3 1464 	rsb	r4, r3, r4, asr #5
    181e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    1822:	eba2 0484 	sub.w	r4, r2, r4, lsl #2
              if(me->alarmStatus == 1){
    1826:	7e03      	ldrb	r3, [r0, #24]
    1828:	2b01      	cmp	r3, #1
    182a:	d025      	beq.n	1878 <Clock_Alarm_SetMin+0x160>
                sprintf(DisplayStringFirstLine,"Alarm - NO");
    182c:	4916      	ldr	r1, [pc, #88]	; (1888 <Clock_Alarm_SetMin+0x170>)
    182e:	4817      	ldr	r0, [pc, #92]	; (188c <Clock_Alarm_SetMin+0x174>)
    1830:	f001 fb76 	bl	2f20 <sprintf>
              sprintf(DisplayStringSecondLine,"%02d-%02d-%02d",hours,minutes,seconds);
    1834:	4f1c      	ldr	r7, [pc, #112]	; (18a8 <Clock_Alarm_SetMin+0x190>)
    1836:	9600      	str	r6, [sp, #0]
    1838:	4623      	mov	r3, r4
    183a:	462a      	mov	r2, r5
    183c:	491b      	ldr	r1, [pc, #108]	; (18ac <Clock_Alarm_SetMin+0x194>)
    183e:	4638      	mov	r0, r7
    1840:	f001 fb6e 	bl	2f20 <sprintf>
              sprintf(DisplayStringThirdLine,"Minute Set");
    1844:	f8df 8068 	ldr.w	r8, [pc, #104]	; 18b0 <Clock_Alarm_SetMin+0x198>
    1848:	491a      	ldr	r1, [pc, #104]	; (18b4 <Clock_Alarm_SetMin+0x19c>)
    184a:	4640      	mov	r0, r8
    184c:	f001 fb68 	bl	2f20 <sprintf>
              Clock_Alarm_currentTime = (hours*60*60*1000)+(minutes*60*1000)+(seconds*1000);
    1850:	f64e 2360 	movw	r3, #60000	; 0xea60
    1854:	fb03 f404 	mul.w	r4, r3, r4
    1858:	4b18      	ldr	r3, [pc, #96]	; (18bc <Clock_Alarm_SetMin+0x1a4>)
    185a:	fb03 4505 	mla	r5, r3, r5, r4
    185e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    1862:	fb04 5606 	mla	r6, r4, r6, r5
    1866:	4b0a      	ldr	r3, [pc, #40]	; (1890 <Clock_Alarm_SetMin+0x178>)
    1868:	601e      	str	r6, [r3, #0]
            RefreshDisplay(&DisplayStringFirstLine,&DisplayStringSecondLine,&DisplayStringThirdLine);
    186a:	4642      	mov	r2, r8
    186c:	4639      	mov	r1, r7
    186e:	4807      	ldr	r0, [pc, #28]	; (188c <Clock_Alarm_SetMin+0x174>)
    1870:	f7ff f98c 	bl	b8c <RefreshDisplay>
            status_ = Q_HANDLED();
    1874:	2003      	movs	r0, #3
            break;
    1876:	e79e      	b.n	17b6 <Clock_Alarm_SetMin+0x9e>
                sprintf(DisplayStringFirstLine,"Alarm - YES");
    1878:	490f      	ldr	r1, [pc, #60]	; (18b8 <Clock_Alarm_SetMin+0x1a0>)
    187a:	4804      	ldr	r0, [pc, #16]	; (188c <Clock_Alarm_SetMin+0x174>)
    187c:	f001 fb50 	bl	2f20 <sprintf>
    1880:	e7d8      	b.n	1834 <Clock_Alarm_SetMin+0x11c>
    1882:	bf00      	nop
    1884:	00000b25 	.word	0x00000b25
    1888:	00007a4c 	.word	0x00007a4c
    188c:	20000200 	.word	0x20000200
    1890:	200001dc 	.word	0x200001dc
    1894:	95217cb1 	.word	0x95217cb1
    1898:	45e7b273 	.word	0x45e7b273
    189c:	10624dd3 	.word	0x10624dd3
    18a0:	88888889 	.word	0x88888889
    18a4:	aaaaaaab 	.word	0xaaaaaaab
    18a8:	20000220 	.word	0x20000220
    18ac:	00007a58 	.word	0x00007a58
    18b0:	20000240 	.word	0x20000240
    18b4:	00007b00 	.word	0x00007b00
    18b8:	00007a40 	.word	0x00007a40
    18bc:	0036ee80 	.word	0x0036ee80

000018c0 <u8g2_m_16_8_1>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 1;
  return 0;
  #else
  static uint8_t buf[128];
  *page_cnt = 1;
    18c0:	2301      	movs	r3, #1
    18c2:	7003      	strb	r3, [r0, #0]
  return buf;
  #endif
}
    18c4:	4800      	ldr	r0, [pc, #0]	; (18c8 <u8g2_m_16_8_1+0x8>)
    18c6:	4770      	bx	lr
    18c8:	200002f4 	.word	0x200002f4

000018cc <u8g2_Setup_st7565_zolen_128x64_1>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_zolen_128x64_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    18cc:	b530      	push	{r4, r5, lr}
    18ce:	b085      	sub	sp, #20
    18d0:	4604      	mov	r4, r0
    18d2:	460d      	mov	r5, r1
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_zolen_128x64, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
    18d4:	9300      	str	r3, [sp, #0]
    18d6:	4613      	mov	r3, r2
    18d8:	4a08      	ldr	r2, [pc, #32]	; (18fc <u8g2_Setup_st7565_zolen_128x64_1+0x30>)
    18da:	4909      	ldr	r1, [pc, #36]	; (1900 <u8g2_Setup_st7565_zolen_128x64_1+0x34>)
    18dc:	f004 fd1c 	bl	6318 <u8x8_Setup>
  buf = u8g2_m_16_8_1(&tile_buf_height);
    18e0:	f10d 000f 	add.w	r0, sp, #15
    18e4:	f7ff ffec 	bl	18c0 <u8g2_m_16_8_1>
    18e8:	4601      	mov	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    18ea:	9500      	str	r5, [sp, #0]
    18ec:	4b05      	ldr	r3, [pc, #20]	; (1904 <u8g2_Setup_st7565_zolen_128x64_1+0x38>)
    18ee:	f89d 200f 	ldrb.w	r2, [sp, #15]
    18f2:	4620      	mov	r0, r4
    18f4:	f004 fbd4 	bl	60a0 <u8g2_SetupBuffer>
}
    18f8:	b005      	add	sp, #20
    18fa:	bd30      	pop	{r4, r5, pc}
    18fc:	000061eb 	.word	0x000061eb
    1900:	00001a65 	.word	0x00001a65
    1904:	00005edd 	.word	0x00005edd

00001908 <u8g2_draw_string>:
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
    1908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    190c:	4604      	mov	r4, r0
    190e:	460f      	mov	r7, r1
    1910:	4616      	mov	r6, r2
    1912:	461d      	mov	r5, r3
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
    1914:	f004 fbef 	bl	60f6 <u8x8_utf8_init>
  sum = 0;
    1918:	f04f 0800 	mov.w	r8, #0
    191c:	e004      	b.n	1928 <u8g2_draw_string+0x20>
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
      {
	case 0:
	  x += delta;
    191e:	4407      	add	r7, r0
    1920:	b2bf      	uxth	r7, r7

#else
      x += delta;
#endif

      sum += delta;    
    1922:	4440      	add	r0, r8
    1924:	fa1f f880 	uxth.w	r8, r0
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    1928:	6863      	ldr	r3, [r4, #4]
    192a:	7829      	ldrb	r1, [r5, #0]
    192c:	4620      	mov	r0, r4
    192e:	4798      	blx	r3
    if ( e == 0x0ffff )
    1930:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1934:	4290      	cmp	r0, r2
    1936:	d022      	beq.n	197e <u8g2_draw_string+0x76>
    str++;
    1938:	3501      	adds	r5, #1
    if ( e != 0x0fffe )
    193a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    193e:	4290      	cmp	r0, r2
    1940:	d0f2      	beq.n	1928 <u8g2_draw_string+0x20>
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
    1942:	4603      	mov	r3, r0
    1944:	4632      	mov	r2, r6
    1946:	4639      	mov	r1, r7
    1948:	4620      	mov	r0, r4
    194a:	f004 f9a3 	bl	5c94 <u8g2_DrawGlyph>
      switch(u8g2->font_decode.dir)
    194e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    1952:	2b03      	cmp	r3, #3
    1954:	d8e5      	bhi.n	1922 <u8g2_draw_string+0x1a>
    1956:	a201      	add	r2, pc, #4	; (adr r2, 195c <u8g2_draw_string+0x54>)
    1958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    195c:	0000191f 	.word	0x0000191f
    1960:	0000196d 	.word	0x0000196d
    1964:	00001973 	.word	0x00001973
    1968:	00001979 	.word	0x00001979
	  y += delta;
    196c:	4406      	add	r6, r0
    196e:	b2b6      	uxth	r6, r6
	  break;
    1970:	e7d7      	b.n	1922 <u8g2_draw_string+0x1a>
	  x -= delta;
    1972:	1a3f      	subs	r7, r7, r0
    1974:	b2bf      	uxth	r7, r7
	  break;
    1976:	e7d4      	b.n	1922 <u8g2_draw_string+0x1a>
	  y -= delta;
    1978:	1a36      	subs	r6, r6, r0
    197a:	b2b6      	uxth	r6, r6
	  break;
    197c:	e7d1      	b.n	1922 <u8g2_draw_string+0x1a>
    }
  }
  return sum;
}
    197e:	4640      	mov	r0, r8
    1980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001984 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
    1984:	b510      	push	{r4, lr}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
    1986:	4c02      	ldr	r4, [pc, #8]	; (1990 <u8g2_DrawStr+0xc>)
    1988:	6044      	str	r4, [r0, #4]
  return u8g2_draw_string(u8g2, x, y, str);
    198a:	f7ff ffbd 	bl	1908 <u8g2_draw_string>
}
    198e:	bd10      	pop	{r4, pc}
    1990:	000060e1 	.word	0x000060e1

00001994 <u8g2_SetFontPosBaseline>:
  return 0;
}

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
    1994:	4b01      	ldr	r3, [pc, #4]	; (199c <u8g2_SetFontPosBaseline+0x8>)
    1996:	65c3      	str	r3, [r0, #92]	; 0x5c
}
    1998:	4770      	bx	lr
    199a:	bf00      	nop
    199c:	0000583b 	.word	0x0000583b

000019a0 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    19a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    19a4:	4605      	mov	r5, r0
    19a6:	4614      	mov	r4, r2
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    19a8:	290e      	cmp	r1, #14
    19aa:	d047      	beq.n	1a3c <u8x8_d_st7565_common+0x9c>
    19ac:	461e      	mov	r6, r3
    19ae:	290f      	cmp	r1, #15
    19b0:	d004      	beq.n	19bc <u8x8_d_st7565_common+0x1c>
    19b2:	290b      	cmp	r1, #11
    19b4:	d037      	beq.n	1a26 <u8x8_d_st7565_common+0x86>
    19b6:	2000      	movs	r0, #0
#endif
    default:
      return 0;
  }
  return 1;
}
    19b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_cad_StartTransfer(u8x8);
    19bc:	f004 fbce 	bl	615c <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
    19c0:	7971      	ldrb	r1, [r6, #5]
      x *= 8;
    19c2:	00c9      	lsls	r1, r1, #3
    19c4:	b2cb      	uxtb	r3, r1
      x += u8x8->x_offset;
    19c6:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    19ca:	4419      	add	r1, r3
    19cc:	fa5f f881 	uxtb.w	r8, r1
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    19d0:	f3c1 1103 	ubfx	r1, r1, #4, #4
    19d4:	f041 0110 	orr.w	r1, r1, #16
    19d8:	4628      	mov	r0, r5
    19da:	f004 fbaa 	bl	6132 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
    19de:	f008 010f 	and.w	r1, r8, #15
    19e2:	4628      	mov	r0, r5
    19e4:	f004 fba5 	bl	6132 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
    19e8:	79b1      	ldrb	r1, [r6, #6]
    19ea:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
    19ee:	4628      	mov	r0, r5
    19f0:	f004 fb9f 	bl	6132 <u8x8_cad_SendCmd>
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
    19f4:	7937      	ldrb	r7, [r6, #4]
      c *= 8;
    19f6:	00ff      	lsls	r7, r7, #3
    19f8:	b2ff      	uxtb	r7, r7
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
    19fa:	6836      	ldr	r6, [r6, #0]
      if ( c + x > 132u )
    19fc:	eb07 0308 	add.w	r3, r7, r8
    1a00:	2b84      	cmp	r3, #132	; 0x84
    1a02:	d902      	bls.n	1a0a <u8x8_d_st7565_common+0x6a>
	c -= x;
    1a04:	f1c8 0784 	rsb	r7, r8, #132	; 0x84
    1a08:	b2ff      	uxtb	r7, r7
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
    1a0a:	4632      	mov	r2, r6
    1a0c:	4639      	mov	r1, r7
    1a0e:	4628      	mov	r0, r5
    1a10:	f004 fb9d 	bl	614e <u8x8_cad_SendData>
	arg_int--;
    1a14:	1e62      	subs	r2, r4, #1
      } while( arg_int > 0 );
    1a16:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    1a1a:	d1f6      	bne.n	1a0a <u8x8_d_st7565_common+0x6a>
      u8x8_cad_EndTransfer(u8x8);
    1a1c:	4628      	mov	r0, r5
    1a1e:	f004 fba4 	bl	616a <u8x8_cad_EndTransfer>
  return 1;
    1a22:	2001      	movs	r0, #1
      break;
    1a24:	e7c8      	b.n	19b8 <u8x8_d_st7565_common+0x18>
      if ( arg_int == 0 )
    1a26:	b922      	cbnz	r2, 1a32 <u8x8_d_st7565_common+0x92>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
    1a28:	490c      	ldr	r1, [pc, #48]	; (1a5c <u8x8_d_st7565_common+0xbc>)
    1a2a:	f004 fba5 	bl	6178 <u8x8_cad_SendSequence>
  return 1;
    1a2e:	2001      	movs	r0, #1
    1a30:	e7c2      	b.n	19b8 <u8x8_d_st7565_common+0x18>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
    1a32:	490b      	ldr	r1, [pc, #44]	; (1a60 <u8x8_d_st7565_common+0xc0>)
    1a34:	f004 fba0 	bl	6178 <u8x8_cad_SendSequence>
  return 1;
    1a38:	2001      	movs	r0, #1
    1a3a:	e7bd      	b.n	19b8 <u8x8_d_st7565_common+0x18>
      u8x8_cad_StartTransfer(u8x8);
    1a3c:	f004 fb8e 	bl	615c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    1a40:	2181      	movs	r1, #129	; 0x81
    1a42:	4628      	mov	r0, r5
    1a44:	f004 fb75 	bl	6132 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
    1a48:	08a1      	lsrs	r1, r4, #2
    1a4a:	4628      	mov	r0, r5
    1a4c:	f004 fb78 	bl	6140 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    1a50:	4628      	mov	r0, r5
    1a52:	f004 fb8a 	bl	616a <u8x8_cad_EndTransfer>
  return 1;
    1a56:	2001      	movs	r0, #1
      break;
    1a58:	e7ae      	b.n	19b8 <u8x8_d_st7565_common+0x18>
    1a5a:	bf00      	nop
    1a5c:	00008370 	.word	0x00008370
    1a60:	00008378 	.word	0x00008378

00001a64 <u8x8_d_st7565_zolen_128x64>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_zolen_128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1a64:	b570      	push	{r4, r5, r6, lr}
    1a66:	4606      	mov	r6, r0
    1a68:	460c      	mov	r4, r1
    1a6a:	4615      	mov	r5, r2
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
    1a6c:	f7ff ff98 	bl	19a0 <u8x8_d_st7565_common>
    1a70:	bb48      	cbnz	r0, 1ac6 <u8x8_d_st7565_zolen_128x64+0x62>
  {
    /* msg not handled, then try here */
    switch(msg)
    1a72:	2c0a      	cmp	r4, #10
    1a74:	d009      	beq.n	1a8a <u8x8_d_st7565_zolen_128x64+0x26>
    1a76:	2c0d      	cmp	r4, #13
    1a78:	d010      	beq.n	1a9c <u8x8_d_st7565_zolen_128x64+0x38>
    1a7a:	2c09      	cmp	r4, #9
    1a7c:	d124      	bne.n	1ac8 <u8x8_d_st7565_zolen_128x64+0x64>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_128x64_display_info);
    1a7e:	4913      	ldr	r1, [pc, #76]	; (1acc <u8x8_d_st7565_zolen_128x64+0x68>)
    1a80:	4630      	mov	r0, r6
    1a82:	f004 fbe1 	bl	6248 <u8x8_d_helper_display_setup_memory>
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    1a86:	2001      	movs	r0, #1
	break;
    1a88:	e01e      	b.n	1ac8 <u8x8_d_st7565_zolen_128x64+0x64>
	u8x8_d_helper_display_init(u8x8);
    1a8a:	4630      	mov	r0, r6
    1a8c:	f004 fbe1 	bl	6252 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zolen_128x64_init_seq);
    1a90:	490f      	ldr	r1, [pc, #60]	; (1ad0 <u8x8_d_st7565_zolen_128x64+0x6c>)
    1a92:	4630      	mov	r0, r6
    1a94:	f004 fb70 	bl	6178 <u8x8_cad_SendSequence>
  return 1;
    1a98:	2001      	movs	r0, #1
	break;
    1a9a:	e015      	b.n	1ac8 <u8x8_d_st7565_zolen_128x64+0x64>
	if ( arg_int == 0 )
    1a9c:	b94d      	cbnz	r5, 1ab2 <u8x8_d_st7565_zolen_128x64+0x4e>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zflip0_seq);
    1a9e:	490d      	ldr	r1, [pc, #52]	; (1ad4 <u8x8_d_st7565_zolen_128x64+0x70>)
    1aa0:	4630      	mov	r0, r6
    1aa2:	f004 fb69 	bl	6178 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
    1aa6:	6833      	ldr	r3, [r6, #0]
    1aa8:	7c9b      	ldrb	r3, [r3, #18]
    1aaa:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
  return 1;
    1aae:	2001      	movs	r0, #1
    1ab0:	e00a      	b.n	1ac8 <u8x8_d_st7565_zolen_128x64+0x64>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zflip1_seq);
    1ab2:	4909      	ldr	r1, [pc, #36]	; (1ad8 <u8x8_d_st7565_zolen_128x64+0x74>)
    1ab4:	4630      	mov	r0, r6
    1ab6:	f004 fb5f 	bl	6178 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    1aba:	6833      	ldr	r3, [r6, #0]
    1abc:	7cdb      	ldrb	r3, [r3, #19]
    1abe:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
  return 1;
    1ac2:	2001      	movs	r0, #1
    1ac4:	e000      	b.n	1ac8 <u8x8_d_st7565_zolen_128x64+0x64>
    1ac6:	2001      	movs	r0, #1
}
    1ac8:	bd70      	pop	{r4, r5, r6, pc}
    1aca:	bf00      	nop
    1acc:	000083b4 	.word	0x000083b4
    1ad0:	00008390 	.word	0x00008390
    1ad4:	00008380 	.word	0x00008380
    1ad8:	00008388 	.word	0x00008388

00001adc <u8x8_SetupDefaults>:
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
    1adc:	2300      	movs	r3, #0
    1ade:	6003      	str	r3, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
    1ae0:	4a07      	ldr	r2, [pc, #28]	; (1b00 <u8x8_SetupDefaults+0x24>)
    1ae2:	6082      	str	r2, [r0, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
    1ae4:	60c2      	str	r2, [r0, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
    1ae6:	6102      	str	r2, [r0, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    1ae8:	6142      	str	r2, [r0, #20]
    u8x8->is_font_inverse_mode = 0;
    1aea:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    1aee:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
    1af2:	6183      	str	r3, [r0, #24]
    u8x8->i2c_address = 255;
    1af4:	23ff      	movs	r3, #255	; 0xff
    1af6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    1afa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
    1afe:	4770      	bx	lr
    1b00:	00006315 	.word	0x00006315

00001b04 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    1b04:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1b06:	680b      	ldr	r3, [r1, #0]
    1b08:	3301      	adds	r3, #1
    1b0a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1b0c:	4b01      	ldr	r3, [pc, #4]	; (1b14 <char_out+0x10>)
    1b0e:	681b      	ldr	r3, [r3, #0]
    1b10:	4798      	blx	r3
}
    1b12:	bd08      	pop	{r3, pc}
    1b14:	20000000 	.word	0x20000000

00001b18 <__printk_hook_install>:
	_char_out = fn;
    1b18:	4b01      	ldr	r3, [pc, #4]	; (1b20 <__printk_hook_install+0x8>)
    1b1a:	6018      	str	r0, [r3, #0]
}
    1b1c:	4770      	bx	lr
    1b1e:	bf00      	nop
    1b20:	20000000 	.word	0x20000000

00001b24 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1b24:	b500      	push	{lr}
    1b26:	b083      	sub	sp, #12
    1b28:	4602      	mov	r2, r0
    1b2a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1b2c:	2100      	movs	r1, #0
    1b2e:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1b30:	a901      	add	r1, sp, #4
    1b32:	4803      	ldr	r0, [pc, #12]	; (1b40 <vprintk+0x1c>)
    1b34:	f000 f8c8 	bl	1cc8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1b38:	b003      	add	sp, #12
    1b3a:	f85d fb04 	ldr.w	pc, [sp], #4
    1b3e:	bf00      	nop
    1b40:	00001b05 	.word	0x00001b05

00001b44 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1b44:	b510      	push	{r4, lr}
    1b46:	b084      	sub	sp, #16
    1b48:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1b4a:	9001      	str	r0, [sp, #4]
    1b4c:	9102      	str	r1, [sp, #8]
    1b4e:	2100      	movs	r1, #0
    1b50:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    1b52:	a901      	add	r1, sp, #4
    1b54:	4805      	ldr	r0, [pc, #20]	; (1b6c <vsnprintk+0x28>)
    1b56:	f000 f8b7 	bl	1cc8 <cbvprintf>

	if (ctx.count < ctx.max) {
    1b5a:	9b03      	ldr	r3, [sp, #12]
    1b5c:	9a02      	ldr	r2, [sp, #8]
    1b5e:	4293      	cmp	r3, r2
    1b60:	da01      	bge.n	1b66 <vsnprintk+0x22>
		str[ctx.count] = '\0';
    1b62:	2200      	movs	r2, #0
    1b64:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    1b66:	9803      	ldr	r0, [sp, #12]
    1b68:	b004      	add	sp, #16
    1b6a:	bd10      	pop	{r4, pc}
    1b6c:	00006385 	.word	0x00006385

00001b70 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1b74:	b083      	sub	sp, #12
    1b76:	4604      	mov	r4, r0
    1b78:	4608      	mov	r0, r1
    1b7a:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1b7c:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1b7e:	f013 0f08 	tst.w	r3, #8
    1b82:	d105      	bne.n	1b90 <process_event+0x20>
    1b84:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1b88:	2300      	movs	r3, #0
    1b8a:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    1b8c:	9301      	str	r3, [sp, #4]
}
    1b8e:	e069      	b.n	1c64 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    1b90:	2901      	cmp	r1, #1
    1b92:	d009      	beq.n	1ba8 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1b94:	f043 0320 	orr.w	r3, r3, #32
    1b98:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1b9a:	f385 8811 	msr	BASEPRI, r5
    1b9e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1ba2:	b003      	add	sp, #12
    1ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1ba8:	f043 0310 	orr.w	r3, r3, #16
    1bac:	8323      	strh	r3, [r4, #24]
    1bae:	e7f4      	b.n	1b9a <process_event+0x2a>
			evt = process_recheck(mgr);
    1bb0:	4620      	mov	r0, r4
    1bb2:	f004 fc42 	bl	643a <process_recheck>
    1bb6:	e057      	b.n	1c68 <process_event+0xf8>
			res = mgr->last_res;
    1bb8:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    1bbc:	464a      	mov	r2, r9
    1bbe:	4669      	mov	r1, sp
    1bc0:	4620      	mov	r0, r4
    1bc2:	f004 fc53 	bl	646c <process_complete>
		onoff_transition_fn transit = NULL;
    1bc6:	2700      	movs	r7, #0
    1bc8:	e05a      	b.n	1c80 <process_event+0x110>
			transit = mgr->transitions->start;
    1bca:	6923      	ldr	r3, [r4, #16]
    1bcc:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    1bce:	2106      	movs	r1, #6
    1bd0:	4620      	mov	r0, r4
    1bd2:	f004 fc0b 	bl	63ec <set_state>
		res = 0;
    1bd6:	f04f 0900 	mov.w	r9, #0
    1bda:	e051      	b.n	1c80 <process_event+0x110>
			transit = mgr->transitions->stop;
    1bdc:	6923      	ldr	r3, [r4, #16]
    1bde:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    1be0:	2104      	movs	r1, #4
    1be2:	4620      	mov	r0, r4
    1be4:	f004 fc02 	bl	63ec <set_state>
		res = 0;
    1be8:	f04f 0900 	mov.w	r9, #0
    1bec:	e048      	b.n	1c80 <process_event+0x110>
			transit = mgr->transitions->reset;
    1bee:	6923      	ldr	r3, [r4, #16]
    1bf0:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    1bf2:	2105      	movs	r1, #5
    1bf4:	4620      	mov	r0, r4
    1bf6:	f004 fbf9 	bl	63ec <set_state>
		res = 0;
    1bfa:	f04f 0900 	mov.w	r9, #0
    1bfe:	e03f      	b.n	1c80 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    1c00:	2200      	movs	r2, #0
    1c02:	e046      	b.n	1c92 <process_event+0x122>
    1c04:	2200      	movs	r2, #0
    1c06:	e044      	b.n	1c92 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1c08:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    1c0c:	8323      	strh	r3, [r4, #24]
    1c0e:	f385 8811 	msr	BASEPRI, r5
    1c12:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1c16:	2900      	cmp	r1, #0
    1c18:	d144      	bne.n	1ca4 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1c1a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    1c1c:	b12b      	cbz	r3, 1c2a <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    1c1e:	464b      	mov	r3, r9
    1c20:	4642      	mov	r2, r8
    1c22:	4669      	mov	r1, sp
    1c24:	4620      	mov	r0, r4
    1c26:	f004 fc97 	bl	6558 <notify_all>
			if (transit != NULL) {
    1c2a:	b117      	cbz	r7, 1c32 <process_event+0xc2>
				transit(mgr, transition_complete);
    1c2c:	4925      	ldr	r1, [pc, #148]	; (1cc4 <process_event+0x154>)
    1c2e:	4620      	mov	r0, r4
    1c30:	47b8      	blx	r7
	__asm__ volatile(
    1c32:	f04f 0320 	mov.w	r3, #32
    1c36:	f3ef 8511 	mrs	r5, BASEPRI
    1c3a:	f383 8812 	msr	BASEPRI_MAX, r3
    1c3e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1c42:	8b23      	ldrh	r3, [r4, #24]
    1c44:	f023 0308 	bic.w	r3, r3, #8
    1c48:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1c4a:	8b23      	ldrh	r3, [r4, #24]
    1c4c:	f013 0f10 	tst.w	r3, #16
    1c50:	d02e      	beq.n	1cb0 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1c52:	f023 0310 	bic.w	r3, r3, #16
    1c56:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1c58:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1c5a:	8b26      	ldrh	r6, [r4, #24]
    1c5c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    1c60:	2800      	cmp	r0, #0
    1c62:	d09a      	beq.n	1b9a <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    1c64:	2802      	cmp	r0, #2
    1c66:	d0a3      	beq.n	1bb0 <process_event+0x40>
		if (evt == EVT_NOP) {
    1c68:	2800      	cmp	r0, #0
    1c6a:	d096      	beq.n	1b9a <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    1c6c:	2801      	cmp	r0, #1
    1c6e:	d0a3      	beq.n	1bb8 <process_event+0x48>
		} else if (evt == EVT_START) {
    1c70:	2803      	cmp	r0, #3
    1c72:	d0aa      	beq.n	1bca <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    1c74:	2804      	cmp	r0, #4
    1c76:	d0b1      	beq.n	1bdc <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    1c78:	2805      	cmp	r0, #5
    1c7a:	d0b8      	beq.n	1bee <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    1c7c:	2700      	movs	r7, #0
		res = 0;
    1c7e:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1c80:	8b23      	ldrh	r3, [r4, #24]
    1c82:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1c86:	45b0      	cmp	r8, r6
    1c88:	d0ba      	beq.n	1c00 <process_event+0x90>
    1c8a:	68a2      	ldr	r2, [r4, #8]
    1c8c:	2a00      	cmp	r2, #0
    1c8e:	d0b9      	beq.n	1c04 <process_event+0x94>
    1c90:	2201      	movs	r2, #1
		if (do_monitors
    1c92:	4611      	mov	r1, r2
    1c94:	2a00      	cmp	r2, #0
    1c96:	d1b7      	bne.n	1c08 <process_event+0x98>
    1c98:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    1c9a:	2a00      	cmp	r2, #0
    1c9c:	d1b4      	bne.n	1c08 <process_event+0x98>
		    || (transit != NULL)) {
    1c9e:	2f00      	cmp	r7, #0
    1ca0:	d1b2      	bne.n	1c08 <process_event+0x98>
    1ca2:	e7d2      	b.n	1c4a <process_event+0xda>
				notify_monitors(mgr, state, res);
    1ca4:	464a      	mov	r2, r9
    1ca6:	4641      	mov	r1, r8
    1ca8:	4620      	mov	r0, r4
    1caa:	f004 fba7 	bl	63fc <notify_monitors>
    1cae:	e7b4      	b.n	1c1a <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1cb0:	f013 0f20 	tst.w	r3, #32
    1cb4:	d004      	beq.n	1cc0 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1cb6:	f023 0320 	bic.w	r3, r3, #32
    1cba:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    1cbc:	2002      	movs	r0, #2
    1cbe:	e7cc      	b.n	1c5a <process_event+0xea>
		evt = EVT_NOP;
    1cc0:	2000      	movs	r0, #0
    1cc2:	e7ca      	b.n	1c5a <process_event+0xea>
    1cc4:	00006587 	.word	0x00006587

00001cc8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ccc:	b093      	sub	sp, #76	; 0x4c
    1cce:	4606      	mov	r6, r0
    1cd0:	460d      	mov	r5, r1
    1cd2:	4692      	mov	sl, r2
    1cd4:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1cd6:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1cd8:	f89a 0000 	ldrb.w	r0, [sl]
    1cdc:	2800      	cmp	r0, #0
    1cde:	f000 84d6 	beq.w	268e <cbvprintf+0x9c6>
		if (*fp != '%') {
    1ce2:	2825      	cmp	r0, #37	; 0x25
    1ce4:	d008      	beq.n	1cf8 <cbvprintf+0x30>
			OUTC(*fp++);
    1ce6:	f10a 0a01 	add.w	sl, sl, #1
    1cea:	4629      	mov	r1, r5
    1cec:	47b0      	blx	r6
    1cee:	2800      	cmp	r0, #0
    1cf0:	f2c0 84ce 	blt.w	2690 <cbvprintf+0x9c8>
    1cf4:	3401      	adds	r4, #1
			continue;
    1cf6:	e7ef      	b.n	1cd8 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    1cf8:	2300      	movs	r3, #0
    1cfa:	9306      	str	r3, [sp, #24]
    1cfc:	9307      	str	r3, [sp, #28]
    1cfe:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    1d00:	9308      	str	r3, [sp, #32]
    1d02:	9309      	str	r3, [sp, #36]	; 0x24
    1d04:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    1d06:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    1d0a:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1d0e:	2b25      	cmp	r3, #37	; 0x25
    1d10:	d001      	beq.n	1d16 <cbvprintf+0x4e>
	bool loop = true;
    1d12:	2701      	movs	r7, #1
    1d14:	e02c      	b.n	1d70 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    1d16:	f10a 0802 	add.w	r8, sl, #2
    1d1a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    1d1e:	e1a8      	b.n	2072 <cbvprintf+0x3aa>
			conv->flag_dash = true;
    1d20:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1d24:	f043 0304 	orr.w	r3, r3, #4
    1d28:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    1d2c:	b1ff      	cbz	r7, 1d6e <cbvprintf+0xa6>
			++sp;
    1d2e:	f108 0801 	add.w	r8, r8, #1
    1d32:	e01c      	b.n	1d6e <cbvprintf+0xa6>
			conv->flag_plus = true;
    1d34:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1d38:	f043 0308 	orr.w	r3, r3, #8
    1d3c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    1d40:	e7f4      	b.n	1d2c <cbvprintf+0x64>
			conv->flag_space = true;
    1d42:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1d46:	f043 0310 	orr.w	r3, r3, #16
    1d4a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    1d4e:	e7ed      	b.n	1d2c <cbvprintf+0x64>
			conv->flag_hash = true;
    1d50:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1d54:	f043 0320 	orr.w	r3, r3, #32
    1d58:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    1d5c:	e7e6      	b.n	1d2c <cbvprintf+0x64>
			conv->flag_zero = true;
    1d5e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d66:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    1d6a:	e7df      	b.n	1d2c <cbvprintf+0x64>
		switch (*sp) {
    1d6c:	2700      	movs	r7, #0
	} while (loop);
    1d6e:	b34f      	cbz	r7, 1dc4 <cbvprintf+0xfc>
		switch (*sp) {
    1d70:	f898 3000 	ldrb.w	r3, [r8]
    1d74:	3b20      	subs	r3, #32
    1d76:	2b10      	cmp	r3, #16
    1d78:	d8f8      	bhi.n	1d6c <cbvprintf+0xa4>
    1d7a:	a201      	add	r2, pc, #4	; (adr r2, 1d80 <cbvprintf+0xb8>)
    1d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1d80:	00001d43 	.word	0x00001d43
    1d84:	00001d6d 	.word	0x00001d6d
    1d88:	00001d6d 	.word	0x00001d6d
    1d8c:	00001d51 	.word	0x00001d51
    1d90:	00001d6d 	.word	0x00001d6d
    1d94:	00001d6d 	.word	0x00001d6d
    1d98:	00001d6d 	.word	0x00001d6d
    1d9c:	00001d6d 	.word	0x00001d6d
    1da0:	00001d6d 	.word	0x00001d6d
    1da4:	00001d6d 	.word	0x00001d6d
    1da8:	00001d6d 	.word	0x00001d6d
    1dac:	00001d35 	.word	0x00001d35
    1db0:	00001d6d 	.word	0x00001d6d
    1db4:	00001d21 	.word	0x00001d21
    1db8:	00001d6d 	.word	0x00001d6d
    1dbc:	00001d6d 	.word	0x00001d6d
    1dc0:	00001d5f 	.word	0x00001d5f
	if (conv->flag_zero && conv->flag_dash) {
    1dc4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1dc8:	f003 0344 	and.w	r3, r3, #68	; 0x44
    1dcc:	2b44      	cmp	r3, #68	; 0x44
    1dce:	d06d      	beq.n	1eac <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    1dd0:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    1dd4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1ddc:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    1de0:	f898 3000 	ldrb.w	r3, [r8]
    1de4:	2b2a      	cmp	r3, #42	; 0x2a
    1de6:	d068      	beq.n	1eba <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    1de8:	a805      	add	r0, sp, #20
    1dea:	f004 fc5c 	bl	66a6 <extract_decimal>
	if (sp != wp) {
    1dee:	9b05      	ldr	r3, [sp, #20]
    1df0:	4598      	cmp	r8, r3
    1df2:	d012      	beq.n	1e1a <cbvprintf+0x152>
		conv->width_present = true;
    1df4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1dfc:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    1e00:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    1e02:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    1e06:	2800      	cmp	r0, #0
    1e08:	db60      	blt.n	1ecc <cbvprintf+0x204>
    1e0a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    1e0c:	4313      	orrs	r3, r2
    1e0e:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1e12:	f363 0241 	bfi	r2, r3, #1, #1
    1e16:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    1e1a:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    1e1c:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    1e1e:	781b      	ldrb	r3, [r3, #0]
    1e20:	2b2e      	cmp	r3, #46	; 0x2e
    1e22:	bf14      	ite	ne
    1e24:	2300      	movne	r3, #0
    1e26:	2301      	moveq	r3, #1
    1e28:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    1e2c:	f363 0241 	bfi	r2, r3, #1, #1
    1e30:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    1e34:	2b00      	cmp	r3, #0
    1e36:	d04b      	beq.n	1ed0 <cbvprintf+0x208>
	++sp;
    1e38:	9b05      	ldr	r3, [sp, #20]
    1e3a:	1c5a      	adds	r2, r3, #1
    1e3c:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    1e3e:	785b      	ldrb	r3, [r3, #1]
    1e40:	2b2a      	cmp	r3, #42	; 0x2a
    1e42:	d048      	beq.n	1ed6 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    1e44:	a805      	add	r0, sp, #20
    1e46:	f004 fc2e 	bl	66a6 <extract_decimal>
	conv->prec_value = prec;
    1e4a:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    1e4c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1e50:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    1e54:	2800      	cmp	r0, #0
    1e56:	db47      	blt.n	1ee8 <cbvprintf+0x220>
    1e58:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    1e5a:	4313      	orrs	r3, r2
    1e5c:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1e60:	f363 0241 	bfi	r2, r3, #1, #1
    1e64:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    1e68:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    1e6c:	f898 3000 	ldrb.w	r3, [r8]
    1e70:	3b4c      	subs	r3, #76	; 0x4c
    1e72:	2b2e      	cmp	r3, #46	; 0x2e
    1e74:	f200 80dc 	bhi.w	2030 <cbvprintf+0x368>
    1e78:	e8df f003 	tbb	[pc, r3]
    1e7c:	dadadaca 	.word	0xdadadaca
    1e80:	dadadada 	.word	0xdadadada
    1e84:	dadadada 	.word	0xdadadada
    1e88:	dadadada 	.word	0xdadadada
    1e8c:	dadadada 	.word	0xdadadada
    1e90:	dadadada 	.word	0xdadadada
    1e94:	dadadada 	.word	0xdadadada
    1e98:	da6ada38 	.word	0xda6ada38
    1e9c:	dadada51 	.word	0xdadada51
    1ea0:	dadadada 	.word	0xdadadada
    1ea4:	dadadac0 	.word	0xdadadac0
    1ea8:	dada      	.short	0xdada
    1eaa:	b6          	.byte	0xb6
    1eab:	00          	.byte	0x00
		conv->flag_zero = false;
    1eac:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1eb0:	f36f 1386 	bfc	r3, #6, #1
    1eb4:	f88d 3020 	strb.w	r3, [sp, #32]
    1eb8:	e78a      	b.n	1dd0 <cbvprintf+0x108>
		conv->width_star = true;
    1eba:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1ebe:	f043 0301 	orr.w	r3, r3, #1
    1ec2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    1ec6:	4643      	mov	r3, r8
    1ec8:	3301      	adds	r3, #1
    1eca:	e7a7      	b.n	1e1c <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    1ecc:	2201      	movs	r2, #1
    1ece:	e79d      	b.n	1e0c <cbvprintf+0x144>
		return sp;
    1ed0:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1ed4:	e7ca      	b.n	1e6c <cbvprintf+0x1a4>
		conv->prec_star = true;
    1ed6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1eda:	f043 0304 	orr.w	r3, r3, #4
    1ede:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    1ee2:	f102 0801 	add.w	r8, r2, #1
    1ee6:	e7c1      	b.n	1e6c <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    1ee8:	2201      	movs	r2, #1
    1eea:	e7b6      	b.n	1e5a <cbvprintf+0x192>
		if (*++sp == 'h') {
    1eec:	f108 0201 	add.w	r2, r8, #1
    1ef0:	f898 3001 	ldrb.w	r3, [r8, #1]
    1ef4:	2b68      	cmp	r3, #104	; 0x68
    1ef6:	d008      	beq.n	1f0a <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    1ef8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1efc:	2102      	movs	r1, #2
    1efe:	f361 03c6 	bfi	r3, r1, #3, #4
    1f02:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    1f06:	4690      	mov	r8, r2
    1f08:	e02b      	b.n	1f62 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    1f0a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1f0e:	2201      	movs	r2, #1
    1f10:	f362 03c6 	bfi	r3, r2, #3, #4
    1f14:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    1f18:	f108 0802 	add.w	r8, r8, #2
    1f1c:	e021      	b.n	1f62 <cbvprintf+0x29a>
		if (*++sp == 'l') {
    1f1e:	f108 0201 	add.w	r2, r8, #1
    1f22:	f898 3001 	ldrb.w	r3, [r8, #1]
    1f26:	2b6c      	cmp	r3, #108	; 0x6c
    1f28:	d008      	beq.n	1f3c <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    1f2a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1f2e:	2103      	movs	r1, #3
    1f30:	f361 03c6 	bfi	r3, r1, #3, #4
    1f34:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    1f38:	4690      	mov	r8, r2
    1f3a:	e012      	b.n	1f62 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    1f3c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1f40:	2204      	movs	r2, #4
    1f42:	f362 03c6 	bfi	r3, r2, #3, #4
    1f46:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    1f4a:	f108 0802 	add.w	r8, r8, #2
    1f4e:	e008      	b.n	1f62 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    1f50:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1f54:	2205      	movs	r2, #5
    1f56:	f362 03c6 	bfi	r3, r2, #3, #4
    1f5a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    1f5e:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    1f62:	f818 3b01 	ldrb.w	r3, [r8], #1
    1f66:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    1f6a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    1f6e:	2a37      	cmp	r2, #55	; 0x37
    1f70:	f200 8150 	bhi.w	2214 <cbvprintf+0x54c>
    1f74:	e8df f012 	tbh	[pc, r2, lsl #1]
    1f78:	014e0126 	.word	0x014e0126
    1f7c:	014e014e 	.word	0x014e014e
    1f80:	01260126 	.word	0x01260126
    1f84:	014e0126 	.word	0x014e0126
    1f88:	014e014e 	.word	0x014e014e
    1f8c:	014e014e 	.word	0x014e014e
    1f90:	014e014e 	.word	0x014e014e
    1f94:	014e014e 	.word	0x014e014e
    1f98:	014e014e 	.word	0x014e014e
    1f9c:	014e014e 	.word	0x014e014e
    1fa0:	014e014e 	.word	0x014e014e
    1fa4:	0113014e 	.word	0x0113014e
    1fa8:	014e014e 	.word	0x014e014e
    1fac:	014e014e 	.word	0x014e014e
    1fb0:	014e014e 	.word	0x014e014e
    1fb4:	014e014e 	.word	0x014e014e
    1fb8:	014e0126 	.word	0x014e0126
    1fbc:	00630113 	.word	0x00630113
    1fc0:	01260126 	.word	0x01260126
    1fc4:	014e0126 	.word	0x014e0126
    1fc8:	014e0063 	.word	0x014e0063
    1fcc:	014e014e 	.word	0x014e014e
    1fd0:	012f014e 	.word	0x012f014e
    1fd4:	013f0113 	.word	0x013f0113
    1fd8:	014e014e 	.word	0x014e014e
    1fdc:	014e013f 	.word	0x014e013f
    1fe0:	014e0113 	.word	0x014e0113
    1fe4:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    1fe8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1fec:	2206      	movs	r2, #6
    1fee:	f362 03c6 	bfi	r3, r2, #3, #4
    1ff2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    1ff6:	f108 0801 	add.w	r8, r8, #1
		break;
    1ffa:	e7b2      	b.n	1f62 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    1ffc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2000:	2207      	movs	r2, #7
    2002:	f362 03c6 	bfi	r3, r2, #3, #4
    2006:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    200a:	f108 0801 	add.w	r8, r8, #1
		break;
    200e:	e7a8      	b.n	1f62 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    2010:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2014:	2208      	movs	r2, #8
    2016:	f362 03c6 	bfi	r3, r2, #3, #4
    201a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    201e:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    2022:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2026:	f043 0302 	orr.w	r3, r3, #2
    202a:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    202e:	e798      	b.n	1f62 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    2030:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2034:	f36f 03c6 	bfc	r3, #3, #4
    2038:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    203c:	e791      	b.n	1f62 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    203e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    2042:	2101      	movs	r1, #1
    2044:	f361 0202 	bfi	r2, r1, #0, #3
    2048:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    204c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    2050:	f002 0278 	and.w	r2, r2, #120	; 0x78
    2054:	2a40      	cmp	r2, #64	; 0x40
    2056:	f000 80aa 	beq.w	21ae <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    205a:	2b63      	cmp	r3, #99	; 0x63
    205c:	f000 80ae 	beq.w	21bc <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    2060:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2064:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2068:	4317      	orrs	r7, r2
    206a:	f367 0341 	bfi	r3, r7, #1, #1
    206e:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    2072:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2076:	f013 0f01 	tst.w	r3, #1
    207a:	f000 80da 	beq.w	2232 <cbvprintf+0x56a>
			width = va_arg(ap, int);
    207e:	9b03      	ldr	r3, [sp, #12]
    2080:	1d1a      	adds	r2, r3, #4
    2082:	9203      	str	r2, [sp, #12]
    2084:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    2086:	2f00      	cmp	r7, #0
    2088:	f2c0 80cb 	blt.w	2222 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    208c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2090:	f013 0f04 	tst.w	r3, #4
    2094:	f000 80df 	beq.w	2256 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    2098:	9b03      	ldr	r3, [sp, #12]
    209a:	1d1a      	adds	r2, r3, #4
    209c:	9203      	str	r2, [sp, #12]
    209e:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    20a2:	f1bb 0f00 	cmp.w	fp, #0
    20a6:	f2c0 80cd 	blt.w	2244 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    20aa:	2300      	movs	r3, #0
    20ac:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    20ae:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    20b0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    20b4:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    20b8:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    20bc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    20c0:	2b01      	cmp	r3, #1
    20c2:	f000 80d1 	beq.w	2268 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    20c6:	2b02      	cmp	r3, #2
    20c8:	f000 8116 	beq.w	22f8 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    20cc:	2b04      	cmp	r3, #4
    20ce:	f000 8167 	beq.w	23a0 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    20d2:	2b03      	cmp	r3, #3
    20d4:	f000 817e 	beq.w	23d4 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    20d8:	f89d 9020 	ldrb.w	r9, [sp, #32]
    20dc:	f019 0303 	ands.w	r3, r9, #3
    20e0:	9302      	str	r3, [sp, #8]
    20e2:	f040 817d 	bne.w	23e0 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    20e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    20ea:	3b25      	subs	r3, #37	; 0x25
    20ec:	2b53      	cmp	r3, #83	; 0x53
    20ee:	f200 8233 	bhi.w	2558 <cbvprintf+0x890>
    20f2:	e8df f013 	tbh	[pc, r3, lsl #1]
    20f6:	0181      	.short	0x0181
    20f8:	02310231 	.word	0x02310231
    20fc:	02310231 	.word	0x02310231
    2100:	02310231 	.word	0x02310231
    2104:	02310231 	.word	0x02310231
    2108:	02310231 	.word	0x02310231
    210c:	02310231 	.word	0x02310231
    2110:	02310231 	.word	0x02310231
    2114:	02310231 	.word	0x02310231
    2118:	02310231 	.word	0x02310231
    211c:	02310231 	.word	0x02310231
    2120:	02310231 	.word	0x02310231
    2124:	02310231 	.word	0x02310231
    2128:	02310231 	.word	0x02310231
    212c:	02310231 	.word	0x02310231
    2130:	02310231 	.word	0x02310231
    2134:	02310231 	.word	0x02310231
    2138:	02310231 	.word	0x02310231
    213c:	02310231 	.word	0x02310231
    2140:	02310231 	.word	0x02310231
    2144:	02310231 	.word	0x02310231
    2148:	02310231 	.word	0x02310231
    214c:	02310231 	.word	0x02310231
    2150:	02310231 	.word	0x02310231
    2154:	02310231 	.word	0x02310231
    2158:	02310231 	.word	0x02310231
    215c:	023101c7 	.word	0x023101c7
    2160:	02310231 	.word	0x02310231
    2164:	02310231 	.word	0x02310231
    2168:	02310231 	.word	0x02310231
    216c:	02310231 	.word	0x02310231
    2170:	01a10231 	.word	0x01a10231
    2174:	023101ab 	.word	0x023101ab
    2178:	02310231 	.word	0x02310231
    217c:	01ab0231 	.word	0x01ab0231
    2180:	02310231 	.word	0x02310231
    2184:	02310231 	.word	0x02310231
    2188:	01c70208 	.word	0x01c70208
    218c:	023101ea 	.word	0x023101ea
    2190:	018f0231 	.word	0x018f0231
    2194:	01c70231 	.word	0x01c70231
    2198:	02310231 	.word	0x02310231
    219c:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    219e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    21a2:	2102      	movs	r1, #2
    21a4:	f361 0202 	bfi	r2, r1, #0, #3
    21a8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    21ac:	e74e      	b.n	204c <cbvprintf+0x384>
			conv->invalid = true;
    21ae:	f89d 1020 	ldrb.w	r1, [sp, #32]
    21b2:	f041 0101 	orr.w	r1, r1, #1
    21b6:	f88d 1020 	strb.w	r1, [sp, #32]
    21ba:	e74e      	b.n	205a <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    21bc:	1e17      	subs	r7, r2, #0
    21be:	bf18      	it	ne
    21c0:	2701      	movne	r7, #1
    21c2:	e74d      	b.n	2060 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    21c4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    21c8:	2204      	movs	r2, #4
    21ca:	f362 0302 	bfi	r3, r2, #0, #3
    21ce:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    21d2:	2701      	movs	r7, #1
			break;
    21d4:	e744      	b.n	2060 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    21d6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    21da:	2203      	movs	r2, #3
    21dc:	f362 0302 	bfi	r3, r2, #0, #3
    21e0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    21e4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    21e8:	f003 0378 	and.w	r3, r3, #120	; 0x78
    21ec:	2b40      	cmp	r3, #64	; 0x40
    21ee:	f47f af37 	bne.w	2060 <cbvprintf+0x398>
			unsupported = true;
    21f2:	2701      	movs	r7, #1
    21f4:	e734      	b.n	2060 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    21f6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    21fa:	2203      	movs	r2, #3
    21fc:	f362 0302 	bfi	r3, r2, #0, #3
    2200:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    2204:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2208:	f013 0f78 	tst.w	r3, #120	; 0x78
    220c:	f43f af28 	beq.w	2060 <cbvprintf+0x398>
			unsupported = true;
    2210:	2701      	movs	r7, #1
    2212:	e725      	b.n	2060 <cbvprintf+0x398>
		conv->invalid = true;
    2214:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2218:	f043 0301 	orr.w	r3, r3, #1
    221c:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    2220:	e71e      	b.n	2060 <cbvprintf+0x398>
				conv->flag_dash = true;
    2222:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2226:	f043 0304 	orr.w	r3, r3, #4
    222a:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    222e:	427f      	negs	r7, r7
    2230:	e72c      	b.n	208c <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    2232:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    2236:	2b00      	cmp	r3, #0
    2238:	db02      	blt.n	2240 <cbvprintf+0x578>
		int width = -1;
    223a:	f04f 37ff 	mov.w	r7, #4294967295
    223e:	e725      	b.n	208c <cbvprintf+0x3c4>
			width = conv->width_value;
    2240:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2242:	e723      	b.n	208c <cbvprintf+0x3c4>
				conv->prec_present = false;
    2244:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2248:	f36f 0341 	bfc	r3, #1, #1
    224c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    2250:	f04f 3bff 	mov.w	fp, #4294967295
    2254:	e729      	b.n	20aa <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    2256:	f013 0f02 	tst.w	r3, #2
    225a:	d002      	beq.n	2262 <cbvprintf+0x59a>
			precision = conv->prec_value;
    225c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    2260:	e723      	b.n	20aa <cbvprintf+0x3e2>
		int precision = -1;
    2262:	f04f 3bff 	mov.w	fp, #4294967295
    2266:	e720      	b.n	20aa <cbvprintf+0x3e2>
			switch (length_mod) {
    2268:	1ecb      	subs	r3, r1, #3
    226a:	2b04      	cmp	r3, #4
    226c:	d804      	bhi.n	2278 <cbvprintf+0x5b0>
    226e:	e8df f003 	tbb	[pc, r3]
    2272:	1d0b      	.short	0x1d0b
    2274:	3529      	.short	0x3529
    2276:	35          	.byte	0x35
    2277:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    2278:	9b03      	ldr	r3, [sp, #12]
    227a:	1d1a      	adds	r2, r3, #4
    227c:	9203      	str	r2, [sp, #12]
    227e:	681a      	ldr	r2, [r3, #0]
    2280:	17d3      	asrs	r3, r2, #31
    2282:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2286:	e006      	b.n	2296 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    2288:	9b03      	ldr	r3, [sp, #12]
    228a:	1d1a      	adds	r2, r3, #4
    228c:	9203      	str	r2, [sp, #12]
    228e:	681a      	ldr	r2, [r3, #0]
    2290:	17d3      	asrs	r3, r2, #31
    2292:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    2296:	2901      	cmp	r1, #1
    2298:	d028      	beq.n	22ec <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    229a:	2902      	cmp	r1, #2
    229c:	f47f af1c 	bne.w	20d8 <cbvprintf+0x410>
				value->sint = (short)value->sint;
    22a0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    22a4:	17d3      	asrs	r3, r2, #31
    22a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    22aa:	e715      	b.n	20d8 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    22ac:	9b03      	ldr	r3, [sp, #12]
    22ae:	3307      	adds	r3, #7
    22b0:	f023 0307 	bic.w	r3, r3, #7
    22b4:	f103 0208 	add.w	r2, r3, #8
    22b8:	9203      	str	r2, [sp, #12]
    22ba:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    22be:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    22c2:	e7e8      	b.n	2296 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    22c4:	9b03      	ldr	r3, [sp, #12]
    22c6:	3307      	adds	r3, #7
    22c8:	f023 0307 	bic.w	r3, r3, #7
    22cc:	f103 0208 	add.w	r2, r3, #8
    22d0:	9203      	str	r2, [sp, #12]
    22d2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    22d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    22da:	e7dc      	b.n	2296 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    22dc:	9b03      	ldr	r3, [sp, #12]
    22de:	1d1a      	adds	r2, r3, #4
    22e0:	9203      	str	r2, [sp, #12]
    22e2:	681a      	ldr	r2, [r3, #0]
    22e4:	17d3      	asrs	r3, r2, #31
				value->sint =
    22e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    22ea:	e7d4      	b.n	2296 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    22ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
    22f0:	9306      	str	r3, [sp, #24]
    22f2:	2300      	movs	r3, #0
    22f4:	9307      	str	r3, [sp, #28]
    22f6:	e6ef      	b.n	20d8 <cbvprintf+0x410>
			switch (length_mod) {
    22f8:	1ecb      	subs	r3, r1, #3
    22fa:	2b04      	cmp	r3, #4
    22fc:	d804      	bhi.n	2308 <cbvprintf+0x640>
    22fe:	e8df f003 	tbb	[pc, r3]
    2302:	1f0b      	.short	0x1f0b
    2304:	4135      	.short	0x4135
    2306:	41          	.byte	0x41
    2307:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    2308:	9b03      	ldr	r3, [sp, #12]
    230a:	1d1a      	adds	r2, r3, #4
    230c:	9203      	str	r2, [sp, #12]
    230e:	681b      	ldr	r3, [r3, #0]
    2310:	9306      	str	r3, [sp, #24]
    2312:	2300      	movs	r3, #0
    2314:	9307      	str	r3, [sp, #28]
				break;
    2316:	e01e      	b.n	2356 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    2318:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    231c:	2b63      	cmp	r3, #99	; 0x63
    231e:	d007      	beq.n	2330 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    2320:	9b03      	ldr	r3, [sp, #12]
    2322:	1d1a      	adds	r2, r3, #4
    2324:	9203      	str	r2, [sp, #12]
    2326:	681b      	ldr	r3, [r3, #0]
    2328:	9306      	str	r3, [sp, #24]
    232a:	2300      	movs	r3, #0
    232c:	9307      	str	r3, [sp, #28]
    232e:	e012      	b.n	2356 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    2330:	9b03      	ldr	r3, [sp, #12]
    2332:	1d1a      	adds	r2, r3, #4
    2334:	9203      	str	r2, [sp, #12]
    2336:	681b      	ldr	r3, [r3, #0]
    2338:	9306      	str	r3, [sp, #24]
    233a:	2300      	movs	r3, #0
    233c:	9307      	str	r3, [sp, #28]
    233e:	e00a      	b.n	2356 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    2340:	9b03      	ldr	r3, [sp, #12]
    2342:	3307      	adds	r3, #7
    2344:	f023 0307 	bic.w	r3, r3, #7
    2348:	f103 0208 	add.w	r2, r3, #8
    234c:	9203      	str	r2, [sp, #12]
    234e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    2352:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    2356:	2901      	cmp	r1, #1
    2358:	d01c      	beq.n	2394 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    235a:	2902      	cmp	r1, #2
    235c:	f47f aebc 	bne.w	20d8 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    2360:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    2364:	9306      	str	r3, [sp, #24]
    2366:	2300      	movs	r3, #0
    2368:	9307      	str	r3, [sp, #28]
    236a:	e6b5      	b.n	20d8 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    236c:	9b03      	ldr	r3, [sp, #12]
    236e:	3307      	adds	r3, #7
    2370:	f023 0307 	bic.w	r3, r3, #7
    2374:	f103 0208 	add.w	r2, r3, #8
    2378:	9203      	str	r2, [sp, #12]
    237a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    237e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2382:	e7e8      	b.n	2356 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    2384:	9b03      	ldr	r3, [sp, #12]
    2386:	1d1a      	adds	r2, r3, #4
    2388:	9203      	str	r2, [sp, #12]
    238a:	681b      	ldr	r3, [r3, #0]
				value->uint =
    238c:	9306      	str	r3, [sp, #24]
    238e:	2300      	movs	r3, #0
    2390:	9307      	str	r3, [sp, #28]
				break;
    2392:	e7e0      	b.n	2356 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    2394:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2398:	9306      	str	r3, [sp, #24]
    239a:	2300      	movs	r3, #0
    239c:	9307      	str	r3, [sp, #28]
    239e:	e69b      	b.n	20d8 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    23a0:	2908      	cmp	r1, #8
    23a2:	d00b      	beq.n	23bc <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    23a4:	9b03      	ldr	r3, [sp, #12]
    23a6:	3307      	adds	r3, #7
    23a8:	f023 0307 	bic.w	r3, r3, #7
    23ac:	f103 0208 	add.w	r2, r3, #8
    23b0:	9203      	str	r2, [sp, #12]
    23b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    23b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    23ba:	e68d      	b.n	20d8 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    23bc:	9b03      	ldr	r3, [sp, #12]
    23be:	3307      	adds	r3, #7
    23c0:	f023 0307 	bic.w	r3, r3, #7
    23c4:	f103 0208 	add.w	r2, r3, #8
    23c8:	9203      	str	r2, [sp, #12]
    23ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    23ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
    23d2:	e681      	b.n	20d8 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    23d4:	9b03      	ldr	r3, [sp, #12]
    23d6:	1d1a      	adds	r2, r3, #4
    23d8:	9203      	str	r2, [sp, #12]
    23da:	681b      	ldr	r3, [r3, #0]
    23dc:	9306      	str	r3, [sp, #24]
    23de:	e67b      	b.n	20d8 <cbvprintf+0x410>
			OUTS(sp, fp);
    23e0:	4643      	mov	r3, r8
    23e2:	4652      	mov	r2, sl
    23e4:	4629      	mov	r1, r5
    23e6:	4630      	mov	r0, r6
    23e8:	f004 f9da 	bl	67a0 <outs>
    23ec:	2800      	cmp	r0, #0
    23ee:	f2c0 814f 	blt.w	2690 <cbvprintf+0x9c8>
    23f2:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    23f4:	46c2      	mov	sl, r8
			continue;
    23f6:	e46f      	b.n	1cd8 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    23f8:	4629      	mov	r1, r5
    23fa:	2025      	movs	r0, #37	; 0x25
    23fc:	47b0      	blx	r6
    23fe:	2800      	cmp	r0, #0
    2400:	f2c0 8146 	blt.w	2690 <cbvprintf+0x9c8>
    2404:	3401      	adds	r4, #1
		char sign = 0;
    2406:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    240a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    240e:	f04f 0a00 	mov.w	sl, #0
			break;
    2412:	e0a7      	b.n	2564 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
    2414:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    2418:	f1bb 0f00 	cmp.w	fp, #0
    241c:	db08      	blt.n	2430 <cbvprintf+0x768>
				len = strnlen(bps, precision);
    241e:	4659      	mov	r1, fp
    2420:	4650      	mov	r0, sl
    2422:	f004 fab1 	bl	6988 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    2426:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    242a:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    242e:	e099      	b.n	2564 <cbvprintf+0x89c>
				len = strlen(bps);
    2430:	4650      	mov	r0, sl
    2432:	f004 faa1 	bl	6978 <strlen>
    2436:	e7f6      	b.n	2426 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2438:	9b06      	ldr	r3, [sp, #24]
    243a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    243e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    2442:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    2446:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    244a:	e08b      	b.n	2564 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    244c:	f019 0f08 	tst.w	r9, #8
    2450:	d105      	bne.n	245e <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
    2452:	f019 0910 	ands.w	r9, r9, #16
    2456:	d004      	beq.n	2462 <cbvprintf+0x79a>
				sign = ' ';
    2458:	f04f 0920 	mov.w	r9, #32
    245c:	e001      	b.n	2462 <cbvprintf+0x79a>
				sign = '+';
    245e:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    2462:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    2466:	2a00      	cmp	r2, #0
    2468:	f173 0100 	sbcs.w	r1, r3, #0
    246c:	db02      	blt.n	2474 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    246e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2472:	e009      	b.n	2488 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
    2474:	4252      	negs	r2, r2
    2476:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    247a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    247e:	f04f 092d 	mov.w	r9, #45	; 0x2d
    2482:	e001      	b.n	2488 <cbvprintf+0x7c0>
		switch (conv->specifier) {
    2484:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    2488:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    248c:	9300      	str	r3, [sp, #0]
    248e:	ab0c      	add	r3, sp, #48	; 0x30
    2490:	aa08      	add	r2, sp, #32
    2492:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    2496:	f004 f919 	bl	66cc <encode_uint>
    249a:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    249c:	f1bb 0f00 	cmp.w	fp, #0
    24a0:	f2c0 8090 	blt.w	25c4 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
    24a4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    24a8:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    24ac:	f89d 2020 	ldrb.w	r2, [sp, #32]
    24b0:	f36f 1286 	bfc	r2, #6, #1
    24b4:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    24b8:	459b      	cmp	fp, r3
    24ba:	f240 8086 	bls.w	25ca <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
    24be:	ebab 0303 	sub.w	r3, fp, r3
    24c2:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    24c4:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    24c8:	e04c      	b.n	2564 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    24ca:	9806      	ldr	r0, [sp, #24]
    24cc:	b930      	cbnz	r0, 24dc <cbvprintf+0x814>
		char sign = 0;
    24ce:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    24d2:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 2698 <cbvprintf+0x9d0>
			bps = "(nil)";
    24d6:	f1ab 0a05 	sub.w	sl, fp, #5
    24da:	e043      	b.n	2564 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    24dc:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    24e0:	9300      	str	r3, [sp, #0]
    24e2:	ab0c      	add	r3, sp, #48	; 0x30
    24e4:	aa08      	add	r2, sp, #32
    24e6:	2100      	movs	r1, #0
    24e8:	f004 f8f0 	bl	66cc <encode_uint>
    24ec:	4682      	mov	sl, r0
				conv->altform_0c = true;
    24ee:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    24f2:	f043 0310 	orr.w	r3, r3, #16
    24f6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    24fa:	2378      	movs	r3, #120	; 0x78
    24fc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    2500:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    2504:	e7ca      	b.n	249c <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    2506:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    2508:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    250c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    2510:	2b07      	cmp	r3, #7
    2512:	d806      	bhi.n	2522 <cbvprintf+0x85a>
    2514:	e8df f003 	tbb	[pc, r3]
    2518:	100e0c04 	.word	0x100e0c04
    251c:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    2520:	6014      	str	r4, [r2, #0]
		char sign = 0;
    2522:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    2526:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    252a:	f04f 0a00 	mov.w	sl, #0
}
    252e:	e019      	b.n	2564 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
    2530:	7014      	strb	r4, [r2, #0]
		break;
    2532:	e7f6      	b.n	2522 <cbvprintf+0x85a>
		*(short *)dp = (short)count;
    2534:	8014      	strh	r4, [r2, #0]
		break;
    2536:	e7f4      	b.n	2522 <cbvprintf+0x85a>
		*(long *)dp = (long)count;
    2538:	6014      	str	r4, [r2, #0]
		break;
    253a:	e7f2      	b.n	2522 <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
    253c:	4620      	mov	r0, r4
    253e:	17e1      	asrs	r1, r4, #31
    2540:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    2544:	e7ed      	b.n	2522 <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
    2546:	4620      	mov	r0, r4
    2548:	17e1      	asrs	r1, r4, #31
    254a:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    254e:	e7e8      	b.n	2522 <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
    2550:	6014      	str	r4, [r2, #0]
		break;
    2552:	e7e6      	b.n	2522 <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2554:	6014      	str	r4, [r2, #0]
		break;
    2556:	e7e4      	b.n	2522 <cbvprintf+0x85a>
		switch (conv->specifier) {
    2558:	f8dd 9008 	ldr.w	r9, [sp, #8]
    255c:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    2560:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    2564:	f1ba 0f00 	cmp.w	sl, #0
    2568:	f000 808e 	beq.w	2688 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    256c:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    2570:	f1b9 0f00 	cmp.w	r9, #0
    2574:	d000      	beq.n	2578 <cbvprintf+0x8b0>
			nj_len += 1U;
    2576:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    2578:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    257c:	f011 0f10 	tst.w	r1, #16
    2580:	d026      	beq.n	25d0 <cbvprintf+0x908>
			nj_len += 2U;
    2582:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    2584:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2586:	4413      	add	r3, r2
		if (conv->pad_fp) {
    2588:	f011 0f40 	tst.w	r1, #64	; 0x40
    258c:	d001      	beq.n	2592 <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
    258e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2590:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    2592:	2f00      	cmp	r7, #0
    2594:	dd32      	ble.n	25fc <cbvprintf+0x934>
			width -= (int)nj_len;
    2596:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    2598:	f89d 3020 	ldrb.w	r3, [sp, #32]
    259c:	f013 0f04 	tst.w	r3, #4
    25a0:	d12c      	bne.n	25fc <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    25a2:	f013 0f40 	tst.w	r3, #64	; 0x40
    25a6:	d018      	beq.n	25da <cbvprintf+0x912>
					if (sign != 0) {
    25a8:	f1b9 0f00 	cmp.w	r9, #0
    25ac:	d018      	beq.n	25e0 <cbvprintf+0x918>
						OUTC(sign);
    25ae:	4629      	mov	r1, r5
    25b0:	4648      	mov	r0, r9
    25b2:	47b0      	blx	r6
    25b4:	2800      	cmp	r0, #0
    25b6:	db6b      	blt.n	2690 <cbvprintf+0x9c8>
    25b8:	3401      	adds	r4, #1
						sign = 0;
    25ba:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    25be:	2330      	movs	r3, #48	; 0x30
    25c0:	9302      	str	r3, [sp, #8]
    25c2:	e00f      	b.n	25e4 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
    25c4:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    25c8:	e7cc      	b.n	2564 <cbvprintf+0x89c>
    25ca:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    25ce:	e7c9      	b.n	2564 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
    25d0:	f011 0f08 	tst.w	r1, #8
    25d4:	d0d6      	beq.n	2584 <cbvprintf+0x8bc>
			nj_len += 1U;
    25d6:	3201      	adds	r2, #1
    25d8:	e7d4      	b.n	2584 <cbvprintf+0x8bc>
				char pad = ' ';
    25da:	2320      	movs	r3, #32
    25dc:	9302      	str	r3, [sp, #8]
    25de:	e001      	b.n	25e4 <cbvprintf+0x91c>
					pad = '0';
    25e0:	2330      	movs	r3, #48	; 0x30
    25e2:	9302      	str	r3, [sp, #8]
    25e4:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    25e6:	1e5f      	subs	r7, r3, #1
    25e8:	2b00      	cmp	r3, #0
    25ea:	dd07      	ble.n	25fc <cbvprintf+0x934>
					OUTC(pad);
    25ec:	4629      	mov	r1, r5
    25ee:	9802      	ldr	r0, [sp, #8]
    25f0:	47b0      	blx	r6
    25f2:	2800      	cmp	r0, #0
    25f4:	db4c      	blt.n	2690 <cbvprintf+0x9c8>
    25f6:	3401      	adds	r4, #1
				while (width-- > 0) {
    25f8:	463b      	mov	r3, r7
    25fa:	e7f4      	b.n	25e6 <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    25fc:	f1b9 0f00 	cmp.w	r9, #0
    2600:	d005      	beq.n	260e <cbvprintf+0x946>
			OUTC(sign);
    2602:	4629      	mov	r1, r5
    2604:	4648      	mov	r0, r9
    2606:	47b0      	blx	r6
    2608:	2800      	cmp	r0, #0
    260a:	db41      	blt.n	2690 <cbvprintf+0x9c8>
    260c:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    260e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2612:	f3c3 1200 	ubfx	r2, r3, #4, #1
    2616:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    261a:	4313      	orrs	r3, r2
    261c:	d005      	beq.n	262a <cbvprintf+0x962>
				OUTC('0');
    261e:	4629      	mov	r1, r5
    2620:	2030      	movs	r0, #48	; 0x30
    2622:	47b0      	blx	r6
    2624:	2800      	cmp	r0, #0
    2626:	db33      	blt.n	2690 <cbvprintf+0x9c8>
    2628:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    262a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    262e:	f013 0f10 	tst.w	r3, #16
    2632:	d006      	beq.n	2642 <cbvprintf+0x97a>
				OUTC(conv->specifier);
    2634:	4629      	mov	r1, r5
    2636:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    263a:	47b0      	blx	r6
    263c:	2800      	cmp	r0, #0
    263e:	db27      	blt.n	2690 <cbvprintf+0x9c8>
    2640:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    2642:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    2644:	f103 39ff 	add.w	r9, r3, #4294967295
    2648:	2b00      	cmp	r3, #0
    264a:	dd07      	ble.n	265c <cbvprintf+0x994>
				OUTC('0');
    264c:	4629      	mov	r1, r5
    264e:	2030      	movs	r0, #48	; 0x30
    2650:	47b0      	blx	r6
    2652:	2800      	cmp	r0, #0
    2654:	db1c      	blt.n	2690 <cbvprintf+0x9c8>
    2656:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    2658:	464b      	mov	r3, r9
    265a:	e7f3      	b.n	2644 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
    265c:	465b      	mov	r3, fp
    265e:	4652      	mov	r2, sl
    2660:	4629      	mov	r1, r5
    2662:	4630      	mov	r0, r6
    2664:	f004 f89c 	bl	67a0 <outs>
    2668:	2800      	cmp	r0, #0
    266a:	db11      	blt.n	2690 <cbvprintf+0x9c8>
    266c:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    266e:	2f00      	cmp	r7, #0
    2670:	dd07      	ble.n	2682 <cbvprintf+0x9ba>
			OUTC(' ');
    2672:	4629      	mov	r1, r5
    2674:	2020      	movs	r0, #32
    2676:	47b0      	blx	r6
    2678:	2800      	cmp	r0, #0
    267a:	db09      	blt.n	2690 <cbvprintf+0x9c8>
    267c:	3401      	adds	r4, #1
			--width;
    267e:	3f01      	subs	r7, #1
    2680:	e7f5      	b.n	266e <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
    2682:	46c2      	mov	sl, r8
    2684:	f7ff bb28 	b.w	1cd8 <cbvprintf+0x10>
    2688:	46c2      	mov	sl, r8
    268a:	f7ff bb25 	b.w	1cd8 <cbvprintf+0x10>
		}
	}

	return count;
    268e:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    2690:	b013      	add	sp, #76	; 0x4c
    2692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2696:	bf00      	nop
    2698:	000083d1 	.word	0x000083d1

0000269c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    269c:	4b1b      	ldr	r3, [pc, #108]	; (270c <pm_system_resume+0x70>)
    269e:	681b      	ldr	r3, [r3, #0]
    26a0:	2b00      	cmp	r3, #0
    26a2:	d132      	bne.n	270a <pm_system_resume+0x6e>
{
    26a4:	b530      	push	{r4, r5, lr}
    26a6:	b085      	sub	sp, #20
		post_ops_done = 1;
    26a8:	4b18      	ldr	r3, [pc, #96]	; (270c <pm_system_resume+0x70>)
    26aa:	2201      	movs	r2, #1
    26ac:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    26ae:	4b18      	ldr	r3, [pc, #96]	; (2710 <pm_system_resume+0x74>)
    26b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    26b4:	ab04      	add	r3, sp, #16
    26b6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    26ba:	4b16      	ldr	r3, [pc, #88]	; (2714 <pm_system_resume+0x78>)
    26bc:	b163      	cbz	r3, 26d8 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    26be:	f004 f9db 	bl	6a78 <pm_power_state_exit_post_ops>
    26c2:	f04f 0320 	mov.w	r3, #32
    26c6:	f3ef 8511 	mrs	r5, BASEPRI
    26ca:	f383 8812 	msr	BASEPRI_MAX, r3
    26ce:	f3bf 8f6f 	isb	sy
    26d2:	4b11      	ldr	r3, [pc, #68]	; (2718 <pm_system_resume+0x7c>)
    26d4:	681c      	ldr	r4, [r3, #0]
    26d6:	e00a      	b.n	26ee <pm_system_resume+0x52>
	__asm__ volatile(
    26d8:	2300      	movs	r3, #0
    26da:	f383 8811 	msr	BASEPRI, r3
    26de:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    26e2:	e7ee      	b.n	26c2 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    26e4:	4623      	mov	r3, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    26e6:	b10c      	cbz	r4, 26ec <pm_system_resume+0x50>
	return node->next;
    26e8:	6823      	ldr	r3, [r4, #0]
    26ea:	b143      	cbz	r3, 26fe <pm_system_resume+0x62>
{
    26ec:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    26ee:	b134      	cbz	r4, 26fe <pm_system_resume+0x62>
			callback = notifier->state_exit;
    26f0:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    26f2:	2b00      	cmp	r3, #0
    26f4:	d0f6      	beq.n	26e4 <pm_system_resume+0x48>
			callback(z_power_state.state);
    26f6:	4a06      	ldr	r2, [pc, #24]	; (2710 <pm_system_resume+0x74>)
    26f8:	7810      	ldrb	r0, [r2, #0]
    26fa:	4798      	blx	r3
    26fc:	e7f2      	b.n	26e4 <pm_system_resume+0x48>
	__asm__ volatile(
    26fe:	f385 8811 	msr	BASEPRI, r5
    2702:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    2706:	b005      	add	sp, #20
    2708:	bd30      	pop	{r4, r5, pc}
    270a:	4770      	bx	lr
    270c:	20000004 	.word	0x20000004
    2710:	2000037c 	.word	0x2000037c
    2714:	00006a79 	.word	0x00006a79
    2718:	20000374 	.word	0x20000374

0000271c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    271c:	b570      	push	{r4, r5, r6, lr}
    271e:	b088      	sub	sp, #32
    2720:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    2722:	4c2a      	ldr	r4, [pc, #168]	; (27cc <pm_system_suspend+0xb0>)
    2724:	466d      	mov	r5, sp
    2726:	4601      	mov	r1, r0
    2728:	4628      	mov	r0, r5
    272a:	f004 f854 	bl	67d6 <pm_policy_next_state>
    272e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    2732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    2736:	7820      	ldrb	r0, [r4, #0]
    2738:	2800      	cmp	r0, #0
    273a:	d045      	beq.n	27c8 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    273c:	4b24      	ldr	r3, [pc, #144]	; (27d0 <pm_system_suspend+0xb4>)
    273e:	2200      	movs	r2, #0
    2740:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    2742:	f1b6 3fff 	cmp.w	r6, #4294967295
    2746:	d10c      	bne.n	2762 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2748:	f002 fa34 	bl	4bb4 <k_sched_lock>
	__asm__ volatile(
    274c:	f04f 0320 	mov.w	r3, #32
    2750:	f3ef 8511 	mrs	r5, BASEPRI
    2754:	f383 8812 	msr	BASEPRI_MAX, r3
    2758:	f3bf 8f6f 	isb	sy
	return list->head;
    275c:	4b1d      	ldr	r3, [pc, #116]	; (27d4 <pm_system_suspend+0xb8>)
    275e:	681c      	ldr	r4, [r3, #0]
    2760:	e016      	b.n	2790 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    2762:	68a3      	ldr	r3, [r4, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    2764:	0c59      	lsrs	r1, r3, #17
    2766:	03d8      	lsls	r0, r3, #15
    2768:	4c1b      	ldr	r4, [pc, #108]	; (27d8 <pm_system_suspend+0xbc>)
    276a:	4a1c      	ldr	r2, [pc, #112]	; (27dc <pm_system_suspend+0xc0>)
    276c:	2300      	movs	r3, #0
    276e:	1900      	adds	r0, r0, r4
    2770:	f04f 0400 	mov.w	r4, #0
    2774:	eb44 0101 	adc.w	r1, r4, r1
    2778:	f7fd fcb0 	bl	dc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    277c:	2101      	movs	r1, #1
    277e:	1a30      	subs	r0, r6, r0
    2780:	f004 ffe7 	bl	7752 <z_set_timeout_expiry>
    2784:	e7e0      	b.n	2748 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2786:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    2788:	b10c      	cbz	r4, 278e <pm_system_suspend+0x72>
	return node->next;
    278a:	6823      	ldr	r3, [r4, #0]
    278c:	b143      	cbz	r3, 27a0 <pm_system_suspend+0x84>
{
    278e:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2790:	b134      	cbz	r4, 27a0 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    2792:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    2794:	2b00      	cmp	r3, #0
    2796:	d0f6      	beq.n	2786 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    2798:	4a0c      	ldr	r2, [pc, #48]	; (27cc <pm_system_suspend+0xb0>)
    279a:	7810      	ldrb	r0, [r2, #0]
    279c:	4798      	blx	r3
    279e:	e7f2      	b.n	2786 <pm_system_suspend+0x6a>
	__asm__ volatile(
    27a0:	f385 8811 	msr	BASEPRI, r5
    27a4:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    27a8:	4b08      	ldr	r3, [pc, #32]	; (27cc <pm_system_suspend+0xb0>)
    27aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    27ae:	ab08      	add	r3, sp, #32
    27b0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    27b4:	4b0a      	ldr	r3, [pc, #40]	; (27e0 <pm_system_suspend+0xc4>)
    27b6:	b10b      	cbz	r3, 27bc <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    27b8:	f004 f94b 	bl	6a52 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    27bc:	f7ff ff6e 	bl	269c <pm_system_resume>
	k_sched_unlock();
    27c0:	f002 fb96 	bl	4ef0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    27c4:	4b01      	ldr	r3, [pc, #4]	; (27cc <pm_system_suspend+0xb0>)
    27c6:	7818      	ldrb	r0, [r3, #0]
}
    27c8:	b008      	add	sp, #32
    27ca:	bd70      	pop	{r4, r5, r6, pc}
    27cc:	2000037c 	.word	0x2000037c
    27d0:	20000004 	.word	0x20000004
    27d4:	20000374 	.word	0x20000374
    27d8:	000f423f 	.word	0x000f423f
    27dc:	000f4240 	.word	0x000f4240
    27e0:	00006a53 	.word	0x00006a53

000027e4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    27e4:	4901      	ldr	r1, [pc, #4]	; (27ec <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    27e6:	2210      	movs	r2, #16
	str	r2, [r1]
    27e8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    27ea:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    27ec:	e000ed10 	.word	0xe000ed10

000027f0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    27f0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    27f2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    27f4:	f380 8811 	msr	BASEPRI, r0
	isb
    27f8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    27fc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2800:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2802:	b662      	cpsie	i
	isb
    2804:	f3bf 8f6f 	isb	sy

	bx	lr
    2808:	4770      	bx	lr
    280a:	bf00      	nop

0000280c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    280c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    280e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2810:	f381 8811 	msr	BASEPRI, r1

	wfe
    2814:	bf20      	wfe

	msr	BASEPRI, r0
    2816:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    281a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    281c:	4770      	bx	lr
    281e:	bf00      	nop

00002820 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2820:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2822:	2b00      	cmp	r3, #0
    2824:	db08      	blt.n	2838 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2826:	f000 001f 	and.w	r0, r0, #31
    282a:	095b      	lsrs	r3, r3, #5
    282c:	2201      	movs	r2, #1
    282e:	fa02 f000 	lsl.w	r0, r2, r0
    2832:	4a02      	ldr	r2, [pc, #8]	; (283c <arch_irq_enable+0x1c>)
    2834:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2838:	4770      	bx	lr
    283a:	bf00      	nop
    283c:	e000e100 	.word	0xe000e100

00002840 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2840:	0942      	lsrs	r2, r0, #5
    2842:	4b05      	ldr	r3, [pc, #20]	; (2858 <arch_irq_is_enabled+0x18>)
    2844:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2848:	f000 001f 	and.w	r0, r0, #31
    284c:	2301      	movs	r3, #1
    284e:	fa03 f000 	lsl.w	r0, r3, r0
}
    2852:	4010      	ands	r0, r2
    2854:	4770      	bx	lr
    2856:	bf00      	nop
    2858:	e000e100 	.word	0xe000e100

0000285c <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    285c:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    285e:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2860:	2b00      	cmp	r3, #0
    2862:	db08      	blt.n	2876 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2864:	0149      	lsls	r1, r1, #5
    2866:	b2c9      	uxtb	r1, r1
    2868:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    286c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2870:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    2874:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2876:	f000 000f 	and.w	r0, r0, #15
    287a:	0149      	lsls	r1, r1, #5
    287c:	b2c9      	uxtb	r1, r1
    287e:	4b01      	ldr	r3, [pc, #4]	; (2884 <z_arm_irq_priority_set+0x28>)
    2880:	5419      	strb	r1, [r3, r0]
}
    2882:	4770      	bx	lr
    2884:	e000ed14 	.word	0xe000ed14

00002888 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2888:	bf30      	wfi
    b z_SysNmiOnReset
    288a:	f7ff bffd 	b.w	2888 <z_SysNmiOnReset>
    288e:	bf00      	nop

00002890 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2890:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2892:	4b0b      	ldr	r3, [pc, #44]	; (28c0 <z_arm_prep_c+0x30>)
    2894:	4a0b      	ldr	r2, [pc, #44]	; (28c4 <z_arm_prep_c+0x34>)
    2896:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    289a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    289c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28a0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    28a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    28a8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    28ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    28b0:	f001 ff74 	bl	479c <z_bss_zero>
	z_data_copy();
    28b4:	f002 fc8c 	bl	51d0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    28b8:	f000 fa12 	bl	2ce0 <z_arm_interrupt_init>
	z_cstart();
    28bc:	f001 ff7a 	bl	47b4 <z_cstart>
    28c0:	e000ed00 	.word	0xe000ed00
    28c4:	00000000 	.word	0x00000000

000028c8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    28c8:	4a0a      	ldr	r2, [pc, #40]	; (28f4 <arch_swap+0x2c>)
    28ca:	6893      	ldr	r3, [r2, #8]
    28cc:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    28d0:	4909      	ldr	r1, [pc, #36]	; (28f8 <arch_swap+0x30>)
    28d2:	6809      	ldr	r1, [r1, #0]
    28d4:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    28d8:	4908      	ldr	r1, [pc, #32]	; (28fc <arch_swap+0x34>)
    28da:	684b      	ldr	r3, [r1, #4]
    28dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    28e0:	604b      	str	r3, [r1, #4]
    28e2:	2300      	movs	r3, #0
    28e4:	f383 8811 	msr	BASEPRI, r3
    28e8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    28ec:	6893      	ldr	r3, [r2, #8]
}
    28ee:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    28f2:	4770      	bx	lr
    28f4:	2000093c 	.word	0x2000093c
    28f8:	000084e8 	.word	0x000084e8
    28fc:	e000ed00 	.word	0xe000ed00

00002900 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2900:	4913      	ldr	r1, [pc, #76]	; (2950 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2902:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2904:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2908:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    290a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    290e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2912:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2914:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2918:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    291c:	4f0d      	ldr	r7, [pc, #52]	; (2954 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    291e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2922:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2924:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2926:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2928:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    292c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    292e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2932:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2936:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2938:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    293a:	f000 fa73 	bl	2e24 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    293e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2942:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2946:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    294a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    294e:	4770      	bx	lr
    ldr r1, =_kernel
    2950:	2000093c 	.word	0x2000093c
    ldr v4, =_SCS_ICSR
    2954:	e000ed04 	.word	0xe000ed04

00002958 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2958:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    295c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    295e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2962:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2966:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2968:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    296c:	2902      	cmp	r1, #2
    beq _oops
    296e:	d0ff      	beq.n	2970 <_oops>

00002970 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2970:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2972:	f003 ff39 	bl	67e8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2976:	bd01      	pop	{r0, pc}

00002978 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    2978:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    297a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    297e:	490d      	ldr	r1, [pc, #52]	; (29b4 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2980:	f021 0101 	bic.w	r1, r1, #1
    2984:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    2988:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    298c:	9b01      	ldr	r3, [sp, #4]
    298e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2992:	9b02      	ldr	r3, [sp, #8]
    2994:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2998:	9b03      	ldr	r3, [sp, #12]
    299a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    299e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    29a2:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    29a6:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    29a8:	2300      	movs	r3, #0
    29aa:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    29ae:	bc10      	pop	{r4}
    29b0:	4770      	bx	lr
    29b2:	bf00      	nop
    29b4:	00006693 	.word	0x00006693

000029b8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    29b8:	4b16      	ldr	r3, [pc, #88]	; (2a14 <z_check_thread_stack_fail+0x5c>)
    29ba:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    29bc:	b1da      	cbz	r2, 29f6 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    29be:	f110 0f16 	cmn.w	r0, #22
    29c2:	d01a      	beq.n	29fa <z_check_thread_stack_fail+0x42>
{
    29c4:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    29c6:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    29ca:	f1a3 0420 	sub.w	r4, r3, #32
    29ce:	4284      	cmp	r4, r0
    29d0:	d805      	bhi.n	29de <z_check_thread_stack_fail+0x26>
    29d2:	4283      	cmp	r3, r0
    29d4:	d908      	bls.n	29e8 <z_check_thread_stack_fail+0x30>
    29d6:	428b      	cmp	r3, r1
    29d8:	d808      	bhi.n	29ec <z_check_thread_stack_fail+0x34>
    29da:	2100      	movs	r1, #0
    29dc:	e000      	b.n	29e0 <z_check_thread_stack_fail+0x28>
    29de:	2100      	movs	r1, #0
    29e0:	b931      	cbnz	r1, 29f0 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    29e2:	2000      	movs	r0, #0
}
    29e4:	bc10      	pop	{r4}
    29e6:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    29e8:	2100      	movs	r1, #0
    29ea:	e7f9      	b.n	29e0 <z_check_thread_stack_fail+0x28>
    29ec:	2101      	movs	r1, #1
    29ee:	e7f7      	b.n	29e0 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    29f0:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    29f4:	e7f6      	b.n	29e4 <z_check_thread_stack_fail+0x2c>
		return 0;
    29f6:	2000      	movs	r0, #0
    29f8:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    29fa:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    29fe:	428b      	cmp	r3, r1
    2a00:	bf94      	ite	ls
    2a02:	2100      	movls	r1, #0
    2a04:	2101      	movhi	r1, #1
    2a06:	b909      	cbnz	r1, 2a0c <z_check_thread_stack_fail+0x54>
	return 0;
    2a08:	2000      	movs	r0, #0
}
    2a0a:	4770      	bx	lr
		return thread->stack_info.start;
    2a0c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    2a10:	4770      	bx	lr
    2a12:	bf00      	nop
    2a14:	2000093c 	.word	0x2000093c

00002a18 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2a18:	b508      	push	{r3, lr}
    2a1a:	460d      	mov	r5, r1
    2a1c:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2a1e:	4b08      	ldr	r3, [pc, #32]	; (2a40 <arch_switch_to_main_thread+0x28>)
    2a20:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2a22:	f000 f9ff 	bl	2e24 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2a26:	4620      	mov	r0, r4
    2a28:	f385 8809 	msr	PSP, r5
    2a2c:	2100      	movs	r1, #0
    2a2e:	b663      	cpsie	if
    2a30:	f381 8811 	msr	BASEPRI, r1
    2a34:	f3bf 8f6f 	isb	sy
    2a38:	2200      	movs	r2, #0
    2a3a:	2300      	movs	r3, #0
    2a3c:	f003 fe29 	bl	6692 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2a40:	2000093c 	.word	0x2000093c

00002a44 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2a44:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2a46:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2a48:	4a0b      	ldr	r2, [pc, #44]	; (2a78 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2a4a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2a4c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2a4e:	bf1e      	ittt	ne
	movne	r1, #0
    2a50:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2a52:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2a54:	f004 fd09 	blne	746a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2a58:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2a5a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2a5e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2a62:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2a66:	4905      	ldr	r1, [pc, #20]	; (2a7c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2a68:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2a6a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2a6c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2a6e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2a72:	4903      	ldr	r1, [pc, #12]	; (2a80 <_isr_wrapper+0x3c>)
	bx r1
    2a74:	4708      	bx	r1
    2a76:	0000      	.short	0x0000
	ldr r2, =_kernel
    2a78:	2000093c 	.word	0x2000093c
	ldr r1, =_sw_isr_table
    2a7c:	0000787c 	.word	0x0000787c
	ldr r1, =z_arm_int_exit
    2a80:	00002a85 	.word	0x00002a85

00002a84 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2a84:	4b04      	ldr	r3, [pc, #16]	; (2a98 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2a86:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2a88:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2a8a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2a8c:	d003      	beq.n	2a96 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2a8e:	4903      	ldr	r1, [pc, #12]	; (2a9c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2a94:	600a      	str	r2, [r1, #0]

00002a96 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2a96:	4770      	bx	lr
	ldr r3, =_kernel
    2a98:	2000093c 	.word	0x2000093c
	ldr r1, =_SCS_ICSR
    2a9c:	e000ed04 	.word	0xe000ed04

00002aa0 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    2aa0:	b510      	push	{r4, lr}
    2aa2:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2aa4:	4b12      	ldr	r3, [pc, #72]	; (2af0 <bus_fault+0x50>)
    2aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2aac:	f413 7f00 	tst.w	r3, #512	; 0x200
    2ab0:	d00b      	beq.n	2aca <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2ab2:	4b0f      	ldr	r3, [pc, #60]	; (2af0 <bus_fault+0x50>)
    2ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ab8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2abc:	d005      	beq.n	2aca <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2abe:	b121      	cbz	r1, 2aca <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2ac0:	4a0b      	ldr	r2, [pc, #44]	; (2af0 <bus_fault+0x50>)
    2ac2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2ac8:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2aca:	4b09      	ldr	r3, [pc, #36]	; (2af0 <bus_fault+0x50>)
    2acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ad0:	f413 7f80 	tst.w	r3, #256	; 0x100
    2ad4:	d101      	bne.n	2ada <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2ad6:	4b06      	ldr	r3, [pc, #24]	; (2af0 <bus_fault+0x50>)
    2ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2ada:	4a05      	ldr	r2, [pc, #20]	; (2af0 <bus_fault+0x50>)
    2adc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2ade:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2ae2:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2ae4:	2101      	movs	r1, #1
    2ae6:	f003 fe91 	bl	680c <memory_fault_recoverable>
    2aea:	7020      	strb	r0, [r4, #0]

	return reason;
}
    2aec:	2000      	movs	r0, #0
    2aee:	bd10      	pop	{r4, pc}
    2af0:	e000ed00 	.word	0xe000ed00

00002af4 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2af4:	4b07      	ldr	r3, [pc, #28]	; (2b14 <usage_fault+0x20>)
    2af6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2afa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2b04:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2b08:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2b0c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    2b0e:	2000      	movs	r0, #0
    2b10:	4770      	bx	lr
    2b12:	bf00      	nop
    2b14:	e000ed00 	.word	0xe000ed00

00002b18 <mem_manage_fault>:
{
    2b18:	b570      	push	{r4, r5, r6, lr}
    2b1a:	4605      	mov	r5, r0
    2b1c:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2b1e:	4b20      	ldr	r3, [pc, #128]	; (2ba0 <mem_manage_fault+0x88>)
    2b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2b22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b26:	f013 0f02 	tst.w	r3, #2
    2b2a:	d00c      	beq.n	2b46 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    2b2c:	4b1c      	ldr	r3, [pc, #112]	; (2ba0 <mem_manage_fault+0x88>)
    2b2e:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b32:	f013 0f80 	tst.w	r3, #128	; 0x80
    2b36:	d025      	beq.n	2b84 <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
    2b38:	b139      	cbz	r1, 2b4a <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2b3a:	4a19      	ldr	r2, [pc, #100]	; (2ba0 <mem_manage_fault+0x88>)
    2b3c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2b42:	6293      	str	r3, [r2, #40]	; 0x28
    2b44:	e001      	b.n	2b4a <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    2b46:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2b4a:	4b15      	ldr	r3, [pc, #84]	; (2ba0 <mem_manage_fault+0x88>)
    2b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b52:	f013 0f10 	tst.w	r3, #16
    2b56:	d104      	bne.n	2b62 <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2b58:	4b11      	ldr	r3, [pc, #68]	; (2ba0 <mem_manage_fault+0x88>)
    2b5a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2b5c:	f014 0402 	ands.w	r4, r4, #2
    2b60:	d004      	beq.n	2b6c <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2b62:	4b0f      	ldr	r3, [pc, #60]	; (2ba0 <mem_manage_fault+0x88>)
    2b64:	685c      	ldr	r4, [r3, #4]
    2b66:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    2b6a:	d10e      	bne.n	2b8a <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2b6c:	4a0c      	ldr	r2, [pc, #48]	; (2ba0 <mem_manage_fault+0x88>)
    2b6e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2b70:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2b74:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2b76:	2101      	movs	r1, #1
    2b78:	4628      	mov	r0, r5
    2b7a:	f003 fe47 	bl	680c <memory_fault_recoverable>
    2b7e:	7030      	strb	r0, [r6, #0]
}
    2b80:	4620      	mov	r0, r4
    2b82:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    2b84:	f06f 0015 	mvn.w	r0, #21
    2b88:	e7df      	b.n	2b4a <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2b8a:	4629      	mov	r1, r5
    2b8c:	f7ff ff14 	bl	29b8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2b90:	4604      	mov	r4, r0
    2b92:	2800      	cmp	r0, #0
    2b94:	d0ea      	beq.n	2b6c <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2b96:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2b9a:	2402      	movs	r4, #2
    2b9c:	e7e6      	b.n	2b6c <mem_manage_fault+0x54>
    2b9e:	bf00      	nop
    2ba0:	e000ed00 	.word	0xe000ed00

00002ba4 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    2ba4:	b510      	push	{r4, lr}
    2ba6:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    2ba8:	2300      	movs	r3, #0
    2baa:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2bac:	4b1b      	ldr	r3, [pc, #108]	; (2c1c <hard_fault+0x78>)
    2bae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    2bb0:	f010 0002 	ands.w	r0, r0, #2
    2bb4:	d12d      	bne.n	2c12 <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bb8:	2b00      	cmp	r3, #0
    2bba:	db2b      	blt.n	2c14 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2bbc:	4b17      	ldr	r3, [pc, #92]	; (2c1c <hard_fault+0x78>)
    2bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bc0:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    2bc4:	d027      	beq.n	2c16 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    2bc6:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    2bc8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2bcc:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2bd0:	429a      	cmp	r2, r3
    2bd2:	d010      	beq.n	2bf6 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    2bd4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2bd8:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    2bdc:	781b      	ldrb	r3, [r3, #0]
    2bde:	b963      	cbnz	r3, 2bfa <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    2be0:	4b0f      	ldr	r3, [pc, #60]	; (2c20 <hard_fault+0x7c>)
    2be2:	781b      	ldrb	r3, [r3, #0]
    2be4:	b97b      	cbnz	r3, 2c06 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    2be6:	4b0f      	ldr	r3, [pc, #60]	; (2c24 <hard_fault+0x80>)
    2be8:	881b      	ldrh	r3, [r3, #0]
    2bea:	b29b      	uxth	r3, r3
    2bec:	b193      	cbz	r3, 2c14 <hard_fault+0x70>
			reason = usage_fault(esf);
    2bee:	4620      	mov	r0, r4
    2bf0:	f7ff ff80 	bl	2af4 <usage_fault>
    2bf4:	e00e      	b.n	2c14 <hard_fault+0x70>
			reason = esf->basic.r0;
    2bf6:	6820      	ldr	r0, [r4, #0]
    2bf8:	e00c      	b.n	2c14 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    2bfa:	460a      	mov	r2, r1
    2bfc:	2101      	movs	r1, #1
    2bfe:	4620      	mov	r0, r4
    2c00:	f7ff ff8a 	bl	2b18 <mem_manage_fault>
    2c04:	e006      	b.n	2c14 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    2c06:	460a      	mov	r2, r1
    2c08:	2101      	movs	r1, #1
    2c0a:	4620      	mov	r0, r4
    2c0c:	f7ff ff48 	bl	2aa0 <bus_fault>
    2c10:	e000      	b.n	2c14 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2c12:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    2c14:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2c16:	4618      	mov	r0, r3
	return reason;
    2c18:	e7fc      	b.n	2c14 <hard_fault+0x70>
    2c1a:	bf00      	nop
    2c1c:	e000ed00 	.word	0xe000ed00
    2c20:	e000ed29 	.word	0xe000ed29
    2c24:	e000ed2a 	.word	0xe000ed2a

00002c28 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2c28:	b570      	push	{r4, r5, r6, lr}
    2c2a:	b08a      	sub	sp, #40	; 0x28
    2c2c:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c2e:	4b22      	ldr	r3, [pc, #136]	; (2cb8 <z_arm_fault+0x90>)
    2c30:	6859      	ldr	r1, [r3, #4]
    2c32:	f3c1 0108 	ubfx	r1, r1, #0, #9
    2c36:	2300      	movs	r3, #0
    2c38:	f383 8811 	msr	BASEPRI, r3
    2c3c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2c40:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2c44:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2c48:	d115      	bne.n	2c76 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2c4a:	f002 030c 	and.w	r3, r2, #12
    2c4e:	2b08      	cmp	r3, #8
    2c50:	d014      	beq.n	2c7c <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2c52:	f012 0f08 	tst.w	r2, #8
    2c56:	d00b      	beq.n	2c70 <z_arm_fault+0x48>
	*nested_exc = false;
    2c58:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    2c5a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    2c5e:	4620      	mov	r0, r4
    2c60:	f003 fdd9 	bl	6816 <fault_handle>
    2c64:	4605      	mov	r5, r0
	if (recoverable) {
    2c66:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2c6a:	b153      	cbz	r3, 2c82 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    2c6c:	b00a      	add	sp, #40	; 0x28
    2c6e:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    2c70:	4604      	mov	r4, r0
			*nested_exc = true;
    2c72:	2601      	movs	r6, #1
    2c74:	e7f1      	b.n	2c5a <z_arm_fault+0x32>
	*nested_exc = false;
    2c76:	2600      	movs	r6, #0
		return NULL;
    2c78:	4634      	mov	r4, r6
    2c7a:	e7ee      	b.n	2c5a <z_arm_fault+0x32>
	*nested_exc = false;
    2c7c:	2600      	movs	r6, #0
		return NULL;
    2c7e:	4634      	mov	r4, r6
    2c80:	e7eb      	b.n	2c5a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2c82:	2220      	movs	r2, #32
    2c84:	4621      	mov	r1, r4
    2c86:	a801      	add	r0, sp, #4
    2c88:	f003 fe92 	bl	69b0 <memcpy>
	if (nested_exc) {
    2c8c:	b14e      	cbz	r6, 2ca2 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2c8e:	9b08      	ldr	r3, [sp, #32]
    2c90:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2c94:	b95a      	cbnz	r2, 2cae <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2c96:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2c9a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2c9e:	9308      	str	r3, [sp, #32]
    2ca0:	e005      	b.n	2cae <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2ca2:	9b08      	ldr	r3, [sp, #32]
    2ca4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2ca8:	f023 0301 	bic.w	r3, r3, #1
    2cac:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    2cae:	a901      	add	r1, sp, #4
    2cb0:	4628      	mov	r0, r5
    2cb2:	f003 fd95 	bl	67e0 <z_arm_fatal_error>
    2cb6:	e7d9      	b.n	2c6c <z_arm_fault+0x44>
    2cb8:	e000ed00 	.word	0xe000ed00

00002cbc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2cbc:	4a02      	ldr	r2, [pc, #8]	; (2cc8 <z_arm_fault_init+0xc>)
    2cbe:	6953      	ldr	r3, [r2, #20]
    2cc0:	f043 0310 	orr.w	r3, r3, #16
    2cc4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2cc6:	4770      	bx	lr
    2cc8:	e000ed00 	.word	0xe000ed00

00002ccc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2ccc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2cd0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2cd4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2cd6:	4672      	mov	r2, lr
	bl z_arm_fault
    2cd8:	f7ff ffa6 	bl	2c28 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2cdc:	bd01      	pop	{r0, pc}
    2cde:	bf00      	nop

00002ce0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2ce0:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2ce2:	e006      	b.n	2cf2 <z_arm_interrupt_init+0x12>
    2ce4:	f002 010f 	and.w	r1, r2, #15
    2ce8:	4b09      	ldr	r3, [pc, #36]	; (2d10 <z_arm_interrupt_init+0x30>)
    2cea:	440b      	add	r3, r1
    2cec:	2120      	movs	r1, #32
    2cee:	7619      	strb	r1, [r3, #24]
    2cf0:	3201      	adds	r2, #1
    2cf2:	2a26      	cmp	r2, #38	; 0x26
    2cf4:	dc0a      	bgt.n	2d0c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    2cf6:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	dbf3      	blt.n	2ce4 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2cfc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2d00:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2d04:	2120      	movs	r1, #32
    2d06:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    2d0a:	e7f1      	b.n	2cf0 <z_arm_interrupt_init+0x10>
	}
}
    2d0c:	4770      	bx	lr
    2d0e:	bf00      	nop
    2d10:	e000ecfc 	.word	0xe000ecfc

00002d14 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2d14:	2000      	movs	r0, #0
    msr CONTROL, r0
    2d16:	f380 8814 	msr	CONTROL, r0
    isb
    2d1a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2d1e:	f004 fd5b 	bl	77d8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2d22:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2d24:	490d      	ldr	r1, [pc, #52]	; (2d5c <__start+0x48>)
    str r0, [r1]
    2d26:	6008      	str	r0, [r1, #0]
    dsb
    2d28:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2d2c:	480c      	ldr	r0, [pc, #48]	; (2d60 <__start+0x4c>)
    msr msp, r0
    2d2e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2d32:	f000 f829 	bl	2d88 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2d36:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2d38:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2d3c:	4809      	ldr	r0, [pc, #36]	; (2d64 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2d3e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2d42:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2d44:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2d48:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2d4c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2d4e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2d50:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2d54:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2d58:	f7ff fd9a 	bl	2890 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2d5c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2d60:	20000d80 	.word	0x20000d80
    ldr r0, =z_interrupt_stacks
    2d64:	20000f00 	.word	0x20000f00

00002d68 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2d68:	4b06      	ldr	r3, [pc, #24]	; (2d84 <z_arm_clear_arm_mpu_config+0x1c>)
    2d6a:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    2d6c:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    2d70:	2300      	movs	r3, #0
    2d72:	4283      	cmp	r3, r0
    2d74:	da05      	bge.n	2d82 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    2d76:	4a03      	ldr	r2, [pc, #12]	; (2d84 <z_arm_clear_arm_mpu_config+0x1c>)
    2d78:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2d7a:	2100      	movs	r1, #0
    2d7c:	6111      	str	r1, [r2, #16]
    2d7e:	3301      	adds	r3, #1
    2d80:	e7f7      	b.n	2d72 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    2d82:	4770      	bx	lr
    2d84:	e000ed90 	.word	0xe000ed90

00002d88 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2d88:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2d8a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2d8c:	2400      	movs	r4, #0
    2d8e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2d92:	f7ff ffe9 	bl	2d68 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2d96:	4623      	mov	r3, r4
    2d98:	e008      	b.n	2dac <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    2d9a:	f103 0120 	add.w	r1, r3, #32
    2d9e:	4a0e      	ldr	r2, [pc, #56]	; (2dd8 <z_arm_init_arch_hw_at_boot+0x50>)
    2da0:	f04f 30ff 	mov.w	r0, #4294967295
    2da4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2da8:	3301      	adds	r3, #1
    2daa:	b2db      	uxtb	r3, r3
    2dac:	2b07      	cmp	r3, #7
    2dae:	d9f4      	bls.n	2d9a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2db0:	2300      	movs	r3, #0
    2db2:	e008      	b.n	2dc6 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2db4:	f103 0160 	add.w	r1, r3, #96	; 0x60
    2db8:	4a07      	ldr	r2, [pc, #28]	; (2dd8 <z_arm_init_arch_hw_at_boot+0x50>)
    2dba:	f04f 30ff 	mov.w	r0, #4294967295
    2dbe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2dc2:	3301      	adds	r3, #1
    2dc4:	b2db      	uxtb	r3, r3
    2dc6:	2b07      	cmp	r3, #7
    2dc8:	d9f4      	bls.n	2db4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    2dca:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2dcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2dd0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2dd4:	bd10      	pop	{r4, pc}
    2dd6:	bf00      	nop
    2dd8:	e000e100 	.word	0xe000e100

00002ddc <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    2ddc:	b508      	push	{r3, lr}
	if (_current == thread) {
    2dde:	4b08      	ldr	r3, [pc, #32]	; (2e00 <z_impl_k_thread_abort+0x24>)
    2de0:	689b      	ldr	r3, [r3, #8]
    2de2:	4283      	cmp	r3, r0
    2de4:	d002      	beq.n	2dec <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    2de6:	f002 f9cb 	bl	5180 <z_thread_abort>
}
    2dea:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2dec:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2df0:	2b00      	cmp	r3, #0
    2df2:	d0f8      	beq.n	2de6 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2df4:	4a03      	ldr	r2, [pc, #12]	; (2e04 <z_impl_k_thread_abort+0x28>)
    2df6:	6853      	ldr	r3, [r2, #4]
    2df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2dfc:	6053      	str	r3, [r2, #4]
    2dfe:	e7f2      	b.n	2de6 <z_impl_k_thread_abort+0xa>
    2e00:	2000093c 	.word	0x2000093c
    2e04:	e000ed00 	.word	0xe000ed00

00002e08 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2e08:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2e0a:	4b03      	ldr	r3, [pc, #12]	; (2e18 <z_arm_configure_static_mpu_regions+0x10>)
    2e0c:	4a03      	ldr	r2, [pc, #12]	; (2e1c <z_arm_configure_static_mpu_regions+0x14>)
    2e0e:	2101      	movs	r1, #1
    2e10:	4803      	ldr	r0, [pc, #12]	; (2e20 <z_arm_configure_static_mpu_regions+0x18>)
    2e12:	f003 fd86 	bl	6922 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2e16:	bd08      	pop	{r3, pc}
    2e18:	20010000 	.word	0x20010000
    2e1c:	20000000 	.word	0x20000000
    2e20:	000083d4 	.word	0x000083d4

00002e24 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    2e24:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2e26:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    2e2a:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2e2c:	4804      	ldr	r0, [pc, #16]	; (2e40 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2e2e:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    2e30:	2320      	movs	r3, #32
    2e32:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2e34:	4b03      	ldr	r3, [pc, #12]	; (2e44 <z_arm_configure_dynamic_mpu_regions+0x20>)
    2e36:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2e38:	2101      	movs	r1, #1
    2e3a:	f003 fd76 	bl	692a <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    2e3e:	bd08      	pop	{r3, pc}
    2e40:	20000388 	.word	0x20000388
    2e44:	150b0000 	.word	0x150b0000

00002e48 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2e48:	4a06      	ldr	r2, [pc, #24]	; (2e64 <region_init+0x1c>)
    2e4a:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2e4c:	680b      	ldr	r3, [r1, #0]
    2e4e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2e52:	4303      	orrs	r3, r0
    2e54:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2e58:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2e5a:	688b      	ldr	r3, [r1, #8]
    2e5c:	f043 0301 	orr.w	r3, r3, #1
    2e60:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    2e62:	4770      	bx	lr
    2e64:	e000ed90 	.word	0xe000ed90

00002e68 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    2e68:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    2e6a:	4c03      	ldr	r4, [pc, #12]	; (2e78 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2e6c:	2301      	movs	r3, #1
    2e6e:	7822      	ldrb	r2, [r4, #0]
    2e70:	f003 fd2f 	bl	68d2 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2e74:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    2e76:	bd10      	pop	{r4, pc}
    2e78:	20000978 	.word	0x20000978

00002e7c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2e7c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2e7e:	2300      	movs	r3, #0
    2e80:	4a08      	ldr	r2, [pc, #32]	; (2ea4 <mpu_configure_dynamic_mpu_regions+0x28>)
    2e82:	7812      	ldrb	r2, [r2, #0]
    2e84:	f003 fd25 	bl	68d2 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2e88:	f110 0f16 	cmn.w	r0, #22
    2e8c:	d008      	beq.n	2ea0 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2e8e:	4603      	mov	r3, r0
    2e90:	2b07      	cmp	r3, #7
    2e92:	dc05      	bgt.n	2ea0 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    2e94:	4a04      	ldr	r2, [pc, #16]	; (2ea8 <mpu_configure_dynamic_mpu_regions+0x2c>)
    2e96:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2e98:	2100      	movs	r1, #0
    2e9a:	6111      	str	r1, [r2, #16]
    2e9c:	3301      	adds	r3, #1
    2e9e:	e7f7      	b.n	2e90 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    2ea0:	bd08      	pop	{r3, pc}
    2ea2:	bf00      	nop
    2ea4:	20000978 	.word	0x20000978
    2ea8:	e000ed90 	.word	0xe000ed90

00002eac <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2eac:	4b03      	ldr	r3, [pc, #12]	; (2ebc <arm_core_mpu_enable+0x10>)
    2eae:	2205      	movs	r2, #5
    2eb0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2eb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2eb6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2eba:	4770      	bx	lr
    2ebc:	e000ed90 	.word	0xe000ed90

00002ec0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2ec0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2ec4:	4b01      	ldr	r3, [pc, #4]	; (2ecc <arm_core_mpu_disable+0xc>)
    2ec6:	2200      	movs	r2, #0
    2ec8:	605a      	str	r2, [r3, #4]
}
    2eca:	4770      	bx	lr
    2ecc:	e000ed90 	.word	0xe000ed90

00002ed0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    2ed0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2ed2:	4b0e      	ldr	r3, [pc, #56]	; (2f0c <z_arm_mpu_init+0x3c>)
    2ed4:	681d      	ldr	r5, [r3, #0]
    2ed6:	2d08      	cmp	r5, #8
    2ed8:	d815      	bhi.n	2f06 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2eda:	f7ff fff1 	bl	2ec0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2ede:	2400      	movs	r4, #0
    2ee0:	42a5      	cmp	r5, r4
    2ee2:	d90a      	bls.n	2efa <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2ee4:	4b09      	ldr	r3, [pc, #36]	; (2f0c <z_arm_mpu_init+0x3c>)
    2ee6:	6859      	ldr	r1, [r3, #4]
    2ee8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2eec:	0093      	lsls	r3, r2, #2
    2eee:	4419      	add	r1, r3
    2ef0:	4620      	mov	r0, r4
    2ef2:	f7ff ffa9 	bl	2e48 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2ef6:	3401      	adds	r4, #1
    2ef8:	e7f2      	b.n	2ee0 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2efa:	4b05      	ldr	r3, [pc, #20]	; (2f10 <z_arm_mpu_init+0x40>)
    2efc:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    2efe:	f7ff ffd5 	bl	2eac <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2f02:	2000      	movs	r0, #0
}
    2f04:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    2f06:	f04f 30ff 	mov.w	r0, #4294967295
    2f0a:	e7fb      	b.n	2f04 <z_arm_mpu_init+0x34>
    2f0c:	000083f0 	.word	0x000083f0
    2f10:	20000978 	.word	0x20000978

00002f14 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2f14:	4b01      	ldr	r3, [pc, #4]	; (2f1c <__stdout_hook_install+0x8>)
    2f16:	6018      	str	r0, [r3, #0]
}
    2f18:	4770      	bx	lr
    2f1a:	bf00      	nop
    2f1c:	20000008 	.word	0x20000008

00002f20 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT str, const char *_MLIBC_RESTRICT format, ...)
{
    2f20:	b40e      	push	{r1, r2, r3}
    2f22:	b500      	push	{lr}
    2f24:	b084      	sub	sp, #16
    2f26:	ab05      	add	r3, sp, #20
    2f28:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;

	struct emitter p;
	int     r;

	p.ptr = str;
    2f2c:	9001      	str	r0, [sp, #4]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    2f2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2f32:	9102      	str	r1, [sp, #8]

	va_start(vargs, format);
    2f34:	9303      	str	r3, [sp, #12]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    2f36:	a901      	add	r1, sp, #4
    2f38:	4805      	ldr	r0, [pc, #20]	; (2f50 <sprintf+0x30>)
    2f3a:	f7fe fec5 	bl	1cc8 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    2f3e:	9b01      	ldr	r3, [sp, #4]
    2f40:	2200      	movs	r2, #0
    2f42:	701a      	strb	r2, [r3, #0]
	return r;
}
    2f44:	b004      	add	sp, #16
    2f46:	f85d eb04 	ldr.w	lr, [sp], #4
    2f4a:	b003      	add	sp, #12
    2f4c:	4770      	bx	lr
    2f4e:	bf00      	nop
    2f50:	00006a39 	.word	0x00006a39

00002f54 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2f54:	f04f 0220 	mov.w	r2, #32
    2f58:	f3ef 8311 	mrs	r3, BASEPRI
    2f5c:	f382 8812 	msr	BASEPRI_MAX, r2
    2f60:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2f64:	4a04      	ldr	r2, [pc, #16]	; (2f78 <nordicsemi_nrf52_init+0x24>)
    2f66:	2101      	movs	r1, #1
    2f68:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    2f6c:	f383 8811 	msr	BASEPRI, r3
    2f70:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2f74:	2000      	movs	r0, #0
    2f76:	4770      	bx	lr
    2f78:	4001e000 	.word	0x4001e000

00002f7c <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    2f7c:	b2c0      	uxtb	r0, r0
    2f7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f82:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2f86:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2f8a:	4905      	ldr	r1, [pc, #20]	; (2fa0 <sys_arch_reboot+0x24>)
    2f8c:	68ca      	ldr	r2, [r1, #12]
    2f8e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2f92:	4b04      	ldr	r3, [pc, #16]	; (2fa4 <sys_arch_reboot+0x28>)
    2f94:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2f96:	60cb      	str	r3, [r1, #12]
    2f98:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2f9c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2f9e:	e7fd      	b.n	2f9c <sys_arch_reboot+0x20>
    2fa0:	e000ed00 	.word	0xe000ed00
    2fa4:	05fa0004 	.word	0x05fa0004

00002fa8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2fa8:	b130      	cbz	r0, 2fb8 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    2faa:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2fac:	0180      	lsls	r0, r0, #6
    2fae:	4b03      	ldr	r3, [pc, #12]	; (2fbc <arch_busy_wait+0x14>)
    2fb0:	f043 0301 	orr.w	r3, r3, #1
    2fb4:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    2fb6:	bd08      	pop	{r3, pc}
    2fb8:	4770      	bx	lr
    2fba:	bf00      	nop
    2fbc:	00007a10 	.word	0x00007a10

00002fc0 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    2fc0:	4800      	ldr	r0, [pc, #0]	; (2fc4 <get_hf_flags+0x4>)
    2fc2:	4770      	bx	lr
    2fc4:	200003e4 	.word	0x200003e4

00002fc8 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2fc8:	4b03      	ldr	r3, [pc, #12]	; (2fd8 <get_subsys+0x10>)
    2fca:	1ac0      	subs	r0, r0, r3
    2fcc:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    2fce:	4b03      	ldr	r3, [pc, #12]	; (2fdc <get_subsys+0x14>)
    2fd0:	fb03 f000 	mul.w	r0, r3, r0
    2fd4:	4770      	bx	lr
    2fd6:	bf00      	nop
    2fd8:	200003a4 	.word	0x200003a4
    2fdc:	b6db6db7 	.word	0xb6db6db7

00002fe0 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2fe0:	b538      	push	{r3, r4, r5, lr}
    2fe2:	4605      	mov	r5, r0
    2fe4:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2fe6:	f7ff ffef 	bl	2fc8 <get_subsys>
    2fea:	4601      	mov	r1, r0
    2fec:	2240      	movs	r2, #64	; 0x40
    2fee:	4803      	ldr	r0, [pc, #12]	; (2ffc <onoff_stop+0x1c>)
    2ff0:	f003 fdc4 	bl	6b7c <stop>
    2ff4:	4601      	mov	r1, r0
	notify(mgr, res);
    2ff6:	4628      	mov	r0, r5
    2ff8:	47a0      	blx	r4
}
    2ffa:	bd38      	pop	{r3, r4, r5, pc}
    2ffc:	0000781c 	.word	0x0000781c

00003000 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3000:	b530      	push	{r4, r5, lr}
    3002:	b083      	sub	sp, #12
    3004:	4605      	mov	r5, r0
    3006:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3008:	f7ff ffde 	bl	2fc8 <get_subsys>
    300c:	4601      	mov	r1, r0
    300e:	2340      	movs	r3, #64	; 0x40
    3010:	9300      	str	r3, [sp, #0]
    3012:	4623      	mov	r3, r4
    3014:	4a05      	ldr	r2, [pc, #20]	; (302c <onoff_start+0x2c>)
    3016:	4806      	ldr	r0, [pc, #24]	; (3030 <onoff_start+0x30>)
    3018:	f003 fdca 	bl	6bb0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    301c:	1e01      	subs	r1, r0, #0
    301e:	db01      	blt.n	3024 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    3020:	b003      	add	sp, #12
    3022:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    3024:	4628      	mov	r0, r5
    3026:	47a0      	blx	r4
}
    3028:	e7fa      	b.n	3020 <onoff_start+0x20>
    302a:	bf00      	nop
    302c:	00006bf9 	.word	0x00006bf9
    3030:	0000781c 	.word	0x0000781c

00003034 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    3034:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    3036:	b110      	cbz	r0, 303e <clock_event_handler+0xa>
    3038:	2801      	cmp	r0, #1
    303a:	d00d      	beq.n	3058 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    303c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    303e:	2100      	movs	r1, #0
    3040:	4808      	ldr	r0, [pc, #32]	; (3064 <clock_event_handler+0x30>)
    3042:	f003 fd24 	bl	6a8e <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3046:	6883      	ldr	r3, [r0, #8]
    3048:	f013 0f07 	tst.w	r3, #7
    304c:	d1f6      	bne.n	303c <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    304e:	2100      	movs	r1, #0
    3050:	4804      	ldr	r0, [pc, #16]	; (3064 <clock_event_handler+0x30>)
    3052:	f003 fd81 	bl	6b58 <clkstarted_handle>
    3056:	e7f1      	b.n	303c <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3058:	2101      	movs	r1, #1
    305a:	4802      	ldr	r0, [pc, #8]	; (3064 <clock_event_handler+0x30>)
    305c:	f003 fd7c 	bl	6b58 <clkstarted_handle>
}
    3060:	e7ec      	b.n	303c <clock_event_handler+0x8>
    3062:	bf00      	nop
    3064:	0000781c 	.word	0x0000781c

00003068 <generic_hfclk_start>:
{
    3068:	b510      	push	{r4, lr}
	__asm__ volatile(
    306a:	f04f 0320 	mov.w	r3, #32
    306e:	f3ef 8411 	mrs	r4, BASEPRI
    3072:	f383 8812 	msr	BASEPRI_MAX, r3
    3076:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    307a:	4a13      	ldr	r2, [pc, #76]	; (30c8 <generic_hfclk_start+0x60>)
    307c:	6813      	ldr	r3, [r2, #0]
    307e:	f043 0302 	orr.w	r3, r3, #2
    3082:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3084:	f013 0f01 	tst.w	r3, #1
    3088:	d108      	bne.n	309c <generic_hfclk_start+0x34>
	bool already_started = false;
    308a:	2300      	movs	r3, #0
	__asm__ volatile(
    308c:	f384 8811 	msr	BASEPRI, r4
    3090:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3094:	b99b      	cbnz	r3, 30be <generic_hfclk_start+0x56>
	hfclk_start();
    3096:	f003 fdb7 	bl	6c08 <hfclk_start>
}
    309a:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    309c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30a0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    30a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    30a8:	f012 0f01 	tst.w	r2, #1
    30ac:	d101      	bne.n	30b2 <generic_hfclk_start+0x4a>
	bool already_started = false;
    30ae:	2300      	movs	r3, #0
    30b0:	e7ec      	b.n	308c <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    30b2:	f7ff ff85 	bl	2fc0 <get_hf_flags>
    30b6:	f003 fd3c 	bl	6b32 <set_on_state>
			already_started = true;
    30ba:	2301      	movs	r3, #1
    30bc:	e7e6      	b.n	308c <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    30be:	2100      	movs	r1, #0
    30c0:	4802      	ldr	r0, [pc, #8]	; (30cc <generic_hfclk_start+0x64>)
    30c2:	f003 fd49 	bl	6b58 <clkstarted_handle>
		return;
    30c6:	e7e8      	b.n	309a <generic_hfclk_start+0x32>
    30c8:	200003f4 	.word	0x200003f4
    30cc:	0000781c 	.word	0x0000781c

000030d0 <generic_hfclk_stop>:
{
    30d0:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    30d2:	4b0a      	ldr	r3, [pc, #40]	; (30fc <generic_hfclk_stop+0x2c>)
    30d4:	f3bf 8f5b 	dmb	ish
    30d8:	e853 2f00 	ldrex	r2, [r3]
    30dc:	f022 0102 	bic.w	r1, r2, #2
    30e0:	e843 1000 	strex	r0, r1, [r3]
    30e4:	2800      	cmp	r0, #0
    30e6:	d1f7      	bne.n	30d8 <generic_hfclk_stop+0x8>
    30e8:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    30ec:	f012 0f01 	tst.w	r2, #1
    30f0:	d000      	beq.n	30f4 <generic_hfclk_stop+0x24>
}
    30f2:	bd08      	pop	{r3, pc}
	hfclk_stop();
    30f4:	f003 fd8d 	bl	6c12 <hfclk_stop>
    30f8:	e7fb      	b.n	30f2 <generic_hfclk_stop+0x22>
    30fa:	bf00      	nop
    30fc:	200003f4 	.word	0x200003f4

00003100 <api_blocking_start>:
{
    3100:	b500      	push	{lr}
    3102:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3104:	f8cd d000 	str.w	sp, [sp]
    3108:	f8cd d004 	str.w	sp, [sp, #4]
    310c:	2300      	movs	r3, #0
    310e:	9302      	str	r3, [sp, #8]
    3110:	2301      	movs	r3, #1
    3112:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3114:	466b      	mov	r3, sp
    3116:	4a07      	ldr	r2, [pc, #28]	; (3134 <api_blocking_start+0x34>)
    3118:	f003 fd66 	bl	6be8 <api_start>
	if (err < 0) {
    311c:	2800      	cmp	r0, #0
    311e:	db05      	blt.n	312c <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    3120:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3124:	2300      	movs	r3, #0
    3126:	4668      	mov	r0, sp
    3128:	f001 fc9c 	bl	4a64 <z_impl_k_sem_take>
}
    312c:	b005      	add	sp, #20
    312e:	f85d fb04 	ldr.w	pc, [sp], #4
    3132:	bf00      	nop
    3134:	00006c27 	.word	0x00006c27

00003138 <lfclk_start>:
{
    3138:	b508      	push	{r3, lr}
	if (!once) {
    313a:	4b07      	ldr	r3, [pc, #28]	; (3158 <lfclk_start+0x20>)
    313c:	781b      	ldrb	r3, [r3, #0]
    313e:	b11b      	cbz	r3, 3148 <lfclk_start+0x10>
}
#endif // defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK_192M

NRFX_STATIC_INLINE void nrfx_clock_lfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    3140:	2000      	movs	r0, #0
    3142:	f001 f81f 	bl	4184 <nrfx_clock_start>
}
    3146:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    3148:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    314c:	f004 fb30 	bl	77b0 <z_impl_k_busy_wait>
		once = true;
    3150:	4b01      	ldr	r3, [pc, #4]	; (3158 <lfclk_start+0x20>)
    3152:	2201      	movs	r2, #1
    3154:	701a      	strb	r2, [r3, #0]
    3156:	e7f3      	b.n	3140 <lfclk_start+0x8>
    3158:	20000979 	.word	0x20000979

0000315c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    315c:	b570      	push	{r4, r5, r6, lr}
    315e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3160:	2200      	movs	r2, #0
    3162:	2101      	movs	r1, #1
    3164:	4610      	mov	r0, r2
    3166:	f7ff fb79 	bl	285c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    316a:	2000      	movs	r0, #0
    316c:	f7ff fb58 	bl	2820 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3170:	4811      	ldr	r0, [pc, #68]	; (31b8 <clk_init+0x5c>)
    3172:	f000 fff3 	bl	415c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3176:	4b11      	ldr	r3, [pc, #68]	; (31bc <clk_init+0x60>)
    3178:	4298      	cmp	r0, r3
    317a:	d11a      	bne.n	31b2 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    317c:	f004 f90d 	bl	739a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    3180:	2400      	movs	r4, #0
    3182:	e003      	b.n	318c <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3184:	2301      	movs	r3, #1
    3186:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    3188:	441c      	add	r4, r3
    318a:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    318c:	2c01      	cmp	r4, #1
    318e:	d80e      	bhi.n	31ae <clk_init+0x52>
						get_sub_data(dev, i);
    3190:	4621      	mov	r1, r4
    3192:	4630      	mov	r0, r6
    3194:	f003 fc7b 	bl	6a8e <get_sub_data>
    3198:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    319a:	4621      	mov	r1, r4
    319c:	4630      	mov	r0, r6
    319e:	f003 fc81 	bl	6aa4 <get_onoff_manager>
    31a2:	4907      	ldr	r1, [pc, #28]	; (31c0 <clk_init+0x64>)
    31a4:	f003 f9fd 	bl	65a2 <onoff_manager_init>
		if (err < 0) {
    31a8:	2800      	cmp	r0, #0
    31aa:	daeb      	bge.n	3184 <clk_init+0x28>
    31ac:	e000      	b.n	31b0 <clk_init+0x54>
	}

	return 0;
    31ae:	2000      	movs	r0, #0
}
    31b0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    31b2:	f06f 0004 	mvn.w	r0, #4
    31b6:	e7fb      	b.n	31b0 <clk_init+0x54>
    31b8:	00003035 	.word	0x00003035
    31bc:	0bad0000 	.word	0x0bad0000
    31c0:	0000843c 	.word	0x0000843c

000031c4 <lfclk_spinwait>:
{
    31c4:	b570      	push	{r4, r5, r6, lr}
    31c6:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    31c8:	2801      	cmp	r0, #1
    31ca:	d107      	bne.n	31dc <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    31cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31d0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    31d4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    31d8:	2b01      	cmp	r3, #1
    31da:	d058      	beq.n	328e <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    31dc:	f004 f930 	bl	7440 <k_is_in_isr>
    31e0:	b928      	cbnz	r0, 31ee <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    31e2:	4b2e      	ldr	r3, [pc, #184]	; (329c <lfclk_spinwait+0xd8>)
    31e4:	781b      	ldrb	r3, [r3, #0]
    31e6:	2b00      	cmp	r3, #0
    31e8:	d041      	beq.n	326e <lfclk_spinwait+0xaa>
    31ea:	2300      	movs	r3, #0
    31ec:	e000      	b.n	31f0 <lfclk_spinwait+0x2c>
    31ee:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    31f0:	461c      	mov	r4, r3
    31f2:	2b00      	cmp	r3, #0
    31f4:	d03d      	beq.n	3272 <lfclk_spinwait+0xae>
	__asm__ volatile(
    31f6:	f04f 0320 	mov.w	r3, #32
    31fa:	f3ef 8611 	mrs	r6, BASEPRI
    31fe:	f383 8812 	msr	BASEPRI_MAX, r3
    3202:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    3206:	b924      	cbnz	r4, 3212 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    3208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    320c:	2202      	movs	r2, #2
    320e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3212:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3216:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    321a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    321e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3222:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    3226:	d12b      	bne.n	3280 <lfclk_spinwait+0xbc>
    return false;
    3228:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    322a:	b11a      	cbz	r2, 3234 <lfclk_spinwait+0x70>
    322c:	2b01      	cmp	r3, #1
    322e:	d029      	beq.n	3284 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3230:	2d01      	cmp	r5, #1
    3232:	d027      	beq.n	3284 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3234:	b1fc      	cbz	r4, 3276 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3236:	4630      	mov	r0, r6
    3238:	f7ff fae8 	bl	280c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    323c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3240:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3244:	2b00      	cmp	r3, #0
    3246:	d1e4      	bne.n	3212 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3248:	4b15      	ldr	r3, [pc, #84]	; (32a0 <lfclk_spinwait+0xdc>)
    324a:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    324c:	2b00      	cmp	r3, #0
    324e:	d0e0      	beq.n	3212 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3250:	4b13      	ldr	r3, [pc, #76]	; (32a0 <lfclk_spinwait+0xdc>)
    3252:	2200      	movs	r2, #0
    3254:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3256:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    3258:	2301      	movs	r3, #1
    325a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    325e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3262:	4a10      	ldr	r2, [pc, #64]	; (32a4 <lfclk_spinwait+0xe0>)
    3264:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3268:	4a0f      	ldr	r2, [pc, #60]	; (32a8 <lfclk_spinwait+0xe4>)
    326a:	6013      	str	r3, [r2, #0]
}
    326c:	e7d1      	b.n	3212 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    326e:	2301      	movs	r3, #1
    3270:	e7be      	b.n	31f0 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    3272:	2600      	movs	r6, #0
    3274:	e7c7      	b.n	3206 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    3276:	2021      	movs	r0, #33	; 0x21
    3278:	2100      	movs	r1, #0
    327a:	f001 ff4f 	bl	511c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    327e:	e7dd      	b.n	323c <lfclk_spinwait+0x78>
                return true;
    3280:	2201      	movs	r2, #1
    3282:	e7d2      	b.n	322a <lfclk_spinwait+0x66>
	if (isr_mode) {
    3284:	b124      	cbz	r4, 3290 <lfclk_spinwait+0xcc>
	__asm__ volatile(
    3286:	f386 8811 	msr	BASEPRI, r6
    328a:	f3bf 8f6f 	isb	sy
}
    328e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    3290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3294:	2202      	movs	r2, #2
    3296:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    329a:	e7f8      	b.n	328e <lfclk_spinwait+0xca>
    329c:	2000097b 	.word	0x2000097b
    32a0:	40000104 	.word	0x40000104
    32a4:	e000e100 	.word	0xe000e100
    32a8:	40000008 	.word	0x40000008

000032ac <z_nrf_clock_control_lf_on>:
{
    32ac:	b510      	push	{r4, lr}
    32ae:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    32b0:	4b10      	ldr	r3, [pc, #64]	; (32f4 <z_nrf_clock_control_lf_on+0x48>)
    32b2:	2101      	movs	r1, #1
    32b4:	f3bf 8f5b 	dmb	ish
    32b8:	e853 2f00 	ldrex	r2, [r3]
    32bc:	e843 1000 	strex	r0, r1, [r3]
    32c0:	2800      	cmp	r0, #0
    32c2:	d1f9      	bne.n	32b8 <z_nrf_clock_control_lf_on+0xc>
    32c4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    32c8:	b11a      	cbz	r2, 32d2 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    32ca:	1e63      	subs	r3, r4, #1
    32cc:	2b01      	cmp	r3, #1
    32ce:	d90c      	bls.n	32ea <z_nrf_clock_control_lf_on+0x3e>
}
    32d0:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    32d2:	4809      	ldr	r0, [pc, #36]	; (32f8 <z_nrf_clock_control_lf_on+0x4c>)
    32d4:	f003 fbe6 	bl	6aa4 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    32d8:	4908      	ldr	r1, [pc, #32]	; (32fc <z_nrf_clock_control_lf_on+0x50>)
    32da:	2300      	movs	r3, #0
    32dc:	604b      	str	r3, [r1, #4]
    32de:	60cb      	str	r3, [r1, #12]
    32e0:	2301      	movs	r3, #1
    32e2:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    32e4:	f003 f979 	bl	65da <onoff_request>
    32e8:	e7ef      	b.n	32ca <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    32ea:	4620      	mov	r0, r4
    32ec:	f7ff ff6a 	bl	31c4 <lfclk_spinwait>
		break;
    32f0:	e7ee      	b.n	32d0 <z_nrf_clock_control_lf_on+0x24>
    32f2:	bf00      	nop
    32f4:	200003f8 	.word	0x200003f8
    32f8:	0000781c 	.word	0x0000781c
    32fc:	20000394 	.word	0x20000394

00003300 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    3300:	b510      	push	{r4, lr}
    3302:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    3304:	280a      	cmp	r0, #10
    3306:	d007      	beq.n	3318 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    3308:	4b07      	ldr	r3, [pc, #28]	; (3328 <console_out+0x28>)
    330a:	6818      	ldr	r0, [r3, #0]
    330c:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    330e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    3310:	685b      	ldr	r3, [r3, #4]
    3312:	4798      	blx	r3

	return c;
}
    3314:	4620      	mov	r0, r4
    3316:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    3318:	4b03      	ldr	r3, [pc, #12]	; (3328 <console_out+0x28>)
    331a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    331c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    331e:	685b      	ldr	r3, [r3, #4]
    3320:	210d      	movs	r1, #13
    3322:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    3324:	e7f0      	b.n	3308 <console_out+0x8>
    3326:	bf00      	nop
    3328:	200003fc 	.word	0x200003fc

0000332c <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    332c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    332e:	4c04      	ldr	r4, [pc, #16]	; (3340 <uart_console_hook_install+0x14>)
    3330:	4620      	mov	r0, r4
    3332:	f7ff fdef 	bl	2f14 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3336:	4620      	mov	r0, r4
    3338:	f7fe fbee 	bl	1b18 <__printk_hook_install>
}
    333c:	bd10      	pop	{r4, pc}
    333e:	bf00      	nop
    3340:	00003301 	.word	0x00003301

00003344 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3344:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3346:	4806      	ldr	r0, [pc, #24]	; (3360 <uart_console_init+0x1c>)
    3348:	4b06      	ldr	r3, [pc, #24]	; (3364 <uart_console_init+0x20>)
    334a:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    334c:	f004 f83f 	bl	73ce <z_device_ready>
    3350:	b118      	cbz	r0, 335a <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    3352:	f7ff ffeb 	bl	332c <uart_console_hook_install>

	return 0;
    3356:	2000      	movs	r0, #0
}
    3358:	bd08      	pop	{r3, pc}
		return -ENODEV;
    335a:	f06f 0012 	mvn.w	r0, #18
    335e:	e7fb      	b.n	3358 <uart_console_init+0x14>
    3360:	00007834 	.word	0x00007834
    3364:	200003fc 	.word	0x200003fc

00003368 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    3368:	b470      	push	{r4, r5, r6}
	return port->config;
    336a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    336c:	685e      	ldr	r6, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    336e:	4b32      	ldr	r3, [pc, #200]	; (3438 <gpio_nrfx_config+0xd0>)
    3370:	4013      	ands	r3, r2
    3372:	4832      	ldr	r0, [pc, #200]	; (343c <gpio_nrfx_config+0xd4>)
    3374:	4283      	cmp	r3, r0
    3376:	d027      	beq.n	33c8 <gpio_nrfx_config+0x60>
    3378:	d812      	bhi.n	33a0 <gpio_nrfx_config+0x38>
    337a:	2b06      	cmp	r3, #6
    337c:	d026      	beq.n	33cc <gpio_nrfx_config+0x64>
    337e:	d904      	bls.n	338a <gpio_nrfx_config+0x22>
    3380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3384:	d109      	bne.n	339a <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    3386:	2001      	movs	r0, #1
    3388:	e016      	b.n	33b8 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    338a:	b30b      	cbz	r3, 33d0 <gpio_nrfx_config+0x68>
    338c:	2b02      	cmp	r3, #2
    338e:	d101      	bne.n	3394 <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    3390:	2004      	movs	r0, #4
    3392:	e011      	b.n	33b8 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3394:	f06f 0015 	mvn.w	r0, #21
    3398:	e03f      	b.n	341a <gpio_nrfx_config+0xb2>
    339a:	f06f 0015 	mvn.w	r0, #21
    339e:	e03c      	b.n	341a <gpio_nrfx_config+0xb2>
    33a0:	4827      	ldr	r0, [pc, #156]	; (3440 <gpio_nrfx_config+0xd8>)
    33a2:	4283      	cmp	r3, r0
    33a4:	d016      	beq.n	33d4 <gpio_nrfx_config+0x6c>
    33a6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    33aa:	d101      	bne.n	33b0 <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
    33ac:	2003      	movs	r0, #3
    33ae:	e003      	b.n	33b8 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    33b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    33b4:	d13d      	bne.n	3432 <gpio_nrfx_config+0xca>
		drive = NRF_GPIO_PIN_S0H1;
    33b6:	2002      	movs	r0, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    33b8:	f012 0f10 	tst.w	r2, #16
    33bc:	d10c      	bne.n	33d8 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    33be:	f012 0f20 	tst.w	r2, #32
    33c2:	d02c      	beq.n	341e <gpio_nrfx_config+0xb6>
		pull = NRF_GPIO_PIN_PULLDOWN;
    33c4:	2401      	movs	r4, #1
    33c6:	e008      	b.n	33da <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
    33c8:	2007      	movs	r0, #7
    33ca:	e7f5      	b.n	33b8 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
    33cc:	2006      	movs	r0, #6
    33ce:	e7f3      	b.n	33b8 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    33d0:	2000      	movs	r0, #0
    33d2:	e7f1      	b.n	33b8 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
    33d4:	2005      	movs	r0, #5
    33d6:	e7ef      	b.n	33b8 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
    33d8:	2403      	movs	r4, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    33da:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    33de:	f412 7f80 	tst.w	r2, #256	; 0x100
    33e2:	bf0c      	ite	eq
    33e4:	2501      	moveq	r5, #1
    33e6:	2500      	movne	r5, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    33e8:	f412 7f00 	tst.w	r2, #512	; 0x200
    33ec:	d006      	beq.n	33fc <gpio_nrfx_config+0x94>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    33ee:	f412 6f00 	tst.w	r2, #2048	; 0x800
    33f2:	d016      	beq.n	3422 <gpio_nrfx_config+0xba>
			nrf_gpio_port_out_set(reg, BIT(pin));
    33f4:	2201      	movs	r2, #1
    33f6:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    33f8:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    33fc:	f001 011f 	and.w	r1, r1, #31
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3400:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    3404:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3408:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    340c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    3410:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3414:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    3418:	2000      	movs	r0, #0
}
    341a:	bc70      	pop	{r4, r5, r6}
    341c:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    341e:	2400      	movs	r4, #0
    3420:	e7db      	b.n	33da <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    3422:	f412 6f80 	tst.w	r2, #1024	; 0x400
    3426:	d0e9      	beq.n	33fc <gpio_nrfx_config+0x94>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    3428:	2201      	movs	r2, #1
    342a:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    342c:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
}
    3430:	e7e4      	b.n	33fc <gpio_nrfx_config+0x94>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3432:	f06f 0015 	mvn.w	r0, #21
    3436:	e7f0      	b.n	341a <gpio_nrfx_config+0xb2>
    3438:	00f00006 	.word	0x00f00006
    343c:	00100006 	.word	0x00100006
    3440:	00400002 	.word	0x00400002

00003444 <gpiote_event_handler>:

	gpio_fire_callbacks(list, port, pins);
}

static void gpiote_event_handler(void)
{
    3444:	b570      	push	{r4, r5, r6, lr}
    3446:	b082      	sub	sp, #8
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    3448:	2300      	movs	r3, #0
    344a:	9301      	str	r3, [sp, #4]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    344c:	9300      	str	r3, [sp, #0]
}

NRF_STATIC_INLINE bool nrf_gpiote_event_check(NRF_GPIOTE_Type const * p_reg,
                                              nrf_gpiote_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    344e:	4b2e      	ldr	r3, [pc, #184]	; (3508 <gpiote_event_handler+0xc4>)
    3450:	681c      	ldr	r4, [r3, #0]
	bool port_event = nrf_gpiote_event_check(NRF_GPIOTE,
						 NRF_GPIOTE_EVENT_PORT);

	if (port_event) {
    3452:	b90c      	cbnz	r4, 3458 <gpiote_event_handler+0x14>
{
    3454:	2100      	movs	r1, #0
    3456:	e00a      	b.n	346e <gpiote_event_handler+0x2a>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    3458:	4669      	mov	r1, sp
    345a:	482c      	ldr	r0, [pc, #176]	; (350c <gpiote_event_handler+0xc8>)
    345c:	f003 fc73 	bl	6d46 <check_level_trigger_pins>
		fired_triggers[0] =
    3460:	9001      	str	r0, [sp, #4]
}

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3462:	4b29      	ldr	r3, [pc, #164]	; (3508 <gpiote_event_handler+0xc4>)
    3464:	2200      	movs	r2, #0
    3466:	601a      	str	r2, [r3, #0]
    3468:	681b      	ldr	r3, [r3, #0]
    nrf_event_readback((void *)nrf_gpiote_event_address_get(p_reg, event));
}
    346a:	e7f3      	b.n	3454 <gpiote_event_handler+0x10>
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    346c:	3101      	adds	r1, #1
    346e:	2907      	cmp	r1, #7
    3470:	d826      	bhi.n	34c0 <gpiote_event_handler+0x7c>
		nrf_gpiote_event_t evt =
    3472:	f101 0340 	add.w	r3, r1, #64	; 0x40
    3476:	009b      	lsls	r3, r3, #2
    3478:	b29a      	uxth	r2, r3
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    347a:	2301      	movs	r3, #1
    347c:	408b      	lsls	r3, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    347e:	4824      	ldr	r0, [pc, #144]	; (3510 <gpiote_event_handler+0xcc>)
    3480:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    3484:	4203      	tst	r3, r0
    3486:	d0f1      	beq.n	346c <gpiote_event_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3488:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    348c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3490:	681b      	ldr	r3, [r3, #0]
    3492:	2b00      	cmp	r3, #0
    3494:	d0ea      	beq.n	346c <gpiote_event_handler+0x28>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3496:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    349a:	481d      	ldr	r0, [pc, #116]	; (3510 <gpiote_event_handler+0xcc>)
    349c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    34a0:	f3c0 2004 	ubfx	r0, r0, #8, #5
		    nrf_gpiote_event_check(NRF_GPIOTE, evt)) {
			uint32_t abs_pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, i);
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    34a4:	2301      	movs	r3, #1
    34a6:	fa03 f000 	lsl.w	r0, r3, r0
    34aa:	9b01      	ldr	r3, [sp, #4]
    34ac:	4303      	orrs	r3, r0
    34ae:	9301      	str	r3, [sp, #4]
    return ((uint32_t)p_reg + event);
    34b0:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    34b4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    34b8:	2200      	movs	r2, #0
    34ba:	601a      	str	r2, [r3, #0]
    34bc:	681b      	ldr	r3, [r3, #0]
}
    34be:	e7d5      	b.n	346c <gpiote_event_handler+0x28>
		cfg_edge_sense_pins(DEVICE_DT_GET(GPIO(1)), sense_levels[1]);
#endif
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
    34c0:	9e01      	ldr	r6, [sp, #4]
    34c2:	b916      	cbnz	r6, 34ca <gpiote_event_handler+0x86>
	if (fired_triggers[1]) {
		fire_callbacks(DEVICE_DT_GET(GPIO(1)), fired_triggers[1]);
	}
#endif

	if (port_event) {
    34c4:	b9dc      	cbnz	r4, 34fe <gpiote_event_handler+0xba>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
#endif
	}
}
    34c6:	b002      	add	sp, #8
    34c8:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    34ca:	4b12      	ldr	r3, [pc, #72]	; (3514 <gpiote_event_handler+0xd0>)
    34cc:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    34ce:	b119      	cbz	r1, 34d8 <gpiote_event_handler+0x94>
    34d0:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    34d2:	b149      	cbz	r1, 34e8 <gpiote_event_handler+0xa4>
	return node->next;
    34d4:	680d      	ldr	r5, [r1, #0]
    34d6:	e007      	b.n	34e8 <gpiote_event_handler+0xa4>
    34d8:	460d      	mov	r5, r1
    34da:	e005      	b.n	34e8 <gpiote_event_handler+0xa4>
    34dc:	b16d      	cbz	r5, 34fa <gpiote_event_handler+0xb6>
    34de:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    34e0:	b105      	cbz	r5, 34e4 <gpiote_event_handler+0xa0>
	return node->next;
    34e2:	682b      	ldr	r3, [r5, #0]
    34e4:	4629      	mov	r1, r5
    34e6:	461d      	mov	r5, r3
    34e8:	2900      	cmp	r1, #0
    34ea:	d0eb      	beq.n	34c4 <gpiote_event_handler+0x80>
		if (cb->pin_mask & pins) {
    34ec:	688a      	ldr	r2, [r1, #8]
    34ee:	4032      	ands	r2, r6
    34f0:	d0f4      	beq.n	34dc <gpiote_event_handler+0x98>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    34f2:	684b      	ldr	r3, [r1, #4]
    34f4:	4805      	ldr	r0, [pc, #20]	; (350c <gpiote_event_handler+0xc8>)
    34f6:	4798      	blx	r3
    34f8:	e7f0      	b.n	34dc <gpiote_event_handler+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    34fa:	462b      	mov	r3, r5
    34fc:	e7f2      	b.n	34e4 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    34fe:	4803      	ldr	r0, [pc, #12]	; (350c <gpiote_event_handler+0xc8>)
    3500:	f003 fbef 	bl	6ce2 <cfg_level_pins>
}
    3504:	e7df      	b.n	34c6 <gpiote_event_handler+0x82>
    3506:	bf00      	nop
    3508:	4000617c 	.word	0x4000617c
    350c:	00007864 	.word	0x00007864
    3510:	40006000 	.word	0x40006000
    3514:	20000400 	.word	0x20000400

00003518 <gpiote_pin_cleanup>:
{
    3518:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    351a:	4b14      	ldr	r3, [pc, #80]	; (356c <gpiote_pin_cleanup+0x54>)
    351c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    3520:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3522:	2300      	movs	r3, #0
    3524:	e000      	b.n	3528 <gpiote_pin_cleanup+0x10>
    3526:	3301      	adds	r3, #1
    3528:	2b07      	cmp	r3, #7
    352a:	d81d      	bhi.n	3568 <gpiote_pin_cleanup+0x50>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    352c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    3530:	490e      	ldr	r1, [pc, #56]	; (356c <gpiote_pin_cleanup+0x54>)
    3532:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    3536:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    353a:	4290      	cmp	r0, r2
    353c:	d1f3      	bne.n	3526 <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    353e:	fa24 f203 	lsr.w	r2, r4, r3
    3542:	f012 0f01 	tst.w	r2, #1
    3546:	d0ee      	beq.n	3526 <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    3548:	460a      	mov	r2, r1
    354a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    354e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    3552:	f021 0101 	bic.w	r1, r1, #1
    3556:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    355a:	2101      	movs	r1, #1
    355c:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    355e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    3562:	b2d8      	uxtb	r0, r3
    3564:	f000 ff38 	bl	43d8 <nrfx_gpiote_channel_free>
}
    3568:	bd10      	pop	{r4, pc}
    356a:	bf00      	nop
    356c:	40006000 	.word	0x40006000

00003570 <gpiote_channel_alloc>:
{
    3570:	b570      	push	{r4, r5, r6, lr}
    3572:	b082      	sub	sp, #8
    3574:	4604      	mov	r4, r0
    3576:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    3578:	f10d 0007 	add.w	r0, sp, #7
    357c:	f000 ff48 	bl	4410 <nrfx_gpiote_channel_alloc>
    3580:	4b1c      	ldr	r3, [pc, #112]	; (35f4 <gpiote_channel_alloc+0x84>)
    3582:	4298      	cmp	r0, r3
    3584:	d132      	bne.n	35ec <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    3586:	f89d 3007 	ldrb.w	r3, [sp, #7]
    358a:	f103 0240 	add.w	r2, r3, #64	; 0x40
    358e:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3590:	4e19      	ldr	r6, [pc, #100]	; (35f8 <gpiote_channel_alloc+0x88>)
    3592:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3596:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    359a:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    359e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    35a2:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    35a6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    35aa:	0224      	lsls	r4, r4, #8
    35ac:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    35b0:	042d      	lsls	r5, r5, #16
    35b2:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    35b6:	432c      	orrs	r4, r5
    35b8:	430c      	orrs	r4, r1
    35ba:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    35be:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    35c2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    35c6:	2000      	movs	r0, #0
    35c8:	6018      	str	r0, [r3, #0]
    35ca:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    35cc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    35d0:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    35d4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    35d8:	f042 0201 	orr.w	r2, r2, #1
    35dc:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    35e0:	2301      	movs	r3, #1
    35e2:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    35e4:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    35e8:	b002      	add	sp, #8
    35ea:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    35ec:	f06f 0012 	mvn.w	r0, #18
    35f0:	e7fa      	b.n	35e8 <gpiote_channel_alloc+0x78>
    35f2:	bf00      	nop
    35f4:	0bad0000 	.word	0x0bad0000
    35f8:	40006000 	.word	0x40006000

000035fc <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    35fc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    35fe:	4b0b      	ldr	r3, [pc, #44]	; (362c <gpio_nrfx_init+0x30>)
    3600:	781b      	ldrb	r3, [r3, #0]
    3602:	b10b      	cbz	r3, 3608 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    3604:	2000      	movs	r0, #0
    3606:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    3608:	4b08      	ldr	r3, [pc, #32]	; (362c <gpio_nrfx_init+0x30>)
    360a:	2201      	movs	r2, #1
    360c:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    360e:	2200      	movs	r2, #0
    3610:	2105      	movs	r1, #5
    3612:	2006      	movs	r0, #6
    3614:	f7ff f922 	bl	285c <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    3618:	2006      	movs	r0, #6
    361a:	f7ff f901 	bl	2820 <arch_irq_enable>
    361e:	4b04      	ldr	r3, [pc, #16]	; (3630 <gpio_nrfx_init+0x34>)
    3620:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3624:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3628:	e7ec      	b.n	3604 <gpio_nrfx_init+0x8>
    362a:	bf00      	nop
    362c:	2000097a 	.word	0x2000097a
    3630:	40006000 	.word	0x40006000

00003634 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    3634:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    3636:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    3638:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    363c:	d06f      	beq.n	371e <baudrate_set+0xea>
    363e:	d83a      	bhi.n	36b6 <baudrate_set+0x82>
    3640:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    3644:	d06e      	beq.n	3724 <baudrate_set+0xf0>
    3646:	d90a      	bls.n	365e <baudrate_set+0x2a>
    3648:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    364c:	d075      	beq.n	373a <baudrate_set+0x106>
    364e:	d924      	bls.n	369a <baudrate_set+0x66>
    3650:	f647 2312 	movw	r3, #31250	; 0x7a12
    3654:	4299      	cmp	r1, r3
    3656:	d12b      	bne.n	36b0 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3658:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    365c:	e013      	b.n	3686 <baudrate_set+0x52>
	switch (baudrate) {
    365e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    3662:	d061      	beq.n	3728 <baudrate_set+0xf4>
    3664:	d907      	bls.n	3676 <baudrate_set+0x42>
    3666:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    366a:	d063      	beq.n	3734 <baudrate_set+0x100>
    366c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    3670:	d110      	bne.n	3694 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3672:	4b3c      	ldr	r3, [pc, #240]	; (3764 <baudrate_set+0x130>)
    3674:	e007      	b.n	3686 <baudrate_set+0x52>
	switch (baudrate) {
    3676:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    367a:	d058      	beq.n	372e <baudrate_set+0xfa>
    367c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    3680:	d105      	bne.n	368e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    3682:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3686:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    368a:	2000      	movs	r0, #0
    368c:	4770      	bx	lr
	switch (baudrate) {
    368e:	f06f 0015 	mvn.w	r0, #21
    3692:	4770      	bx	lr
    3694:	f06f 0015 	mvn.w	r0, #21
    3698:	4770      	bx	lr
    369a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    369e:	d04e      	beq.n	373e <baudrate_set+0x10a>
    36a0:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    36a4:	d101      	bne.n	36aa <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    36a6:	4b30      	ldr	r3, [pc, #192]	; (3768 <baudrate_set+0x134>)
    36a8:	e7ed      	b.n	3686 <baudrate_set+0x52>
	switch (baudrate) {
    36aa:	f06f 0015 	mvn.w	r0, #21
    36ae:	4770      	bx	lr
    36b0:	f06f 0015 	mvn.w	r0, #21
    36b4:	4770      	bx	lr
    36b6:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    36ba:	d042      	beq.n	3742 <baudrate_set+0x10e>
    36bc:	d909      	bls.n	36d2 <baudrate_set+0x9e>
    36be:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    36c2:	d046      	beq.n	3752 <baudrate_set+0x11e>
    36c4:	d91f      	bls.n	3706 <baudrate_set+0xd2>
    36c6:	4b29      	ldr	r3, [pc, #164]	; (376c <baudrate_set+0x138>)
    36c8:	4299      	cmp	r1, r3
    36ca:	d148      	bne.n	375e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    36cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    36d0:	e7d9      	b.n	3686 <baudrate_set+0x52>
	switch (baudrate) {
    36d2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    36d6:	d037      	beq.n	3748 <baudrate_set+0x114>
    36d8:	d905      	bls.n	36e6 <baudrate_set+0xb2>
    36da:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    36de:	d10f      	bne.n	3700 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    36e0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    36e4:	e7cf      	b.n	3686 <baudrate_set+0x52>
	switch (baudrate) {
    36e6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    36ea:	4299      	cmp	r1, r3
    36ec:	d02e      	beq.n	374c <baudrate_set+0x118>
    36ee:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    36f2:	d102      	bne.n	36fa <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    36f4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    36f8:	e7c5      	b.n	3686 <baudrate_set+0x52>
	switch (baudrate) {
    36fa:	f06f 0015 	mvn.w	r0, #21
    36fe:	4770      	bx	lr
    3700:	f06f 0015 	mvn.w	r0, #21
    3704:	4770      	bx	lr
    3706:	4b1a      	ldr	r3, [pc, #104]	; (3770 <baudrate_set+0x13c>)
    3708:	4299      	cmp	r1, r3
    370a:	d025      	beq.n	3758 <baudrate_set+0x124>
    370c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    3710:	d102      	bne.n	3718 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3712:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3716:	e7b6      	b.n	3686 <baudrate_set+0x52>
	switch (baudrate) {
    3718:	f06f 0015 	mvn.w	r0, #21
    371c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    371e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3722:	e7b0      	b.n	3686 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3724:	4b13      	ldr	r3, [pc, #76]	; (3774 <baudrate_set+0x140>)
    3726:	e7ae      	b.n	3686 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3728:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    372c:	e7ab      	b.n	3686 <baudrate_set+0x52>
	switch (baudrate) {
    372e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3732:	e7a8      	b.n	3686 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3734:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3738:	e7a5      	b.n	3686 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    373a:	4b0f      	ldr	r3, [pc, #60]	; (3778 <baudrate_set+0x144>)
    373c:	e7a3      	b.n	3686 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    373e:	4b0f      	ldr	r3, [pc, #60]	; (377c <baudrate_set+0x148>)
    3740:	e7a1      	b.n	3686 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3742:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3746:	e79e      	b.n	3686 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3748:	4b0d      	ldr	r3, [pc, #52]	; (3780 <baudrate_set+0x14c>)
    374a:	e79c      	b.n	3686 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    374c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3750:	e799      	b.n	3686 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3752:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3756:	e796      	b.n	3686 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3758:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    375c:	e793      	b.n	3686 <baudrate_set+0x52>
	switch (baudrate) {
    375e:	f06f 0015 	mvn.w	r0, #21
}
    3762:	4770      	bx	lr
    3764:	0013b000 	.word	0x0013b000
    3768:	004ea000 	.word	0x004ea000
    376c:	000f4240 	.word	0x000f4240
    3770:	0003d090 	.word	0x0003d090
    3774:	00275000 	.word	0x00275000
    3778:	0075c000 	.word	0x0075c000
    377c:	003af000 	.word	0x003af000
    3780:	013a9000 	.word	0x013a9000

00003784 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3788:	4605      	mov	r5, r0
    378a:	460f      	mov	r7, r1
	return dev->data;
    378c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3790:	f003 fe56 	bl	7440 <k_is_in_isr>
    3794:	b920      	cbnz	r0, 37a0 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    3796:	4b16      	ldr	r3, [pc, #88]	; (37f0 <uarte_nrfx_poll_out+0x6c>)
    3798:	781b      	ldrb	r3, [r3, #0]
    379a:	b1ab      	cbz	r3, 37c8 <uarte_nrfx_poll_out+0x44>
    379c:	2300      	movs	r3, #0
    379e:	e000      	b.n	37a2 <uarte_nrfx_poll_out+0x1e>
    37a0:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    37a2:	b19b      	cbz	r3, 37cc <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    37a4:	f04f 0320 	mov.w	r3, #32
    37a8:	f3ef 8411 	mrs	r4, BASEPRI
    37ac:	f383 8812 	msr	BASEPRI_MAX, r3
    37b0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    37b4:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    37b6:	4628      	mov	r0, r5
    37b8:	f003 fc51 	bl	705e <is_tx_ready>
    37bc:	b950      	cbnz	r0, 37d4 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    37be:	f384 8811 	msr	BASEPRI, r4
    37c2:	f3bf 8f6f 	isb	sy
}
    37c6:	e7ed      	b.n	37a4 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    37c8:	2301      	movs	r3, #1
    37ca:	e7ea      	b.n	37a2 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    37cc:	4628      	mov	r0, r5
    37ce:	f003 fc95 	bl	70fc <wait_tx_ready>
    37d2:	4606      	mov	r6, r0
	}

	data->char_out = c;
    37d4:	4641      	mov	r1, r8
    37d6:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    37da:	2201      	movs	r2, #1
    37dc:	4628      	mov	r0, r5
    37de:	f003 fc58 	bl	7092 <tx_start>
	__asm__ volatile(
    37e2:	f386 8811 	msr	BASEPRI, r6
    37e6:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    37ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37ee:	bf00      	nop
    37f0:	2000097b 	.word	0x2000097b

000037f4 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    37f4:	b538      	push	{r3, r4, r5, lr}
    37f6:	4604      	mov	r4, r0
    37f8:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    37fa:	f101 0012 	add.w	r0, r1, #18
    37fe:	f000 fe55 	bl	44ac <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3802:	4b0c      	ldr	r3, [pc, #48]	; (3834 <endtx_stoptx_ppi_init+0x40>)
    3804:	4298      	cmp	r0, r3
    3806:	d111      	bne.n	382c <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3808:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    380a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    380e:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3810:	4a09      	ldr	r2, [pc, #36]	; (3838 <endtx_stoptx_ppi_init+0x44>)
    3812:	33a2      	adds	r3, #162	; 0xa2
    3814:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3818:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    381c:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    381e:	7ca9      	ldrb	r1, [r5, #18]
    3820:	2301      	movs	r3, #1
    3822:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    3824:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    3828:	2000      	movs	r0, #0
}
    382a:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    382c:	f06f 0004 	mvn.w	r0, #4
    3830:	e7fb      	b.n	382a <endtx_stoptx_ppi_init+0x36>
    3832:	bf00      	nop
    3834:	0bad0000 	.word	0x0bad0000
    3838:	4001f000 	.word	0x4001f000

0000383c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    383c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    3840:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    3844:	4b01      	ldr	r3, [pc, #4]	; (384c <set_comparator+0x10>)
    3846:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    384a:	4770      	bx	lr
    384c:	40011000 	.word	0x40011000

00003850 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    3850:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    3854:	4b01      	ldr	r3, [pc, #4]	; (385c <get_comparator+0xc>)
    3856:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    385a:	4770      	bx	lr
    385c:	40011000 	.word	0x40011000

00003860 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3864:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3866:	4a02      	ldr	r2, [pc, #8]	; (3870 <event_enable+0x10>)
    3868:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    386c:	4770      	bx	lr
    386e:	bf00      	nop
    3870:	40011000 	.word	0x40011000

00003874 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3878:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    387a:	4a02      	ldr	r2, [pc, #8]	; (3884 <event_disable+0x10>)
    387c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    3880:	4770      	bx	lr
    3882:	bf00      	nop
    3884:	40011000 	.word	0x40011000

00003888 <counter>:
     return p_reg->COUNTER;
    3888:	4b01      	ldr	r3, [pc, #4]	; (3890 <counter+0x8>)
    388a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    388e:	4770      	bx	lr
    3890:	40011000 	.word	0x40011000

00003894 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    3894:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3896:	2301      	movs	r3, #1
    3898:	4083      	lsls	r3, r0
    389a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    389c:	4a10      	ldr	r2, [pc, #64]	; (38e0 <compare_int_lock+0x4c>)
    389e:	f3bf 8f5b 	dmb	ish
    38a2:	e852 1f00 	ldrex	r1, [r2]
    38a6:	ea01 0c04 	and.w	ip, r1, r4
    38aa:	e842 ce00 	strex	lr, ip, [r2]
    38ae:	f1be 0f00 	cmp.w	lr, #0
    38b2:	d1f6      	bne.n	38a2 <compare_int_lock+0xe>
    38b4:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    38b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    38bc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    38c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    38c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    38c8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    38cc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38d0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    38d4:	420b      	tst	r3, r1
}
    38d6:	bf14      	ite	ne
    38d8:	2001      	movne	r0, #1
    38da:	2000      	moveq	r0, #0
    38dc:	bd10      	pop	{r4, pc}
    38de:	bf00      	nop
    38e0:	20000420 	.word	0x20000420

000038e4 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    38e4:	b570      	push	{r4, r5, r6, lr}
    38e6:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    38e8:	f003 fcea 	bl	72c0 <full_int_lock>
    38ec:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    38ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    38f2:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    38f4:	4a17      	ldr	r2, [pc, #92]	; (3954 <channel_processing_check_and_clear+0x70>)
    38f6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    38fa:	4213      	tst	r3, r2
    38fc:	d105      	bne.n	390a <channel_processing_check_and_clear+0x26>
	bool result = false;
    38fe:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    3900:	4628      	mov	r0, r5
    3902:	f003 fce6 	bl	72d2 <full_int_unlock>

	return result;
}
    3906:	4630      	mov	r0, r6
    3908:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    390a:	2301      	movs	r3, #1
    390c:	40a3      	lsls	r3, r4
    390e:	43db      	mvns	r3, r3
    3910:	4a11      	ldr	r2, [pc, #68]	; (3958 <channel_processing_check_and_clear+0x74>)
    3912:	f3bf 8f5b 	dmb	ish
    3916:	e852 1f00 	ldrex	r1, [r2]
    391a:	ea01 0003 	and.w	r0, r1, r3
    391e:	e842 0600 	strex	r6, r0, [r2]
    3922:	2e00      	cmp	r6, #0
    3924:	d1f7      	bne.n	3916 <channel_processing_check_and_clear+0x32>
    3926:	f3bf 8f5b 	dmb	ish
    392a:	b959      	cbnz	r1, 3944 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    392c:	f104 0350 	add.w	r3, r4, #80	; 0x50
    3930:	009b      	lsls	r3, r3, #2
    3932:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3934:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3938:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    393c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    393e:	b113      	cbz	r3, 3946 <channel_processing_check_and_clear+0x62>
    3940:	2301      	movs	r3, #1
    3942:	e000      	b.n	3946 <channel_processing_check_and_clear+0x62>
    3944:	2301      	movs	r3, #1
		if (result) {
    3946:	461e      	mov	r6, r3
    3948:	2b00      	cmp	r3, #0
    394a:	d0d9      	beq.n	3900 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    394c:	4620      	mov	r0, r4
    394e:	f003 fca8 	bl	72a2 <event_clear>
    3952:	e7d5      	b.n	3900 <channel_processing_check_and_clear+0x1c>
    3954:	40011000 	.word	0x40011000
    3958:	2000041c 	.word	0x2000041c

0000395c <compare_int_unlock>:
	if (key) {
    395c:	b901      	cbnz	r1, 3960 <compare_int_unlock+0x4>
}
    395e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    3960:	2301      	movs	r3, #1
    3962:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3964:	4a11      	ldr	r2, [pc, #68]	; (39ac <compare_int_unlock+0x50>)
    3966:	f3bf 8f5b 	dmb	ish
    396a:	e852 1f00 	ldrex	r1, [r2]
    396e:	4319      	orrs	r1, r3
    3970:	e842 1c00 	strex	ip, r1, [r2]
    3974:	f1bc 0f00 	cmp.w	ip, #0
    3978:	d1f7      	bne.n	396a <compare_int_unlock+0xe>
    397a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    397e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3982:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3984:	4a0a      	ldr	r2, [pc, #40]	; (39b0 <compare_int_unlock+0x54>)
    3986:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    398a:	f3bf 8f5b 	dmb	ish
    398e:	4b09      	ldr	r3, [pc, #36]	; (39b4 <compare_int_unlock+0x58>)
    3990:	681b      	ldr	r3, [r3, #0]
    3992:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3996:	fa23 f000 	lsr.w	r0, r3, r0
    399a:	f010 0f01 	tst.w	r0, #1
    399e:	d0de      	beq.n	395e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    39a0:	4b05      	ldr	r3, [pc, #20]	; (39b8 <compare_int_unlock+0x5c>)
    39a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    39a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    39aa:	e7d8      	b.n	395e <compare_int_unlock+0x2>
    39ac:	20000420 	.word	0x20000420
    39b0:	40011000 	.word	0x40011000
    39b4:	2000041c 	.word	0x2000041c
    39b8:	e000e100 	.word	0xe000e100

000039bc <sys_clock_timeout_handler>:
{
    39bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39be:	4607      	mov	r7, r0
    39c0:	4614      	mov	r4, r2
    39c2:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    39c4:	4610      	mov	r0, r2
    39c6:	4619      	mov	r1, r3
    39c8:	f003 fc77 	bl	72ba <absolute_time_to_cc>
    39cc:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    39ce:	4b15      	ldr	r3, [pc, #84]	; (3a24 <sys_clock_timeout_handler+0x68>)
    39d0:	681a      	ldr	r2, [r3, #0]
    39d2:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    39d4:	601c      	str	r4, [r3, #0]
    39d6:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    39d8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    39dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    39e0:	d308      	bcc.n	39f4 <sys_clock_timeout_handler+0x38>
	return false;
    39e2:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    39e4:	f001 fd00 	bl	53e8 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    39e8:	4638      	mov	r0, r7
    39ea:	f7ff ff31 	bl	3850 <get_comparator>
    39ee:	42a8      	cmp	r0, r5
    39f0:	d00c      	beq.n	3a0c <sys_clock_timeout_handler+0x50>
}
    39f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    39f4:	4b0c      	ldr	r3, [pc, #48]	; (3a28 <sys_clock_timeout_handler+0x6c>)
    39f6:	6819      	ldr	r1, [r3, #0]
    39f8:	0a0b      	lsrs	r3, r1, #8
    39fa:	060a      	lsls	r2, r1, #24
    39fc:	1952      	adds	r2, r2, r5
    39fe:	f143 0300 	adc.w	r3, r3, #0
    3a02:	490a      	ldr	r1, [pc, #40]	; (3a2c <sys_clock_timeout_handler+0x70>)
    3a04:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    3a08:	2401      	movs	r4, #1
    3a0a:	e7eb      	b.n	39e4 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    3a0c:	b11c      	cbz	r4, 3a16 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    3a0e:	4638      	mov	r0, r7
    3a10:	f7ff ff26 	bl	3860 <event_enable>
}
    3a14:	e7ed      	b.n	39f2 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    3a16:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    3a1a:	4638      	mov	r0, r7
    3a1c:	f7ff ff0e 	bl	383c <set_comparator>
    3a20:	e7f5      	b.n	3a0e <sys_clock_timeout_handler+0x52>
    3a22:	bf00      	nop
    3a24:	20000058 	.word	0x20000058
    3a28:	20000424 	.word	0x20000424
    3a2c:	20000040 	.word	0x20000040

00003a30 <z_nrf_rtc_timer_read>:
{
    3a30:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3a32:	4b0d      	ldr	r3, [pc, #52]	; (3a68 <z_nrf_rtc_timer_read+0x38>)
    3a34:	681b      	ldr	r3, [r3, #0]
    3a36:	0a1d      	lsrs	r5, r3, #8
    3a38:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3a3a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    3a3e:	f7ff ff23 	bl	3888 <counter>
    3a42:	4603      	mov	r3, r0
	val += cntr;
    3a44:	1820      	adds	r0, r4, r0
    3a46:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3a4e:	d20a      	bcs.n	3a66 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    3a50:	4b06      	ldr	r3, [pc, #24]	; (3a6c <z_nrf_rtc_timer_read+0x3c>)
    3a52:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a56:	4299      	cmp	r1, r3
    3a58:	bf08      	it	eq
    3a5a:	4290      	cmpeq	r0, r2
    3a5c:	d203      	bcs.n	3a66 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    3a5e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3a62:	f141 0100 	adc.w	r1, r1, #0
}
    3a66:	bd38      	pop	{r3, r4, r5, pc}
    3a68:	20000424 	.word	0x20000424
    3a6c:	20000040 	.word	0x20000040

00003a70 <compare_set_nolocks>:
{
    3a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3a74:	4606      	mov	r6, r0
    3a76:	4614      	mov	r4, r2
    3a78:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    3a7a:	4610      	mov	r0, r2
    3a7c:	4619      	mov	r1, r3
    3a7e:	f003 fc1c 	bl	72ba <absolute_time_to_cc>
    3a82:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3a84:	f7ff ffd4 	bl	3a30 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3a88:	42a9      	cmp	r1, r5
    3a8a:	bf08      	it	eq
    3a8c:	42a0      	cmpeq	r0, r4
    3a8e:	d21e      	bcs.n	3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
		if (target_time - curr_time > COUNTER_SPAN) {
    3a90:	ebb4 0800 	subs.w	r8, r4, r0
    3a94:	eb65 0901 	sbc.w	r9, r5, r1
    3a98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3a9c:	2300      	movs	r3, #0
    3a9e:	454b      	cmp	r3, r9
    3aa0:	bf08      	it	eq
    3aa2:	4542      	cmpeq	r2, r8
    3aa4:	d32e      	bcc.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
		if (target_time != cc_data[chan].target_time) {
    3aa6:	4b19      	ldr	r3, [pc, #100]	; (3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>)
    3aa8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    3aac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3ab0:	42ab      	cmp	r3, r5
    3ab2:	bf08      	it	eq
    3ab4:	42a2      	cmpeq	r2, r4
    3ab6:	d018      	beq.n	3aea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    3ab8:	4639      	mov	r1, r7
    3aba:	4630      	mov	r0, r6
    3abc:	f003 fc0e 	bl	72dc <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    3ac0:	4639      	mov	r1, r7
    3ac2:	f003 fbea 	bl	729a <counter_sub>
    3ac6:	1824      	adds	r4, r4, r0
    3ac8:	f145 0500 	adc.w	r5, r5, #0
    3acc:	e00d      	b.n	3aea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52>
		atomic_or(&force_isr_mask, BIT(chan));
    3ace:	2301      	movs	r3, #1
    3ad0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3ad2:	4a0f      	ldr	r2, [pc, #60]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3ad4:	f3bf 8f5b 	dmb	ish
    3ad8:	e852 1f00 	ldrex	r1, [r2]
    3adc:	4319      	orrs	r1, r3
    3ade:	e842 1000 	strex	r0, r1, [r2]
    3ae2:	2800      	cmp	r0, #0
    3ae4:	d1f8      	bne.n	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    3ae6:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    3aea:	4b08      	ldr	r3, [pc, #32]	; (3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>)
    3aec:	0132      	lsls	r2, r6, #4
    3aee:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    3af2:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    3af6:	9908      	ldr	r1, [sp, #32]
    3af8:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    3afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3afc:	6073      	str	r3, [r6, #4]
	return ret;
    3afe:	2000      	movs	r0, #0
}
    3b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    3b04:	f06f 0015 	mvn.w	r0, #21
    3b08:	e7fa      	b.n	3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>
    3b0a:	bf00      	nop
    3b0c:	20000048 	.word	0x20000048
    3b10:	2000041c 	.word	0x2000041c

00003b14 <process_channel>:

static void process_channel(int32_t chan)
{
    3b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b18:	b082      	sub	sp, #8
    3b1a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    3b1c:	f7ff fee2 	bl	38e4 <channel_processing_check_and_clear>
    3b20:	b910      	cbnz	r0, 3b28 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    3b22:	b002      	add	sp, #8
    3b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    3b28:	f7ff ff82 	bl	3a30 <z_nrf_rtc_timer_read>
    3b2c:	4606      	mov	r6, r0
    3b2e:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    3b30:	f003 fbc6 	bl	72c0 <full_int_lock>
    3b34:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    3b36:	4b13      	ldr	r3, [pc, #76]	; (3b84 <process_channel+0x70>)
    3b38:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    3b3c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    3b40:	454f      	cmp	r7, r9
    3b42:	bf08      	it	eq
    3b44:	4546      	cmpeq	r6, r8
    3b46:	d20b      	bcs.n	3b60 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3b48:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    3b4a:	4650      	mov	r0, sl
    3b4c:	f003 fbc1 	bl	72d2 <full_int_unlock>
		if (handler) {
    3b50:	2e00      	cmp	r6, #0
    3b52:	d0e6      	beq.n	3b22 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    3b54:	9500      	str	r5, [sp, #0]
    3b56:	4642      	mov	r2, r8
    3b58:	464b      	mov	r3, r9
    3b5a:	4620      	mov	r0, r4
    3b5c:	47b0      	blx	r6
}
    3b5e:	e7e0      	b.n	3b22 <process_channel+0xe>
			handler = cc_data[chan].callback;
    3b60:	4a08      	ldr	r2, [pc, #32]	; (3b84 <process_channel+0x70>)
    3b62:	0123      	lsls	r3, r4, #4
    3b64:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    3b68:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    3b6a:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    3b6c:	2000      	movs	r0, #0
    3b6e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3b70:	f04f 32ff 	mov.w	r2, #4294967295
    3b74:	f04f 33ff 	mov.w	r3, #4294967295
    3b78:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    3b7c:	4620      	mov	r0, r4
    3b7e:	f7ff fe79 	bl	3874 <event_disable>
    3b82:	e7e2      	b.n	3b4a <process_channel+0x36>
    3b84:	20000048 	.word	0x20000048

00003b88 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    3b88:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    3b8a:	4b0d      	ldr	r3, [pc, #52]	; (3bc0 <rtc_nrf_isr+0x38>)
    3b8c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3b90:	f013 0f02 	tst.w	r3, #2
    3b94:	d00a      	beq.n	3bac <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b96:	4b0b      	ldr	r3, [pc, #44]	; (3bc4 <rtc_nrf_isr+0x3c>)
    3b98:	681b      	ldr	r3, [r3, #0]
    3b9a:	b13b      	cbz	r3, 3bac <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3b9c:	4b09      	ldr	r3, [pc, #36]	; (3bc4 <rtc_nrf_isr+0x3c>)
    3b9e:	2200      	movs	r2, #0
    3ba0:	601a      	str	r2, [r3, #0]
    3ba2:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    3ba4:	4a08      	ldr	r2, [pc, #32]	; (3bc8 <rtc_nrf_isr+0x40>)
    3ba6:	6813      	ldr	r3, [r2, #0]
    3ba8:	3301      	adds	r3, #1
    3baa:	6013      	str	r3, [r2, #0]
{
    3bac:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3bae:	2c00      	cmp	r4, #0
    3bb0:	dd00      	ble.n	3bb4 <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    3bb2:	bd10      	pop	{r4, pc}
		process_channel(chan);
    3bb4:	4620      	mov	r0, r4
    3bb6:	f7ff ffad 	bl	3b14 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3bba:	3401      	adds	r4, #1
    3bbc:	e7f7      	b.n	3bae <rtc_nrf_isr+0x26>
    3bbe:	bf00      	nop
    3bc0:	40011000 	.word	0x40011000
    3bc4:	40011104 	.word	0x40011104
    3bc8:	20000424 	.word	0x20000424

00003bcc <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    3bcc:	b530      	push	{r4, r5, lr}
    3bce:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    3bd0:	2300      	movs	r3, #0
    3bd2:	4a1f      	ldr	r2, [pc, #124]	; (3c50 <sys_clock_driver_init+0x84>)
    3bd4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3bd8:	2b00      	cmp	r3, #0
    3bda:	dd27      	ble.n	3c2c <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    3bdc:	4c1c      	ldr	r4, [pc, #112]	; (3c50 <sys_clock_driver_init+0x84>)
    3bde:	2502      	movs	r5, #2
    3be0:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3be4:	4b1b      	ldr	r3, [pc, #108]	; (3c54 <sys_clock_driver_init+0x88>)
    3be6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3bea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3bee:	2200      	movs	r2, #0
    3bf0:	2101      	movs	r1, #1
    3bf2:	2011      	movs	r0, #17
    3bf4:	f7fe fe32 	bl	285c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3bf8:	2011      	movs	r0, #17
    3bfa:	f7fe fe11 	bl	2820 <arch_irq_enable>
    3bfe:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3c02:	2301      	movs	r3, #1
    3c04:	4a14      	ldr	r2, [pc, #80]	; (3c58 <sys_clock_driver_init+0x8c>)
    3c06:	6013      	str	r3, [r2, #0]
    3c08:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3c0a:	4a14      	ldr	r2, [pc, #80]	; (3c5c <sys_clock_driver_init+0x90>)
    3c0c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3c0e:	2400      	movs	r4, #0
    3c10:	9401      	str	r4, [sp, #4]
    3c12:	4b13      	ldr	r3, [pc, #76]	; (3c60 <sys_clock_driver_init+0x94>)
    3c14:	9300      	str	r3, [sp, #0]
    3c16:	4a13      	ldr	r2, [pc, #76]	; (3c64 <sys_clock_driver_init+0x98>)
    3c18:	2300      	movs	r3, #0
    3c1a:	4620      	mov	r0, r4
    3c1c:	f003 fb99 	bl	7352 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3c20:	4628      	mov	r0, r5
    3c22:	f7ff fb43 	bl	32ac <z_nrf_clock_control_lf_on>

	return 0;
}
    3c26:	4620      	mov	r0, r4
    3c28:	b003      	add	sp, #12
    3c2a:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3c2c:	4a0e      	ldr	r2, [pc, #56]	; (3c68 <sys_clock_driver_init+0x9c>)
    3c2e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    3c32:	f04f 30ff 	mov.w	r0, #4294967295
    3c36:	f04f 31ff 	mov.w	r1, #4294967295
    3c3a:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3c42:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    3c44:	4902      	ldr	r1, [pc, #8]	; (3c50 <sys_clock_driver_init+0x84>)
    3c46:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3c4a:	3301      	adds	r3, #1
    3c4c:	e7c4      	b.n	3bd8 <sys_clock_driver_init+0xc>
    3c4e:	bf00      	nop
    3c50:	40011000 	.word	0x40011000
    3c54:	e000e100 	.word	0xe000e100
    3c58:	40011008 	.word	0x40011008
    3c5c:	20000420 	.word	0x20000420
    3c60:	000039bd 	.word	0x000039bd
    3c64:	007fffff 	.word	0x007fffff
    3c68:	20000048 	.word	0x20000048

00003c6c <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    3c6c:	b510      	push	{r4, lr}
    3c6e:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3c70:	f1b0 3fff 	cmp.w	r0, #4294967295
    3c74:	d007      	beq.n	3c86 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3c76:	1e44      	subs	r4, r0, #1
    3c78:	2c00      	cmp	r4, #0
    3c7a:	dd07      	ble.n	3c8c <sys_clock_set_timeout+0x20>
    3c7c:	4b11      	ldr	r3, [pc, #68]	; (3cc4 <sys_clock_set_timeout+0x58>)
    3c7e:	429c      	cmp	r4, r3
    3c80:	dd05      	ble.n	3c8e <sys_clock_set_timeout+0x22>
    3c82:	4c11      	ldr	r4, [pc, #68]	; (3cc8 <sys_clock_set_timeout+0x5c>)
    3c84:	e003      	b.n	3c8e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3c86:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    3c8a:	e7f4      	b.n	3c76 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3c8c:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3c8e:	f7ff fecf 	bl	3a30 <z_nrf_rtc_timer_read>
    3c92:	4b0e      	ldr	r3, [pc, #56]	; (3ccc <sys_clock_set_timeout+0x60>)
    3c94:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c98:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    3c9a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3c9e:	d300      	bcc.n	3ca2 <sys_clock_set_timeout+0x36>
		ticks = 0;
    3ca0:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3ca2:	4404      	add	r4, r0
    3ca4:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    3ca6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    3caa:	d300      	bcc.n	3cae <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    3cac:	4c06      	ldr	r4, [pc, #24]	; (3cc8 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3cae:	2000      	movs	r0, #0
    3cb0:	9001      	str	r0, [sp, #4]
    3cb2:	4907      	ldr	r1, [pc, #28]	; (3cd0 <sys_clock_set_timeout+0x64>)
    3cb4:	9100      	str	r1, [sp, #0]
    3cb6:	1912      	adds	r2, r2, r4
    3cb8:	f143 0300 	adc.w	r3, r3, #0
    3cbc:	f003 fb49 	bl	7352 <compare_set>
}
    3cc0:	b002      	add	sp, #8
    3cc2:	bd10      	pop	{r4, pc}
    3cc4:	007ffffe 	.word	0x007ffffe
    3cc8:	007fffff 	.word	0x007fffff
    3ccc:	20000058 	.word	0x20000058
    3cd0:	000039bd 	.word	0x000039bd

00003cd4 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    3cd4:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3cd6:	f7ff feab 	bl	3a30 <z_nrf_rtc_timer_read>
    3cda:	4b02      	ldr	r3, [pc, #8]	; (3ce4 <sys_clock_elapsed+0x10>)
    3cdc:	681b      	ldr	r3, [r3, #0]
}
    3cde:	1ac0      	subs	r0, r0, r3
    3ce0:	bd08      	pop	{r3, pc}
    3ce2:	bf00      	nop
    3ce4:	20000058 	.word	0x20000058

00003ce8 <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3ce8:	4b06      	ldr	r3, [pc, #24]	; (3d04 <nrf52_errata_12+0x1c>)
    3cea:	681b      	ldr	r3, [r3, #0]
    3cec:	f1b3 3fff 	cmp.w	r3, #4294967295
    3cf0:	d003      	beq.n	3cfa <nrf52_errata_12+0x12>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3cf2:	2b06      	cmp	r3, #6
    3cf4:	d004      	beq.n	3d00 <nrf52_errata_12+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    3cf6:	2000      	movs	r0, #0
    3cf8:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3cfa:	4b03      	ldr	r3, [pc, #12]	; (3d08 <nrf52_errata_12+0x20>)
    3cfc:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3cfe:	e7f8      	b.n	3cf2 <nrf52_errata_12+0xa>
                        return true;
    3d00:	2001      	movs	r0, #1
    #endif
}
    3d02:	4770      	bx	lr
    3d04:	10000130 	.word	0x10000130
    3d08:	f0000fe0 	.word	0xf0000fe0

00003d0c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3d0c:	4b09      	ldr	r3, [pc, #36]	; (3d34 <nrf52_errata_16+0x28>)
    3d0e:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3d10:	3308      	adds	r3, #8
    3d12:	681b      	ldr	r3, [r3, #0]
    3d14:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3d18:	2a06      	cmp	r2, #6
    3d1a:	d001      	beq.n	3d20 <nrf52_errata_16+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3d1c:	2000      	movs	r0, #0
    3d1e:	4770      	bx	lr
                switch(var2)
    3d20:	3b03      	subs	r3, #3
    3d22:	2b00      	cmp	r3, #0
    3d24:	d804      	bhi.n	3d30 <nrf52_errata_16+0x24>
    3d26:	e8df f003 	tbb	[pc, r3]
    3d2a:	01          	.byte	0x01
    3d2b:	00          	.byte	0x00
            if (var1 == 0x06)
    3d2c:	2001      	movs	r0, #1
    3d2e:	4770      	bx	lr
                        return false;
    3d30:	2000      	movs	r0, #0
    #endif
}
    3d32:	4770      	bx	lr
    3d34:	f0000fe0 	.word	0xf0000fe0

00003d38 <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3d38:	4b06      	ldr	r3, [pc, #24]	; (3d54 <nrf52_errata_31+0x1c>)
    3d3a:	681b      	ldr	r3, [r3, #0]
    3d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d40:	d003      	beq.n	3d4a <nrf52_errata_31+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3d42:	2b06      	cmp	r3, #6
    3d44:	d004      	beq.n	3d50 <nrf52_errata_31+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    3d46:	2000      	movs	r0, #0
    3d48:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3d4a:	4b03      	ldr	r3, [pc, #12]	; (3d58 <nrf52_errata_31+0x20>)
    3d4c:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3d4e:	e7f8      	b.n	3d42 <nrf52_errata_31+0xa>
                        return true;
    3d50:	2001      	movs	r0, #1
    #endif
}
    3d52:	4770      	bx	lr
    3d54:	10000130 	.word	0x10000130
    3d58:	f0000fe0 	.word	0xf0000fe0

00003d5c <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3d5c:	4b09      	ldr	r3, [pc, #36]	; (3d84 <nrf52_errata_32+0x28>)
    3d5e:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3d60:	3308      	adds	r3, #8
    3d62:	681b      	ldr	r3, [r3, #0]
    3d64:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3d68:	2a06      	cmp	r2, #6
    3d6a:	d001      	beq.n	3d70 <nrf52_errata_32+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3d6c:	2000      	movs	r0, #0
    3d6e:	4770      	bx	lr
                switch(var2)
    3d70:	3b03      	subs	r3, #3
    3d72:	2b00      	cmp	r3, #0
    3d74:	d804      	bhi.n	3d80 <nrf52_errata_32+0x24>
    3d76:	e8df f003 	tbb	[pc, r3]
    3d7a:	01          	.byte	0x01
    3d7b:	00          	.byte	0x00
            if (var1 == 0x06)
    3d7c:	2001      	movs	r0, #1
    3d7e:	4770      	bx	lr
                        return false;
    3d80:	2000      	movs	r0, #0
    #endif
}
    3d82:	4770      	bx	lr
    3d84:	f0000fe0 	.word	0xf0000fe0

00003d88 <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3d88:	4b06      	ldr	r3, [pc, #24]	; (3da4 <nrf52_errata_36+0x1c>)
    3d8a:	681b      	ldr	r3, [r3, #0]
    3d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d90:	d003      	beq.n	3d9a <nrf52_errata_36+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3d92:	2b06      	cmp	r3, #6
    3d94:	d004      	beq.n	3da0 <nrf52_errata_36+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    3d96:	2000      	movs	r0, #0
    3d98:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3d9a:	4b03      	ldr	r3, [pc, #12]	; (3da8 <nrf52_errata_36+0x20>)
    3d9c:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3d9e:	e7f8      	b.n	3d92 <nrf52_errata_36+0xa>
                        return true;
    3da0:	2001      	movs	r0, #1
    #endif
}
    3da2:	4770      	bx	lr
    3da4:	10000130 	.word	0x10000130
    3da8:	f0000fe0 	.word	0xf0000fe0

00003dac <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3dac:	4b09      	ldr	r3, [pc, #36]	; (3dd4 <nrf52_errata_37+0x28>)
    3dae:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3db0:	3308      	adds	r3, #8
    3db2:	681b      	ldr	r3, [r3, #0]
    3db4:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3db8:	2a06      	cmp	r2, #6
    3dba:	d001      	beq.n	3dc0 <nrf52_errata_37+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3dbc:	2000      	movs	r0, #0
    3dbe:	4770      	bx	lr
                switch(var2)
    3dc0:	3b03      	subs	r3, #3
    3dc2:	2b00      	cmp	r3, #0
    3dc4:	d804      	bhi.n	3dd0 <nrf52_errata_37+0x24>
    3dc6:	e8df f003 	tbb	[pc, r3]
    3dca:	01          	.byte	0x01
    3dcb:	00          	.byte	0x00
            if (var1 == 0x06)
    3dcc:	2001      	movs	r0, #1
    3dce:	4770      	bx	lr
                        return false;
    3dd0:	2000      	movs	r0, #0
    #endif
}
    3dd2:	4770      	bx	lr
    3dd4:	f0000fe0 	.word	0xf0000fe0

00003dd8 <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3dd8:	4b09      	ldr	r3, [pc, #36]	; (3e00 <nrf52_errata_57+0x28>)
    3dda:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3ddc:	3308      	adds	r3, #8
    3dde:	681b      	ldr	r3, [r3, #0]
    3de0:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3de4:	2a06      	cmp	r2, #6
    3de6:	d001      	beq.n	3dec <nrf52_errata_57+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3de8:	2000      	movs	r0, #0
    3dea:	4770      	bx	lr
                switch(var2)
    3dec:	3b03      	subs	r3, #3
    3dee:	2b00      	cmp	r3, #0
    3df0:	d804      	bhi.n	3dfc <nrf52_errata_57+0x24>
    3df2:	e8df f003 	tbb	[pc, r3]
    3df6:	01          	.byte	0x01
    3df7:	00          	.byte	0x00
            if (var1 == 0x06)
    3df8:	2001      	movs	r0, #1
    3dfa:	4770      	bx	lr
                        return false;
    3dfc:	2000      	movs	r0, #0
    #endif
}
    3dfe:	4770      	bx	lr
    3e00:	f0000fe0 	.word	0xf0000fe0

00003e04 <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3e04:	4b0d      	ldr	r3, [pc, #52]	; (3e3c <nrf52_errata_66+0x38>)
    3e06:	681a      	ldr	r2, [r3, #0]
    3e08:	f1b2 3fff 	cmp.w	r2, #4294967295
    3e0c:	d005      	beq.n	3e1a <nrf52_errata_66+0x16>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    3e0e:	4b0c      	ldr	r3, [pc, #48]	; (3e40 <nrf52_errata_66+0x3c>)
    3e10:	681b      	ldr	r3, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3e12:	2a06      	cmp	r2, #6
    3e14:	d008      	beq.n	3e28 <nrf52_errata_66+0x24>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    3e16:	2000      	movs	r0, #0
    3e18:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3e1a:	4b0a      	ldr	r3, [pc, #40]	; (3e44 <nrf52_errata_66+0x40>)
    3e1c:	781a      	ldrb	r2, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3e1e:	3308      	adds	r3, #8
    3e20:	681b      	ldr	r3, [r3, #0]
    3e22:	f3c3 1303 	ubfx	r3, r3, #4, #4
    3e26:	e7f4      	b.n	3e12 <nrf52_errata_66+0xe>
                switch(var2)
    3e28:	3b03      	subs	r3, #3
    3e2a:	2b01      	cmp	r3, #1
    3e2c:	d804      	bhi.n	3e38 <nrf52_errata_66+0x34>
    3e2e:	e8df f003 	tbb	[pc, r3]
    3e32:	0101      	.short	0x0101
            if (var1 == 0x06)
    3e34:	2000      	movs	r0, #0
    3e36:	4770      	bx	lr
                        return true;
    3e38:	2001      	movs	r0, #1
    #endif
}
    3e3a:	4770      	bx	lr
    3e3c:	10000130 	.word	0x10000130
    3e40:	10000134 	.word	0x10000134
    3e44:	f0000fe0 	.word	0xf0000fe0

00003e48 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3e48:	4b06      	ldr	r3, [pc, #24]	; (3e64 <nrf52_errata_108+0x1c>)
    3e4a:	681b      	ldr	r3, [r3, #0]
    3e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e50:	d003      	beq.n	3e5a <nrf52_errata_108+0x12>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3e52:	2b06      	cmp	r3, #6
    3e54:	d004      	beq.n	3e60 <nrf52_errata_108+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    3e56:	2000      	movs	r0, #0
    3e58:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3e5a:	4b03      	ldr	r3, [pc, #12]	; (3e68 <nrf52_errata_108+0x20>)
    3e5c:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3e5e:	e7f8      	b.n	3e52 <nrf52_errata_108+0xa>
                        return true;
    3e60:	2001      	movs	r0, #1
    #endif
}
    3e62:	4770      	bx	lr
    3e64:	10000130 	.word	0x10000130
    3e68:	f0000fe0 	.word	0xf0000fe0

00003e6c <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3e6c:	4b06      	ldr	r3, [pc, #24]	; (3e88 <nrf52_errata_136+0x1c>)
    3e6e:	681b      	ldr	r3, [r3, #0]
    3e70:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e74:	d003      	beq.n	3e7e <nrf52_errata_136+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3e76:	2b06      	cmp	r3, #6
    3e78:	d004      	beq.n	3e84 <nrf52_errata_136+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    3e7a:	2000      	movs	r0, #0
    3e7c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3e7e:	4b03      	ldr	r3, [pc, #12]	; (3e8c <nrf52_errata_136+0x20>)
    3e80:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3e82:	e7f8      	b.n	3e76 <nrf52_errata_136+0xa>
                        return true;
    3e84:	2001      	movs	r0, #1
    #endif
}
    3e86:	4770      	bx	lr
    3e88:	10000130 	.word	0x10000130
    3e8c:	f0000fe0 	.word	0xf0000fe0

00003e90 <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3e90:	4b08      	ldr	r3, [pc, #32]	; (3eb4 <nrf52_errata_182+0x24>)
    3e92:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3e94:	4a08      	ldr	r2, [pc, #32]	; (3eb8 <nrf52_errata_182+0x28>)
    3e96:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3e98:	2b06      	cmp	r3, #6
    3e9a:	d001      	beq.n	3ea0 <nrf52_errata_182+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    3e9c:	2000      	movs	r0, #0
    3e9e:	4770      	bx	lr
                switch(var2)
    3ea0:	2a05      	cmp	r2, #5
    3ea2:	d803      	bhi.n	3eac <nrf52_errata_182+0x1c>
    3ea4:	2a03      	cmp	r2, #3
    3ea6:	d303      	bcc.n	3eb0 <nrf52_errata_182+0x20>
    3ea8:	2000      	movs	r0, #0
    3eaa:	4770      	bx	lr
                        return true;
    3eac:	2001      	movs	r0, #1
    3eae:	4770      	bx	lr
                        return true;
    3eb0:	2001      	movs	r0, #1
    #endif
}
    3eb2:	4770      	bx	lr
    3eb4:	10000130 	.word	0x10000130
    3eb8:	10000134 	.word	0x10000134

00003ebc <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3ebc:	4b08      	ldr	r3, [pc, #32]	; (3ee0 <nrf52_errata_249+0x24>)
    3ebe:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3ec0:	4a08      	ldr	r2, [pc, #32]	; (3ee4 <nrf52_errata_249+0x28>)
    3ec2:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3ec4:	2b06      	cmp	r3, #6
    3ec6:	d001      	beq.n	3ecc <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    3ec8:	2000      	movs	r0, #0
    3eca:	4770      	bx	lr
                switch(var2)
    3ecc:	2a06      	cmp	r2, #6
    3ece:	d803      	bhi.n	3ed8 <nrf52_errata_249+0x1c>
    3ed0:	2a03      	cmp	r2, #3
    3ed2:	d303      	bcc.n	3edc <nrf52_errata_249+0x20>
    3ed4:	2000      	movs	r0, #0
    3ed6:	4770      	bx	lr
                        return true;
    3ed8:	2001      	movs	r0, #1
    3eda:	4770      	bx	lr
                        return true;
    3edc:	2001      	movs	r0, #1
    #endif
}
    3ede:	4770      	bx	lr
    3ee0:	10000130 	.word	0x10000130
    3ee4:	10000134 	.word	0x10000134

00003ee8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3ee8:	4b02      	ldr	r3, [pc, #8]	; (3ef4 <nvmc_wait+0xc>)
    3eea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3eee:	2b00      	cmp	r3, #0
    3ef0:	d0fa      	beq.n	3ee8 <nvmc_wait>
}
    3ef2:	4770      	bx	lr
    3ef4:	4001e000 	.word	0x4001e000

00003ef8 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    3ef8:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3efa:	4b03      	ldr	r3, [pc, #12]	; (3f08 <nvmc_config+0x10>)
    3efc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    3f00:	f7ff fff2 	bl	3ee8 <nvmc_wait>
}
    3f04:	bd08      	pop	{r3, pc}
    3f06:	bf00      	nop
    3f08:	4001e000 	.word	0x4001e000

00003f0c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3f0c:	4b01      	ldr	r3, [pc, #4]	; (3f14 <SystemCoreClockUpdate+0x8>)
    3f0e:	4a02      	ldr	r2, [pc, #8]	; (3f18 <SystemCoreClockUpdate+0xc>)
    3f10:	601a      	str	r2, [r3, #0]
}
    3f12:	4770      	bx	lr
    3f14:	20000020 	.word	0x20000020
    3f18:	03d09000 	.word	0x03d09000

00003f1c <SystemInit>:

void SystemInit(void)
{
    3f1c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    3f1e:	f7ff fee3 	bl	3ce8 <nrf52_errata_12>
    3f22:	b128      	cbz	r0, 3f30 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    3f24:	4b70      	ldr	r3, [pc, #448]	; (40e8 <SystemInit+0x1cc>)
    3f26:	681b      	ldr	r3, [r3, #0]
    3f28:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3f2c:	4a6f      	ldr	r2, [pc, #444]	; (40ec <SystemInit+0x1d0>)
    3f2e:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    3f30:	f7ff feec 	bl	3d0c <nrf52_errata_16>
    3f34:	b110      	cbz	r0, 3f3c <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    3f36:	4b6e      	ldr	r3, [pc, #440]	; (40f0 <SystemInit+0x1d4>)
    3f38:	4a6e      	ldr	r2, [pc, #440]	; (40f4 <SystemInit+0x1d8>)
    3f3a:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    3f3c:	f7ff fefc 	bl	3d38 <nrf52_errata_31>
    3f40:	b128      	cbz	r0, 3f4e <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    3f42:	4b6d      	ldr	r3, [pc, #436]	; (40f8 <SystemInit+0x1dc>)
    3f44:	681b      	ldr	r3, [r3, #0]
    3f46:	f3c3 3342 	ubfx	r3, r3, #13, #3
    3f4a:	4a6c      	ldr	r2, [pc, #432]	; (40fc <SystemInit+0x1e0>)
    3f4c:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    3f4e:	f7ff ff05 	bl	3d5c <nrf52_errata_32>
    3f52:	b120      	cbz	r0, 3f5e <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    3f54:	4a6a      	ldr	r2, [pc, #424]	; (4100 <SystemInit+0x1e4>)
    3f56:	68d3      	ldr	r3, [r2, #12]
    3f58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3f5c:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    3f5e:	f7ff ff13 	bl	3d88 <nrf52_errata_36>
    3f62:	b140      	cbz	r0, 3f76 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
    3f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f68:	2200      	movs	r2, #0
    3f6a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3f6e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3f72:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    3f76:	f7ff ff19 	bl	3dac <nrf52_errata_37>
    3f7a:	b110      	cbz	r0, 3f82 <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    3f7c:	4b61      	ldr	r3, [pc, #388]	; (4104 <SystemInit+0x1e8>)
    3f7e:	2203      	movs	r2, #3
    3f80:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    3f82:	f7ff ff29 	bl	3dd8 <nrf52_errata_57>
    3f86:	b158      	cbz	r0, 3fa0 <SystemInit+0x84>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    3f88:	4b5f      	ldr	r3, [pc, #380]	; (4108 <SystemInit+0x1ec>)
    3f8a:	2205      	movs	r2, #5
    3f8c:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    3f8e:	3378      	adds	r3, #120	; 0x78
    3f90:	2201      	movs	r2, #1
    3f92:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    3f94:	3b70      	subs	r3, #112	; 0x70
    3f96:	2200      	movs	r2, #0
    3f98:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    3f9a:	3b04      	subs	r3, #4
    3f9c:	223f      	movs	r2, #63	; 0x3f
    3f9e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3fa0:	f7ff ff30 	bl	3e04 <nrf52_errata_66>
    3fa4:	2800      	cmp	r0, #0
    3fa6:	d046      	beq.n	4036 <SystemInit+0x11a>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3fac:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3fb0:	4b56      	ldr	r3, [pc, #344]	; (410c <SystemInit+0x1f0>)
    3fb2:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3fb6:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3fba:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3fbe:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3fc2:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3fc6:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3fca:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3fce:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3fd2:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3fd6:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3fda:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3fde:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3fe2:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3fe6:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3fea:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3fee:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3ff2:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3ff6:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3ffa:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3ffe:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4002:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4006:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    400a:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    400e:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4012:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4016:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    401a:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    401e:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4022:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4026:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    402a:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    402e:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4032:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    4036:	f7ff ff07 	bl	3e48 <nrf52_errata_108>
    403a:	b128      	cbz	r0, 4048 <SystemInit+0x12c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    403c:	4b34      	ldr	r3, [pc, #208]	; (4110 <SystemInit+0x1f4>)
    403e:	681b      	ldr	r3, [r3, #0]
    4040:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    4044:	4a33      	ldr	r2, [pc, #204]	; (4114 <SystemInit+0x1f8>)
    4046:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4048:	f7ff ff10 	bl	3e6c <nrf52_errata_136>
    404c:	b160      	cbz	r0, 4068 <SystemInit+0x14c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    404e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4052:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    4056:	f013 0f01 	tst.w	r3, #1
    405a:	d005      	beq.n	4068 <SystemInit+0x14c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    405c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4060:	f06f 0201 	mvn.w	r2, #1
    4064:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    4068:	f7ff ff12 	bl	3e90 <nrf52_errata_182>
    406c:	b120      	cbz	r0, 4078 <SystemInit+0x15c>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    406e:	4a2a      	ldr	r2, [pc, #168]	; (4118 <SystemInit+0x1fc>)
    4070:	6813      	ldr	r3, [r2, #0]
    4072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    4076:	6013      	str	r3, [r2, #0]
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    4078:	f7ff ff20 	bl	3ebc <nrf52_errata_249>
    407c:	b138      	cbz	r0, 408e <SystemInit+0x172>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    407e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4082:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    408a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    408e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4092:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4096:	2b00      	cmp	r3, #0
    4098:	db08      	blt.n	40ac <SystemInit+0x190>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    409a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    409e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    40a2:	2b00      	cmp	r3, #0
    40a4:	db02      	blt.n	40ac <SystemInit+0x190>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    40a6:	f7ff ff31 	bl	3f0c <SystemCoreClockUpdate>
}
    40aa:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    40ac:	2001      	movs	r0, #1
    40ae:	f7ff ff23 	bl	3ef8 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    40b2:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    40b6:	2515      	movs	r5, #21
    40b8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    40bc:	f7ff ff14 	bl	3ee8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    40c0:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    40c4:	f7ff ff10 	bl	3ee8 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    40c8:	2000      	movs	r0, #0
    40ca:	f7ff ff15 	bl	3ef8 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    40ce:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    40d2:	4912      	ldr	r1, [pc, #72]	; (411c <SystemInit+0x200>)
    40d4:	68ca      	ldr	r2, [r1, #12]
    40d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    40da:	4b11      	ldr	r3, [pc, #68]	; (4120 <SystemInit+0x204>)
    40dc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    40de:	60cb      	str	r3, [r1, #12]
    40e0:	f3bf 8f4f 	dsb	sy
    __NOP();
    40e4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    40e6:	e7fd      	b.n	40e4 <SystemInit+0x1c8>
    40e8:	10000324 	.word	0x10000324
    40ec:	40013540 	.word	0x40013540
    40f0:	4007c074 	.word	0x4007c074
    40f4:	baadf00d 	.word	0xbaadf00d
    40f8:	10000244 	.word	0x10000244
    40fc:	4000053c 	.word	0x4000053c
    4100:	e000edf0 	.word	0xe000edf0
    4104:	400005a0 	.word	0x400005a0
    4108:	40005610 	.word	0x40005610
    410c:	4000c000 	.word	0x4000c000
    4110:	10000258 	.word	0x10000258
    4114:	40000ee4 	.word	0x40000ee4
    4118:	4000173c 	.word	0x4000173c
    411c:	e000ed00 	.word	0xe000ed00
    4120:	05fa0004 	.word	0x05fa0004

00004124 <nrfx_clock_anomaly_132>:
    uint32_t core_debug;
    uint32_t dwt_ctrl;

    // Preserve DEMCR register to do not influence into its configuration. Enable the trace and
    // debug blocks. It is required to read and write data to DWT block.
    core_debug = CoreDebug->DEMCR;
    4124:	4b0b      	ldr	r3, [pc, #44]	; (4154 <nrfx_clock_anomaly_132+0x30>)
    4126:	68d9      	ldr	r1, [r3, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    4128:	f041 7280 	orr.w	r2, r1, #16777216	; 0x1000000
    412c:	60da      	str	r2, [r3, #12]

    // Preserve CTRL register in DWT block to do not influence into its configuration. Make sure
    // that cycle counter is enabled.
    dwt_ctrl = DWT->CTRL;
    412e:	4b0a      	ldr	r3, [pc, #40]	; (4158 <nrfx_clock_anomaly_132+0x34>)
    4130:	6818      	ldr	r0, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    4132:	f040 0201 	orr.w	r2, r0, #1
    4136:	601a      	str	r2, [r3, #0]

    // Store start value of cycle counter.
    cyccnt_inital = DWT->CYCCNT;
    4138:	685a      	ldr	r2, [r3, #4]

    // Delay required time.
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    413a:	4b07      	ldr	r3, [pc, #28]	; (4158 <nrfx_clock_anomaly_132+0x34>)
    413c:	685b      	ldr	r3, [r3, #4]
    413e:	1a9b      	subs	r3, r3, r2
    4140:	f5b3 5f0a 	cmp.w	r3, #8832	; 0x2280
    4144:	d3f9      	bcc.n	413a <nrfx_clock_anomaly_132+0x16>
    {}

    // Restore preserved registers.
    DWT->CTRL = dwt_ctrl;
    4146:	4b04      	ldr	r3, [pc, #16]	; (4158 <nrfx_clock_anomaly_132+0x34>)
    4148:	6018      	str	r0, [r3, #0]
    CoreDebug->DEMCR = core_debug;
    414a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
    414e:	33f0      	adds	r3, #240	; 0xf0
    4150:	60d9      	str	r1, [r3, #12]
}
    4152:	4770      	bx	lr
    4154:	e000edf0 	.word	0xe000edf0
    4158:	e0001000 	.word	0xe0001000

0000415c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    415c:	4b06      	ldr	r3, [pc, #24]	; (4178 <nrfx_clock_init+0x1c>)
    415e:	791b      	ldrb	r3, [r3, #4]
    4160:	b93b      	cbnz	r3, 4172 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    4162:	4b05      	ldr	r3, [pc, #20]	; (4178 <nrfx_clock_init+0x1c>)
    4164:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4166:	2201      	movs	r2, #1
    4168:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    416a:	2200      	movs	r2, #0
    416c:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    416e:	4803      	ldr	r0, [pc, #12]	; (417c <nrfx_clock_init+0x20>)
    4170:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4172:	4803      	ldr	r0, [pc, #12]	; (4180 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4174:	4770      	bx	lr
    4176:	bf00      	nop
    4178:	20000428 	.word	0x20000428
    417c:	0bad0000 	.word	0x0bad0000
    4180:	0bad000c 	.word	0x0bad000c

00004184 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    4184:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4186:	b110      	cbz	r0, 418e <nrfx_clock_start+0xa>
    4188:	2801      	cmp	r0, #1
    418a:	d027      	beq.n	41dc <nrfx_clock_start+0x58>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    418c:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    418e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4192:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4196:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    419a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    419e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    41a2:	d113      	bne.n	41cc <nrfx_clock_start+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
    41a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41a8:	2200      	movs	r2, #0
    41aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41ae:	4b11      	ldr	r3, [pc, #68]	; (41f4 <nrfx_clock_start+0x70>)
    41b0:	2200      	movs	r2, #0
    41b2:	601a      	str	r2, [r3, #0]
    41b4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    41b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41ba:	2202      	movs	r2, #2
    41bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            nrfx_clock_anomaly_132();
    41c0:	f7ff ffb0 	bl	4124 <nrfx_clock_anomaly_132>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41c4:	4b0c      	ldr	r3, [pc, #48]	; (41f8 <nrfx_clock_start+0x74>)
    41c6:	2201      	movs	r2, #1
    41c8:	601a      	str	r2, [r3, #0]
}
    41ca:	e7df      	b.n	418c <nrfx_clock_start+0x8>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    41cc:	2b01      	cmp	r3, #1
    41ce:	d1e9      	bne.n	41a4 <nrfx_clock_start+0x20>
    p_reg->LFCLKSRC = (uint32_t)(source);
    41d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41d4:	2201      	movs	r2, #1
    41d6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    41da:	e7e8      	b.n	41ae <nrfx_clock_start+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41dc:	4b07      	ldr	r3, [pc, #28]	; (41fc <nrfx_clock_start+0x78>)
    41de:	2200      	movs	r2, #0
    41e0:	601a      	str	r2, [r3, #0]
    41e2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    41e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41e8:	2201      	movs	r2, #1
    41ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41ee:	601a      	str	r2, [r3, #0]
}
    41f0:	e7cc      	b.n	418c <nrfx_clock_start+0x8>
    41f2:	bf00      	nop
    41f4:	40000104 	.word	0x40000104
    41f8:	40000008 	.word	0x40000008
    41fc:	40000100 	.word	0x40000100

00004200 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    4200:	b530      	push	{r4, r5, lr}
    4202:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4204:	4604      	mov	r4, r0
    4206:	b118      	cbz	r0, 4210 <nrfx_clock_stop+0x10>
    4208:	2801      	cmp	r0, #1
    420a:	d013      	beq.n	4234 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    420c:	b003      	add	sp, #12
    420e:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    4210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4214:	2202      	movs	r2, #2
    4216:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    421a:	f503 7382 	add.w	r3, r3, #260	; 0x104
    421e:	2200      	movs	r2, #0
    4220:	601a      	str	r2, [r3, #0]
    4222:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4224:	4b39      	ldr	r3, [pc, #228]	; (430c <nrfx_clock_stop+0x10c>)
    4226:	2201      	movs	r2, #1
    4228:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    422a:	2c01      	cmp	r4, #1
    422c:	d00f      	beq.n	424e <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    422e:	f242 7510 	movw	r5, #10000	; 0x2710
    4232:	e052      	b.n	42da <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    4234:	2301      	movs	r3, #1
    4236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    423a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    423e:	f502 7280 	add.w	r2, r2, #256	; 0x100
    4242:	2100      	movs	r1, #0
    4244:	6011      	str	r1, [r2, #0]
    4246:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4248:	4a31      	ldr	r2, [pc, #196]	; (4310 <nrfx_clock_stop+0x110>)
    424a:	6013      	str	r3, [r2, #0]
}
    424c:	e7ed      	b.n	422a <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    424e:	2301      	movs	r3, #1
    4250:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4254:	f242 7510 	movw	r5, #10000	; 0x2710
    4258:	e018      	b.n	428c <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    425a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    425e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4262:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4266:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    426a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    426e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4272:	d120      	bne.n	42b6 <nrfx_clock_stop+0xb6>
    return false;
    4274:	2300      	movs	r3, #0
    4276:	2b00      	cmp	r3, #0
    4278:	d042      	beq.n	4300 <nrfx_clock_stop+0x100>
    427a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    427e:	2b01      	cmp	r3, #1
    4280:	d13e      	bne.n	4300 <nrfx_clock_stop+0x100>
    4282:	2001      	movs	r0, #1
    4284:	f003 f885 	bl	7392 <nrfx_busy_wait>
    4288:	3d01      	subs	r5, #1
    428a:	d039      	beq.n	4300 <nrfx_clock_stop+0x100>
    switch (domain)
    428c:	2c00      	cmp	r4, #0
    428e:	d0e4      	beq.n	425a <nrfx_clock_stop+0x5a>
    4290:	2c01      	cmp	r4, #1
    4292:	d001      	beq.n	4298 <nrfx_clock_stop+0x98>
    4294:	2300      	movs	r3, #0
    4296:	e7ee      	b.n	4276 <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    429c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    42a0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    42a4:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    42a8:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    42ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    42b0:	d103      	bne.n	42ba <nrfx_clock_stop+0xba>
    return false;
    42b2:	2300      	movs	r3, #0
    42b4:	e7df      	b.n	4276 <nrfx_clock_stop+0x76>
                return true;
    42b6:	2301      	movs	r3, #1
    42b8:	e7dd      	b.n	4276 <nrfx_clock_stop+0x76>
                return true;
    42ba:	2301      	movs	r3, #1
    42bc:	e7db      	b.n	4276 <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    42be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42c2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    42c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    42ca:	d115      	bne.n	42f8 <nrfx_clock_stop+0xf8>
    return false;
    42cc:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    42ce:	b1bb      	cbz	r3, 4300 <nrfx_clock_stop+0x100>
    42d0:	2001      	movs	r0, #1
    42d2:	f003 f85e 	bl	7392 <nrfx_busy_wait>
    42d6:	3d01      	subs	r5, #1
    42d8:	d012      	beq.n	4300 <nrfx_clock_stop+0x100>
    switch (domain)
    42da:	2c00      	cmp	r4, #0
    42dc:	d0ef      	beq.n	42be <nrfx_clock_stop+0xbe>
    42de:	2c01      	cmp	r4, #1
    42e0:	d001      	beq.n	42e6 <nrfx_clock_stop+0xe6>
    42e2:	2300      	movs	r3, #0
    42e4:	e7f3      	b.n	42ce <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    42e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42ea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    42ee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    42f2:	d103      	bne.n	42fc <nrfx_clock_stop+0xfc>
    return false;
    42f4:	2300      	movs	r3, #0
    42f6:	e7ea      	b.n	42ce <nrfx_clock_stop+0xce>
                return true;
    42f8:	2301      	movs	r3, #1
    42fa:	e7e8      	b.n	42ce <nrfx_clock_stop+0xce>
                return true;
    42fc:	2301      	movs	r3, #1
    42fe:	e7e6      	b.n	42ce <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    4300:	2c01      	cmp	r4, #1
    4302:	d183      	bne.n	420c <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    4304:	4b03      	ldr	r3, [pc, #12]	; (4314 <nrfx_clock_stop+0x114>)
    4306:	2200      	movs	r2, #0
    4308:	715a      	strb	r2, [r3, #5]
    430a:	e77f      	b.n	420c <nrfx_clock_stop+0xc>
    430c:	4000000c 	.word	0x4000000c
    4310:	40000004 	.word	0x40000004
    4314:	20000428 	.word	0x20000428

00004318 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4318:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    431a:	4b1b      	ldr	r3, [pc, #108]	; (4388 <nrfx_power_clock_irq_handler+0x70>)
    431c:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    431e:	b183      	cbz	r3, 4342 <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4320:	4b19      	ldr	r3, [pc, #100]	; (4388 <nrfx_power_clock_irq_handler+0x70>)
    4322:	2200      	movs	r2, #0
    4324:	601a      	str	r2, [r3, #0]
    4326:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    4328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    432c:	2201      	movs	r2, #1
    432e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4332:	4b16      	ldr	r3, [pc, #88]	; (438c <nrfx_power_clock_irq_handler+0x74>)
    4334:	795b      	ldrb	r3, [r3, #5]
    4336:	b923      	cbnz	r3, 4342 <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    4338:	4b14      	ldr	r3, [pc, #80]	; (438c <nrfx_power_clock_irq_handler+0x74>)
    433a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    433c:	681b      	ldr	r3, [r3, #0]
    433e:	2000      	movs	r0, #0
    4340:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4342:	4b13      	ldr	r3, [pc, #76]	; (4390 <nrfx_power_clock_irq_handler+0x78>)
    4344:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4346:	b19b      	cbz	r3, 4370 <nrfx_power_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4348:	4b11      	ldr	r3, [pc, #68]	; (4390 <nrfx_power_clock_irq_handler+0x78>)
    434a:	2200      	movs	r2, #0
    434c:	601a      	str	r2, [r3, #0]
    434e:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4354:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4358:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    435c:	f012 0f03 	tst.w	r2, #3
    4360:	d107      	bne.n	4372 <nrfx_power_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4362:	2301      	movs	r3, #1
    4364:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4368:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    436c:	3208      	adds	r2, #8
    436e:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4370:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    4372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4376:	2202      	movs	r2, #2
    4378:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    437c:	4b03      	ldr	r3, [pc, #12]	; (438c <nrfx_power_clock_irq_handler+0x74>)
    437e:	681b      	ldr	r3, [r3, #0]
    4380:	2001      	movs	r0, #1
    4382:	4798      	blx	r3
}
    4384:	e7f4      	b.n	4370 <nrfx_power_clock_irq_handler+0x58>
    4386:	bf00      	nop
    4388:	40000100 	.word	0x40000100
    438c:	20000428 	.word	0x20000428
    4390:	40000104 	.word	0x40000104

00004394 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    4394:	4b04      	ldr	r3, [pc, #16]	; (43a8 <is_allocated_channel+0x14>)
    4396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4398:	2301      	movs	r3, #1
    439a:	4083      	lsls	r3, r0
    439c:	421a      	tst	r2, r3
}
    439e:	bf14      	ite	ne
    43a0:	2001      	movne	r0, #1
    43a2:	2000      	moveq	r0, #0
    43a4:	4770      	bx	lr
    43a6:	bf00      	nop
    43a8:	20000430 	.word	0x20000430

000043ac <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    43ac:	2301      	movs	r3, #1
    43ae:	fa03 f000 	lsl.w	r0, r3, r0
    43b2:	4a02      	ldr	r2, [pc, #8]	; (43bc <channel_allocated_set+0x10>)
    43b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    43b6:	4303      	orrs	r3, r0
    43b8:	64d3      	str	r3, [r2, #76]	; 0x4c
}
    43ba:	4770      	bx	lr
    43bc:	20000430 	.word	0x20000430

000043c0 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    43c0:	2301      	movs	r3, #1
    43c2:	fa03 f000 	lsl.w	r0, r3, r0
    43c6:	4a03      	ldr	r2, [pc, #12]	; (43d4 <channel_allocated_clr+0x14>)
    43c8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    43ca:	ea23 0300 	bic.w	r3, r3, r0
    43ce:	64d3      	str	r3, [r2, #76]	; 0x4c
}
    43d0:	4770      	bx	lr
    43d2:	bf00      	nop
    43d4:	20000430 	.word	0x20000430

000043d8 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    43d8:	b538      	push	{r3, r4, r5, lr}
    43da:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    43dc:	f002 ffe6 	bl	73ac <is_app_channel>
    43e0:	b908      	cbnz	r0, 43e6 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    43e2:	4809      	ldr	r0, [pc, #36]	; (4408 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    43e4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    43e6:	f04f 0320 	mov.w	r3, #32
    43ea:	f3ef 8511 	mrs	r5, BASEPRI
    43ee:	f383 8812 	msr	BASEPRI_MAX, r3
    43f2:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    43f6:	4620      	mov	r0, r4
    43f8:	f7ff ffe2 	bl	43c0 <channel_allocated_clr>
	__asm__ volatile(
    43fc:	f385 8811 	msr	BASEPRI, r5
    4400:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    4404:	4801      	ldr	r0, [pc, #4]	; (440c <nrfx_gpiote_channel_free+0x34>)
}
    4406:	e7ed      	b.n	43e4 <nrfx_gpiote_channel_free+0xc>
    4408:	0bad0004 	.word	0x0bad0004
    440c:	0bad0000 	.word	0x0bad0000

00004410 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    4410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4414:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    4416:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    4418:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    441a:	4f17      	ldr	r7, [pc, #92]	; (4478 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    441c:	e013      	b.n	4446 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    441e:	4620      	mov	r0, r4
    4420:	f7ff ffc4 	bl	43ac <channel_allocated_set>
            *p_channel = ch_idx;
    4424:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    4428:	4f14      	ldr	r7, [pc, #80]	; (447c <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    442a:	f386 8811 	msr	BASEPRI, r6
    442e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    4432:	4b12      	ldr	r3, [pc, #72]	; (447c <nrfx_gpiote_channel_alloc+0x6c>)
    4434:	429f      	cmp	r7, r3
    4436:	d01b      	beq.n	4470 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    4438:	2301      	movs	r3, #1
    443a:	fa03 f309 	lsl.w	r3, r3, r9
    443e:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    4442:	3401      	adds	r4, #1
    4444:	b2e4      	uxtb	r4, r4
    4446:	b19d      	cbz	r5, 4470 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    4448:	f04f 0320 	mov.w	r3, #32
    444c:	f3ef 8611 	mrs	r6, BASEPRI
    4450:	f383 8812 	msr	BASEPRI_MAX, r3
    4454:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    4458:	46a1      	mov	r9, r4
    445a:	fa25 f304 	lsr.w	r3, r5, r4
    445e:	f013 0f01 	tst.w	r3, #1
    4462:	d0e2      	beq.n	442a <nrfx_gpiote_channel_alloc+0x1a>
    4464:	4620      	mov	r0, r4
    4466:	f7ff ff95 	bl	4394 <is_allocated_channel>
    446a:	2800      	cmp	r0, #0
    446c:	d1dd      	bne.n	442a <nrfx_gpiote_channel_alloc+0x1a>
    446e:	e7d6      	b.n	441e <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4470:	4638      	mov	r0, r7
    4472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4476:	bf00      	nop
    4478:	0bad0002 	.word	0x0bad0002
    447c:	0bad0000 	.word	0x0bad0000

00004480 <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    4480:	2301      	movs	r3, #1
    4482:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    4484:	4a03      	ldr	r2, [pc, #12]	; (4494 <is_allocated_channel+0x14>)
    4486:	6812      	ldr	r2, [r2, #0]
    4488:	4213      	tst	r3, r2
}
    448a:	bf14      	ite	ne
    448c:	2001      	movne	r0, #1
    448e:	2000      	moveq	r0, #0
    4490:	4770      	bx	lr
    4492:	bf00      	nop
    4494:	20000480 	.word	0x20000480

00004498 <channel_allocated_set>:
    4498:	2301      	movs	r3, #1
    449a:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    449e:	4a02      	ldr	r2, [pc, #8]	; (44a8 <channel_allocated_set+0x10>)
    44a0:	6813      	ldr	r3, [r2, #0]
    44a2:	4303      	orrs	r3, r0
    44a4:	6013      	str	r3, [r2, #0]
}
    44a6:	4770      	bx	lr
    44a8:	20000480 	.word	0x20000480

000044ac <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    44ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    44b0:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    44b2:	2400      	movs	r4, #0
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    44b4:	4e15      	ldr	r6, [pc, #84]	; (450c <nrfx_ppi_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    44b6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 4514 <nrfx_ppi_channel_alloc+0x68>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    44ba:	e011      	b.n	44e0 <nrfx_ppi_channel_alloc+0x34>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
    44bc:	4620      	mov	r0, r4
    44be:	f7ff ffeb 	bl	4498 <channel_allocated_set>
            *p_channel = channel;
    44c2:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
    44c6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4510 <nrfx_ppi_channel_alloc+0x64>
	__asm__ volatile(
    44ca:	f387 8811 	msr	BASEPRI, r7
    44ce:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    44d2:	4b0f      	ldr	r3, [pc, #60]	; (4510 <nrfx_ppi_channel_alloc+0x64>)
    44d4:	4598      	cmp	r8, r3
    44d6:	d016      	beq.n	4506 <nrfx_ppi_channel_alloc+0x5a>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    44d8:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    44dc:	3401      	adds	r4, #1
    44de:	b2e4      	uxtb	r4, r4
    44e0:	b18e      	cbz	r6, 4506 <nrfx_ppi_channel_alloc+0x5a>
	__asm__ volatile(
    44e2:	f04f 0320 	mov.w	r3, #32
    44e6:	f3ef 8711 	mrs	r7, BASEPRI
    44ea:	f383 8812 	msr	BASEPRI_MAX, r3
    44ee:	f3bf 8f6f 	isb	sy
    44f2:	2501      	movs	r5, #1
    44f4:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    44f6:	4235      	tst	r5, r6
    44f8:	d0e7      	beq.n	44ca <nrfx_ppi_channel_alloc+0x1e>
    44fa:	4620      	mov	r0, r4
    44fc:	f7ff ffc0 	bl	4480 <is_allocated_channel>
    4500:	2800      	cmp	r0, #0
    4502:	d1e2      	bne.n	44ca <nrfx_ppi_channel_alloc+0x1e>
    4504:	e7da      	b.n	44bc <nrfx_ppi_channel_alloc+0x10>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4506:	4640      	mov	r0, r8
    4508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    450c:	000fffff 	.word	0x000fffff
    4510:	0bad0000 	.word	0x0bad0000
    4514:	0bad0002 	.word	0x0bad0002

00004518 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4518:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    451a:	4c14      	ldr	r4, [pc, #80]	; (456c <_DoInit+0x54>)
    451c:	2303      	movs	r3, #3
    451e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4520:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4522:	4a13      	ldr	r2, [pc, #76]	; (4570 <_DoInit+0x58>)
    4524:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4526:	4b13      	ldr	r3, [pc, #76]	; (4574 <_DoInit+0x5c>)
    4528:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    452a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    452e:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4530:	2300      	movs	r3, #0
    4532:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4534:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4536:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    4538:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    453a:	4a0f      	ldr	r2, [pc, #60]	; (4578 <_DoInit+0x60>)
    453c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    453e:	2210      	movs	r2, #16
    4540:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4542:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4544:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4546:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4548:	490c      	ldr	r1, [pc, #48]	; (457c <_DoInit+0x64>)
    454a:	1de0      	adds	r0, r4, #7
    454c:	f002 f9f1 	bl	6932 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4550:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4554:	490a      	ldr	r1, [pc, #40]	; (4580 <_DoInit+0x68>)
    4556:	4620      	mov	r0, r4
    4558:	f002 f9eb 	bl	6932 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    455c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4560:	2320      	movs	r3, #32
    4562:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4564:	f3bf 8f5f 	dmb	sy
}
    4568:	bd10      	pop	{r4, pc}
    456a:	bf00      	nop
    456c:	20000484 	.word	0x20000484
    4570:	000084bc 	.word	0x000084bc
    4574:	2000053c 	.word	0x2000053c
    4578:	2000052c 	.word	0x2000052c
    457c:	000084c8 	.word	0x000084c8
    4580:	000084cc 	.word	0x000084cc

00004584 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    4584:	4b03      	ldr	r3, [pc, #12]	; (4594 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    4586:	4a04      	ldr	r2, [pc, #16]	; (4598 <z_device_state_init+0x14>)
    4588:	4293      	cmp	r3, r2
    458a:	d201      	bcs.n	4590 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    458c:	3318      	adds	r3, #24
    458e:	e7fa      	b.n	4586 <z_device_state_init+0x2>
	}
}
    4590:	4770      	bx	lr
    4592:	bf00      	nop
    4594:	0000781c 	.word	0x0000781c
    4598:	0000787c 	.word	0x0000787c

0000459c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    459c:	b570      	push	{r4, r5, r6, lr}
    459e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    45a0:	4b11      	ldr	r3, [pc, #68]	; (45e8 <z_sys_init_run_level+0x4c>)
    45a2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    45a6:	e009      	b.n	45bc <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    45a8:	4240      	negs	r0, r0
    45aa:	e017      	b.n	45dc <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    45ac:	68eb      	ldr	r3, [r5, #12]
    45ae:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    45b0:	68ea      	ldr	r2, [r5, #12]
    45b2:	7853      	ldrb	r3, [r2, #1]
    45b4:	f043 0301 	orr.w	r3, r3, #1
    45b8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    45ba:	3408      	adds	r4, #8
    45bc:	1c73      	adds	r3, r6, #1
    45be:	4a0a      	ldr	r2, [pc, #40]	; (45e8 <z_sys_init_run_level+0x4c>)
    45c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    45c4:	42a3      	cmp	r3, r4
    45c6:	d90d      	bls.n	45e4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    45c8:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    45ca:	6823      	ldr	r3, [r4, #0]
    45cc:	4628      	mov	r0, r5
    45ce:	4798      	blx	r3
		if (dev != NULL) {
    45d0:	2d00      	cmp	r5, #0
    45d2:	d0f2      	beq.n	45ba <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    45d4:	2800      	cmp	r0, #0
    45d6:	d0eb      	beq.n	45b0 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    45d8:	2800      	cmp	r0, #0
    45da:	dbe5      	blt.n	45a8 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    45dc:	28ff      	cmp	r0, #255	; 0xff
    45de:	dde5      	ble.n	45ac <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    45e0:	20ff      	movs	r0, #255	; 0xff
    45e2:	e7e3      	b.n	45ac <z_sys_init_run_level+0x10>
		}
	}
}
    45e4:	bd70      	pop	{r4, r5, r6, pc}
    45e6:	bf00      	nop
    45e8:	000084d4 	.word	0x000084d4

000045ec <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    45ec:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    45ee:	4605      	mov	r5, r0
    45f0:	b328      	cbz	r0, 463e <z_impl_device_get_binding+0x52>
    45f2:	7803      	ldrb	r3, [r0, #0]
    45f4:	b32b      	cbz	r3, 4642 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    45f6:	4c14      	ldr	r4, [pc, #80]	; (4648 <z_impl_device_get_binding+0x5c>)
    45f8:	e000      	b.n	45fc <z_impl_device_get_binding+0x10>
    45fa:	3418      	adds	r4, #24
    45fc:	4b13      	ldr	r3, [pc, #76]	; (464c <z_impl_device_get_binding+0x60>)
    45fe:	429c      	cmp	r4, r3
    4600:	d008      	beq.n	4614 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    4602:	4620      	mov	r0, r4
    4604:	f002 fee3 	bl	73ce <z_device_ready>
    4608:	2800      	cmp	r0, #0
    460a:	d0f6      	beq.n	45fa <z_impl_device_get_binding+0xe>
    460c:	6823      	ldr	r3, [r4, #0]
    460e:	42ab      	cmp	r3, r5
    4610:	d1f3      	bne.n	45fa <z_impl_device_get_binding+0xe>
    4612:	e012      	b.n	463a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    4614:	4c0c      	ldr	r4, [pc, #48]	; (4648 <z_impl_device_get_binding+0x5c>)
    4616:	e000      	b.n	461a <z_impl_device_get_binding+0x2e>
    4618:	3418      	adds	r4, #24
    461a:	4b0c      	ldr	r3, [pc, #48]	; (464c <z_impl_device_get_binding+0x60>)
    461c:	429c      	cmp	r4, r3
    461e:	d00b      	beq.n	4638 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4620:	4620      	mov	r0, r4
    4622:	f002 fed4 	bl	73ce <z_device_ready>
    4626:	2800      	cmp	r0, #0
    4628:	d0f6      	beq.n	4618 <z_impl_device_get_binding+0x2c>
    462a:	6821      	ldr	r1, [r4, #0]
    462c:	4628      	mov	r0, r5
    462e:	f002 f9b5 	bl	699c <strcmp>
    4632:	2800      	cmp	r0, #0
    4634:	d1f0      	bne.n	4618 <z_impl_device_get_binding+0x2c>
    4636:	e000      	b.n	463a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    4638:	2400      	movs	r4, #0
}
    463a:	4620      	mov	r0, r4
    463c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    463e:	4604      	mov	r4, r0
    4640:	e7fb      	b.n	463a <z_impl_device_get_binding+0x4e>
    4642:	2400      	movs	r4, #0
    4644:	e7f9      	b.n	463a <z_impl_device_get_binding+0x4e>
    4646:	bf00      	nop
    4648:	0000781c 	.word	0x0000781c
    464c:	0000787c 	.word	0x0000787c

00004650 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    4650:	b5f0      	push	{r4, r5, r6, r7, lr}
    4652:	b089      	sub	sp, #36	; 0x24
    4654:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    4656:	4b15      	ldr	r3, [pc, #84]	; (46ac <init_idle_thread+0x5c>)
    4658:	25b0      	movs	r5, #176	; 0xb0
    465a:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    465e:	4b14      	ldr	r3, [pc, #80]	; (46b0 <init_idle_thread+0x60>)
    4660:	f44f 76b0 	mov.w	r6, #352	; 0x160
    4664:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    4668:	af06      	add	r7, sp, #24
    466a:	4603      	mov	r3, r0
    466c:	4a11      	ldr	r2, [pc, #68]	; (46b4 <init_idle_thread+0x64>)
    466e:	2108      	movs	r1, #8
    4670:	4638      	mov	r0, r7
    4672:	f001 fead 	bl	63d0 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4676:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    467a:	480f      	ldr	r0, [pc, #60]	; (46b8 <init_idle_thread+0x68>)
    467c:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    4680:	9705      	str	r7, [sp, #20]
    4682:	2301      	movs	r3, #1
    4684:	9304      	str	r3, [sp, #16]
    4686:	230f      	movs	r3, #15
    4688:	9303      	str	r3, [sp, #12]
    468a:	2300      	movs	r3, #0
    468c:	9302      	str	r3, [sp, #8]
    468e:	9301      	str	r3, [sp, #4]
    4690:	9400      	str	r4, [sp, #0]
    4692:	4b0a      	ldr	r3, [pc, #40]	; (46bc <init_idle_thread+0x6c>)
    4694:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4698:	4631      	mov	r1, r6
    469a:	4628      	mov	r0, r5
    469c:	f000 f8fe 	bl	489c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    46a0:	7b6b      	ldrb	r3, [r5, #13]
    46a2:	f023 0304 	bic.w	r3, r3, #4
    46a6:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    46a8:	b009      	add	sp, #36	; 0x24
    46aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46ac:	20000060 	.word	0x20000060
    46b0:	20000da0 	.word	0x20000da0
    46b4:	000084ec 	.word	0x000084ec
    46b8:	2000093c 	.word	0x2000093c
    46bc:	00007477 	.word	0x00007477

000046c0 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    46c0:	b570      	push	{r4, r5, r6, lr}
    46c2:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    46c4:	f000 fc88 	bl	4fd8 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    46c8:	4d1b      	ldr	r5, [pc, #108]	; (4738 <prepare_multithreading+0x78>)
    46ca:	4b1c      	ldr	r3, [pc, #112]	; (473c <prepare_multithreading+0x7c>)
    46cc:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    46ce:	4b1c      	ldr	r3, [pc, #112]	; (4740 <prepare_multithreading+0x80>)
    46d0:	9305      	str	r3, [sp, #20]
    46d2:	2301      	movs	r3, #1
    46d4:	9304      	str	r3, [sp, #16]
    46d6:	2400      	movs	r4, #0
    46d8:	9403      	str	r4, [sp, #12]
    46da:	9402      	str	r4, [sp, #8]
    46dc:	9401      	str	r4, [sp, #4]
    46de:	9400      	str	r4, [sp, #0]
    46e0:	4b18      	ldr	r3, [pc, #96]	; (4744 <prepare_multithreading+0x84>)
    46e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    46e6:	4918      	ldr	r1, [pc, #96]	; (4748 <prepare_multithreading+0x88>)
    46e8:	4628      	mov	r0, r5
    46ea:	f000 f8d7 	bl	489c <z_setup_new_thread>
    46ee:	4606      	mov	r6, r0
    46f0:	7b6b      	ldrb	r3, [r5, #13]
    46f2:	f023 0304 	bic.w	r3, r3, #4
    46f6:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    46f8:	4628      	mov	r0, r5
    46fa:	f002 ff19 	bl	7530 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    46fe:	2c00      	cmp	r4, #0
    4700:	dd02      	ble.n	4708 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    4702:	4630      	mov	r0, r6
    4704:	b006      	add	sp, #24
    4706:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    4708:	4620      	mov	r0, r4
    470a:	f7ff ffa1 	bl	4650 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    470e:	4b0f      	ldr	r3, [pc, #60]	; (474c <prepare_multithreading+0x8c>)
    4710:	22b0      	movs	r2, #176	; 0xb0
    4712:	fb02 3204 	mla	r2, r2, r4, r3
    4716:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    471a:	4b08      	ldr	r3, [pc, #32]	; (473c <prepare_multithreading+0x7c>)
    471c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4720:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    4722:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    4724:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    4728:	4a09      	ldr	r2, [pc, #36]	; (4750 <prepare_multithreading+0x90>)
    472a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    472e:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    4732:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    4734:	3401      	adds	r4, #1
    4736:	e7e2      	b.n	46fe <prepare_multithreading+0x3e>
    4738:	20000110 	.word	0x20000110
    473c:	2000093c 	.word	0x2000093c
    4740:	000084f8 	.word	0x000084f8
    4744:	00004755 	.word	0x00004755
    4748:	20000980 	.word	0x20000980
    474c:	20000060 	.word	0x20000060
    4750:	20000f00 	.word	0x20000f00

00004754 <bg_thread_main>:
{
    4754:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4756:	4b0a      	ldr	r3, [pc, #40]	; (4780 <bg_thread_main+0x2c>)
    4758:	2201      	movs	r2, #1
    475a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    475c:	2002      	movs	r0, #2
    475e:	f7ff ff1d 	bl	459c <z_sys_init_run_level>
	boot_banner();
    4762:	f000 ff6f 	bl	5644 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4766:	2003      	movs	r0, #3
    4768:	f7ff ff18 	bl	459c <z_sys_init_run_level>
	z_init_static_threads();
    476c:	f000 f8fa 	bl	4964 <z_init_static_threads>
	main();
    4770:	f7fb ff3c 	bl	5ec <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4774:	4a03      	ldr	r2, [pc, #12]	; (4784 <bg_thread_main+0x30>)
    4776:	7b13      	ldrb	r3, [r2, #12]
    4778:	f023 0301 	bic.w	r3, r3, #1
    477c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    477e:	bd08      	pop	{r3, pc}
    4780:	2000097b 	.word	0x2000097b
    4784:	20000110 	.word	0x20000110

00004788 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    4788:	b508      	push	{r3, lr}
    478a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    478c:	4a01      	ldr	r2, [pc, #4]	; (4794 <switch_to_main_thread+0xc>)
    478e:	4802      	ldr	r0, [pc, #8]	; (4798 <switch_to_main_thread+0x10>)
    4790:	f7fe f942 	bl	2a18 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4794:	00004755 	.word	0x00004755
    4798:	20000110 	.word	0x20000110

0000479c <z_bss_zero>:
{
    479c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    479e:	4803      	ldr	r0, [pc, #12]	; (47ac <z_bss_zero+0x10>)
    47a0:	4a03      	ldr	r2, [pc, #12]	; (47b0 <z_bss_zero+0x14>)
    47a2:	1a12      	subs	r2, r2, r0
    47a4:	2100      	movs	r1, #0
    47a6:	f002 f927 	bl	69f8 <memset>
}
    47aa:	bd08      	pop	{r3, pc}
    47ac:	20000040 	.word	0x20000040
    47b0:	2000097c 	.word	0x2000097c

000047b4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    47b4:	b500      	push	{lr}
    47b6:	b0ad      	sub	sp, #180	; 0xb4
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    47b8:	4b1c      	ldr	r3, [pc, #112]	; (482c <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    47ba:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    47be:	4c1c      	ldr	r4, [pc, #112]	; (4830 <z_cstart+0x7c>)
    47c0:	6963      	ldr	r3, [r4, #20]
    47c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    47c6:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    47c8:	23e0      	movs	r3, #224	; 0xe0
    47ca:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    47ce:	2500      	movs	r5, #0
    47d0:	77e5      	strb	r5, [r4, #31]
    47d2:	7625      	strb	r5, [r4, #24]
    47d4:	7665      	strb	r5, [r4, #25]
    47d6:	76a5      	strb	r5, [r4, #26]
    47d8:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    47dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    47de:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    47e2:	6263      	str	r3, [r4, #36]	; 0x24
    47e4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    47e8:	f7fe fa68 	bl	2cbc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    47ec:	f7fd fffa 	bl	27e4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    47f0:	f04f 33ff 	mov.w	r3, #4294967295
    47f4:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    47f6:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    47f8:	f7fe fb6a 	bl	2ed0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    47fc:	f7fe fb04 	bl	2e08 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    4800:	2401      	movs	r4, #1
    4802:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    4806:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    480a:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    480c:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    480e:	4b09      	ldr	r3, [pc, #36]	; (4834 <z_cstart+0x80>)
    4810:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4814:	f7ff feb6 	bl	4584 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4818:	4628      	mov	r0, r5
    481a:	f7ff febf 	bl	459c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    481e:	4620      	mov	r0, r4
    4820:	f7ff febc 	bl	459c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    4824:	f7ff ff4c 	bl	46c0 <prepare_multithreading>
    4828:	f7ff ffae 	bl	4788 <switch_to_main_thread>
    482c:	20001720 	.word	0x20001720
    4830:	e000ed00 	.word	0xe000ed00
    4834:	2000093c 	.word	0x2000093c

00004838 <z_thread_monitor_exit>:
    4838:	f04f 0320 	mov.w	r3, #32
    483c:	f3ef 8111 	mrs	r1, BASEPRI
    4840:	f383 8812 	msr	BASEPRI_MAX, r3
    4844:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    4848:	4b0a      	ldr	r3, [pc, #40]	; (4874 <z_thread_monitor_exit+0x3c>)
    484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    484c:	4283      	cmp	r3, r0
    484e:	d104      	bne.n	485a <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    4850:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4852:	4b08      	ldr	r3, [pc, #32]	; (4874 <z_thread_monitor_exit+0x3c>)
    4854:	629a      	str	r2, [r3, #40]	; 0x28
    4856:	e007      	b.n	4868 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    4858:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    485a:	b113      	cbz	r3, 4862 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    485c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    485e:	4282      	cmp	r2, r0
    4860:	d1fa      	bne.n	4858 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    4862:	b10b      	cbz	r3, 4868 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    4864:	6f02      	ldr	r2, [r0, #112]	; 0x70
    4866:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    4868:	f381 8811 	msr	BASEPRI, r1
    486c:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    4870:	4770      	bx	lr
    4872:	bf00      	nop
    4874:	2000093c 	.word	0x2000093c

00004878 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    4878:	b538      	push	{r3, r4, r5, lr}
    487a:	4614      	mov	r4, r2
    487c:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    487e:	ea54 0305 	orrs.w	r3, r4, r5
    4882:	d102      	bne.n	488a <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    4884:	f002 fde2 	bl	744c <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    4888:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    488a:	462b      	mov	r3, r5
    488c:	4902      	ldr	r1, [pc, #8]	; (4898 <schedule_new_thread+0x20>)
    488e:	3018      	adds	r0, #24
    4890:	f000 fd00 	bl	5294 <z_add_timeout>
    4894:	e7f8      	b.n	4888 <schedule_new_thread+0x10>
    4896:	bf00      	nop
    4898:	00007569 	.word	0x00007569

0000489c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48a0:	b085      	sub	sp, #20
    48a2:	4604      	mov	r4, r0
    48a4:	460f      	mov	r7, r1
    48a6:	4615      	mov	r5, r2
    48a8:	461e      	mov	r6, r3
    48aa:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    48ae:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    48b2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    48b6:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    48ba:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    48be:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    48c0:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    48c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    48c4:	2204      	movs	r2, #4
    48c6:	9911      	ldr	r1, [sp, #68]	; 0x44
    48c8:	f002 fdc4 	bl	7454 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    48cc:	462a      	mov	r2, r5
    48ce:	4639      	mov	r1, r7
    48d0:	4620      	mov	r0, r4
    48d2:	f002 fda3 	bl	741c <setup_thread_stack>
    48d6:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    48d8:	f8cd 8008 	str.w	r8, [sp, #8]
    48dc:	f8cd 9004 	str.w	r9, [sp, #4]
    48e0:	f8cd a000 	str.w	sl, [sp]
    48e4:	4633      	mov	r3, r6
    48e6:	4602      	mov	r2, r0
    48e8:	4639      	mov	r1, r7
    48ea:	4620      	mov	r0, r4
    48ec:	f7fe f844 	bl	2978 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    48f0:	2300      	movs	r3, #0
    48f2:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    48f4:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    48f6:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    48fa:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    48fe:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    4902:	f04f 0320 	mov.w	r3, #32
    4906:	f3ef 8211 	mrs	r2, BASEPRI
    490a:	f383 8812 	msr	BASEPRI_MAX, r3
    490e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    4912:	4b13      	ldr	r3, [pc, #76]	; (4960 <z_setup_new_thread+0xc4>)
    4914:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4916:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    4918:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    491a:	f382 8811 	msr	BASEPRI, r2
    491e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    4922:	f1bb 0f00 	cmp.w	fp, #0
    4926:	d013      	beq.n	4950 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    4928:	221f      	movs	r2, #31
    492a:	4659      	mov	r1, fp
    492c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    4930:	f002 f808 	bl	6944 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    4934:	2300      	movs	r3, #0
    4936:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    493a:	4b09      	ldr	r3, [pc, #36]	; (4960 <z_setup_new_thread+0xc4>)
    493c:	689b      	ldr	r3, [r3, #8]
    493e:	b15b      	cbz	r3, 4958 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    4940:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    4944:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
    4948:	4628      	mov	r0, r5
    494a:	b005      	add	sp, #20
    494c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    4950:	2300      	movs	r3, #0
    4952:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    4956:	e7f0      	b.n	493a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    4958:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    495c:	e7f4      	b.n	4948 <z_setup_new_thread+0xac>
    495e:	bf00      	nop
    4960:	2000093c 	.word	0x2000093c

00004964 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    4964:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    4968:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    496a:	4c23      	ldr	r4, [pc, #140]	; (49f8 <z_init_static_threads+0x94>)
    496c:	4b23      	ldr	r3, [pc, #140]	; (49fc <z_init_static_threads+0x98>)
    496e:	429c      	cmp	r4, r3
    4970:	d215      	bcs.n	499e <z_init_static_threads+0x3a>
		z_setup_new_thread(
    4972:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4974:	9305      	str	r3, [sp, #20]
    4976:	6a23      	ldr	r3, [r4, #32]
    4978:	9304      	str	r3, [sp, #16]
    497a:	69e3      	ldr	r3, [r4, #28]
    497c:	9303      	str	r3, [sp, #12]
    497e:	69a3      	ldr	r3, [r4, #24]
    4980:	9302      	str	r3, [sp, #8]
    4982:	6963      	ldr	r3, [r4, #20]
    4984:	9301      	str	r3, [sp, #4]
    4986:	6923      	ldr	r3, [r4, #16]
    4988:	9300      	str	r3, [sp, #0]
    498a:	68e3      	ldr	r3, [r4, #12]
    498c:	68a2      	ldr	r2, [r4, #8]
    498e:	6861      	ldr	r1, [r4, #4]
    4990:	6820      	ldr	r0, [r4, #0]
    4992:	f7ff ff83 	bl	489c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    4996:	6823      	ldr	r3, [r4, #0]
    4998:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    499a:	3430      	adds	r4, #48	; 0x30
    499c:	e7e6      	b.n	496c <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    499e:	f000 f909 	bl	4bb4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    49a2:	4c15      	ldr	r4, [pc, #84]	; (49f8 <z_init_static_threads+0x94>)
    49a4:	e01b      	b.n	49de <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    49a6:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    49a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    49ac:	ea4f 79e3 	mov.w	r9, r3, asr #31
			return (t * to_hz + off) / from_hz;
    49b0:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    49b4:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    49b8:	03d8      	lsls	r0, r3, #15
    49ba:	f240 35e7 	movw	r5, #999	; 0x3e7
    49be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    49c2:	2300      	movs	r3, #0
    49c4:	1940      	adds	r0, r0, r5
    49c6:	f04f 0500 	mov.w	r5, #0
    49ca:	eb45 0101 	adc.w	r1, r5, r1
    49ce:	f7fb fb85 	bl	dc <__aeabi_uldivmod>
    49d2:	4602      	mov	r2, r0
    49d4:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    49d6:	4630      	mov	r0, r6
    49d8:	f7ff ff4e 	bl	4878 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    49dc:	3430      	adds	r4, #48	; 0x30
    49de:	4b07      	ldr	r3, [pc, #28]	; (49fc <z_init_static_threads+0x98>)
    49e0:	429c      	cmp	r4, r3
    49e2:	d204      	bcs.n	49ee <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    49e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    49e6:	f1b3 3fff 	cmp.w	r3, #4294967295
    49ea:	d0f7      	beq.n	49dc <z_init_static_threads+0x78>
    49ec:	e7db      	b.n	49a6 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    49ee:	f000 fa7f 	bl	4ef0 <k_sched_unlock>
}
    49f2:	b006      	add	sp, #24
    49f4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    49f8:	2000003c 	.word	0x2000003c
    49fc:	2000003c 	.word	0x2000003c

00004a00 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
    4a00:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
    4a02:	f002 fe90 	bl	7726 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    4a06:	4b04      	ldr	r3, [pc, #16]	; (4a18 <pm_save_idle+0x18>)
    4a08:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    4a0a:	f7fd fe87 	bl	271c <pm_system_suspend>
    4a0e:	b100      	cbz	r0, 4a12 <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
    4a10:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
    4a12:	f7fd feed 	bl	27f0 <arch_cpu_idle>
    4a16:	e7fb      	b.n	4a10 <pm_save_idle+0x10>
    4a18:	2000093c 	.word	0x2000093c

00004a1c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4a1c:	b538      	push	{r3, r4, r5, lr}
    4a1e:	4604      	mov	r4, r0
	__asm__ volatile(
    4a20:	f04f 0320 	mov.w	r3, #32
    4a24:	f3ef 8511 	mrs	r5, BASEPRI
    4a28:	f383 8812 	msr	BASEPRI_MAX, r3
    4a2c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4a30:	f002 fe19 	bl	7666 <z_unpend_first_thread>

	if (thread != NULL) {
    4a34:	b148      	cbz	r0, 4a4a <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4a36:	2200      	movs	r2, #0
    4a38:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4a3c:	f002 fd78 	bl	7530 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4a40:	4629      	mov	r1, r5
    4a42:	4807      	ldr	r0, [pc, #28]	; (4a60 <z_impl_k_sem_give+0x44>)
    4a44:	f000 f89a 	bl	4b7c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4a48:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4a4a:	68a3      	ldr	r3, [r4, #8]
    4a4c:	68e2      	ldr	r2, [r4, #12]
    4a4e:	4293      	cmp	r3, r2
    4a50:	d003      	beq.n	4a5a <z_impl_k_sem_give+0x3e>
    4a52:	2201      	movs	r2, #1
    4a54:	4413      	add	r3, r2
    4a56:	60a3      	str	r3, [r4, #8]
}
    4a58:	e7f2      	b.n	4a40 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4a5a:	2200      	movs	r2, #0
    4a5c:	e7fa      	b.n	4a54 <z_impl_k_sem_give+0x38>
    4a5e:	bf00      	nop
    4a60:	20000968 	.word	0x20000968

00004a64 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4a64:	b530      	push	{r4, r5, lr}
    4a66:	b083      	sub	sp, #12
    4a68:	461d      	mov	r5, r3
    4a6a:	f04f 0320 	mov.w	r3, #32
    4a6e:	f3ef 8111 	mrs	r1, BASEPRI
    4a72:	f383 8812 	msr	BASEPRI_MAX, r3
    4a76:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4a7a:	6883      	ldr	r3, [r0, #8]
    4a7c:	b143      	cbz	r3, 4a90 <z_impl_k_sem_take+0x2c>
		sem->count--;
    4a7e:	3b01      	subs	r3, #1
    4a80:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    4a82:	f381 8811 	msr	BASEPRI, r1
    4a86:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4a8a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4a8c:	b003      	add	sp, #12
    4a8e:	bd30      	pop	{r4, r5, pc}
    4a90:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4a92:	ea54 0305 	orrs.w	r3, r4, r5
    4a96:	d006      	beq.n	4aa6 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4a98:	e9cd 4500 	strd	r4, r5, [sp]
    4a9c:	4602      	mov	r2, r0
    4a9e:	4805      	ldr	r0, [pc, #20]	; (4ab4 <z_impl_k_sem_take+0x50>)
    4aa0:	f000 f9d0 	bl	4e44 <z_pend_curr>
	return ret;
    4aa4:	e7f2      	b.n	4a8c <z_impl_k_sem_take+0x28>
    4aa6:	f381 8811 	msr	BASEPRI, r1
    4aaa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4aae:	f06f 000f 	mvn.w	r0, #15
    4ab2:	e7eb      	b.n	4a8c <z_impl_k_sem_take+0x28>
    4ab4:	20000968 	.word	0x20000968

00004ab8 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    4ab8:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4aba:	f1b3 3fff 	cmp.w	r3, #4294967295
    4abe:	bf08      	it	eq
    4ac0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4ac4:	d100      	bne.n	4ac8 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    4ac6:	bd38      	pop	{r3, r4, r5, pc}
    4ac8:	4902      	ldr	r1, [pc, #8]	; (4ad4 <add_thread_timeout+0x1c>)
    4aca:	3018      	adds	r0, #24
    4acc:	f000 fbe2 	bl	5294 <z_add_timeout>
    4ad0:	e7f9      	b.n	4ac6 <add_thread_timeout+0xe>
    4ad2:	bf00      	nop
    4ad4:	00007569 	.word	0x00007569

00004ad8 <z_reset_time_slice>:
{
    4ad8:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    4ada:	4b08      	ldr	r3, [pc, #32]	; (4afc <z_reset_time_slice+0x24>)
    4adc:	681b      	ldr	r3, [r3, #0]
    4ade:	b903      	cbnz	r3, 4ae2 <z_reset_time_slice+0xa>
}
    4ae0:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4ae2:	f7ff f8f7 	bl	3cd4 <sys_clock_elapsed>
    4ae6:	4603      	mov	r3, r0
    4ae8:	4a04      	ldr	r2, [pc, #16]	; (4afc <z_reset_time_slice+0x24>)
    4aea:	6810      	ldr	r0, [r2, #0]
    4aec:	4403      	add	r3, r0
    4aee:	4a04      	ldr	r2, [pc, #16]	; (4b00 <z_reset_time_slice+0x28>)
    4af0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    4af2:	2100      	movs	r1, #0
    4af4:	f002 fe2d 	bl	7752 <z_set_timeout_expiry>
}
    4af8:	e7f2      	b.n	4ae0 <z_reset_time_slice+0x8>
    4afa:	bf00      	nop
    4afc:	20000970 	.word	0x20000970
    4b00:	2000093c 	.word	0x2000093c

00004b04 <k_sched_time_slice_set>:
{
    4b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b08:	4606      	mov	r6, r0
    4b0a:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    4b0c:	2300      	movs	r3, #0
	__asm__ volatile(
    4b0e:	f04f 0220 	mov.w	r2, #32
    4b12:	f3ef 8711 	mrs	r7, BASEPRI
    4b16:	f382 8812 	msr	BASEPRI_MAX, r2
    4b1a:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4b1e:	e009      	b.n	4b34 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    4b20:	4b13      	ldr	r3, [pc, #76]	; (4b70 <k_sched_time_slice_set+0x6c>)
    4b22:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    4b26:	f7ff ffd7 	bl	4ad8 <z_reset_time_slice>
	__asm__ volatile(
    4b2a:	f387 8811 	msr	BASEPRI, r7
    4b2e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4b32:	2301      	movs	r3, #1
    4b34:	b9cb      	cbnz	r3, 4b6a <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    4b36:	2300      	movs	r3, #0
    4b38:	4a0e      	ldr	r2, [pc, #56]	; (4b74 <k_sched_time_slice_set+0x70>)
    4b3a:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    4b3c:	0c75      	lsrs	r5, r6, #17
    4b3e:	03f4      	lsls	r4, r6, #15
    4b40:	f240 30e7 	movw	r0, #999	; 0x3e7
    4b44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4b48:	2300      	movs	r3, #0
    4b4a:	1820      	adds	r0, r4, r0
    4b4c:	f04f 0100 	mov.w	r1, #0
    4b50:	eb45 0101 	adc.w	r1, r5, r1
    4b54:	f7fb fac2 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    4b58:	4b07      	ldr	r3, [pc, #28]	; (4b78 <k_sched_time_slice_set+0x74>)
    4b5a:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4b5c:	2e00      	cmp	r6, #0
    4b5e:	dddf      	ble.n	4b20 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    4b60:	2802      	cmp	r0, #2
    4b62:	bfb8      	it	lt
    4b64:	2002      	movlt	r0, #2
    4b66:	6018      	str	r0, [r3, #0]
    4b68:	e7da      	b.n	4b20 <k_sched_time_slice_set+0x1c>
}
    4b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b6e:	bf00      	nop
    4b70:	2000096c 	.word	0x2000096c
    4b74:	2000093c 	.word	0x2000093c
    4b78:	20000970 	.word	0x20000970

00004b7c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4b7c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    4b7e:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4b80:	b921      	cbnz	r1, 4b8c <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4b82:	f3ef 8305 	mrs	r3, IPSR
    4b86:	b913      	cbnz	r3, 4b8e <z_reschedule+0x12>
    4b88:	2101      	movs	r1, #1
    4b8a:	e000      	b.n	4b8e <z_reschedule+0x12>
    4b8c:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    4b8e:	f011 0f01 	tst.w	r1, #1
    4b92:	d007      	beq.n	4ba4 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    4b94:	4b06      	ldr	r3, [pc, #24]	; (4bb0 <z_reschedule+0x34>)
    4b96:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    4b98:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    4b9a:	429a      	cmp	r2, r3
    4b9c:	d002      	beq.n	4ba4 <z_reschedule+0x28>
	ret = arch_swap(key);
    4b9e:	f7fd fe93 	bl	28c8 <arch_swap>
		z_swap(lock, key);
    4ba2:	e003      	b.n	4bac <z_reschedule+0x30>
    4ba4:	f380 8811 	msr	BASEPRI, r0
    4ba8:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    4bac:	bd08      	pop	{r3, pc}
    4bae:	bf00      	nop
    4bb0:	2000093c 	.word	0x2000093c

00004bb4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    4bb4:	2300      	movs	r3, #0
	__asm__ volatile(
    4bb6:	f04f 0220 	mov.w	r2, #32
    4bba:	f3ef 8111 	mrs	r1, BASEPRI
    4bbe:	f382 8812 	msr	BASEPRI_MAX, r2
    4bc2:	f3bf 8f6f 	isb	sy
    4bc6:	b953      	cbnz	r3, 4bde <k_sched_lock+0x2a>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    4bc8:	4b05      	ldr	r3, [pc, #20]	; (4be0 <k_sched_lock+0x2c>)
    4bca:	689a      	ldr	r2, [r3, #8]
    4bcc:	7bd3      	ldrb	r3, [r2, #15]
    4bce:	3b01      	subs	r3, #1
    4bd0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4bd2:	f381 8811 	msr	BASEPRI, r1
    4bd6:	f3bf 8f6f 	isb	sy
    4bda:	2301      	movs	r3, #1
    4bdc:	e7f3      	b.n	4bc6 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4bde:	4770      	bx	lr
    4be0:	2000093c 	.word	0x2000093c

00004be4 <update_cache>:
{
    4be4:	b538      	push	{r3, r4, r5, lr}
    4be6:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    4be8:	480f      	ldr	r0, [pc, #60]	; (4c28 <update_cache+0x44>)
    4bea:	f002 fc9a 	bl	7522 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4bee:	4605      	mov	r5, r0
    4bf0:	b170      	cbz	r0, 4c10 <update_cache+0x2c>
	if (preempt_ok != 0) {
    4bf2:	b984      	cbnz	r4, 4c16 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    4bf4:	4b0d      	ldr	r3, [pc, #52]	; (4c2c <update_cache+0x48>)
    4bf6:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4bf8:	7b5a      	ldrb	r2, [r3, #13]
    4bfa:	f012 0f1f 	tst.w	r2, #31
    4bfe:	d10a      	bne.n	4c16 <update_cache+0x32>
 * @return true if node is linked into a list, false if it is not
 */

static inline bool sys_dnode_is_linked(const sys_dnode_t *node)
{
	return node->next != NULL;
    4c00:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4c02:	b942      	cbnz	r2, 4c16 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4c04:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    4c06:	2a7f      	cmp	r2, #127	; 0x7f
    4c08:	d905      	bls.n	4c16 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    4c0a:	4a08      	ldr	r2, [pc, #32]	; (4c2c <update_cache+0x48>)
    4c0c:	61d3      	str	r3, [r2, #28]
    4c0e:	e00a      	b.n	4c26 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4c10:	4b06      	ldr	r3, [pc, #24]	; (4c2c <update_cache+0x48>)
    4c12:	68dd      	ldr	r5, [r3, #12]
    4c14:	e7ed      	b.n	4bf2 <update_cache+0xe>
		if (thread != _current) {
    4c16:	4b05      	ldr	r3, [pc, #20]	; (4c2c <update_cache+0x48>)
    4c18:	689b      	ldr	r3, [r3, #8]
    4c1a:	42ab      	cmp	r3, r5
    4c1c:	d001      	beq.n	4c22 <update_cache+0x3e>
			z_reset_time_slice();
    4c1e:	f7ff ff5b 	bl	4ad8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4c22:	4b02      	ldr	r3, [pc, #8]	; (4c2c <update_cache+0x48>)
    4c24:	61dd      	str	r5, [r3, #28]
}
    4c26:	bd38      	pop	{r3, r4, r5, pc}
    4c28:	2000095c 	.word	0x2000095c
    4c2c:	2000093c 	.word	0x2000093c

00004c30 <move_thread_to_end_of_prio_q>:
{
    4c30:	b538      	push	{r3, r4, r5, lr}
    4c32:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    4c34:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    4c36:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	db28      	blt.n	4c90 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    4c3e:	7b6b      	ldrb	r3, [r5, #13]
    4c40:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4c44:	736b      	strb	r3, [r5, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4c46:	4b1a      	ldr	r3, [pc, #104]	; (4cb0 <move_thread_to_end_of_prio_q+0x80>)
    4c48:	f853 4f20 	ldr.w	r4, [r3, #32]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c4c:	429c      	cmp	r4, r3
    4c4e:	d02d      	beq.n	4cac <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c50:	b16c      	cbz	r4, 4c6e <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4c52:	4621      	mov	r1, r4
    4c54:	4628      	mov	r0, r5
    4c56:	f002 fc1e 	bl	7496 <z_sched_prio_cmp>
    4c5a:	2800      	cmp	r0, #0
    4c5c:	dc20      	bgt.n	4ca0 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4c5e:	b134      	cbz	r4, 4c6e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    4c60:	4b13      	ldr	r3, [pc, #76]	; (4cb0 <move_thread_to_end_of_prio_q+0x80>)
    4c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4c64:	429c      	cmp	r4, r3
    4c66:	d002      	beq.n	4c6e <move_thread_to_end_of_prio_q+0x3e>
    4c68:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c6a:	2c00      	cmp	r4, #0
    4c6c:	d1f0      	bne.n	4c50 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    4c6e:	4b10      	ldr	r3, [pc, #64]	; (4cb0 <move_thread_to_end_of_prio_q+0x80>)
    4c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    4c72:	f103 0120 	add.w	r1, r3, #32
    4c76:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4c78:	606a      	str	r2, [r5, #4]

	tail->next = node;
    4c7a:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4c7c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    4c7e:	4b0c      	ldr	r3, [pc, #48]	; (4cb0 <move_thread_to_end_of_prio_q+0x80>)
    4c80:	6898      	ldr	r0, [r3, #8]
    4c82:	42a8      	cmp	r0, r5
    4c84:	bf14      	ite	ne
    4c86:	2000      	movne	r0, #0
    4c88:	2001      	moveq	r0, #1
    4c8a:	f7ff ffab 	bl	4be4 <update_cache>
}
    4c8e:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4c90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4c94:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    4c96:	4601      	mov	r1, r0
    4c98:	4806      	ldr	r0, [pc, #24]	; (4cb4 <move_thread_to_end_of_prio_q+0x84>)
    4c9a:	f002 fc3a 	bl	7512 <z_priq_dumb_remove>
}
    4c9e:	e7ce      	b.n	4c3e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4ca0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    4ca2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4ca4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4ca6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4ca8:	6065      	str	r5, [r4, #4]
}
    4caa:	e7e8      	b.n	4c7e <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4cac:	2400      	movs	r4, #0
    4cae:	e7cf      	b.n	4c50 <move_thread_to_end_of_prio_q+0x20>
    4cb0:	2000093c 	.word	0x2000093c
    4cb4:	2000095c 	.word	0x2000095c

00004cb8 <z_time_slice>:
{
    4cb8:	b510      	push	{r4, lr}
	__asm__ volatile(
    4cba:	f04f 0320 	mov.w	r3, #32
    4cbe:	f3ef 8411 	mrs	r4, BASEPRI
    4cc2:	f383 8812 	msr	BASEPRI_MAX, r3
    4cc6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4cca:	4b1c      	ldr	r3, [pc, #112]	; (4d3c <z_time_slice+0x84>)
    4ccc:	689b      	ldr	r3, [r3, #8]
    4cce:	4a1c      	ldr	r2, [pc, #112]	; (4d40 <z_time_slice+0x88>)
    4cd0:	6812      	ldr	r2, [r2, #0]
    4cd2:	4293      	cmp	r3, r2
    4cd4:	d01d      	beq.n	4d12 <z_time_slice+0x5a>
	pending_current = NULL;
    4cd6:	4a1a      	ldr	r2, [pc, #104]	; (4d40 <z_time_slice+0x88>)
    4cd8:	2100      	movs	r1, #0
    4cda:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4cdc:	4a19      	ldr	r2, [pc, #100]	; (4d44 <z_time_slice+0x8c>)
    4cde:	6812      	ldr	r2, [r2, #0]
    4ce0:	b322      	cbz	r2, 4d2c <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4ce2:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    4ce4:	2a7f      	cmp	r2, #127	; 0x7f
    4ce6:	d821      	bhi.n	4d2c <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    4ce8:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    4cea:	f012 0f1f 	tst.w	r2, #31
    4cee:	d11d      	bne.n	4d2c <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4cf0:	f993 100e 	ldrsb.w	r1, [r3, #14]
    4cf4:	4a14      	ldr	r2, [pc, #80]	; (4d48 <z_time_slice+0x90>)
    4cf6:	6812      	ldr	r2, [r2, #0]
    4cf8:	4291      	cmp	r1, r2
    4cfa:	db17      	blt.n	4d2c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    4cfc:	4a13      	ldr	r2, [pc, #76]	; (4d4c <z_time_slice+0x94>)
    4cfe:	4293      	cmp	r3, r2
    4d00:	d014      	beq.n	4d2c <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    4d02:	4a0e      	ldr	r2, [pc, #56]	; (4d3c <z_time_slice+0x84>)
    4d04:	6912      	ldr	r2, [r2, #16]
    4d06:	4282      	cmp	r2, r0
    4d08:	dd0a      	ble.n	4d20 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    4d0a:	1a10      	subs	r0, r2, r0
    4d0c:	4b0b      	ldr	r3, [pc, #44]	; (4d3c <z_time_slice+0x84>)
    4d0e:	6118      	str	r0, [r3, #16]
    4d10:	e00f      	b.n	4d32 <z_time_slice+0x7a>
		z_reset_time_slice();
    4d12:	f7ff fee1 	bl	4ad8 <z_reset_time_slice>
	__asm__ volatile(
    4d16:	f384 8811 	msr	BASEPRI, r4
    4d1a:	f3bf 8f6f 	isb	sy
		return;
    4d1e:	e00c      	b.n	4d3a <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    4d20:	4618      	mov	r0, r3
    4d22:	f7ff ff85 	bl	4c30 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    4d26:	f7ff fed7 	bl	4ad8 <z_reset_time_slice>
    4d2a:	e002      	b.n	4d32 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    4d2c:	4b03      	ldr	r3, [pc, #12]	; (4d3c <z_time_slice+0x84>)
    4d2e:	2200      	movs	r2, #0
    4d30:	611a      	str	r2, [r3, #16]
    4d32:	f384 8811 	msr	BASEPRI, r4
    4d36:	f3bf 8f6f 	isb	sy
}
    4d3a:	bd10      	pop	{r4, pc}
    4d3c:	2000093c 	.word	0x2000093c
    4d40:	20000968 	.word	0x20000968
    4d44:	20000970 	.word	0x20000970
    4d48:	2000096c 	.word	0x2000096c
    4d4c:	20000060 	.word	0x20000060

00004d50 <ready_thread>:
{
    4d50:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    4d52:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4d54:	f990 200d 	ldrsb.w	r2, [r0, #13]
    4d58:	2a00      	cmp	r2, #0
    4d5a:	db2d      	blt.n	4db8 <ready_thread+0x68>
    4d5c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4d5e:	f013 0f1f 	tst.w	r3, #31
    4d62:	d105      	bne.n	4d70 <ready_thread+0x20>
	return node->next != NULL;
    4d64:	6982      	ldr	r2, [r0, #24]
    4d66:	b10a      	cbz	r2, 4d6c <ready_thread+0x1c>
    4d68:	2200      	movs	r2, #0
    4d6a:	e002      	b.n	4d72 <ready_thread+0x22>
    4d6c:	2201      	movs	r2, #1
    4d6e:	e000      	b.n	4d72 <ready_thread+0x22>
    4d70:	2200      	movs	r2, #0
    4d72:	b30a      	cbz	r2, 4db8 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    4d74:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d78:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    4d7a:	4b14      	ldr	r3, [pc, #80]	; (4dcc <ready_thread+0x7c>)
    4d7c:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d80:	429d      	cmp	r5, r3
    4d82:	d020      	beq.n	4dc6 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d84:	b16d      	cbz	r5, 4da2 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4d86:	4629      	mov	r1, r5
    4d88:	4620      	mov	r0, r4
    4d8a:	f002 fb84 	bl	7496 <z_sched_prio_cmp>
    4d8e:	2800      	cmp	r0, #0
    4d90:	dc13      	bgt.n	4dba <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4d92:	b135      	cbz	r5, 4da2 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    4d94:	4b0d      	ldr	r3, [pc, #52]	; (4dcc <ready_thread+0x7c>)
    4d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4d98:	429d      	cmp	r5, r3
    4d9a:	d002      	beq.n	4da2 <ready_thread+0x52>
    4d9c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d9e:	2d00      	cmp	r5, #0
    4da0:	d1f0      	bne.n	4d84 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    4da2:	4b0a      	ldr	r3, [pc, #40]	; (4dcc <ready_thread+0x7c>)
    4da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4da6:	f103 0120 	add.w	r1, r3, #32
    4daa:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    4dac:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4dae:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4db0:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    4db2:	2000      	movs	r0, #0
    4db4:	f7ff ff16 	bl	4be4 <update_cache>
}
    4db8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    4dba:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    4dbc:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4dbe:	6025      	str	r5, [r4, #0]
	prev->next = node;
    4dc0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4dc2:	606c      	str	r4, [r5, #4]
}
    4dc4:	e7f5      	b.n	4db2 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4dc6:	2500      	movs	r5, #0
    4dc8:	e7dc      	b.n	4d84 <ready_thread+0x34>
    4dca:	bf00      	nop
    4dcc:	2000093c 	.word	0x2000093c

00004dd0 <z_sched_start>:
{
    4dd0:	b510      	push	{r4, lr}
	__asm__ volatile(
    4dd2:	f04f 0320 	mov.w	r3, #32
    4dd6:	f3ef 8411 	mrs	r4, BASEPRI
    4dda:	f383 8812 	msr	BASEPRI_MAX, r3
    4dde:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4de2:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    4de4:	f013 0f04 	tst.w	r3, #4
    4de8:	d104      	bne.n	4df4 <z_sched_start+0x24>
	__asm__ volatile(
    4dea:	f384 8811 	msr	BASEPRI, r4
    4dee:	f3bf 8f6f 	isb	sy
}
    4df2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4df4:	f023 0304 	bic.w	r3, r3, #4
    4df8:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    4dfa:	f7ff ffa9 	bl	4d50 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4dfe:	4621      	mov	r1, r4
    4e00:	4801      	ldr	r0, [pc, #4]	; (4e08 <z_sched_start+0x38>)
    4e02:	f7ff febb 	bl	4b7c <z_reschedule>
    4e06:	e7f4      	b.n	4df2 <z_sched_start+0x22>
    4e08:	2000096c 	.word	0x2000096c

00004e0c <unready_thread>:
{
    4e0c:	b510      	push	{r4, lr}
    4e0e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    4e10:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    4e12:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4e16:	2b00      	cmp	r3, #0
    4e18:	db08      	blt.n	4e2c <unready_thread+0x20>
	update_cache(thread == _current);
    4e1a:	4b08      	ldr	r3, [pc, #32]	; (4e3c <unready_thread+0x30>)
    4e1c:	6898      	ldr	r0, [r3, #8]
    4e1e:	42a0      	cmp	r0, r4
    4e20:	bf14      	ite	ne
    4e22:	2000      	movne	r0, #0
    4e24:	2001      	moveq	r0, #1
    4e26:	f7ff fedd 	bl	4be4 <update_cache>
}
    4e2a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4e2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4e30:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    4e32:	4601      	mov	r1, r0
    4e34:	4802      	ldr	r0, [pc, #8]	; (4e40 <unready_thread+0x34>)
    4e36:	f002 fb6c 	bl	7512 <z_priq_dumb_remove>
}
    4e3a:	e7ee      	b.n	4e1a <unready_thread+0xe>
    4e3c:	2000093c 	.word	0x2000093c
    4e40:	2000095c 	.word	0x2000095c

00004e44 <z_pend_curr>:
{
    4e44:	b510      	push	{r4, lr}
    4e46:	460c      	mov	r4, r1
    4e48:	4611      	mov	r1, r2
	pending_current = _current;
    4e4a:	4b06      	ldr	r3, [pc, #24]	; (4e64 <z_pend_curr+0x20>)
    4e4c:	6898      	ldr	r0, [r3, #8]
    4e4e:	4b06      	ldr	r3, [pc, #24]	; (4e68 <z_pend_curr+0x24>)
    4e50:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    4e52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4e56:	f002 fbe5 	bl	7624 <pend>
    4e5a:	4620      	mov	r0, r4
    4e5c:	f7fd fd34 	bl	28c8 <arch_swap>
}
    4e60:	bd10      	pop	{r4, pc}
    4e62:	bf00      	nop
    4e64:	2000093c 	.word	0x2000093c
    4e68:	20000968 	.word	0x20000968

00004e6c <z_impl_k_thread_suspend>:
{
    4e6c:	b538      	push	{r3, r4, r5, lr}
    4e6e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4e70:	3018      	adds	r0, #24
    4e72:	f002 fc3a 	bl	76ea <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    4e76:	2300      	movs	r3, #0
	__asm__ volatile(
    4e78:	f04f 0220 	mov.w	r2, #32
    4e7c:	f3ef 8511 	mrs	r5, BASEPRI
    4e80:	f382 8812 	msr	BASEPRI_MAX, r2
    4e84:	f3bf 8f6f 	isb	sy
    4e88:	e010      	b.n	4eac <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4e8a:	7b63      	ldrb	r3, [r4, #13]
    4e8c:	f043 0310 	orr.w	r3, r3, #16
    4e90:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4e92:	4b15      	ldr	r3, [pc, #84]	; (4ee8 <z_impl_k_thread_suspend+0x7c>)
    4e94:	6898      	ldr	r0, [r3, #8]
    4e96:	42a0      	cmp	r0, r4
    4e98:	bf14      	ite	ne
    4e9a:	2000      	movne	r0, #0
    4e9c:	2001      	moveq	r0, #1
    4e9e:	f7ff fea1 	bl	4be4 <update_cache>
	__asm__ volatile(
    4ea2:	f385 8811 	msr	BASEPRI, r5
    4ea6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4eaa:	2301      	movs	r3, #1
    4eac:	b963      	cbnz	r3, 4ec8 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    4eae:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    4eb0:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4eb4:	2b00      	cmp	r3, #0
    4eb6:	dae8      	bge.n	4e8a <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4eb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4ebc:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
    4ebe:	4621      	mov	r1, r4
    4ec0:	480a      	ldr	r0, [pc, #40]	; (4eec <z_impl_k_thread_suspend+0x80>)
    4ec2:	f002 fb26 	bl	7512 <z_priq_dumb_remove>
}
    4ec6:	e7e0      	b.n	4e8a <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    4ec8:	4b07      	ldr	r3, [pc, #28]	; (4ee8 <z_impl_k_thread_suspend+0x7c>)
    4eca:	689b      	ldr	r3, [r3, #8]
    4ecc:	42a3      	cmp	r3, r4
    4ece:	d000      	beq.n	4ed2 <z_impl_k_thread_suspend+0x66>
}
    4ed0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4ed2:	f04f 0320 	mov.w	r3, #32
    4ed6:	f3ef 8011 	mrs	r0, BASEPRI
    4eda:	f383 8812 	msr	BASEPRI_MAX, r3
    4ede:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4ee2:	f002 fb01 	bl	74e8 <z_reschedule_irqlock>
    4ee6:	e7f3      	b.n	4ed0 <z_impl_k_thread_suspend+0x64>
    4ee8:	2000093c 	.word	0x2000093c
    4eec:	2000095c 	.word	0x2000095c

00004ef0 <k_sched_unlock>:

void k_sched_unlock(void)
{
    4ef0:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    4ef2:	2300      	movs	r3, #0
    4ef4:	f04f 0220 	mov.w	r2, #32
    4ef8:	f3ef 8411 	mrs	r4, BASEPRI
    4efc:	f382 8812 	msr	BASEPRI_MAX, r2
    4f00:	f3bf 8f6f 	isb	sy
    4f04:	b96b      	cbnz	r3, 4f22 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    4f06:	4b0c      	ldr	r3, [pc, #48]	; (4f38 <k_sched_unlock+0x48>)
    4f08:	689a      	ldr	r2, [r3, #8]
    4f0a:	7bd3      	ldrb	r3, [r2, #15]
    4f0c:	3301      	adds	r3, #1
    4f0e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4f10:	2000      	movs	r0, #0
    4f12:	f7ff fe67 	bl	4be4 <update_cache>
	__asm__ volatile(
    4f16:	f384 8811 	msr	BASEPRI, r4
    4f1a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4f1e:	2301      	movs	r3, #1
    4f20:	e7f0      	b.n	4f04 <k_sched_unlock+0x14>
	__asm__ volatile(
    4f22:	f04f 0320 	mov.w	r3, #32
    4f26:	f3ef 8011 	mrs	r0, BASEPRI
    4f2a:	f383 8812 	msr	BASEPRI_MAX, r3
    4f2e:	f3bf 8f6f 	isb	sy
    4f32:	f002 fad9 	bl	74e8 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    4f36:	bd10      	pop	{r4, pc}
    4f38:	2000093c 	.word	0x2000093c

00004f3c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    4f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    4f3e:	7b43      	ldrb	r3, [r0, #13]
    4f40:	f013 0f08 	tst.w	r3, #8
    4f44:	d145      	bne.n	4fd2 <end_thread+0x96>
    4f46:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    4f48:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4f4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    4f50:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    4f52:	f013 0f80 	tst.w	r3, #128	; 0x80
    4f56:	d114      	bne.n	4f82 <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
    4f58:	68ab      	ldr	r3, [r5, #8]
    4f5a:	b15b      	cbz	r3, 4f74 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    4f5c:	4628      	mov	r0, r5
    4f5e:	f002 fa98 	bl	7492 <pended_on_thread>
    4f62:	4629      	mov	r1, r5
    4f64:	f002 fad5 	bl	7512 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4f68:	7b6b      	ldrb	r3, [r5, #13]
    4f6a:	f023 0302 	bic.w	r3, r3, #2
    4f6e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    4f70:	2300      	movs	r3, #0
    4f72:	60ab      	str	r3, [r5, #8]
    4f74:	f105 0018 	add.w	r0, r5, #24
    4f78:	f002 fbb7 	bl	76ea <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    4f7c:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4f80:	e01c      	b.n	4fbc <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4f86:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    4f88:	4601      	mov	r1, r0
    4f8a:	4812      	ldr	r0, [pc, #72]	; (4fd4 <end_thread+0x98>)
    4f8c:	f002 fac1 	bl	7512 <z_priq_dumb_remove>
}
    4f90:	e7e2      	b.n	4f58 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    4f92:	4620      	mov	r0, r4
    4f94:	f002 fa7d 	bl	7492 <pended_on_thread>
    4f98:	4621      	mov	r1, r4
    4f9a:	f002 faba 	bl	7512 <z_priq_dumb_remove>
    4f9e:	7b63      	ldrb	r3, [r4, #13]
    4fa0:	f023 0302 	bic.w	r3, r3, #2
    4fa4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    4fa6:	2600      	movs	r6, #0
    4fa8:	60a6      	str	r6, [r4, #8]
    4faa:	f104 0018 	add.w	r0, r4, #24
    4fae:	f002 fb9c 	bl	76ea <z_abort_timeout>
    4fb2:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    4fb6:	4620      	mov	r0, r4
    4fb8:	f7ff feca 	bl	4d50 <ready_thread>
	return list->head == list;
    4fbc:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4fbe:	42bc      	cmp	r4, r7
    4fc0:	d001      	beq.n	4fc6 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4fc2:	2c00      	cmp	r4, #0
    4fc4:	d1e5      	bne.n	4f92 <end_thread+0x56>
		update_cache(1);
    4fc6:	2001      	movs	r0, #1
    4fc8:	f7ff fe0c 	bl	4be4 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    4fcc:	4628      	mov	r0, r5
    4fce:	f7ff fc33 	bl	4838 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    4fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fd4:	2000095c 	.word	0x2000095c

00004fd8 <z_sched_init>:
{
    4fd8:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
    4fda:	4b05      	ldr	r3, [pc, #20]	; (4ff0 <z_sched_init+0x18>)
    4fdc:	f103 0220 	add.w	r2, r3, #32
    4fe0:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
    4fe2:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4fe4:	2100      	movs	r1, #0
    4fe6:	4608      	mov	r0, r1
    4fe8:	f7ff fd8c 	bl	4b04 <k_sched_time_slice_set>
}
    4fec:	bd08      	pop	{r3, pc}
    4fee:	bf00      	nop
    4ff0:	2000093c 	.word	0x2000093c

00004ff4 <z_impl_k_yield>:
{
    4ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ff6:	f04f 0320 	mov.w	r3, #32
    4ffa:	f3ef 8611 	mrs	r6, BASEPRI
    4ffe:	f383 8812 	msr	BASEPRI_MAX, r3
    5002:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
    5006:	4c1c      	ldr	r4, [pc, #112]	; (5078 <z_impl_k_yield+0x84>)
    5008:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    500a:	7b4b      	ldrb	r3, [r1, #13]
    500c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5010:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    5012:	f104 0720 	add.w	r7, r4, #32
    5016:	4638      	mov	r0, r7
    5018:	f002 fa7b 	bl	7512 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
    501c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    501e:	7b6b      	ldrb	r3, [r5, #13]
    5020:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5024:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    5026:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5028:	42bc      	cmp	r4, r7
    502a:	d023      	beq.n	5074 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    502c:	b16c      	cbz	r4, 504a <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    502e:	4621      	mov	r1, r4
    5030:	4628      	mov	r0, r5
    5032:	f002 fa30 	bl	7496 <z_sched_prio_cmp>
    5036:	2800      	cmp	r0, #0
    5038:	dc16      	bgt.n	5068 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    503a:	b134      	cbz	r4, 504a <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    503c:	4b0e      	ldr	r3, [pc, #56]	; (5078 <z_impl_k_yield+0x84>)
    503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5040:	429c      	cmp	r4, r3
    5042:	d002      	beq.n	504a <z_impl_k_yield+0x56>
    5044:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5046:	2c00      	cmp	r4, #0
    5048:	d1f0      	bne.n	502c <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    504a:	4b0b      	ldr	r3, [pc, #44]	; (5078 <z_impl_k_yield+0x84>)
    504c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    504e:	f103 0120 	add.w	r1, r3, #32
    5052:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    5054:	606a      	str	r2, [r5, #4]
	tail->next = node;
    5056:	6015      	str	r5, [r2, #0]
	list->tail = node;
    5058:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    505a:	2001      	movs	r0, #1
    505c:	f7ff fdc2 	bl	4be4 <update_cache>
    5060:	4630      	mov	r0, r6
    5062:	f7fd fc31 	bl	28c8 <arch_swap>
}
    5066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    5068:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    506a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    506c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    506e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    5070:	6065      	str	r5, [r4, #4]
}
    5072:	e7f2      	b.n	505a <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5074:	2400      	movs	r4, #0
    5076:	e7d9      	b.n	502c <z_impl_k_yield+0x38>
    5078:	2000093c 	.word	0x2000093c

0000507c <z_tick_sleep>:
{
    507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5080:	4604      	mov	r4, r0
    5082:	460d      	mov	r5, r1
	if (ticks == 0) {
    5084:	ea54 0105 	orrs.w	r1, r4, r5
    5088:	d037      	beq.n	50fa <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    508a:	f06f 0101 	mvn.w	r1, #1
    508e:	1a0a      	subs	r2, r1, r0
    5090:	f04f 31ff 	mov.w	r1, #4294967295
    5094:	eb61 0305 	sbc.w	r3, r1, r5
    5098:	2a01      	cmp	r2, #1
    509a:	f173 0300 	sbcs.w	r3, r3, #0
    509e:	db30      	blt.n	5102 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    50a0:	f06f 0601 	mvn.w	r6, #1
    50a4:	1a36      	subs	r6, r6, r0
    50a6:	f04f 0320 	mov.w	r3, #32
    50aa:	f3ef 8811 	mrs	r8, BASEPRI
    50ae:	f383 8812 	msr	BASEPRI_MAX, r3
    50b2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    50b6:	4f16      	ldr	r7, [pc, #88]	; (5110 <z_tick_sleep+0x94>)
    50b8:	68b8      	ldr	r0, [r7, #8]
    50ba:	4b16      	ldr	r3, [pc, #88]	; (5114 <z_tick_sleep+0x98>)
    50bc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    50be:	f7ff fea5 	bl	4e0c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    50c2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    50c4:	4622      	mov	r2, r4
    50c6:	462b      	mov	r3, r5
    50c8:	4913      	ldr	r1, [pc, #76]	; (5118 <z_tick_sleep+0x9c>)
    50ca:	3018      	adds	r0, #24
    50cc:	f000 f8e2 	bl	5294 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    50d0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    50d2:	7b53      	ldrb	r3, [r2, #13]
    50d4:	f043 0310 	orr.w	r3, r3, #16
    50d8:	7353      	strb	r3, [r2, #13]
    50da:	4640      	mov	r0, r8
    50dc:	f7fd fbf4 	bl	28c8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    50e0:	2500      	movs	r5, #0
    50e2:	f002 fb61 	bl	77a8 <sys_clock_tick_get_32>
    50e6:	1a34      	subs	r4, r6, r0
    50e8:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    50ec:	2c01      	cmp	r4, #1
    50ee:	f175 0300 	sbcs.w	r3, r5, #0
    50f2:	da0a      	bge.n	510a <z_tick_sleep+0x8e>
	return 0;
    50f4:	2000      	movs	r0, #0
}
    50f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    50fa:	f7ff ff7b 	bl	4ff4 <z_impl_k_yield>
		return 0;
    50fe:	2000      	movs	r0, #0
    5100:	e7f9      	b.n	50f6 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5102:	f002 fb51 	bl	77a8 <sys_clock_tick_get_32>
    5106:	1906      	adds	r6, r0, r4
    5108:	e7cd      	b.n	50a6 <z_tick_sleep+0x2a>
		return ticks;
    510a:	4620      	mov	r0, r4
    510c:	e7f3      	b.n	50f6 <z_tick_sleep+0x7a>
    510e:	bf00      	nop
    5110:	2000093c 	.word	0x2000093c
    5114:	20000968 	.word	0x20000968
    5118:	00007569 	.word	0x00007569

0000511c <z_impl_k_sleep>:
{
    511c:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    511e:	f1b1 3fff 	cmp.w	r1, #4294967295
    5122:	bf08      	it	eq
    5124:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    5128:	d01a      	beq.n	5160 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    512a:	f7ff ffa7 	bl	507c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    512e:	4604      	mov	r4, r0
    5130:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    5132:	0169      	lsls	r1, r5, #5
    5134:	0143      	lsls	r3, r0, #5
    5136:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    513a:	1a18      	subs	r0, r3, r0
    513c:	eb62 0305 	sbc.w	r3, r2, r5
    5140:	009a      	lsls	r2, r3, #2
    5142:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    5146:	0081      	lsls	r1, r0, #2
    5148:	4613      	mov	r3, r2
    514a:	1908      	adds	r0, r1, r4
    514c:	eb45 0303 	adc.w	r3, r5, r3
    5150:	00da      	lsls	r2, r3, #3
    5152:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    5156:	00c1      	lsls	r1, r0, #3
    5158:	0bc8      	lsrs	r0, r1, #15
    515a:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    515e:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    5160:	4b03      	ldr	r3, [pc, #12]	; (5170 <z_impl_k_sleep+0x54>)
    5162:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5164:	f7ff fe82 	bl	4e6c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    5168:	f04f 30ff 	mov.w	r0, #4294967295
    516c:	e7f7      	b.n	515e <z_impl_k_sleep+0x42>
    516e:	bf00      	nop
    5170:	2000093c 	.word	0x2000093c

00005174 <z_impl_z_current_get>:
}
    5174:	4b01      	ldr	r3, [pc, #4]	; (517c <z_impl_z_current_get+0x8>)
    5176:	6898      	ldr	r0, [r3, #8]
    5178:	4770      	bx	lr
    517a:	bf00      	nop
    517c:	2000093c 	.word	0x2000093c

00005180 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    5180:	b538      	push	{r3, r4, r5, lr}
    5182:	f04f 0320 	mov.w	r3, #32
    5186:	f3ef 8511 	mrs	r5, BASEPRI
    518a:	f383 8812 	msr	BASEPRI_MAX, r3
    518e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5192:	7b43      	ldrb	r3, [r0, #13]
    5194:	f013 0f08 	tst.w	r3, #8
    5198:	d004      	beq.n	51a4 <z_thread_abort+0x24>
	__asm__ volatile(
    519a:	f385 8811 	msr	BASEPRI, r5
    519e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    51a2:	bd38      	pop	{r3, r4, r5, pc}
    51a4:	4604      	mov	r4, r0
	end_thread(thread);
    51a6:	f7ff fec9 	bl	4f3c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    51aa:	4b08      	ldr	r3, [pc, #32]	; (51cc <z_thread_abort+0x4c>)
    51ac:	689b      	ldr	r3, [r3, #8]
    51ae:	42a3      	cmp	r3, r4
    51b0:	d004      	beq.n	51bc <z_thread_abort+0x3c>
    51b2:	f385 8811 	msr	BASEPRI, r5
    51b6:	f3bf 8f6f 	isb	sy
    51ba:	e7f2      	b.n	51a2 <z_thread_abort+0x22>
    51bc:	f3ef 8305 	mrs	r3, IPSR
    51c0:	2b00      	cmp	r3, #0
    51c2:	d1f6      	bne.n	51b2 <z_thread_abort+0x32>
    51c4:	4628      	mov	r0, r5
    51c6:	f7fd fb7f 	bl	28c8 <arch_swap>
	return ret;
    51ca:	e7f2      	b.n	51b2 <z_thread_abort+0x32>
    51cc:	2000093c 	.word	0x2000093c

000051d0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    51d0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    51d2:	4806      	ldr	r0, [pc, #24]	; (51ec <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    51d4:	4a06      	ldr	r2, [pc, #24]	; (51f0 <z_data_copy+0x20>)
    51d6:	1a12      	subs	r2, r2, r0
    51d8:	4906      	ldr	r1, [pc, #24]	; (51f4 <z_data_copy+0x24>)
    51da:	f001 fbe9 	bl	69b0 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    51de:	4a06      	ldr	r2, [pc, #24]	; (51f8 <z_data_copy+0x28>)
    51e0:	4906      	ldr	r1, [pc, #24]	; (51fc <z_data_copy+0x2c>)
    51e2:	4807      	ldr	r0, [pc, #28]	; (5200 <z_data_copy+0x30>)
    51e4:	f001 fbe4 	bl	69b0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    51e8:	bd08      	pop	{r3, pc}
    51ea:	bf00      	nop
    51ec:	20000000 	.word	0x20000000
    51f0:	2000003c 	.word	0x2000003c
    51f4:	00008534 	.word	0x00008534
    51f8:	00000000 	.word	0x00000000
    51fc:	00008534 	.word	0x00008534
    5200:	20000000 	.word	0x20000000

00005204 <first>:
	return list->head == list;
    5204:	4b03      	ldr	r3, [pc, #12]	; (5214 <first+0x10>)
    5206:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5208:	4298      	cmp	r0, r3
    520a:	d000      	beq.n	520e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    520c:	4770      	bx	lr
    520e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    5210:	e7fc      	b.n	520c <first+0x8>
    5212:	bf00      	nop
    5214:	20000024 	.word	0x20000024

00005218 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5218:	b130      	cbz	r0, 5228 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    521a:	4a04      	ldr	r2, [pc, #16]	; (522c <next+0x14>)
    521c:	6852      	ldr	r2, [r2, #4]
    521e:	4290      	cmp	r0, r2
    5220:	d001      	beq.n	5226 <next+0xe>
    5222:	6800      	ldr	r0, [r0, #0]
    5224:	4770      	bx	lr
    5226:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    5228:	4770      	bx	lr
    522a:	bf00      	nop
    522c:	20000024 	.word	0x20000024

00005230 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    5230:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5232:	4b04      	ldr	r3, [pc, #16]	; (5244 <elapsed+0x14>)
    5234:	681b      	ldr	r3, [r3, #0]
    5236:	b10b      	cbz	r3, 523c <elapsed+0xc>
    5238:	2000      	movs	r0, #0
}
    523a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    523c:	f7fe fd4a 	bl	3cd4 <sys_clock_elapsed>
    5240:	e7fb      	b.n	523a <elapsed+0xa>
    5242:	bf00      	nop
    5244:	20000974 	.word	0x20000974

00005248 <next_timeout>:

static int32_t next_timeout(void)
{
    5248:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    524a:	f7ff ffdb 	bl	5204 <first>
    524e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    5250:	f7ff ffee 	bl	5230 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    5254:	b18c      	cbz	r4, 527a <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5256:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    525a:	1a12      	subs	r2, r2, r0
    525c:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    5260:	2a01      	cmp	r2, #1
    5262:	f173 0100 	sbcs.w	r1, r3, #0
    5266:	db11      	blt.n	528c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5268:	4610      	mov	r0, r2
    526a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    526e:	f173 0300 	sbcs.w	r3, r3, #0
    5272:	db04      	blt.n	527e <next_timeout+0x36>
    5274:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5278:	e001      	b.n	527e <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    527a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    527e:	4b04      	ldr	r3, [pc, #16]	; (5290 <next_timeout+0x48>)
    5280:	691b      	ldr	r3, [r3, #16]
    5282:	b113      	cbz	r3, 528a <next_timeout+0x42>
    5284:	4283      	cmp	r3, r0
    5286:	da00      	bge.n	528a <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    5288:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    528a:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    528c:	2000      	movs	r0, #0
    528e:	e7f6      	b.n	527e <next_timeout+0x36>
    5290:	2000093c 	.word	0x2000093c

00005294 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    5294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5298:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    529a:	f1b3 3fff 	cmp.w	r3, #4294967295
    529e:	bf08      	it	eq
    52a0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    52a4:	f000 8096 	beq.w	53d4 <z_add_timeout+0x140>
    52a8:	4682      	mov	sl, r0
    52aa:	4614      	mov	r4, r2
    52ac:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    52ae:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    52b0:	2300      	movs	r3, #0
	__asm__ volatile(
    52b2:	f04f 0220 	mov.w	r2, #32
    52b6:	f3ef 8b11 	mrs	fp, BASEPRI
    52ba:	f382 8812 	msr	BASEPRI_MAX, r2
    52be:	f3bf 8f6f 	isb	sy
    52c2:	e02e      	b.n	5322 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    52c4:	2201      	movs	r2, #1
    52c6:	2300      	movs	r3, #0
    52c8:	e04b      	b.n	5362 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    52ca:	f7ff ffb1 	bl	5230 <elapsed>
    52ce:	1822      	adds	r2, r4, r0
    52d0:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    52d4:	3201      	adds	r2, #1
    52d6:	f143 0300 	adc.w	r3, r3, #0
    52da:	f8ca 2010 	str.w	r2, [sl, #16]
    52de:	f8ca 3014 	str.w	r3, [sl, #20]
    52e2:	e042      	b.n	536a <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    52e4:	9b00      	ldr	r3, [sp, #0]
    52e6:	1ac2      	subs	r2, r0, r3
    52e8:	9b01      	ldr	r3, [sp, #4]
    52ea:	eb61 0303 	sbc.w	r3, r1, r3
    52ee:	f8cc 2010 	str.w	r2, [ip, #16]
    52f2:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    52f6:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    52fa:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    52fe:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    5302:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    5306:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    530a:	f1bc 0f00 	cmp.w	ip, #0
    530e:	d049      	beq.n	53a4 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5310:	f7ff ff78 	bl	5204 <first>
    5314:	4582      	cmp	sl, r0
    5316:	d050      	beq.n	53ba <z_add_timeout+0x126>
	__asm__ volatile(
    5318:	f38b 8811 	msr	BASEPRI, fp
    531c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    5320:	2301      	movs	r3, #1
    5322:	2b00      	cmp	r3, #0
    5324:	d156      	bne.n	53d4 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5326:	f06f 0301 	mvn.w	r3, #1
    532a:	ebb3 0804 	subs.w	r8, r3, r4
    532e:	f04f 30ff 	mov.w	r0, #4294967295
    5332:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5336:	f1b8 0f00 	cmp.w	r8, #0
    533a:	f179 0300 	sbcs.w	r3, r9, #0
    533e:	dbc4      	blt.n	52ca <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5340:	4a26      	ldr	r2, [pc, #152]	; (53dc <z_add_timeout+0x148>)
    5342:	6813      	ldr	r3, [r2, #0]
    5344:	6852      	ldr	r2, [r2, #4]
    5346:	18e3      	adds	r3, r4, r3
    5348:	eb45 0202 	adc.w	r2, r5, r2
    534c:	f06f 0101 	mvn.w	r1, #1
    5350:	1ace      	subs	r6, r1, r3
    5352:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    5356:	4632      	mov	r2, r6
    5358:	463b      	mov	r3, r7
    535a:	2e01      	cmp	r6, #1
    535c:	f177 0100 	sbcs.w	r1, r7, #0
    5360:	dbb0      	blt.n	52c4 <z_add_timeout+0x30>
    5362:	f8ca 2010 	str.w	r2, [sl, #16]
    5366:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    536a:	f7ff ff4b 	bl	5204 <first>
    536e:	4684      	mov	ip, r0
    5370:	f1bc 0f00 	cmp.w	ip, #0
    5374:	d0c9      	beq.n	530a <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    5376:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    537a:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    537e:	e9cd 2300 	strd	r2, r3, [sp]
    5382:	4282      	cmp	r2, r0
    5384:	418b      	sbcs	r3, r1
    5386:	dbad      	blt.n	52e4 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    5388:	9b00      	ldr	r3, [sp, #0]
    538a:	1a1a      	subs	r2, r3, r0
    538c:	9b01      	ldr	r3, [sp, #4]
    538e:	eb63 0301 	sbc.w	r3, r3, r1
    5392:	f8ca 2010 	str.w	r2, [sl, #16]
    5396:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    539a:	4660      	mov	r0, ip
    539c:	f7ff ff3c 	bl	5218 <next>
    53a0:	4684      	mov	ip, r0
    53a2:	e7e5      	b.n	5370 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    53a4:	4b0e      	ldr	r3, [pc, #56]	; (53e0 <z_add_timeout+0x14c>)
    53a6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    53a8:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    53ac:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    53b0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    53b4:	f8c3 a004 	str.w	sl, [r3, #4]
}
    53b8:	e7aa      	b.n	5310 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    53ba:	f7ff ff45 	bl	5248 <next_timeout>

			if (next_time == 0 ||
    53be:	4603      	mov	r3, r0
    53c0:	b118      	cbz	r0, 53ca <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    53c2:	4a08      	ldr	r2, [pc, #32]	; (53e4 <z_add_timeout+0x150>)
    53c4:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    53c6:	4282      	cmp	r2, r0
    53c8:	d0a6      	beq.n	5318 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    53ca:	2100      	movs	r1, #0
    53cc:	4618      	mov	r0, r3
    53ce:	f7fe fc4d 	bl	3c6c <sys_clock_set_timeout>
    53d2:	e7a1      	b.n	5318 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    53d4:	b003      	add	sp, #12
    53d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53da:	bf00      	nop
    53dc:	200001c0 	.word	0x200001c0
    53e0:	20000024 	.word	0x20000024
    53e4:	2000093c 	.word	0x2000093c

000053e8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    53e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53ea:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    53ec:	f7ff fc64 	bl	4cb8 <z_time_slice>
	__asm__ volatile(
    53f0:	f04f 0320 	mov.w	r3, #32
    53f4:	f3ef 8511 	mrs	r5, BASEPRI
    53f8:	f383 8812 	msr	BASEPRI_MAX, r3
    53fc:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    5400:	4b28      	ldr	r3, [pc, #160]	; (54a4 <sys_clock_announce+0xbc>)
    5402:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    5404:	f7ff fefe 	bl	5204 <first>
    5408:	4604      	mov	r4, r0
    540a:	b350      	cbz	r0, 5462 <sys_clock_announce+0x7a>
    540c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    5410:	4b24      	ldr	r3, [pc, #144]	; (54a4 <sys_clock_announce+0xbc>)
    5412:	681b      	ldr	r3, [r3, #0]
    5414:	17d9      	asrs	r1, r3, #31
    5416:	42b3      	cmp	r3, r6
    5418:	eb71 0207 	sbcs.w	r2, r1, r7
    541c:	db21      	blt.n	5462 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    541e:	4a22      	ldr	r2, [pc, #136]	; (54a8 <sys_clock_announce+0xc0>)
    5420:	e9d2 0100 	ldrd	r0, r1, [r2]
    5424:	1980      	adds	r0, r0, r6
    5426:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    542a:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    542e:	1b9b      	subs	r3, r3, r6
    5430:	4a1c      	ldr	r2, [pc, #112]	; (54a4 <sys_clock_announce+0xbc>)
    5432:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    5434:	2200      	movs	r2, #0
    5436:	2300      	movs	r3, #0
    5438:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    543c:	4620      	mov	r0, r4
    543e:	f002 f93d 	bl	76bc <remove_timeout>
	__asm__ volatile(
    5442:	f385 8811 	msr	BASEPRI, r5
    5446:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    544a:	68a3      	ldr	r3, [r4, #8]
    544c:	4620      	mov	r0, r4
    544e:	4798      	blx	r3
	__asm__ volatile(
    5450:	f04f 0320 	mov.w	r3, #32
    5454:	f3ef 8511 	mrs	r5, BASEPRI
    5458:	f383 8812 	msr	BASEPRI_MAX, r3
    545c:	f3bf 8f6f 	isb	sy
    5460:	e7d0      	b.n	5404 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    5462:	b144      	cbz	r4, 5476 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    5464:	4b0f      	ldr	r3, [pc, #60]	; (54a4 <sys_clock_announce+0xbc>)
    5466:	6819      	ldr	r1, [r3, #0]
    5468:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    546c:	1a52      	subs	r2, r2, r1
    546e:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    5472:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    5476:	480c      	ldr	r0, [pc, #48]	; (54a8 <sys_clock_announce+0xc0>)
    5478:	490a      	ldr	r1, [pc, #40]	; (54a4 <sys_clock_announce+0xbc>)
    547a:	680c      	ldr	r4, [r1, #0]
    547c:	e9d0 2300 	ldrd	r2, r3, [r0]
    5480:	1912      	adds	r2, r2, r4
    5482:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    5486:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    548a:	2400      	movs	r4, #0
    548c:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    548e:	f7ff fedb 	bl	5248 <next_timeout>
    5492:	4621      	mov	r1, r4
    5494:	f7fe fbea 	bl	3c6c <sys_clock_set_timeout>
	__asm__ volatile(
    5498:	f385 8811 	msr	BASEPRI, r5
    549c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    54a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54a2:	bf00      	nop
    54a4:	20000974 	.word	0x20000974
    54a8:	200001c0 	.word	0x200001c0

000054ac <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    54ac:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    54ae:	2100      	movs	r1, #0
	__asm__ volatile(
    54b0:	f04f 0320 	mov.w	r3, #32
    54b4:	f3ef 8411 	mrs	r4, BASEPRI
    54b8:	f383 8812 	msr	BASEPRI_MAX, r3
    54bc:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    54c0:	2200      	movs	r2, #0
    54c2:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    54c4:	b969      	cbnz	r1, 54e2 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    54c6:	f7fe fc05 	bl	3cd4 <sys_clock_elapsed>
    54ca:	4b07      	ldr	r3, [pc, #28]	; (54e8 <sys_clock_tick_get+0x3c>)
    54cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    54d0:	1812      	adds	r2, r2, r0
    54d2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    54d6:	f384 8811 	msr	BASEPRI, r4
    54da:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    54de:	2101      	movs	r1, #1
    54e0:	e7f0      	b.n	54c4 <sys_clock_tick_get+0x18>
	}
	return t;
}
    54e2:	4610      	mov	r0, r2
    54e4:	4619      	mov	r1, r3
    54e6:	bd10      	pop	{r4, pc}
    54e8:	200001c0 	.word	0x200001c0

000054ec <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    54ec:	b538      	push	{r3, r4, r5, lr}
    54ee:	4604      	mov	r4, r0
	__asm__ volatile(
    54f0:	f04f 0320 	mov.w	r3, #32
    54f4:	f3ef 8511 	mrs	r5, BASEPRI
    54f8:	f383 8812 	msr	BASEPRI_MAX, r3
    54fc:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5500:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    5504:	ea52 0103 	orrs.w	r1, r2, r3
    5508:	d005      	beq.n	5516 <z_timer_expiration_handler+0x2a>
    550a:	f1b3 3fff 	cmp.w	r3, #4294967295
    550e:	bf08      	it	eq
    5510:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    5514:	d11a      	bne.n	554c <z_timer_expiration_handler+0x60>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    5516:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5518:	3301      	adds	r3, #1
    551a:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    551c:	6a23      	ldr	r3, [r4, #32]
    551e:	b10b      	cbz	r3, 5524 <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
    5520:	4620      	mov	r0, r4
    5522:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5524:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    5528:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    552a:	42a3      	cmp	r3, r4
    552c:	d012      	beq.n	5554 <z_timer_expiration_handler+0x68>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    552e:	b18c      	cbz	r4, 5554 <z_timer_expiration_handler+0x68>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    5530:	4620      	mov	r0, r4
    5532:	f001 ffba 	bl	74aa <z_unpend_thread_no_timeout>
    5536:	2300      	movs	r3, #0
    5538:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    553c:	f385 8811 	msr	BASEPRI, r5
    5540:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    5544:	4620      	mov	r0, r4
    5546:	f001 fff3 	bl	7530 <z_ready_thread>
}
    554a:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    554c:	4904      	ldr	r1, [pc, #16]	; (5560 <z_timer_expiration_handler+0x74>)
    554e:	f7ff fea1 	bl	5294 <z_add_timeout>
    5552:	e7e0      	b.n	5516 <z_timer_expiration_handler+0x2a>
    5554:	f385 8811 	msr	BASEPRI, r5
    5558:	f3bf 8f6f 	isb	sy
		return;
    555c:	e7f5      	b.n	554a <z_timer_expiration_handler+0x5e>
    555e:	bf00      	nop
    5560:	000054ed 	.word	0x000054ed

00005564 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5568:	b087      	sub	sp, #28
    556a:	4614      	mov	r4, r2
    556c:	461d      	mov	r5, r3
    556e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5572:	f1b3 3fff 	cmp.w	r3, #4294967295
    5576:	bf08      	it	eq
    5578:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    557c:	d035      	beq.n	55ea <z_impl_k_timer_start+0x86>
    557e:	4606      	mov	r6, r0
    5580:	4613      	mov	r3, r2
    5582:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    5584:	f1b9 3fff 	cmp.w	r9, #4294967295
    5588:	bf08      	it	eq
    558a:	f1b8 3fff 	cmpeq.w	r8, #4294967295
    558e:	d012      	beq.n	55b6 <z_impl_k_timer_start+0x52>
    5590:	ea58 0109 	orrs.w	r1, r8, r9
    5594:	d00f      	beq.n	55b6 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
    5596:	f06f 0701 	mvn.w	r7, #1
    559a:	ebb7 0708 	subs.w	r7, r7, r8
    559e:	9702      	str	r7, [sp, #8]
    55a0:	f04f 31ff 	mov.w	r1, #4294967295
    55a4:	eb61 0709 	sbc.w	r7, r1, r9
    55a8:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    55aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    55ae:	2800      	cmp	r0, #0
    55b0:	f171 0100 	sbcs.w	r1, r1, #0
    55b4:	db1c      	blt.n	55f0 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    55b6:	f06f 0101 	mvn.w	r1, #1
    55ba:	ebb1 0a03 	subs.w	sl, r1, r3
    55be:	f04f 31ff 	mov.w	r1, #4294967295
    55c2:	eb61 0b02 	sbc.w	fp, r1, r2
    55c6:	f1ba 0f00 	cmp.w	sl, #0
    55ca:	f17b 0100 	sbcs.w	r1, fp, #0
    55ce:	db23      	blt.n	5618 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    55d0:	4630      	mov	r0, r6
    55d2:	f002 f88a 	bl	76ea <z_abort_timeout>
	timer->period = period;
    55d6:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
    55da:	2300      	movs	r3, #0
    55dc:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    55de:	4622      	mov	r2, r4
    55e0:	462b      	mov	r3, r5
    55e2:	4917      	ldr	r1, [pc, #92]	; (5640 <z_impl_k_timer_start+0xdc>)
    55e4:	4630      	mov	r0, r6
    55e6:	f7ff fe55 	bl	5294 <z_add_timeout>
		     duration);
}
    55ea:	b007      	add	sp, #28
    55ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    55f0:	f118 31ff 	adds.w	r1, r8, #4294967295
    55f4:	9104      	str	r1, [sp, #16]
    55f6:	f149 31ff 	adc.w	r1, r9, #4294967295
    55fa:	9105      	str	r1, [sp, #20]
    55fc:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    5600:	4638      	mov	r0, r7
    5602:	4641      	mov	r1, r8
    5604:	2f01      	cmp	r7, #1
    5606:	f178 0700 	sbcs.w	r7, r8, #0
    560a:	db02      	blt.n	5612 <z_impl_k_timer_start+0xae>
    560c:	4680      	mov	r8, r0
    560e:	4689      	mov	r9, r1
    5610:	e7d1      	b.n	55b6 <z_impl_k_timer_start+0x52>
    5612:	2001      	movs	r0, #1
    5614:	2100      	movs	r1, #0
    5616:	e7f9      	b.n	560c <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
    5618:	f113 33ff 	adds.w	r3, r3, #4294967295
    561c:	9300      	str	r3, [sp, #0]
    561e:	f142 33ff 	adc.w	r3, r2, #4294967295
    5622:	9301      	str	r3, [sp, #4]
    5624:	e9dd 0100 	ldrd	r0, r1, [sp]
    5628:	4602      	mov	r2, r0
    562a:	460b      	mov	r3, r1
    562c:	2800      	cmp	r0, #0
    562e:	f171 0100 	sbcs.w	r1, r1, #0
    5632:	db02      	blt.n	563a <z_impl_k_timer_start+0xd6>
    5634:	4614      	mov	r4, r2
    5636:	461d      	mov	r5, r3
    5638:	e7ca      	b.n	55d0 <z_impl_k_timer_start+0x6c>
    563a:	2200      	movs	r2, #0
    563c:	4613      	mov	r3, r2
    563e:	e7f9      	b.n	5634 <z_impl_k_timer_start+0xd0>
    5640:	000054ed 	.word	0x000054ed

00005644 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    5644:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5646:	4a03      	ldr	r2, [pc, #12]	; (5654 <boot_banner+0x10>)
    5648:	4903      	ldr	r1, [pc, #12]	; (5658 <boot_banner+0x14>)
    564a:	4804      	ldr	r0, [pc, #16]	; (565c <boot_banner+0x18>)
    564c:	f000 feb2 	bl	63b4 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    5650:	bd08      	pop	{r3, pc}
    5652:	bf00      	nop
    5654:	00007ae8 	.word	0x00007ae8
    5658:	00008500 	.word	0x00008500
    565c:	0000850c 	.word	0x0000850c

00005660 <z_impl_gpio_pin_configure>:
{
    5660:	b570      	push	{r4, r5, r6, lr}
    5662:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    5664:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    5666:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    5668:	f412 5f80 	tst.w	r2, #4096	; 0x1000
    566c:	d007      	beq.n	567e <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    566e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
    5672:	d004      	beq.n	567e <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    5674:	f012 0f01 	tst.w	r2, #1
    5678:	d001      	beq.n	567e <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    567a:	f482 6340 	eor.w	r3, r2, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    567e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5682:	f013 0f01 	tst.w	r3, #1
    5686:	d008      	beq.n	569a <z_impl_gpio_pin_configure+0x3a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5688:	2301      	movs	r3, #1
    568a:	fa03 f601 	lsl.w	r6, r3, r1
    568e:	6823      	ldr	r3, [r4, #0]
    5690:	4333      	orrs	r3, r6
    5692:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    5694:	682b      	ldr	r3, [r5, #0]
    5696:	4798      	blx	r3
}
    5698:	bd70      	pop	{r4, r5, r6, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    569a:	2301      	movs	r3, #1
    569c:	fa03 f601 	lsl.w	r6, r3, r1
    56a0:	6823      	ldr	r3, [r4, #0]
    56a2:	ea23 0306 	bic.w	r3, r3, r6
    56a6:	6023      	str	r3, [r4, #0]
    56a8:	e7f4      	b.n	5694 <z_impl_gpio_pin_configure+0x34>

000056aa <gpio_pin_get>:
{
    56aa:	b530      	push	{r4, r5, lr}
    56ac:	b083      	sub	sp, #12
    56ae:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
    56b0:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
    56b2:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
    56b4:	685b      	ldr	r3, [r3, #4]
    56b6:	a901      	add	r1, sp, #4
    56b8:	4798      	blx	r3
	if (ret == 0) {
    56ba:	4603      	mov	r3, r0
    56bc:	b918      	cbnz	r0, 56c6 <gpio_pin_get+0x1c>
		*value ^= data->invert;
    56be:	6829      	ldr	r1, [r5, #0]
    56c0:	9a01      	ldr	r2, [sp, #4]
    56c2:	404a      	eors	r2, r1
    56c4:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
    56c6:	b93b      	cbnz	r3, 56d8 <gpio_pin_get+0x2e>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    56c8:	2101      	movs	r1, #1
    56ca:	fa01 f404 	lsl.w	r4, r1, r4
    56ce:	9b01      	ldr	r3, [sp, #4]
    56d0:	421c      	tst	r4, r3
    56d2:	bf14      	ite	ne
    56d4:	460b      	movne	r3, r1
    56d6:	2300      	moveq	r3, #0
}
    56d8:	4618      	mov	r0, r3
    56da:	b003      	add	sp, #12
    56dc:	bd30      	pop	{r4, r5, pc}

000056de <InitializeSPI>:
void InitializeSPI(void){
    56de:	b410      	push	{r4}
    NRF_GPIO->OUTCLR = 1UL << SPIM_SCK_PIN;
    56e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    56e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    56e8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    NRF_GPIO->PIN_CNF[SPIM_SCK_PIN] = (uint32_t) NRF_GPIO_PIN_DIR_OUTPUT << GPIO_PIN_CNF_DIR_Pos
    56ec:	2301      	movs	r3, #1
    56ee:	f8c2 3768 	str.w	r3, [r2, #1896]	; 0x768
    NRF_SPIM1->PSEL.SCK = SPIM_SCK_PIN;
    56f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    56f6:	211a      	movs	r1, #26
    56f8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    NRF_GPIO->OUTCLR = 1UL << SPIM_MOSI_PIN;
    56fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    5700:	f8c2 150c 	str.w	r1, [r2, #1292]	; 0x50c
    NRF_GPIO->PIN_CNF[SPIM_MOSI_PIN] =
    5704:	2003      	movs	r0, #3
    5706:	f8c2 076c 	str.w	r0, [r2, #1900]	; 0x76c
    NRF_SPIM1->PSEL.MOSI = SPIM_MOSI_PIN;
    570a:	211b      	movs	r1, #27
    570c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    NRF_GPIO->PIN_CNF[SPIM_MISO_PIN] =
    5710:	2100      	movs	r1, #0
    5712:	f8c2 1770 	str.w	r1, [r2, #1904]	; 0x770
    NRF_SPIM1->PSEL.MISO = SPIM_MISO_PIN;
    5716:	241c      	movs	r4, #28
    5718:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    NRF_GPIO->OUTSET = 1UL << SPIM_CSN_PIN;
    571c:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
    5720:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    NRF_GPIO->PIN_CNF[SPIM_CSN_PIN] =
    5724:	f8c2 0774 	str.w	r0, [r2, #1908]	; 0x774
    NRF_SPIM1->CONFIG = 0; // CPOL = 0 - ActiveHigh, CPHA = 0 - Leading edge, ByteOrder = 0 - MSB  
    5728:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
    NRF_SPIM1->ORC = 0x55;
    572c:	2255      	movs	r2, #85	; 0x55
    572e:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
    NRF_SPIM1->FREQUENCY = SPIM_FREQUENCY_FREQUENCY_M8;
    5732:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5736:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    NRF_SPIM1->ENABLE = SPIM_ENABLE_ENABLE_Enabled;
    573a:	2207      	movs	r2, #7
    573c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    5740:	bc10      	pop	{r4}
    5742:	4770      	bx	lr

00005744 <QHsm_top>:
}
    5744:	2004      	movs	r0, #4
    5746:	4770      	bx	lr

00005748 <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
    5748:	b510      	push	{r4, lr}
    574a:	b082      	sub	sp, #8
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    574c:	6803      	ldr	r3, [r0, #0]
    574e:	7c1b      	ldrb	r3, [r3, #16]
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
    5750:	6b44      	ldr	r4, [r0, #52]	; 0x34
  offset *= w;
    5752:	fb03 f101 	mul.w	r1, r3, r1
  offset *= 8;
    5756:	00c9      	lsls	r1, r1, #3
    5758:	b289      	uxth	r1, r1
  ptr += offset;
    575a:	4421      	add	r1, r4
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    575c:	9100      	str	r1, [sp, #0]
    575e:	2100      	movs	r1, #0
    5760:	f000 fda6 	bl	62b0 <u8x8_DrawTile>
}
    5764:	b002      	add	sp, #8
    5766:	bd10      	pop	{r4, pc}

00005768 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
    5768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    576c:	4606      	mov	r6, r0
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
    576e:	f890 7038 	ldrb.w	r7, [r0, #56]	; 0x38
  dest_row = u8g2->tile_curr_row;
    5772:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    5776:	6803      	ldr	r3, [r0, #0]
    5778:	f893 8011 	ldrb.w	r8, [r3, #17]
  src_row = 0;
    577c:	2400      	movs	r4, #0
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    577e:	462a      	mov	r2, r5
    5780:	4621      	mov	r1, r4
    5782:	4630      	mov	r0, r6
    5784:	f7ff ffe0 	bl	5748 <u8g2_send_tile_row>
    src_row++;
    5788:	3401      	adds	r4, #1
    578a:	b2e4      	uxtb	r4, r4
    dest_row++;
    578c:	3501      	adds	r5, #1
    578e:	b2ed      	uxtb	r5, r5
  } while( src_row < src_max && dest_row < dest_max );
    5790:	42a7      	cmp	r7, r4
    5792:	d901      	bls.n	5798 <u8g2_send_buffer+0x30>
    5794:	45a8      	cmp	r8, r5
    5796:	d8f2      	bhi.n	577e <u8g2_send_buffer+0x16>
}
    5798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000579c <u8g2_ClearBuffer>:
{
    579c:	b508      	push	{r3, lr}
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    579e:	6803      	ldr	r3, [r0, #0]
    57a0:	7c1a      	ldrb	r2, [r3, #16]
  cnt *= u8g2->tile_buf_height;
    57a2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    57a6:	fb02 f203 	mul.w	r2, r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
    57aa:	00d2      	lsls	r2, r2, #3
    57ac:	2100      	movs	r1, #0
    57ae:	6b40      	ldr	r0, [r0, #52]	; 0x34
    57b0:	f001 f922 	bl	69f8 <memset>
}
    57b4:	bd08      	pop	{r3, pc}

000057b6 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
    57b6:	b510      	push	{r4, lr}
    57b8:	4604      	mov	r4, r0
  u8g2->tile_curr_row = row;
    57ba:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
    57be:	6b03      	ldr	r3, [r0, #48]	; 0x30
    57c0:	681b      	ldr	r3, [r3, #0]
    57c2:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
    57c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    57c6:	685b      	ldr	r3, [r3, #4]
    57c8:	4620      	mov	r0, r4
    57ca:	4798      	blx	r3
}
    57cc:	bd10      	pop	{r4, pc}

000057ce <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
    57ce:	b510      	push	{r4, lr}
    57d0:	4604      	mov	r4, r0
  if ( u8g2->is_auto_page_clear )
    57d2:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
    57d6:	b923      	cbnz	r3, 57e2 <u8g2_FirstPage+0x14>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    57d8:	2100      	movs	r1, #0
    57da:	4620      	mov	r0, r4
    57dc:	f7ff ffeb 	bl	57b6 <u8g2_SetBufferCurrTileRow>
}
    57e0:	bd10      	pop	{r4, pc}
    u8g2_ClearBuffer(u8g2);
    57e2:	f7ff ffdb 	bl	579c <u8g2_ClearBuffer>
    57e6:	e7f7      	b.n	57d8 <u8g2_FirstPage+0xa>

000057e8 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
    57e8:	b538      	push	{r3, r4, r5, lr}
    57ea:	4604      	mov	r4, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
    57ec:	f7ff ffbc 	bl	5768 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
    57f0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  row += u8g2->tile_buf_height;
    57f4:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
    57f8:	441d      	add	r5, r3
    57fa:	b2ed      	uxtb	r5, r5
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
    57fc:	6823      	ldr	r3, [r4, #0]
    57fe:	7c5b      	ldrb	r3, [r3, #17]
    5800:	42ab      	cmp	r3, r5
    5802:	d908      	bls.n	5816 <u8g2_NextPage+0x2e>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
    5804:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
    5808:	b953      	cbnz	r3, 5820 <u8g2_NextPage+0x38>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
    580a:	4629      	mov	r1, r5
    580c:	4620      	mov	r0, r4
    580e:	f7ff ffd2 	bl	57b6 <u8g2_SetBufferCurrTileRow>
  return 1;
    5812:	2001      	movs	r0, #1
}
    5814:	bd38      	pop	{r3, r4, r5, pc}
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    5816:	4620      	mov	r0, r4
    5818:	f000 fd70 	bl	62fc <u8x8_RefreshDisplay>
    return 0;
    581c:	2000      	movs	r0, #0
    581e:	e7f9      	b.n	5814 <u8g2_NextPage+0x2c>
    u8g2_ClearBuffer(u8g2);
    5820:	4620      	mov	r0, r4
    5822:	f7ff ffbb 	bl	579c <u8g2_ClearBuffer>
    5826:	e7f0      	b.n	580a <u8g2_NextPage+0x22>

00005828 <u8g2_font_get_byte>:
}
    5828:	5c40      	ldrb	r0, [r0, r1]
    582a:	4770      	bx	lr

0000582c <u8g2_font_get_word>:
    font += offset;
    582c:	1842      	adds	r2, r0, r1
    pos = u8x8_pgm_read( font );
    582e:	5c43      	ldrb	r3, [r0, r1]
    pos += u8x8_pgm_read( font);
    5830:	7850      	ldrb	r0, [r2, #1]
    5832:	eb00 2003 	add.w	r0, r0, r3, lsl #8
}
    5836:	b280      	uxth	r0, r0
    5838:	4770      	bx	lr

0000583a <u8g2_font_calc_vref_font>:
}
    583a:	2000      	movs	r0, #0
    583c:	4770      	bx	lr

0000583e <u8g2_read_font_info>:
{
    583e:	b538      	push	{r3, r4, r5, lr}
    5840:	4604      	mov	r4, r0
    5842:	460d      	mov	r5, r1
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
    5844:	2100      	movs	r1, #0
    5846:	4628      	mov	r0, r5
    5848:	f7ff ffee 	bl	5828 <u8g2_font_get_byte>
    584c:	7020      	strb	r0, [r4, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
    584e:	2101      	movs	r1, #1
    5850:	4628      	mov	r0, r5
    5852:	f7ff ffe9 	bl	5828 <u8g2_font_get_byte>
    5856:	7060      	strb	r0, [r4, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
    5858:	2102      	movs	r1, #2
    585a:	4628      	mov	r0, r5
    585c:	f7ff ffe4 	bl	5828 <u8g2_font_get_byte>
    5860:	70a0      	strb	r0, [r4, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
    5862:	2103      	movs	r1, #3
    5864:	4628      	mov	r0, r5
    5866:	f7ff ffdf 	bl	5828 <u8g2_font_get_byte>
    586a:	70e0      	strb	r0, [r4, #3]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
    586c:	2104      	movs	r1, #4
    586e:	4628      	mov	r0, r5
    5870:	f7ff ffda 	bl	5828 <u8g2_font_get_byte>
    5874:	7120      	strb	r0, [r4, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
    5876:	2105      	movs	r1, #5
    5878:	4628      	mov	r0, r5
    587a:	f7ff ffd5 	bl	5828 <u8g2_font_get_byte>
    587e:	7160      	strb	r0, [r4, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
    5880:	2106      	movs	r1, #6
    5882:	4628      	mov	r0, r5
    5884:	f7ff ffd0 	bl	5828 <u8g2_font_get_byte>
    5888:	71a0      	strb	r0, [r4, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
    588a:	2107      	movs	r1, #7
    588c:	4628      	mov	r0, r5
    588e:	f7ff ffcb 	bl	5828 <u8g2_font_get_byte>
    5892:	71e0      	strb	r0, [r4, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
    5894:	2108      	movs	r1, #8
    5896:	4628      	mov	r0, r5
    5898:	f7ff ffc6 	bl	5828 <u8g2_font_get_byte>
    589c:	7220      	strb	r0, [r4, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
    589e:	2109      	movs	r1, #9
    58a0:	4628      	mov	r0, r5
    58a2:	f7ff ffc1 	bl	5828 <u8g2_font_get_byte>
    58a6:	7260      	strb	r0, [r4, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
    58a8:	210a      	movs	r1, #10
    58aa:	4628      	mov	r0, r5
    58ac:	f7ff ffbc 	bl	5828 <u8g2_font_get_byte>
    58b0:	72a0      	strb	r0, [r4, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
    58b2:	210b      	movs	r1, #11
    58b4:	4628      	mov	r0, r5
    58b6:	f7ff ffb7 	bl	5828 <u8g2_font_get_byte>
    58ba:	72e0      	strb	r0, [r4, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
    58bc:	210c      	movs	r1, #12
    58be:	4628      	mov	r0, r5
    58c0:	f7ff ffb2 	bl	5828 <u8g2_font_get_byte>
    58c4:	7320      	strb	r0, [r4, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
    58c6:	210d      	movs	r1, #13
    58c8:	4628      	mov	r0, r5
    58ca:	f7ff ffad 	bl	5828 <u8g2_font_get_byte>
    58ce:	7360      	strb	r0, [r4, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
    58d0:	210e      	movs	r1, #14
    58d2:	4628      	mov	r0, r5
    58d4:	f7ff ffa8 	bl	5828 <u8g2_font_get_byte>
    58d8:	73a0      	strb	r0, [r4, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
    58da:	210f      	movs	r1, #15
    58dc:	4628      	mov	r0, r5
    58de:	f7ff ffa3 	bl	5828 <u8g2_font_get_byte>
    58e2:	73e0      	strb	r0, [r4, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
    58e4:	2110      	movs	r1, #16
    58e6:	4628      	mov	r0, r5
    58e8:	f7ff ff9e 	bl	5828 <u8g2_font_get_byte>
    58ec:	7420      	strb	r0, [r4, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
    58ee:	2111      	movs	r1, #17
    58f0:	4628      	mov	r0, r5
    58f2:	f7ff ff9b 	bl	582c <u8g2_font_get_word>
    58f6:	8260      	strh	r0, [r4, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
    58f8:	2113      	movs	r1, #19
    58fa:	4628      	mov	r0, r5
    58fc:	f7ff ff96 	bl	582c <u8g2_font_get_word>
    5900:	82a0      	strh	r0, [r4, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
    5902:	2115      	movs	r1, #21
    5904:	4628      	mov	r0, r5
    5906:	f7ff ff91 	bl	582c <u8g2_font_get_word>
    590a:	82e0      	strh	r0, [r4, #22]
}
    590c:	bd38      	pop	{r3, r4, r5, pc}

0000590e <u8g2_font_decode_get_unsigned_bits>:
{
    590e:	b470      	push	{r4, r5, r6}
  uint8_t bit_pos = f->decode_bit_pos;
    5910:	7b04      	ldrb	r4, [r0, #12]
  val = u8x8_pgm_read( f->decode_ptr );  
    5912:	6806      	ldr	r6, [r0, #0]
    5914:	7832      	ldrb	r2, [r6, #0]
  val >>= bit_pos;
    5916:	fa42 f504 	asr.w	r5, r2, r4
    591a:	b2ea      	uxtb	r2, r5
  bit_pos_plus_cnt += cnt;
    591c:	1863      	adds	r3, r4, r1
    591e:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
    5920:	2b07      	cmp	r3, #7
    5922:	d90a      	bls.n	593a <u8g2_font_decode_get_unsigned_bits+0x2c>
    s -= bit_pos;
    5924:	f1c4 0408 	rsb	r4, r4, #8
    5928:	b2e4      	uxtb	r4, r4
    f->decode_ptr++;
    592a:	1c72      	adds	r2, r6, #1
    592c:	6002      	str	r2, [r0, #0]
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    592e:	7872      	ldrb	r2, [r6, #1]
    5930:	40a2      	lsls	r2, r4
    5932:	432a      	orrs	r2, r5
    5934:	b2d2      	uxtb	r2, r2
    bit_pos_plus_cnt -= 8;
    5936:	3b08      	subs	r3, #8
    5938:	b2db      	uxtb	r3, r3
  val &= (1U<<cnt)-1;
    593a:	f04f 34ff 	mov.w	r4, #4294967295
    593e:	fa04 f101 	lsl.w	r1, r4, r1
  f->decode_bit_pos = bit_pos_plus_cnt;
    5942:	7303      	strb	r3, [r0, #12]
}
    5944:	ea22 0001 	bic.w	r0, r2, r1
    5948:	bc70      	pop	{r4, r5, r6}
    594a:	4770      	bx	lr

0000594c <u8g2_font_setup_decode>:
{
    594c:	b538      	push	{r3, r4, r5, lr}
    594e:	4604      	mov	r4, r0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
    5950:	f100 0560 	add.w	r5, r0, #96	; 0x60
  decode->decode_ptr = glyph_data;
    5954:	6601      	str	r1, [r0, #96]	; 0x60
  decode->decode_bit_pos = 0;
    5956:	2300      	movs	r3, #0
    5958:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
    595c:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    5960:	4628      	mov	r0, r5
    5962:	f7ff ffd4 	bl	590e <u8g2_font_decode_get_unsigned_bits>
    5966:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
    596a:	f894 1079 	ldrb.w	r1, [r4, #121]	; 0x79
    596e:	4628      	mov	r0, r5
    5970:	f7ff ffcd 	bl	590e <u8g2_font_decode_get_unsigned_bits>
    5974:	f884 006b 	strb.w	r0, [r4, #107]	; 0x6b
  decode->fg_color = u8g2->draw_color;
    5978:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
    597c:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
    5980:	fab3 f383 	clz	r3, r3
    5984:	095b      	lsrs	r3, r3, #5
    5986:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
}
    598a:	bd38      	pop	{r3, r4, r5, pc}

0000598c <u8g2_font_decode_get_signed_bits>:
{
    598c:	b510      	push	{r4, lr}
    598e:	460c      	mov	r4, r1
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
    5990:	f7ff ffbd 	bl	590e <u8g2_font_decode_get_unsigned_bits>
    5994:	b240      	sxtb	r0, r0
  cnt--;
    5996:	3c01      	subs	r4, #1
    5998:	b2e4      	uxtb	r4, r4
  d <<= cnt;
    599a:	2301      	movs	r3, #1
    599c:	fa03 f404 	lsl.w	r4, r3, r4
    59a0:	b264      	sxtb	r4, r4
  v -= d;
    59a2:	1b00      	subs	r0, r0, r4
}
    59a4:	b240      	sxtb	r0, r0
    59a6:	bd10      	pop	{r4, pc}

000059a8 <u8g2_add_vector_y>:
  switch(dir)
    59a8:	2b01      	cmp	r3, #1
    59aa:	d008      	beq.n	59be <u8g2_add_vector_y+0x16>
    59ac:	2b02      	cmp	r3, #2
    59ae:	d009      	beq.n	59c4 <u8g2_add_vector_y+0x1c>
    59b0:	b113      	cbz	r3, 59b8 <u8g2_add_vector_y+0x10>
      dy -= x;
    59b2:	1a40      	subs	r0, r0, r1
    59b4:	b280      	uxth	r0, r0
}
    59b6:	4770      	bx	lr
      dy += y;
    59b8:	4410      	add	r0, r2
    59ba:	b280      	uxth	r0, r0
      break;
    59bc:	4770      	bx	lr
      dy += x;
    59be:	4408      	add	r0, r1
    59c0:	b280      	uxth	r0, r0
      break;
    59c2:	4770      	bx	lr
      dy -= y;
    59c4:	1a80      	subs	r0, r0, r2
    59c6:	b280      	uxth	r0, r0
      break;
    59c8:	4770      	bx	lr

000059ca <u8g2_add_vector_x>:
  switch(dir)
    59ca:	2b01      	cmp	r3, #1
    59cc:	d008      	beq.n	59e0 <u8g2_add_vector_x+0x16>
    59ce:	2b02      	cmp	r3, #2
    59d0:	d009      	beq.n	59e6 <u8g2_add_vector_x+0x1c>
    59d2:	b113      	cbz	r3, 59da <u8g2_add_vector_x+0x10>
      dx += y;
    59d4:	4402      	add	r2, r0
    59d6:	b290      	uxth	r0, r2
}
    59d8:	4770      	bx	lr
      dx += x;
    59da:	4408      	add	r0, r1
    59dc:	b280      	uxth	r0, r0
      break;
    59de:	4770      	bx	lr
      dx -= y;
    59e0:	1a82      	subs	r2, r0, r2
    59e2:	b290      	uxth	r0, r2
      break;
    59e4:	4770      	bx	lr
      dx -= x;
    59e6:	1a40      	subs	r0, r0, r1
    59e8:	b280      	uxth	r0, r0
      break;
    59ea:	4770      	bx	lr

000059ec <u8g2_font_decode_len>:
{
    59ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59f0:	b089      	sub	sp, #36	; 0x24
    59f2:	4606      	mov	r6, r0
    59f4:	460c      	mov	r4, r1
    59f6:	9207      	str	r2, [sp, #28]
  lx = decode->x;
    59f8:	f990 5068 	ldrsb.w	r5, [r0, #104]	; 0x68
    59fc:	fa5f fb85 	uxtb.w	fp, r5
  ly = decode->y;
    5a00:	f990 3069 	ldrsb.w	r3, [r0, #105]	; 0x69
    5a04:	b2db      	uxtb	r3, r3
    5a06:	9303      	str	r3, [sp, #12]
    5a08:	e019      	b.n	5a3e <u8g2_font_decode_len+0x52>
      current = cnt;
    5a0a:	9405      	str	r4, [sp, #20]
    5a0c:	e020      	b.n	5a50 <u8g2_font_decode_len+0x64>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
    5a0e:	f896 306e 	ldrb.w	r3, [r6, #110]	; 0x6e
    5a12:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
    5a16:	f8cd 8000 	str.w	r8, [sp]
    5a1a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5a1e:	9906      	ldr	r1, [sp, #24]
    5a20:	4630      	mov	r0, r6
    5a22:	f000 f9c6 	bl	5db2 <u8g2_DrawHVLine>
    if ( cnt < rem )
    5a26:	42bc      	cmp	r4, r7
    5a28:	d33d      	bcc.n	5aa6 <u8g2_font_decode_len+0xba>
    cnt -= rem;
    5a2a:	ebab 0505 	sub.w	r5, fp, r5
    5a2e:	442c      	add	r4, r5
    5a30:	b2e4      	uxtb	r4, r4
    ly++;
    5a32:	9b03      	ldr	r3, [sp, #12]
    5a34:	3301      	adds	r3, #1
    5a36:	b2db      	uxtb	r3, r3
    5a38:	9303      	str	r3, [sp, #12]
    lx = 0;
    5a3a:	f04f 0b00 	mov.w	fp, #0
    rem = decode->glyph_width;
    5a3e:	f996 506a 	ldrsb.w	r5, [r6, #106]	; 0x6a
    5a42:	b2ed      	uxtb	r5, r5
    rem -= lx;
    5a44:	eba5 070b 	sub.w	r7, r5, fp
    5a48:	b2ff      	uxtb	r7, r7
    if ( cnt < rem )
    5a4a:	42bc      	cmp	r4, r7
    5a4c:	d3dd      	bcc.n	5a0a <u8g2_font_decode_len+0x1e>
    current = rem;
    5a4e:	9705      	str	r7, [sp, #20]
    y = decode->target_y;
    5a50:	f8b6 a066 	ldrh.w	sl, [r6, #102]	; 0x66
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
    5a54:	fa4f f18b 	sxtb.w	r1, fp
    5a58:	f99d 900c 	ldrsb.w	r9, [sp, #12]
    5a5c:	f896 8070 	ldrb.w	r8, [r6, #112]	; 0x70
    5a60:	4643      	mov	r3, r8
    5a62:	464a      	mov	r2, r9
    5a64:	9104      	str	r1, [sp, #16]
    5a66:	f8b6 0064 	ldrh.w	r0, [r6, #100]	; 0x64
    5a6a:	f7ff ffae 	bl	59ca <u8g2_add_vector_x>
    5a6e:	9006      	str	r0, [sp, #24]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
    5a70:	4643      	mov	r3, r8
    5a72:	464a      	mov	r2, r9
    5a74:	9904      	ldr	r1, [sp, #16]
    5a76:	4650      	mov	r0, sl
    5a78:	f7ff ff96 	bl	59a8 <u8g2_add_vector_y>
    5a7c:	4602      	mov	r2, r0
    if ( is_foreground )
    5a7e:	9b07      	ldr	r3, [sp, #28]
    5a80:	2b00      	cmp	r3, #0
    5a82:	d1c4      	bne.n	5a0e <u8g2_font_decode_len+0x22>
    else if ( decode->is_transparent == 0 )    
    5a84:	f896 306d 	ldrb.w	r3, [r6, #109]	; 0x6d
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d1cc      	bne.n	5a26 <u8g2_font_decode_len+0x3a>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
    5a8c:	f896 306f 	ldrb.w	r3, [r6, #111]	; 0x6f
    5a90:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
    5a94:	f8cd 8000 	str.w	r8, [sp]
    5a98:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5a9c:	9906      	ldr	r1, [sp, #24]
    5a9e:	4630      	mov	r0, r6
    5aa0:	f000 f987 	bl	5db2 <u8g2_DrawHVLine>
    5aa4:	e7bf      	b.n	5a26 <u8g2_font_decode_len+0x3a>
  lx += cnt;
    5aa6:	445c      	add	r4, fp
  decode->x = lx;
    5aa8:	f886 4068 	strb.w	r4, [r6, #104]	; 0x68
  decode->y = ly;
    5aac:	f886 9069 	strb.w	r9, [r6, #105]	; 0x69
}
    5ab0:	b009      	add	sp, #36	; 0x24
    5ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005ab6 <u8g2_font_decode_glyph>:
{
    5ab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5aba:	b085      	sub	sp, #20
    5abc:	4604      	mov	r4, r0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
    5abe:	f100 0560 	add.w	r5, r0, #96	; 0x60
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
    5ac2:	f7ff ff43 	bl	594c <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
    5ac6:	f994 706b 	ldrsb.w	r7, [r4, #107]	; 0x6b
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
    5aca:	f894 107a 	ldrb.w	r1, [r4, #122]	; 0x7a
    5ace:	4628      	mov	r0, r5
    5ad0:	f7ff ff5c 	bl	598c <u8g2_font_decode_get_signed_bits>
    5ad4:	4680      	mov	r8, r0
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
    5ad6:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
    5ada:	4628      	mov	r0, r5
    5adc:	f7ff ff56 	bl	598c <u8g2_font_decode_get_signed_bits>
    5ae0:	4606      	mov	r6, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
    5ae2:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    5ae6:	4628      	mov	r0, r5
    5ae8:	f7ff ff50 	bl	598c <u8g2_font_decode_get_signed_bits>
    5aec:	9003      	str	r0, [sp, #12]
  if ( decode->glyph_width > 0 )
    5aee:	f994 a06a 	ldrsb.w	sl, [r4, #106]	; 0x6a
    5af2:	f1ba 0f00 	cmp.w	sl, #0
    5af6:	dd54      	ble.n	5ba2 <u8g2_font_decode_glyph+0xec>
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
    5af8:	443e      	add	r6, r7
    5afa:	b2f6      	uxtb	r6, r6
    5afc:	4276      	negs	r6, r6
    5afe:	b276      	sxtb	r6, r6
    5b00:	f894 b070 	ldrb.w	fp, [r4, #112]	; 0x70
    5b04:	465b      	mov	r3, fp
    5b06:	4632      	mov	r2, r6
    5b08:	4641      	mov	r1, r8
    5b0a:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
    5b0e:	f7ff ff5c 	bl	59ca <u8g2_add_vector_x>
    5b12:	4681      	mov	r9, r0
    5b14:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
    5b18:	465b      	mov	r3, fp
    5b1a:	4632      	mov	r2, r6
    5b1c:	4641      	mov	r1, r8
    5b1e:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
    5b22:	f7ff ff41 	bl	59a8 <u8g2_add_vector_y>
    5b26:	4602      	mov	r2, r0
    5b28:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
      switch(decode->dir)
    5b2c:	f1bb 0f03 	cmp.w	fp, #3
    5b30:	d862      	bhi.n	5bf8 <u8g2_font_decode_glyph+0x142>
    5b32:	e8df f00b 	tbb	[pc, fp]
    5b36:	3a02      	.short	0x3a02
    5b38:	5646      	.short	0x5646
	    x1 += decode->glyph_width;
    5b3a:	eb0a 0309 	add.w	r3, sl, r9
    5b3e:	b29b      	uxth	r3, r3
	    y1 += h;
    5b40:	1838      	adds	r0, r7, r0
    5b42:	b280      	uxth	r0, r0
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
    5b44:	9000      	str	r0, [sp, #0]
    5b46:	4649      	mov	r1, r9
    5b48:	4620      	mov	r0, r4
    5b4a:	f000 f9b1 	bl	5eb0 <u8g2_IsIntersection>
    5b4e:	b340      	cbz	r0, 5ba2 <u8g2_font_decode_glyph+0xec>
    decode->x = 0;
    5b50:	2300      	movs	r3, #0
    5b52:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    decode->y = 0;
    5b56:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
    5b5a:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
    5b5e:	4628      	mov	r0, r5
    5b60:	f7ff fed5 	bl	590e <u8g2_font_decode_get_unsigned_bits>
    5b64:	4680      	mov	r8, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
    5b66:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
    5b6a:	4628      	mov	r0, r5
    5b6c:	f7ff fecf 	bl	590e <u8g2_font_decode_get_unsigned_bits>
    5b70:	4606      	mov	r6, r0
	u8g2_font_decode_len(u8g2, a, 0);
    5b72:	2200      	movs	r2, #0
    5b74:	4641      	mov	r1, r8
    5b76:	4620      	mov	r0, r4
    5b78:	f7ff ff38 	bl	59ec <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
    5b7c:	2201      	movs	r2, #1
    5b7e:	4631      	mov	r1, r6
    5b80:	4620      	mov	r0, r4
    5b82:	f7ff ff33 	bl	59ec <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
    5b86:	2101      	movs	r1, #1
    5b88:	4628      	mov	r0, r5
    5b8a:	f7ff fec0 	bl	590e <u8g2_font_decode_get_unsigned_bits>
    5b8e:	2800      	cmp	r0, #0
    5b90:	d1ef      	bne.n	5b72 <u8g2_font_decode_glyph+0xbc>
      if ( decode->y >= h )
    5b92:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
    5b96:	42bb      	cmp	r3, r7
    5b98:	dbdf      	blt.n	5b5a <u8g2_font_decode_glyph+0xa4>
    u8g2->draw_color = decode->fg_color;
    5b9a:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
    5b9e:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
}
    5ba2:	9803      	ldr	r0, [sp, #12]
    5ba4:	b005      	add	sp, #20
    5ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    x0 -= h;
    5baa:	eba9 0107 	sub.w	r1, r9, r7
    5bae:	b289      	uxth	r1, r1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    5bb0:	3101      	adds	r1, #1
	    x1++;
    5bb2:	f109 0301 	add.w	r3, r9, #1
    5bb6:	b29b      	uxth	r3, r3
	    y1 += decode->glyph_width;
    5bb8:	4450      	add	r0, sl
    5bba:	b280      	uxth	r0, r0
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    5bbc:	fa1f f981 	uxth.w	r9, r1
	    break;
    5bc0:	e7c0      	b.n	5b44 <u8g2_font_decode_glyph+0x8e>
	    x0 -= decode->glyph_width;
    5bc2:	eba9 010a 	sub.w	r1, r9, sl
    5bc6:	b289      	uxth	r1, r1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    5bc8:	3101      	adds	r1, #1
	    x1++;
    5bca:	f109 0301 	add.w	r3, r9, #1
    5bce:	b29b      	uxth	r3, r3
	    y0 -= h;
    5bd0:	1bc6      	subs	r6, r0, r7
    5bd2:	b2b6      	uxth	r6, r6
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    5bd4:	3601      	adds	r6, #1
	    y1++;
    5bd6:	3201      	adds	r2, #1
    5bd8:	b290      	uxth	r0, r2
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    5bda:	b2b2      	uxth	r2, r6
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    5bdc:	fa1f f981 	uxth.w	r9, r1
	    break;	  
    5be0:	e7b0      	b.n	5b44 <u8g2_font_decode_glyph+0x8e>
	    x1 += h;
    5be2:	eb07 0309 	add.w	r3, r7, r9
    5be6:	b29b      	uxth	r3, r3
	    y0 -= decode->glyph_width;
    5be8:	eba0 010a 	sub.w	r1, r0, sl
    5bec:	b289      	uxth	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    5bee:	3101      	adds	r1, #1
	    y1++;
    5bf0:	3201      	adds	r2, #1
    5bf2:	b290      	uxth	r0, r2
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    5bf4:	b28a      	uxth	r2, r1
	    break;	  
    5bf6:	e7a5      	b.n	5b44 <u8g2_font_decode_glyph+0x8e>
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
    5bf8:	464b      	mov	r3, r9
    5bfa:	e7a3      	b.n	5b44 <u8g2_font_decode_glyph+0x8e>

00005bfc <u8g2_font_get_glyph_data>:
{
    5bfc:	b570      	push	{r4, r5, r6, lr}
    5bfe:	460e      	mov	r6, r1
  const uint8_t *font = u8g2->font;
    5c00:	6d84      	ldr	r4, [r0, #88]	; 0x58
  font += U8G2_FONT_DATA_STRUCT_SIZE;
    5c02:	3417      	adds	r4, #23
  if ( encoding <= 255 )
    5c04:	29ff      	cmp	r1, #255	; 0xff
    5c06:	d813      	bhi.n	5c30 <u8g2_font_get_glyph_data+0x34>
    if ( encoding >= 'a' )
    5c08:	2960      	cmp	r1, #96	; 0x60
    5c0a:	d909      	bls.n	5c20 <u8g2_font_get_glyph_data+0x24>
      font += u8g2->font_info.start_pos_lower_a;
    5c0c:	f8b0 3088 	ldrh.w	r3, [r0, #136]	; 0x88
    5c10:	441c      	add	r4, r3
      if ( u8x8_pgm_read( font + 1 ) == 0 )
    5c12:	7863      	ldrb	r3, [r4, #1]
    5c14:	b343      	cbz	r3, 5c68 <u8g2_font_get_glyph_data+0x6c>
      if ( u8x8_pgm_read( font ) == encoding )
    5c16:	7822      	ldrb	r2, [r4, #0]
    5c18:	42b2      	cmp	r2, r6
    5c1a:	d007      	beq.n	5c2c <u8g2_font_get_glyph_data+0x30>
      font += u8x8_pgm_read( font + 1 );
    5c1c:	441c      	add	r4, r3
      if ( u8x8_pgm_read( font + 1 ) == 0 )
    5c1e:	e7f8      	b.n	5c12 <u8g2_font_get_glyph_data+0x16>
    else if ( encoding >= 'A' )
    5c20:	2940      	cmp	r1, #64	; 0x40
    5c22:	d9f6      	bls.n	5c12 <u8g2_font_get_glyph_data+0x16>
      font += u8g2->font_info.start_pos_upper_A;
    5c24:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
    5c28:	441c      	add	r4, r3
    5c2a:	e7f2      	b.n	5c12 <u8g2_font_get_glyph_data+0x16>
	return font+2;	/* skip encoding and glyph size */
    5c2c:	1ca0      	adds	r0, r4, #2
    5c2e:	e01c      	b.n	5c6a <u8g2_font_get_glyph_data+0x6e>
    font += u8g2->font_info.start_pos_unicode;
    5c30:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
    5c34:	4404      	add	r4, r0
    unicode_lookup_table = font; 
    5c36:	4625      	mov	r5, r4
      font += u8g2_font_get_word(unicode_lookup_table, 0);
    5c38:	2100      	movs	r1, #0
    5c3a:	4628      	mov	r0, r5
    5c3c:	f7ff fdf6 	bl	582c <u8g2_font_get_word>
    5c40:	4404      	add	r4, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
    5c42:	2102      	movs	r1, #2
    5c44:	4628      	mov	r0, r5
    5c46:	f7ff fdf1 	bl	582c <u8g2_font_get_word>
      unicode_lookup_table+=4;
    5c4a:	3504      	adds	r5, #4
    } while( e < encoding );
    5c4c:	4286      	cmp	r6, r0
    5c4e:	d8f3      	bhi.n	5c38 <u8g2_font_get_glyph_data+0x3c>
      e = u8x8_pgm_read( font );
    5c50:	7822      	ldrb	r2, [r4, #0]
      e |= u8x8_pgm_read( font + 1 );
    5c52:	7863      	ldrb	r3, [r4, #1]
      if ( e == 0 )
    5c54:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    5c58:	d008      	beq.n	5c6c <u8g2_font_get_glyph_data+0x70>
      if ( e == encoding )
    5c5a:	429e      	cmp	r6, r3
    5c5c:	d002      	beq.n	5c64 <u8g2_font_get_glyph_data+0x68>
      font += u8x8_pgm_read( font + 2 );
    5c5e:	78a3      	ldrb	r3, [r4, #2]
    5c60:	441c      	add	r4, r3
      e = u8x8_pgm_read( font );
    5c62:	e7f5      	b.n	5c50 <u8g2_font_get_glyph_data+0x54>
	return font+3;	/* skip encoding and glyph size */
    5c64:	1ce0      	adds	r0, r4, #3
    5c66:	e000      	b.n	5c6a <u8g2_font_get_glyph_data+0x6e>
  return NULL;
    5c68:	2000      	movs	r0, #0
}
    5c6a:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
    5c6c:	2000      	movs	r0, #0
    5c6e:	e7fc      	b.n	5c6a <u8g2_font_get_glyph_data+0x6e>

00005c70 <u8g2_font_draw_glyph>:
{
    5c70:	b510      	push	{r4, lr}
    5c72:	4604      	mov	r4, r0
  u8g2->font_decode.target_x = x;
    5c74:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
  u8g2->font_decode.target_y = y;
    5c78:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
    5c7c:	4619      	mov	r1, r3
    5c7e:	f7ff ffbd 	bl	5bfc <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
    5c82:	b128      	cbz	r0, 5c90 <u8g2_font_draw_glyph+0x20>
    5c84:	4601      	mov	r1, r0
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
    5c86:	4620      	mov	r0, r4
    5c88:	f7ff ff15 	bl	5ab6 <u8g2_font_decode_glyph>
    5c8c:	b280      	uxth	r0, r0
}
    5c8e:	bd10      	pop	{r4, pc}
  u8g2_uint_t dx = 0;
    5c90:	2000      	movs	r0, #0
    5c92:	e7fc      	b.n	5c8e <u8g2_font_draw_glyph+0x1e>

00005c94 <u8g2_DrawGlyph>:
{
    5c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c96:	4604      	mov	r4, r0
    5c98:	460d      	mov	r5, r1
    5c9a:	4616      	mov	r6, r2
    5c9c:	461f      	mov	r7, r3
  switch(u8g2->font_decode.dir)
    5c9e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    5ca2:	2b03      	cmp	r3, #3
    5ca4:	d807      	bhi.n	5cb6 <u8g2_DrawGlyph+0x22>
    5ca6:	e8df f003 	tbb	[pc, r3]
    5caa:	0d02      	.short	0x0d02
    5cac:	1712      	.short	0x1712
      y += u8g2->font_calc_vref(u8g2);
    5cae:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    5cb0:	4798      	blx	r3
    5cb2:	4406      	add	r6, r0
    5cb4:	b2b6      	uxth	r6, r6
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
    5cb6:	463b      	mov	r3, r7
    5cb8:	4632      	mov	r2, r6
    5cba:	4629      	mov	r1, r5
    5cbc:	4620      	mov	r0, r4
    5cbe:	f7ff ffd7 	bl	5c70 <u8g2_font_draw_glyph>
}
    5cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      x -= u8g2->font_calc_vref(u8g2);
    5cc4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    5cc6:	4798      	blx	r3
    5cc8:	1a2d      	subs	r5, r5, r0
    5cca:	b2ad      	uxth	r5, r5
      break;
    5ccc:	e7f3      	b.n	5cb6 <u8g2_DrawGlyph+0x22>
      y -= u8g2->font_calc_vref(u8g2);
    5cce:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    5cd0:	4798      	blx	r3
    5cd2:	1a36      	subs	r6, r6, r0
    5cd4:	b2b6      	uxth	r6, r6
      break;
    5cd6:	e7ee      	b.n	5cb6 <u8g2_DrawGlyph+0x22>
      x += u8g2->font_calc_vref(u8g2);
    5cd8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    5cda:	4798      	blx	r3
    5cdc:	4405      	add	r5, r0
    5cde:	b2ad      	uxth	r5, r5
      break;
    5ce0:	e7e9      	b.n	5cb6 <u8g2_DrawGlyph+0x22>

00005ce2 <u8g2_UpdateRefHeight>:
  if ( u8g2->font == NULL )
    5ce2:	6d83      	ldr	r3, [r0, #88]	; 0x58
    5ce4:	b34b      	cbz	r3, 5d3a <u8g2_UpdateRefHeight+0x58>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
    5ce6:	f990 2081 	ldrsb.w	r2, [r0, #129]	; 0x81
    5cea:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
    5cee:	f990 3082 	ldrsb.w	r3, [r0, #130]	; 0x82
    5cf2:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
    5cf6:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    5cfa:	b1f1      	cbz	r1, 5d3a <u8g2_UpdateRefHeight+0x58>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
    5cfc:	2901      	cmp	r1, #1
    5cfe:	d00f      	beq.n	5d20 <u8g2_UpdateRefHeight+0x3e>
{
    5d00:	b430      	push	{r4, r5}
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
    5d02:	f990 407e 	ldrsb.w	r4, [r0, #126]	; 0x7e
    5d06:	f990 1080 	ldrsb.w	r1, [r0, #128]	; 0x80
    5d0a:	1865      	adds	r5, r4, r1
    5d0c:	42aa      	cmp	r2, r5
    5d0e:	da01      	bge.n	5d14 <u8g2_UpdateRefHeight+0x32>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
    5d10:	f880 508e 	strb.w	r5, [r0, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
    5d14:	428b      	cmp	r3, r1
    5d16:	dd01      	ble.n	5d1c <u8g2_UpdateRefHeight+0x3a>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
    5d18:	f880 108f 	strb.w	r1, [r0, #143]	; 0x8f
}
    5d1c:	bc30      	pop	{r4, r5}
    5d1e:	4770      	bx	lr
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
    5d20:	f990 1083 	ldrsb.w	r1, [r0, #131]	; 0x83
    5d24:	428a      	cmp	r2, r1
    5d26:	da01      	bge.n	5d2c <u8g2_UpdateRefHeight+0x4a>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
    5d28:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
    5d2c:	f990 2084 	ldrsb.w	r2, [r0, #132]	; 0x84
    5d30:	4293      	cmp	r3, r2
    5d32:	dd02      	ble.n	5d3a <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
    5d34:	f880 208f 	strb.w	r2, [r0, #143]	; 0x8f
    5d38:	4770      	bx	lr
    5d3a:	4770      	bx	lr

00005d3c <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
    5d3c:	6d83      	ldr	r3, [r0, #88]	; 0x58
    5d3e:	428b      	cmp	r3, r1
    5d40:	d009      	beq.n	5d56 <u8g2_SetFont+0x1a>
{
    5d42:	b510      	push	{r4, lr}
    5d44:	4604      	mov	r4, r0
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    5d46:	6581      	str	r1, [r0, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
    5d48:	3074      	adds	r0, #116	; 0x74
    5d4a:	f7ff fd78 	bl	583e <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    5d4e:	4620      	mov	r0, r4
    5d50:	f7ff ffc7 	bl	5ce2 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    5d54:	bd10      	pop	{r4, pc}
    5d56:	4770      	bx	lr

00005d58 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
    5d58:	b430      	push	{r4, r5}
  u8g2_uint_t a = *ap;
    5d5a:	8805      	ldrh	r5, [r0, #0]
  u8g2_uint_t b;
  b  = a;
  b += *len;
    5d5c:	880c      	ldrh	r4, [r1, #0]
    5d5e:	442c      	add	r4, r5
    5d60:	b2a4      	uxth	r4, r4
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    5d62:	42a5      	cmp	r5, r4
    5d64:	d903      	bls.n	5d6e <u8g2_clip_intersection2+0x16>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    5d66:	429d      	cmp	r5, r3
    5d68:	d211      	bcs.n	5d8e <u8g2_clip_intersection2+0x36>
    {
      b = d;
      b--;
    5d6a:	1e5c      	subs	r4, r3, #1
    5d6c:	b2a4      	uxth	r4, r4
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    5d6e:	429d      	cmp	r5, r3
    5d70:	d20f      	bcs.n	5d92 <u8g2_clip_intersection2+0x3a>
    return 0;
  if ( b <= c )
    5d72:	4294      	cmp	r4, r2
    5d74:	d90f      	bls.n	5d96 <u8g2_clip_intersection2+0x3e>
    return 0;
  if ( a < c )		
    5d76:	4295      	cmp	r5, r2
    5d78:	d300      	bcc.n	5d7c <u8g2_clip_intersection2+0x24>
    5d7a:	462a      	mov	r2, r5
    a = c;
  if ( b > d )
    5d7c:	429c      	cmp	r4, r3
    5d7e:	d800      	bhi.n	5d82 <u8g2_clip_intersection2+0x2a>
    5d80:	4623      	mov	r3, r4
    b = d;
  
  *ap = a;
    5d82:	8002      	strh	r2, [r0, #0]
  b -= a;
    5d84:	1a9b      	subs	r3, r3, r2
  *len = b;
    5d86:	800b      	strh	r3, [r1, #0]
  return 1;
    5d88:	2001      	movs	r0, #1
}
    5d8a:	bc30      	pop	{r4, r5}
    5d8c:	4770      	bx	lr
      a = c;
    5d8e:	4615      	mov	r5, r2
    5d90:	e7ed      	b.n	5d6e <u8g2_clip_intersection2+0x16>
    return 0;
    5d92:	2000      	movs	r0, #0
    5d94:	e7f9      	b.n	5d8a <u8g2_clip_intersection2+0x32>
    return 0;
    5d96:	2000      	movs	r0, #0
    5d98:	e7f7      	b.n	5d8a <u8g2_clip_intersection2+0x32>

00005d9a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    5d9a:	b530      	push	{r4, r5, lr}
    5d9c:	b083      	sub	sp, #12

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
    5d9e:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
    5da0:	1b52      	subs	r2, r2, r5
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    5da2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    5da4:	f89d 5018 	ldrb.w	r5, [sp, #24]
    5da8:	9500      	str	r5, [sp, #0]
    5daa:	b292      	uxth	r2, r2
    5dac:	47a0      	blx	r4
}
    5dae:	b003      	add	sp, #12
    5db0:	bd30      	pop	{r4, r5, pc}

00005db2 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    5db2:	b570      	push	{r4, r5, r6, lr}
    5db4:	b084      	sub	sp, #16
    5db6:	4604      	mov	r4, r0
    5db8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    5dbc:	f8ad 100e 	strh.w	r1, [sp, #14]
    5dc0:	f8ad 200c 	strh.w	r2, [sp, #12]
    5dc4:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    5dc8:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    5dcc:	b35b      	cbz	r3, 5e26 <u8g2_DrawHVLine+0x74>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    5dce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dd2:	b343      	cbz	r3, 5e26 <u8g2_DrawHVLine+0x74>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    5dd4:	2b01      	cmp	r3, #1
    5dd6:	d903      	bls.n	5de0 <u8g2_DrawHVLine+0x2e>
      {
	if ( dir == 2 )
    5dd8:	2802      	cmp	r0, #2
    5dda:	d026      	beq.n	5e2a <u8g2_DrawHVLine+0x78>
	{
	  x -= len;
	  x++;
	}
	else if ( dir == 3 )
    5ddc:	2803      	cmp	r0, #3
    5dde:	d02b      	beq.n	5e38 <u8g2_DrawHVLine+0x86>
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
    5de0:	f010 0501 	ands.w	r5, r0, #1
    5de4:	d130      	bne.n	5e48 <u8g2_DrawHVLine+0x96>
      {
	if ( y < u8g2->user_y0 )
    5de6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    5dea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5dee:	429a      	cmp	r2, r3
    5df0:	d819      	bhi.n	5e26 <u8g2_DrawHVLine+0x74>
	  return;
	if ( y >= u8g2->user_y1 )
    5df2:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
    5df6:	4293      	cmp	r3, r2
    5df8:	d215      	bcs.n	5e26 <u8g2_DrawHVLine+0x74>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    5dfa:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    5dfe:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
    5e02:	f10d 010a 	add.w	r1, sp, #10
    5e06:	f10d 000e 	add.w	r0, sp, #14
    5e0a:	f7ff ffa5 	bl	5d58 <u8g2_clip_intersection2>
    5e0e:	b150      	cbz	r0, 5e26 <u8g2_DrawHVLine+0x74>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    5e10:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5e12:	689e      	ldr	r6, [r3, #8]
    5e14:	9500      	str	r5, [sp, #0]
    5e16:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e1a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    5e1e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    5e22:	4620      	mov	r0, r4
    5e24:	47b0      	blx	r6
    }
}
    5e26:	b004      	add	sp, #16
    5e28:	bd70      	pop	{r4, r5, r6, pc}
	  x -= len;
    5e2a:	b28a      	uxth	r2, r1
    5e2c:	1ad3      	subs	r3, r2, r3
    5e2e:	b29b      	uxth	r3, r3
	  x++;
    5e30:	3301      	adds	r3, #1
    5e32:	f8ad 300e 	strh.w	r3, [sp, #14]
    5e36:	e7d3      	b.n	5de0 <u8g2_DrawHVLine+0x2e>
	  y -= len;
    5e38:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    5e3c:	1ad3      	subs	r3, r2, r3
    5e3e:	b29b      	uxth	r3, r3
	  y++;
    5e40:	3301      	adds	r3, #1
    5e42:	f8ad 300c 	strh.w	r3, [sp, #12]
    5e46:	e7cb      	b.n	5de0 <u8g2_DrawHVLine+0x2e>
	if ( x < u8g2->user_x0 )
    5e48:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
    5e4c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5e50:	429a      	cmp	r2, r3
    5e52:	d8e8      	bhi.n	5e26 <u8g2_DrawHVLine+0x74>
	if ( x >= u8g2->user_x1 )
    5e54:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
    5e58:	4293      	cmp	r3, r2
    5e5a:	d2e4      	bcs.n	5e26 <u8g2_DrawHVLine+0x74>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    5e5c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    5e60:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    5e64:	f10d 010a 	add.w	r1, sp, #10
    5e68:	a803      	add	r0, sp, #12
    5e6a:	f7ff ff75 	bl	5d58 <u8g2_clip_intersection2>
    5e6e:	2800      	cmp	r0, #0
    5e70:	d1ce      	bne.n	5e10 <u8g2_DrawHVLine+0x5e>
    5e72:	e7d8      	b.n	5e26 <u8g2_DrawHVLine+0x74>

00005e74 <u8g2_SetDrawColor>:
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    5e74:	f880 1092 	strb.w	r1, [r0, #146]	; 0x92
  if ( color >= 3 )
    5e78:	2902      	cmp	r1, #2
    5e7a:	d902      	bls.n	5e82 <u8g2_SetDrawColor+0xe>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    5e7c:	2301      	movs	r3, #1
    5e7e:	f880 3092 	strb.w	r3, [r0, #146]	; 0x92
}
    5e82:	4770      	bx	lr

00005e84 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    5e84:	428a      	cmp	r2, r1
    5e86:	d205      	bcs.n	5e94 <u8g2_is_intersection_decision_tree+0x10>
  {
    if ( v1 > a0 )	// v1 >= a0
    5e88:	4283      	cmp	r3, r0
    5e8a:	d809      	bhi.n	5ea0 <u8g2_is_intersection_decision_tree+0x1c>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    5e8c:	429a      	cmp	r2, r3
    5e8e:	d909      	bls.n	5ea4 <u8g2_is_intersection_decision_tree+0x20>
      {
	return 1;
    5e90:	2001      	movs	r0, #1
    5e92:	4770      	bx	lr
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    5e94:	4283      	cmp	r3, r0
    5e96:	d907      	bls.n	5ea8 <u8g2_is_intersection_decision_tree+0x24>
    {
      if ( v0 > v1 )	// v0 > v1
    5e98:	429a      	cmp	r2, r3
    5e9a:	d907      	bls.n	5eac <u8g2_is_intersection_decision_tree+0x28>
      {
	return 1;
    5e9c:	2001      	movs	r0, #1
    5e9e:	4770      	bx	lr
      return 1;
    5ea0:	2001      	movs	r0, #1
    5ea2:	4770      	bx	lr
	return 0;
    5ea4:	2000      	movs	r0, #0
    5ea6:	4770      	bx	lr
	return 0;
      }
    }
    else
    {
      return 0;
    5ea8:	2000      	movs	r0, #0
    5eaa:	4770      	bx	lr
	return 0;
    5eac:	2000      	movs	r0, #0
    }
  }
}
    5eae:	4770      	bx	lr

00005eb0 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    5eb0:	b570      	push	{r4, r5, r6, lr}
    5eb2:	4604      	mov	r4, r0
    5eb4:	460d      	mov	r5, r1
    5eb6:	461e      	mov	r6, r3
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    5eb8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    5ebc:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    5ec0:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
    5ec4:	f7ff ffde 	bl	5e84 <u8g2_is_intersection_decision_tree>
    5ec8:	b138      	cbz	r0, 5eda <u8g2_IsIntersection+0x2a>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    5eca:	4633      	mov	r3, r6
    5ecc:	462a      	mov	r2, r5
    5ece:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
    5ed2:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    5ed6:	f7ff ffd5 	bl	5e84 <u8g2_is_intersection_decision_tree>
}
    5eda:	bd70      	pop	{r4, r5, r6, pc}

00005edc <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    5edc:	b4f0      	push	{r4, r5, r6, r7}
    5ede:	f89d c010 	ldrb.w	ip, [sp, #16]
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    5ee2:	f002 0507 	and.w	r5, r2, #7
  mask = 1;
  mask <<= bit_pos;
    5ee6:	2401      	movs	r4, #1
    5ee8:	40ac      	lsls	r4, r5
    5eea:	b2e4      	uxtb	r4, r4

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    5eec:	f890 7092 	ldrb.w	r7, [r0, #146]	; 0x92
    5ef0:	2f01      	cmp	r7, #1
    5ef2:	d91c      	bls.n	5f2e <u8g2_ll_hvline_vertical_top_lsb+0x52>
  or_mask = 0;
    5ef4:	2600      	movs	r6, #0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    5ef6:	2f01      	cmp	r7, #1
    5ef8:	d01b      	beq.n	5f32 <u8g2_ll_hvline_vertical_top_lsb+0x56>
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    5efa:	f022 0207 	bic.w	r2, r2, #7
    5efe:	b292      	uxth	r2, r2
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    5f00:	6807      	ldr	r7, [r0, #0]
    5f02:	7c3f      	ldrb	r7, [r7, #16]
    5f04:	fb17 f202 	smulbb	r2, r7, r2
    5f08:	b292      	uxth	r2, r2
  ptr = u8g2->tile_buf_ptr;
    5f0a:	6b47      	ldr	r7, [r0, #52]	; 0x34
  ptr += offset;
  ptr += x;
    5f0c:	440a      	add	r2, r1
    5f0e:	18b9      	adds	r1, r7, r2
  
  if ( dir == 0 )
    5f10:	f1bc 0f00 	cmp.w	ip, #0
    5f14:	d117      	bne.n	5f46 <u8g2_ll_hvline_vertical_top_lsb+0x6a>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
    5f16:	780a      	ldrb	r2, [r1, #0]
    5f18:	4332      	orrs	r2, r6
    5f1a:	b2d2      	uxtb	r2, r2
	*ptr ^= xor_mask;
    5f1c:	4062      	eors	r2, r4
    5f1e:	f801 2b01 	strb.w	r2, [r1], #1
	ptr++;
	len--;
    5f22:	3b01      	subs	r3, #1
    5f24:	b29b      	uxth	r3, r3
      } while( len != 0 );
    5f26:	2b00      	cmp	r3, #0
    5f28:	d1f5      	bne.n	5f16 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
    5f2a:	bcf0      	pop	{r4, r5, r6, r7}
    5f2c:	4770      	bx	lr
    or_mask  = mask;
    5f2e:	4626      	mov	r6, r4
    5f30:	e7e1      	b.n	5ef6 <u8g2_ll_hvline_vertical_top_lsb+0x1a>
  xor_mask = 0;
    5f32:	2400      	movs	r4, #0
    5f34:	e7e1      	b.n	5efa <u8g2_ll_hvline_vertical_top_lsb+0x1e>
	  or_mask  = 1;
    5f36:	2601      	movs	r6, #1
    5f38:	e016      	b.n	5f68 <u8g2_ll_hvline_vertical_top_lsb+0x8c>
	or_mask <<= 1;
    5f3a:	0076      	lsls	r6, r6, #1
    5f3c:	b2f6      	uxtb	r6, r6
	xor_mask <<= 1;
    5f3e:	0064      	lsls	r4, r4, #1
    5f40:	b2e4      	uxtb	r4, r4
    } while( len != 0 );
    5f42:	2b00      	cmp	r3, #0
    5f44:	d0f1      	beq.n	5f2a <u8g2_ll_hvline_vertical_top_lsb+0x4e>
      *ptr |= or_mask;
    5f46:	780a      	ldrb	r2, [r1, #0]
    5f48:	4332      	orrs	r2, r6
    5f4a:	b2d2      	uxtb	r2, r2
      *ptr ^= xor_mask;
    5f4c:	4062      	eors	r2, r4
    5f4e:	700a      	strb	r2, [r1, #0]
      bit_pos++;
    5f50:	1c6a      	adds	r2, r5, #1
      len--;
    5f52:	3b01      	subs	r3, #1
    5f54:	b29b      	uxth	r3, r3
      if ( bit_pos == 0 )
    5f56:	f012 0507 	ands.w	r5, r2, #7
    5f5a:	d1ee      	bne.n	5f3a <u8g2_ll_hvline_vertical_top_lsb+0x5e>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    5f5c:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    5f5e:	4411      	add	r1, r2
	if ( u8g2->draw_color <= 1 )
    5f60:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    5f64:	2a01      	cmp	r2, #1
    5f66:	d9e6      	bls.n	5f36 <u8g2_ll_hvline_vertical_top_lsb+0x5a>
	if ( u8g2->draw_color != 1 )
    5f68:	2a01      	cmp	r2, #1
    5f6a:	d0ea      	beq.n	5f42 <u8g2_ll_hvline_vertical_top_lsb+0x66>
	  xor_mask = 1;
    5f6c:	2401      	movs	r4, #1
    5f6e:	e7e8      	b.n	5f42 <u8g2_ll_hvline_vertical_top_lsb+0x66>

00005f70 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
    5f70:	b470      	push	{r4, r5, r6}
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
    5f72:	6804      	ldr	r4, [r0, #0]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
    5f74:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
    5f78:	b28b      	uxth	r3, r1
  t *= 8;
    5f7a:	00ca      	lsls	r2, r1, #3
  u8g2->pixel_buf_height = t;
    5f7c:	8782      	strh	r2, [r0, #60]	; 0x3c
  
  t = display_info->tile_width;
    5f7e:	7c22      	ldrb	r2, [r4, #16]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
    5f80:	00d2      	lsls	r2, r2, #3
  u8g2->pixel_buf_width = t;
    5f82:	8742      	strh	r2, [r0, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
    5f84:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
    5f88:	b2ae      	uxth	r6, r5
  t *= 8;
    5f8a:	00ea      	lsls	r2, r5, #3
  u8g2->pixel_curr_row = t;
    5f8c:	87c2      	strh	r2, [r0, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
    5f8e:	4429      	add	r1, r5
    5f90:	7c65      	ldrb	r5, [r4, #17]
    5f92:	42a9      	cmp	r1, r5
    5f94:	dd01      	ble.n	5f9a <u8g2_update_dimension_common+0x2a>
    t = display_info->tile_height - u8g2->tile_curr_row;
    5f96:	1bab      	subs	r3, r5, r6
    5f98:	b29b      	uxth	r3, r3
  t *= 8;
    5f9a:	00db      	lsls	r3, r3, #3
    5f9c:	b29b      	uxth	r3, r3
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
    5f9e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
    5fa2:	4413      	add	r3, r2
    5fa4:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
    5fa8:	8aa3      	ldrh	r3, [r4, #20]
    5faa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
    5fae:	8ae3      	ldrh	r3, [r4, #22]
    5fb0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
    5fb4:	bc70      	pop	{r4, r5, r6}
    5fb6:	4770      	bx	lr

00005fb8 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
    5fb8:	b508      	push	{r3, lr}
  u8g2_update_dimension_common(u8g2);  
    5fba:	f7ff ffd9 	bl	5f70 <u8g2_update_dimension_common>
}
    5fbe:	bd08      	pop	{r3, pc}

00005fc0 <u8g2_apply_clip_window>:
{
    5fc0:	b510      	push	{r4, lr}
    5fc2:	b082      	sub	sp, #8
    5fc4:	4604      	mov	r4, r0
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
    5fc6:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
    5fca:	9300      	str	r3, [sp, #0]
    5fcc:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
    5fd0:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
    5fd4:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    5fd8:	f7ff ff6a 	bl	5eb0 <u8g2_IsIntersection>
    5fdc:	b920      	cbnz	r0, 5fe8 <u8g2_apply_clip_window+0x28>
    u8g2->is_page_clip_window_intersection = 0;
    5fde:	2300      	movs	r3, #0
    5fe0:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
}
    5fe4:	b002      	add	sp, #8
    5fe6:	bd10      	pop	{r4, pc}
    u8g2->is_page_clip_window_intersection = 1;
    5fe8:	2301      	movs	r3, #1
    5fea:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
    5fee:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
    5ff2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    5ff6:	429a      	cmp	r2, r3
    5ff8:	d201      	bcs.n	5ffe <u8g2_apply_clip_window+0x3e>
      u8g2->user_x0 = u8g2->clip_x0;
    5ffa:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
    5ffe:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
    6002:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    6006:	429a      	cmp	r2, r3
    6008:	d901      	bls.n	600e <u8g2_apply_clip_window+0x4e>
      u8g2->user_x1 = u8g2->clip_x1;
    600a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
    600e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    6012:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    6016:	429a      	cmp	r2, r3
    6018:	d201      	bcs.n	601e <u8g2_apply_clip_window+0x5e>
      u8g2->user_y0 = u8g2->clip_y0;
    601a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
    601e:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
    6022:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    6026:	429a      	cmp	r2, r3
    6028:	d9dc      	bls.n	5fe4 <u8g2_apply_clip_window+0x24>
      u8g2->user_y1 = u8g2->clip_y1;
    602a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
}
    602e:	e7d9      	b.n	5fe4 <u8g2_apply_clip_window+0x24>

00006030 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
    6030:	b508      	push	{r3, lr}
  u8g2->user_x0 = 0;
    6032:	2200      	movs	r2, #0
    6034:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
    6038:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    603c:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
    6040:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
    6044:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
    6048:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
    604c:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
    6050:	f7ff ffb6 	bl	5fc0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
    6054:	bd08      	pop	{r3, pc}

00006056 <u8g2_draw_l90_mirrorr_r0>:
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
}

void u8g2_draw_l90_mirrorr_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    6056:	b530      	push	{r4, r5, lr}
    6058:	b083      	sub	sp, #12
    605a:	f89d 5018 	ldrb.w	r5, [sp, #24]
  u8g2_uint_t xx;
  xx = u8g2->width;
    605e:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
  xx -= x;
    6062:	1a61      	subs	r1, r4, r1
    6064:	b289      	uxth	r1, r1
  if ( (dir & 1) == 0 )
    6066:	f015 0f01 	tst.w	r5, #1
    606a:	d106      	bne.n	607a <u8g2_draw_l90_mirrorr_r0+0x24>
  {
    xx -= len;
    606c:	1ac9      	subs	r1, r1, r3
    606e:	b289      	uxth	r1, r1
  }
  else
  {
    xx--;
  }
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
    6070:	9500      	str	r5, [sp, #0]
    6072:	f7ff fe92 	bl	5d9a <u8g2_draw_hv_line_2dir>
}
    6076:	b003      	add	sp, #12
    6078:	bd30      	pop	{r4, r5, pc}
    xx--;
    607a:	3901      	subs	r1, #1
    607c:	b289      	uxth	r1, r1
    607e:	e7f7      	b.n	6070 <u8g2_draw_l90_mirrorr_r0+0x1a>

00006080 <u8g2_SetMaxClipWindow>:
{
    6080:	b508      	push	{r3, lr}
  u8g2->clip_x0 = 0;
    6082:	2200      	movs	r2, #0
    6084:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  u8g2->clip_y0 = 0;
    6088:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
    608c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6090:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
    6094:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  u8g2->cb->update_page_win(u8g2);
    6098:	6b03      	ldr	r3, [r0, #48]	; 0x30
    609a:	685b      	ldr	r3, [r3, #4]
    609c:	4798      	blx	r3
}
    609e:	bd08      	pop	{r3, pc}

000060a0 <u8g2_SetupBuffer>:
{
    60a0:	b570      	push	{r4, r5, r6, lr}
    60a2:	4604      	mov	r4, r0
    60a4:	9e04      	ldr	r6, [sp, #16]
  u8g2->font = NULL;
    60a6:	2500      	movs	r5, #0
    60a8:	6585      	str	r5, [r0, #88]	; 0x58
  u8g2->ll_hvline = ll_hvline_cb;
    60aa:	62c3      	str	r3, [r0, #44]	; 0x2c
  u8g2->tile_buf_ptr = buf;
    60ac:	6341      	str	r1, [r0, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
    60ae:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  u8g2->tile_curr_row = 0;
    60b2:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    60b6:	f880 506d 	strb.w	r5, [r0, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
    60ba:	f880 5091 	strb.w	r5, [r0, #145]	; 0x91
  u8g2->draw_color = 1;
    60be:	2301      	movs	r3, #1
    60c0:	f880 3092 	strb.w	r3, [r0, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
    60c4:	f880 3093 	strb.w	r3, [r0, #147]	; 0x93
  u8g2->cb = u8g2_cb;
    60c8:	6306      	str	r6, [r0, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
    60ca:	6833      	ldr	r3, [r6, #0]
    60cc:	4798      	blx	r3
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    60ce:	4620      	mov	r0, r4
    60d0:	f7ff ffd6 	bl	6080 <u8g2_SetMaxClipWindow>
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    60d4:	4620      	mov	r0, r4
    60d6:	f7fb fc5d 	bl	1994 <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
    60da:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
}
    60de:	bd70      	pop	{r4, r5, r6, pc}

000060e0 <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
    60e0:	b119      	cbz	r1, 60ea <u8x8_ascii_next+0xa>
    60e2:	290a      	cmp	r1, #10
    60e4:	d004      	beq.n	60f0 <u8x8_ascii_next+0x10>
    return 0x0ffff;	/* end of string detected*/
  return b;
    60e6:	b288      	uxth	r0, r1
    60e8:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected*/
    60ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
    60ee:	4770      	bx	lr
    60f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    60f4:	4770      	bx	lr

000060f6 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    60f6:	2300      	movs	r3, #0
    60f8:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
}
    60fc:	4770      	bx	lr

000060fe <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
    60fe:	b510      	push	{r4, lr}
    6100:	460a      	mov	r2, r1
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
    6102:	6904      	ldr	r4, [r0, #16]
    6104:	2300      	movs	r3, #0
    6106:	2120      	movs	r1, #32
    6108:	47a0      	blx	r4
}
    610a:	bd10      	pop	{r4, pc}

0000610c <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    610c:	b510      	push	{r4, lr}
    610e:	4613      	mov	r3, r2
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    6110:	6904      	ldr	r4, [r0, #16]
    6112:	460a      	mov	r2, r1
    6114:	2117      	movs	r1, #23
    6116:	47a0      	blx	r4
}
    6118:	bd10      	pop	{r4, pc}

0000611a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    611a:	b500      	push	{lr}
    611c:	b083      	sub	sp, #12
    611e:	f88d 1007 	strb.w	r1, [sp, #7]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    6122:	f10d 0207 	add.w	r2, sp, #7
    6126:	2101      	movs	r1, #1
    6128:	f7ff fff0 	bl	610c <u8x8_byte_SendBytes>
}
    612c:	b003      	add	sp, #12
    612e:	f85d fb04 	ldr.w	pc, [sp], #4

00006132 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
    6132:	b510      	push	{r4, lr}
    6134:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
    6136:	68c4      	ldr	r4, [r0, #12]
    6138:	2300      	movs	r3, #0
    613a:	2115      	movs	r1, #21
    613c:	47a0      	blx	r4
}
    613e:	bd10      	pop	{r4, pc}

00006140 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
    6140:	b510      	push	{r4, lr}
    6142:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
    6144:	68c4      	ldr	r4, [r0, #12]
    6146:	2300      	movs	r3, #0
    6148:	2116      	movs	r1, #22
    614a:	47a0      	blx	r4
}
    614c:	bd10      	pop	{r4, pc}

0000614e <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    614e:	b510      	push	{r4, lr}
    6150:	4613      	mov	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
    6152:	68c4      	ldr	r4, [r0, #12]
    6154:	460a      	mov	r2, r1
    6156:	2117      	movs	r1, #23
    6158:	47a0      	blx	r4
}
    615a:	bd10      	pop	{r4, pc}

0000615c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
    615c:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
    615e:	68c4      	ldr	r4, [r0, #12]
    6160:	2300      	movs	r3, #0
    6162:	461a      	mov	r2, r3
    6164:	2118      	movs	r1, #24
    6166:	47a0      	blx	r4
}
    6168:	bd10      	pop	{r4, pc}

0000616a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
    616a:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    616c:	68c4      	ldr	r4, [r0, #12]
    616e:	2300      	movs	r3, #0
    6170:	461a      	mov	r2, r3
    6172:	2119      	movs	r1, #25
    6174:	47a0      	blx	r4
}
    6176:	bd10      	pop	{r4, pc}

00006178 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
    6178:	b570      	push	{r4, r5, r6, lr}
    617a:	b082      	sub	sp, #8
    617c:	4606      	mov	r6, r0
    617e:	460d      	mov	r5, r1
    6180:	e016      	b.n	61b0 <u8x8_cad_SendSequence+0x38>

  for(;;)
  {
    cmd = *data;
    data++;
    switch( cmd )
    6182:	2915      	cmp	r1, #21
    6184:	d20c      	bcs.n	61a0 <u8x8_cad_SendSequence+0x28>
	  break;
      default:
	return;
    }
  }
}
    6186:	b002      	add	sp, #8
    6188:	bd70      	pop	{r4, r5, r6, pc}
    switch( cmd )
    618a:	29fe      	cmp	r1, #254	; 0xfe
    618c:	d1fb      	bne.n	6186 <u8x8_cad_SendSequence+0xe>
	  v = *data;
    618e:	7822      	ldrb	r2, [r4, #0]
    6190:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
    6194:	2129      	movs	r1, #41	; 0x29
    6196:	4630      	mov	r0, r6
    6198:	f000 f8b7 	bl	630a <u8x8_gpio_call>
	  data++;
    619c:	3502      	adds	r5, #2
	  break;
    619e:	e007      	b.n	61b0 <u8x8_cad_SendSequence+0x38>
	  v = *data;
    61a0:	7822      	ldrb	r2, [r4, #0]
    61a2:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
    61a6:	68f4      	ldr	r4, [r6, #12]
    61a8:	2300      	movs	r3, #0
    61aa:	4630      	mov	r0, r6
    61ac:	47a0      	blx	r4
	  data++;
    61ae:	3502      	adds	r5, #2
    cmd = *data;
    61b0:	462c      	mov	r4, r5
    61b2:	f814 1b01 	ldrb.w	r1, [r4], #1
    switch( cmd )
    61b6:	2919      	cmp	r1, #25
    61b8:	d8e7      	bhi.n	618a <u8x8_cad_SendSequence+0x12>
    61ba:	2918      	cmp	r1, #24
    61bc:	d20e      	bcs.n	61dc <u8x8_cad_SendSequence+0x64>
    61be:	2916      	cmp	r1, #22
    61c0:	d9df      	bls.n	6182 <u8x8_cad_SendSequence+0xa>
    61c2:	2917      	cmp	r1, #23
    61c4:	d1df      	bne.n	6186 <u8x8_cad_SendSequence+0xe>
	  v = *data;
    61c6:	7823      	ldrb	r3, [r4, #0]
    61c8:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_cad_SendData(u8x8, 1, &v);
    61cc:	f10d 0207 	add.w	r2, sp, #7
    61d0:	2101      	movs	r1, #1
    61d2:	4630      	mov	r0, r6
    61d4:	f7ff ffbb 	bl	614e <u8x8_cad_SendData>
	  data++;
    61d8:	3502      	adds	r5, #2
	  break;
    61da:	e7e9      	b.n	61b0 <u8x8_cad_SendSequence+0x38>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
    61dc:	68f5      	ldr	r5, [r6, #12]
    61de:	2300      	movs	r3, #0
    61e0:	461a      	mov	r2, r3
    61e2:	4630      	mov	r0, r6
    61e4:	47a8      	blx	r5
    data++;
    61e6:	4625      	mov	r5, r4
	  break;
    61e8:	e7e2      	b.n	61b0 <u8x8_cad_SendSequence+0x38>

000061ea <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    61ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61ee:	4604      	mov	r4, r0
    61f0:	460d      	mov	r5, r1
    61f2:	4616      	mov	r6, r2
    61f4:	461f      	mov	r7, r3
  switch(msg)
    61f6:	f1a1 0314 	sub.w	r3, r1, #20
    61fa:	2b05      	cmp	r3, #5
    61fc:	d822      	bhi.n	6244 <u8x8_cad_001+0x5a>
    61fe:	e8df f003 	tbb	[pc, r3]
    6202:	0318      	.short	0x0318
    6204:	1818150c 	.word	0x1818150c
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
    6208:	2100      	movs	r1, #0
    620a:	f7ff ff78 	bl	60fe <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    620e:	4631      	mov	r1, r6
    6210:	4620      	mov	r0, r4
    6212:	f7ff ff82 	bl	611a <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    6216:	2001      	movs	r0, #1
      break;
    6218:	e012      	b.n	6240 <u8x8_cad_001+0x56>
      u8x8_byte_SetDC(u8x8, 0);
    621a:	2100      	movs	r1, #0
    621c:	f7ff ff6f 	bl	60fe <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    6220:	4631      	mov	r1, r6
    6222:	4620      	mov	r0, r4
    6224:	f7ff ff79 	bl	611a <u8x8_byte_SendByte>
  return 1;
    6228:	2001      	movs	r0, #1
      break;
    622a:	e009      	b.n	6240 <u8x8_cad_001+0x56>
      u8x8_byte_SetDC(u8x8, 1);
    622c:	2101      	movs	r1, #1
    622e:	f7ff ff66 	bl	60fe <u8x8_byte_SetDC>
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    6232:	f8d4 8010 	ldr.w	r8, [r4, #16]
    6236:	463b      	mov	r3, r7
    6238:	4632      	mov	r2, r6
    623a:	4629      	mov	r1, r5
    623c:	4620      	mov	r0, r4
    623e:	47c0      	blx	r8
}
    6240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return 1;
    6244:	2000      	movs	r0, #0
    6246:	e7fb      	b.n	6240 <u8x8_cad_001+0x56>

00006248 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
    6248:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
    624a:	7c8b      	ldrb	r3, [r1, #18]
    624c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
    6250:	4770      	bx	lr

00006252 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
    6252:	b538      	push	{r3, r4, r5, lr}
    6254:	4604      	mov	r4, r0
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
    6256:	6945      	ldr	r5, [r0, #20]
    6258:	2300      	movs	r3, #0
    625a:	461a      	mov	r2, r3
    625c:	2128      	movs	r1, #40	; 0x28
    625e:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
    6260:	68e5      	ldr	r5, [r4, #12]
    6262:	2300      	movs	r3, #0
    6264:	461a      	mov	r2, r3
    6266:	2114      	movs	r1, #20
    6268:	4620      	mov	r0, r4
    626a:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
    626c:	2201      	movs	r2, #1
    626e:	214b      	movs	r1, #75	; 0x4b
    6270:	4620      	mov	r0, r4
    6272:	f000 f84a 	bl	630a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
    6276:	6823      	ldr	r3, [r4, #0]
    6278:	791a      	ldrb	r2, [r3, #4]
    627a:	2129      	movs	r1, #41	; 0x29
    627c:	4620      	mov	r0, r4
    627e:	f000 f844 	bl	630a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
    6282:	2200      	movs	r2, #0
    6284:	214b      	movs	r1, #75	; 0x4b
    6286:	4620      	mov	r0, r4
    6288:	f000 f83f 	bl	630a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
    628c:	6823      	ldr	r3, [r4, #0]
    628e:	791a      	ldrb	r2, [r3, #4]
    6290:	2129      	movs	r1, #41	; 0x29
    6292:	4620      	mov	r0, r4
    6294:	f000 f839 	bl	630a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
    6298:	2201      	movs	r2, #1
    629a:	214b      	movs	r1, #75	; 0x4b
    629c:	4620      	mov	r0, r4
    629e:	f000 f834 	bl	630a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
    62a2:	6823      	ldr	r3, [r4, #0]
    62a4:	795a      	ldrb	r2, [r3, #5]
    62a6:	2129      	movs	r1, #41	; 0x29
    62a8:	4620      	mov	r0, r4
    62aa:	f000 f82e 	bl	630a <u8x8_gpio_call>
}    
    62ae:	bd38      	pop	{r3, r4, r5, pc}

000062b0 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
    62b0:	b510      	push	{r4, lr}
    62b2:	b082      	sub	sp, #8
  u8x8_tile_t tile;
  tile.x_pos = x;
    62b4:	f88d 1005 	strb.w	r1, [sp, #5]
  tile.y_pos = y;
    62b8:	f88d 2006 	strb.w	r2, [sp, #6]
  tile.cnt = cnt;
    62bc:	f88d 3004 	strb.w	r3, [sp, #4]
  tile.tile_ptr = tile_ptr;
    62c0:	9b04      	ldr	r3, [sp, #16]
    62c2:	9300      	str	r3, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
    62c4:	6884      	ldr	r4, [r0, #8]
    62c6:	466b      	mov	r3, sp
    62c8:	2201      	movs	r2, #1
    62ca:	210f      	movs	r1, #15
    62cc:	47a0      	blx	r4
}
    62ce:	b002      	add	sp, #8
    62d0:	bd10      	pop	{r4, pc}

000062d2 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
    62d2:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
    62d4:	6884      	ldr	r4, [r0, #8]
    62d6:	2300      	movs	r3, #0
    62d8:	461a      	mov	r2, r3
    62da:	2109      	movs	r1, #9
    62dc:	47a0      	blx	r4
}
    62de:	bd10      	pop	{r4, pc}

000062e0 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
    62e0:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
    62e2:	6884      	ldr	r4, [r0, #8]
    62e4:	2300      	movs	r3, #0
    62e6:	461a      	mov	r2, r3
    62e8:	210a      	movs	r1, #10
    62ea:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
    62ec:	bd10      	pop	{r4, pc}

000062ee <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
    62ee:	b510      	push	{r4, lr}
    62f0:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
    62f2:	6884      	ldr	r4, [r0, #8]
    62f4:	2300      	movs	r3, #0
    62f6:	210b      	movs	r1, #11
    62f8:	47a0      	blx	r4
}
    62fa:	bd10      	pop	{r4, pc}

000062fc <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
    62fc:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    62fe:	6884      	ldr	r4, [r0, #8]
    6300:	2300      	movs	r3, #0
    6302:	461a      	mov	r2, r3
    6304:	2110      	movs	r1, #16
    6306:	47a0      	blx	r4
}
    6308:	bd10      	pop	{r4, pc}

0000630a <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
    630a:	b510      	push	{r4, lr}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    630c:	6944      	ldr	r4, [r0, #20]
    630e:	2300      	movs	r3, #0
    6310:	47a0      	blx	r4
}
    6312:	bd10      	pop	{r4, pc}

00006314 <u8x8_dummy_cb>:
}
    6314:	2000      	movs	r0, #0
    6316:	4770      	bx	lr

00006318 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    6318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    631a:	4604      	mov	r4, r0
    631c:	460f      	mov	r7, r1
    631e:	4616      	mov	r6, r2
    6320:	461d      	mov	r5, r3
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    6322:	f7fb fbdb 	bl	1adc <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    6326:	60a7      	str	r7, [r4, #8]
  u8x8->cad_cb = cad_cb;
    6328:	60e6      	str	r6, [r4, #12]
  u8x8->byte_cb = byte_cb;
    632a:	6125      	str	r5, [r4, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    632c:	9b06      	ldr	r3, [sp, #24]
    632e:	6163      	str	r3, [r4, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    6330:	4620      	mov	r0, r4
    6332:	f7ff ffce 	bl	62d2 <u8x8_SetupMemory>
}
    6336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006338 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6338:	4602      	mov	r2, r0
    633a:	b158      	cbz	r0, 6354 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    633c:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    633e:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6342:	2b01      	cmp	r3, #1
    6344:	d003      	beq.n	634e <sys_notify_validate+0x16>
    6346:	2b03      	cmp	r3, #3
    6348:	d107      	bne.n	635a <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    634a:	6803      	ldr	r3, [r0, #0]
    634c:	b143      	cbz	r3, 6360 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    634e:	2000      	movs	r0, #0
    6350:	6090      	str	r0, [r2, #8]
    6352:	4770      	bx	lr
		return -EINVAL;
    6354:	f06f 0015 	mvn.w	r0, #21
    6358:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    635a:	f06f 0015 	mvn.w	r0, #21
    635e:	4770      	bx	lr
			rv = -EINVAL;
    6360:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6364:	4770      	bx	lr

00006366 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    6366:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6368:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    636a:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    636e:	6081      	str	r1, [r0, #8]
	switch (method) {
    6370:	2a03      	cmp	r2, #3
    6372:	d103      	bne.n	637c <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6374:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6376:	2200      	movs	r2, #0
    6378:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    637a:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    637c:	2000      	movs	r0, #0
    637e:	e7fa      	b.n	6376 <sys_notify_finalize+0x10>

00006380 <arch_printk_char_out>:
}
    6380:	2000      	movs	r0, #0
    6382:	4770      	bx	lr

00006384 <str_out>:
{
    6384:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    6386:	680c      	ldr	r4, [r1, #0]
    6388:	b154      	cbz	r4, 63a0 <str_out+0x1c>
    638a:	688a      	ldr	r2, [r1, #8]
    638c:	684b      	ldr	r3, [r1, #4]
    638e:	429a      	cmp	r2, r3
    6390:	da06      	bge.n	63a0 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    6392:	3b01      	subs	r3, #1
    6394:	429a      	cmp	r2, r3
    6396:	d008      	beq.n	63aa <str_out+0x26>
		ctx->str[ctx->count++] = c;
    6398:	1c53      	adds	r3, r2, #1
    639a:	608b      	str	r3, [r1, #8]
    639c:	54a0      	strb	r0, [r4, r2]
    639e:	e002      	b.n	63a6 <str_out+0x22>
		ctx->count++;
    63a0:	688b      	ldr	r3, [r1, #8]
    63a2:	3301      	adds	r3, #1
    63a4:	608b      	str	r3, [r1, #8]
}
    63a6:	bc10      	pop	{r4}
    63a8:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    63aa:	1c53      	adds	r3, r2, #1
    63ac:	608b      	str	r3, [r1, #8]
    63ae:	2300      	movs	r3, #0
    63b0:	54a3      	strb	r3, [r4, r2]
    63b2:	e7f8      	b.n	63a6 <str_out+0x22>

000063b4 <printk>:
{
    63b4:	b40f      	push	{r0, r1, r2, r3}
    63b6:	b500      	push	{lr}
    63b8:	b083      	sub	sp, #12
    63ba:	a904      	add	r1, sp, #16
    63bc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    63c0:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    63c2:	f7fb fbaf 	bl	1b24 <vprintk>
}
    63c6:	b003      	add	sp, #12
    63c8:	f85d eb04 	ldr.w	lr, [sp], #4
    63cc:	b004      	add	sp, #16
    63ce:	4770      	bx	lr

000063d0 <snprintk>:
{
    63d0:	b40c      	push	{r2, r3}
    63d2:	b500      	push	{lr}
    63d4:	b083      	sub	sp, #12
    63d6:	ab04      	add	r3, sp, #16
    63d8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    63dc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    63de:	f7fb fbb1 	bl	1b44 <vsnprintk>
}
    63e2:	b003      	add	sp, #12
    63e4:	f85d eb04 	ldr.w	lr, [sp], #4
    63e8:	b002      	add	sp, #8
    63ea:	4770      	bx	lr

000063ec <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    63ec:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    63f0:	8b01      	ldrh	r1, [r0, #24]
    63f2:	f021 0107 	bic.w	r1, r1, #7
    63f6:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    63f8:	8301      	strh	r1, [r0, #24]
}
    63fa:	4770      	bx	lr

000063fc <notify_monitors>:
{
    63fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6400:	4606      	mov	r6, r0
    6402:	460f      	mov	r7, r1
    6404:	4690      	mov	r8, r2
	return list->head;
    6406:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    6408:	b119      	cbz	r1, 6412 <notify_monitors+0x16>
    640a:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    640c:	b131      	cbz	r1, 641c <notify_monitors+0x20>
	return node->next;
    640e:	680c      	ldr	r4, [r1, #0]
    6410:	e004      	b.n	641c <notify_monitors+0x20>
    6412:	460c      	mov	r4, r1
    6414:	e002      	b.n	641c <notify_monitors+0x20>
    6416:	4623      	mov	r3, r4
    6418:	4621      	mov	r1, r4
    641a:	461c      	mov	r4, r3
    641c:	b159      	cbz	r1, 6436 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    641e:	684d      	ldr	r5, [r1, #4]
    6420:	4643      	mov	r3, r8
    6422:	463a      	mov	r2, r7
    6424:	4630      	mov	r0, r6
    6426:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    6428:	2c00      	cmp	r4, #0
    642a:	d0f4      	beq.n	6416 <notify_monitors+0x1a>
    642c:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    642e:	2c00      	cmp	r4, #0
    6430:	d0f2      	beq.n	6418 <notify_monitors+0x1c>
	return node->next;
    6432:	6823      	ldr	r3, [r4, #0]
    6434:	e7f0      	b.n	6418 <notify_monitors+0x1c>
}
    6436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000643a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    643a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    643c:	f013 0307 	ands.w	r3, r3, #7
    6440:	d103      	bne.n	644a <process_recheck+0x10>
	return list->head;
    6442:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    6444:	b10a      	cbz	r2, 644a <process_recheck+0x10>
		evt = EVT_START;
    6446:	2003      	movs	r0, #3
    6448:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    644a:	2b02      	cmp	r3, #2
    644c:	d003      	beq.n	6456 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    644e:	2b01      	cmp	r3, #1
    6450:	d006      	beq.n	6460 <process_recheck+0x26>
	int evt = EVT_NOP;
    6452:	2000      	movs	r0, #0
    6454:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    6456:	8b42      	ldrh	r2, [r0, #26]
    6458:	2a00      	cmp	r2, #0
    645a:	d1f8      	bne.n	644e <process_recheck+0x14>
		evt = EVT_STOP;
    645c:	2004      	movs	r0, #4
    645e:	4770      	bx	lr
    6460:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    6462:	b10b      	cbz	r3, 6468 <process_recheck+0x2e>
		evt = EVT_RESET;
    6464:	2005      	movs	r0, #5
}
    6466:	4770      	bx	lr
	int evt = EVT_NOP;
    6468:	2000      	movs	r0, #0
    646a:	4770      	bx	lr

0000646c <process_complete>:
{
    646c:	b538      	push	{r3, r4, r5, lr}
    646e:	4604      	mov	r4, r0
    6470:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6472:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    6474:	2a00      	cmp	r2, #0
    6476:	db07      	blt.n	6488 <process_complete+0x1c>
    6478:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    647c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    647e:	2a01      	cmp	r2, #1
    6480:	d90e      	bls.n	64a0 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    6482:	2b04      	cmp	r3, #4
    6484:	d032      	beq.n	64ec <process_complete+0x80>
}
    6486:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    6488:	e9d0 0100 	ldrd	r0, r1, [r0]
    648c:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    6490:	2300      	movs	r3, #0
    6492:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    6494:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    6496:	2101      	movs	r1, #1
    6498:	4620      	mov	r0, r4
    649a:	f7ff ffa7 	bl	63ec <set_state>
    649e:	e7f2      	b.n	6486 <process_complete+0x1a>
		*clients = mgr->clients;
    64a0:	e9d0 0100 	ldrd	r0, r1, [r0]
    64a4:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    64a8:	2200      	movs	r2, #0
    64aa:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    64ac:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    64ae:	2b06      	cmp	r3, #6
    64b0:	d117      	bne.n	64e2 <process_complete+0x76>
	return list->head;
    64b2:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    64b4:	b13b      	cbz	r3, 64c6 <process_complete+0x5a>
				mgr->refs += 1U;
    64b6:	8b62      	ldrh	r2, [r4, #26]
    64b8:	3201      	adds	r2, #1
    64ba:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    64bc:	2b00      	cmp	r3, #0
    64be:	d0f9      	beq.n	64b4 <process_complete+0x48>
	return node->next;
    64c0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    64c2:	2b00      	cmp	r3, #0
    64c4:	d1f6      	bne.n	64b4 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    64c6:	2102      	movs	r1, #2
    64c8:	4620      	mov	r0, r4
    64ca:	f7ff ff8f 	bl	63ec <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    64ce:	4620      	mov	r0, r4
    64d0:	f7ff ffb3 	bl	643a <process_recheck>
    64d4:	2800      	cmp	r0, #0
    64d6:	d0d6      	beq.n	6486 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    64d8:	8b23      	ldrh	r3, [r4, #24]
    64da:	f043 0320 	orr.w	r3, r3, #32
    64de:	8323      	strh	r3, [r4, #24]
    64e0:	e7d1      	b.n	6486 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    64e2:	2100      	movs	r1, #0
    64e4:	4620      	mov	r0, r4
    64e6:	f7ff ff81 	bl	63ec <set_state>
    64ea:	e7f0      	b.n	64ce <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    64ec:	2100      	movs	r1, #0
    64ee:	f7ff ff7d 	bl	63ec <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    64f2:	4620      	mov	r0, r4
    64f4:	f7ff ffa1 	bl	643a <process_recheck>
    64f8:	2800      	cmp	r0, #0
    64fa:	d0c4      	beq.n	6486 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    64fc:	8b23      	ldrh	r3, [r4, #24]
    64fe:	f043 0320 	orr.w	r3, r3, #32
    6502:	8323      	strh	r3, [r4, #24]
}
    6504:	e7bf      	b.n	6486 <process_complete+0x1a>

00006506 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    6506:	b158      	cbz	r0, 6520 <validate_args+0x1a>
{
    6508:	b510      	push	{r4, lr}
    650a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    650c:	b159      	cbz	r1, 6526 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    650e:	1d08      	adds	r0, r1, #4
    6510:	f7ff ff12 	bl	6338 <sys_notify_validate>
	if ((rv == 0)
    6514:	b918      	cbnz	r0, 651e <validate_args+0x18>
	    && ((cli->notify.flags
    6516:	68a3      	ldr	r3, [r4, #8]
    6518:	f033 0303 	bics.w	r3, r3, #3
    651c:	d106      	bne.n	652c <validate_args+0x26>
}
    651e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    6520:	f06f 0015 	mvn.w	r0, #21
}
    6524:	4770      	bx	lr
		return -EINVAL;
    6526:	f06f 0015 	mvn.w	r0, #21
    652a:	e7f8      	b.n	651e <validate_args+0x18>
		rv = -EINVAL;
    652c:	f06f 0015 	mvn.w	r0, #21
    6530:	e7f5      	b.n	651e <validate_args+0x18>

00006532 <notify_one>:
{
    6532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6536:	4607      	mov	r7, r0
    6538:	460c      	mov	r4, r1
    653a:	4616      	mov	r6, r2
    653c:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    653e:	4619      	mov	r1, r3
    6540:	1d20      	adds	r0, r4, #4
    6542:	f7ff ff10 	bl	6366 <sys_notify_finalize>
	if (cb) {
    6546:	b128      	cbz	r0, 6554 <notify_one+0x22>
    6548:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    654a:	462b      	mov	r3, r5
    654c:	4632      	mov	r2, r6
    654e:	4621      	mov	r1, r4
    6550:	4638      	mov	r0, r7
    6552:	47c0      	blx	r8
}
    6554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006558 <notify_all>:
{
    6558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    655c:	4681      	mov	r9, r0
    655e:	460c      	mov	r4, r1
    6560:	4690      	mov	r8, r2
    6562:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    6564:	e005      	b.n	6572 <notify_all+0x1a>
	list->tail = node;
    6566:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    6568:	463b      	mov	r3, r7
    656a:	4642      	mov	r2, r8
    656c:	4648      	mov	r0, r9
    656e:	f7ff ffe0 	bl	6532 <notify_one>
	return list->head;
    6572:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    6574:	b129      	cbz	r1, 6582 <notify_all+0x2a>
	return node->next;
    6576:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    6578:	6025      	str	r5, [r4, #0]
	return list->tail;
    657a:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    657c:	428e      	cmp	r6, r1
    657e:	d1f3      	bne.n	6568 <notify_all+0x10>
    6580:	e7f1      	b.n	6566 <notify_all+0xe>
}
    6582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006586 <transition_complete>:
{
    6586:	b510      	push	{r4, lr}
	__asm__ volatile(
    6588:	f04f 0420 	mov.w	r4, #32
    658c:	f3ef 8211 	mrs	r2, BASEPRI
    6590:	f384 8812 	msr	BASEPRI_MAX, r4
    6594:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6598:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    659a:	2101      	movs	r1, #1
    659c:	f7fb fae8 	bl	1b70 <process_event>
}
    65a0:	bd10      	pop	{r4, pc}

000065a2 <onoff_manager_init>:
	if ((mgr == NULL)
    65a2:	4603      	mov	r3, r0
    65a4:	b168      	cbz	r0, 65c2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    65a6:	b179      	cbz	r1, 65c8 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    65a8:	680a      	ldr	r2, [r1, #0]
    65aa:	b182      	cbz	r2, 65ce <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    65ac:	684a      	ldr	r2, [r1, #4]
    65ae:	b18a      	cbz	r2, 65d4 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    65b0:	2000      	movs	r0, #0
    65b2:	6018      	str	r0, [r3, #0]
    65b4:	6058      	str	r0, [r3, #4]
    65b6:	6098      	str	r0, [r3, #8]
    65b8:	60d8      	str	r0, [r3, #12]
    65ba:	6158      	str	r0, [r3, #20]
    65bc:	6198      	str	r0, [r3, #24]
    65be:	6119      	str	r1, [r3, #16]
	return 0;
    65c0:	4770      	bx	lr
		return -EINVAL;
    65c2:	f06f 0015 	mvn.w	r0, #21
    65c6:	4770      	bx	lr
    65c8:	f06f 0015 	mvn.w	r0, #21
    65cc:	4770      	bx	lr
    65ce:	f06f 0015 	mvn.w	r0, #21
    65d2:	4770      	bx	lr
    65d4:	f06f 0015 	mvn.w	r0, #21
}
    65d8:	4770      	bx	lr

000065da <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    65da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65dc:	4604      	mov	r4, r0
    65de:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    65e0:	f7ff ff91 	bl	6506 <validate_args>

	if (rv < 0) {
    65e4:	1e06      	subs	r6, r0, #0
    65e6:	db37      	blt.n	6658 <onoff_request+0x7e>
    65e8:	f04f 0320 	mov.w	r3, #32
    65ec:	f3ef 8211 	mrs	r2, BASEPRI
    65f0:	f383 8812 	msr	BASEPRI_MAX, r3
    65f4:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    65f8:	8b25      	ldrh	r5, [r4, #24]
    65fa:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    65fe:	8b63      	ldrh	r3, [r4, #26]
    6600:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6604:	428b      	cmp	r3, r1
    6606:	d02f      	beq.n	6668 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    6608:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    660a:	2d02      	cmp	r5, #2
    660c:	d00c      	beq.n	6628 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    660e:	b18d      	cbz	r5, 6634 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    6610:	2d04      	cmp	r5, #4
    6612:	d00f      	beq.n	6634 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    6614:	2d06      	cmp	r5, #6
    6616:	d00d      	beq.n	6634 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    6618:	2d05      	cmp	r5, #5
    661a:	d01f      	beq.n	665c <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    661c:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    6620:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    6622:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    6624:	4608      	mov	r0, r1
    6626:	e00a      	b.n	663e <onoff_request+0x64>
		mgr->refs += 1U;
    6628:	3301      	adds	r3, #1
    662a:	8363      	strh	r3, [r4, #26]
		notify = true;
    662c:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    662e:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    6630:	4618      	mov	r0, r3
    6632:	e004      	b.n	663e <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    6634:	fab5 f385 	clz	r3, r5
    6638:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    663a:	2100      	movs	r1, #0
		add_client = true;
    663c:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    663e:	b128      	cbz	r0, 664c <onoff_request+0x72>
	parent->next = child;
    6640:	2000      	movs	r0, #0
    6642:	6038      	str	r0, [r7, #0]
	return list->tail;
    6644:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    6646:	b1a8      	cbz	r0, 6674 <onoff_request+0x9a>
	parent->next = child;
    6648:	6007      	str	r7, [r0, #0]
	list->tail = node;
    664a:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    664c:	b9ab      	cbnz	r3, 667a <onoff_request+0xa0>
	__asm__ volatile(
    664e:	f382 8811 	msr	BASEPRI, r2
    6652:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    6656:	b9a9      	cbnz	r1, 6684 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    6658:	4630      	mov	r0, r6
    665a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    665c:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    6660:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    6662:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    6664:	4608      	mov	r0, r1
    6666:	e7ea      	b.n	663e <onoff_request+0x64>
		rv = -EAGAIN;
    6668:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    666c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    666e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    6670:	4608      	mov	r0, r1
    6672:	e7e4      	b.n	663e <onoff_request+0x64>
    6674:	6067      	str	r7, [r4, #4]
	list->head = node;
    6676:	6027      	str	r7, [r4, #0]
}
    6678:	e7e8      	b.n	664c <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    667a:	2102      	movs	r1, #2
    667c:	4620      	mov	r0, r4
    667e:	f7fb fa77 	bl	1b70 <process_event>
    6682:	e7e9      	b.n	6658 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    6684:	2300      	movs	r3, #0
    6686:	462a      	mov	r2, r5
    6688:	4639      	mov	r1, r7
    668a:	4620      	mov	r0, r4
    668c:	f7ff ff51 	bl	6532 <notify_one>
    6690:	e7e2      	b.n	6658 <onoff_request+0x7e>

00006692 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6692:	b508      	push	{r3, lr}
    6694:	4604      	mov	r4, r0
    6696:	4608      	mov	r0, r1
    6698:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    669a:	461a      	mov	r2, r3
    669c:	47a0      	blx	r4
	return z_impl_z_current_get();
    669e:	f7fe fd69 	bl	5174 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    66a2:	f7fc fb9b 	bl	2ddc <z_impl_k_thread_abort>

000066a6 <extract_decimal>:
{
    66a6:	b410      	push	{r4}
    66a8:	4604      	mov	r4, r0
	const char *sp = *str;
    66aa:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    66ac:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    66ae:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    66b0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    66b4:	2909      	cmp	r1, #9
    66b6:	d806      	bhi.n	66c6 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    66b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    66bc:	3201      	adds	r2, #1
    66be:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    66c2:	3830      	subs	r0, #48	; 0x30
    66c4:	e7f3      	b.n	66ae <extract_decimal+0x8>
	*str = sp;
    66c6:	6022      	str	r2, [r4, #0]
}
    66c8:	bc10      	pop	{r4}
    66ca:	4770      	bx	lr

000066cc <encode_uint>:
{
    66cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    66d0:	b083      	sub	sp, #12
    66d2:	4604      	mov	r4, r0
    66d4:	460d      	mov	r5, r1
    66d6:	9201      	str	r2, [sp, #4]
    66d8:	469a      	mov	sl, r3
    66da:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    66de:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    66e0:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    66e4:	2b6f      	cmp	r3, #111	; 0x6f
    66e6:	d00f      	beq.n	6708 <encode_uint+0x3c>
    66e8:	d906      	bls.n	66f8 <encode_uint+0x2c>
    66ea:	2b70      	cmp	r3, #112	; 0x70
    66ec:	d00f      	beq.n	670e <encode_uint+0x42>
    66ee:	2b78      	cmp	r3, #120	; 0x78
    66f0:	d110      	bne.n	6714 <encode_uint+0x48>
		return 16;
    66f2:	f04f 0910 	mov.w	r9, #16
    66f6:	e026      	b.n	6746 <encode_uint+0x7a>
	switch (specifier) {
    66f8:	2b58      	cmp	r3, #88	; 0x58
    66fa:	d002      	beq.n	6702 <encode_uint+0x36>
    66fc:	f04f 090a 	mov.w	r9, #10
    6700:	e021      	b.n	6746 <encode_uint+0x7a>
		return 16;
    6702:	f04f 0910 	mov.w	r9, #16
    6706:	e01e      	b.n	6746 <encode_uint+0x7a>
		return 8;
    6708:	f04f 0908 	mov.w	r9, #8
    670c:	e01b      	b.n	6746 <encode_uint+0x7a>
		return 16;
    670e:	f04f 0910 	mov.w	r9, #16
    6712:	e018      	b.n	6746 <encode_uint+0x7a>
	switch (specifier) {
    6714:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    6718:	e015      	b.n	6746 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    671a:	f1bb 0f19 	cmp.w	fp, #25
    671e:	d820      	bhi.n	6762 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    6720:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6722:	3237      	adds	r2, #55	; 0x37
    6724:	b2d2      	uxtb	r2, r2
    6726:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    672a:	4632      	mov	r2, r6
    672c:	463b      	mov	r3, r7
    672e:	4620      	mov	r0, r4
    6730:	4629      	mov	r1, r5
    6732:	f7f9 fcd3 	bl	dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    6736:	42bd      	cmp	r5, r7
    6738:	bf08      	it	eq
    673a:	42b4      	cmpeq	r4, r6
    673c:	d315      	bcc.n	676a <encode_uint+0x9e>
    673e:	45d0      	cmp	r8, sl
    6740:	d913      	bls.n	676a <encode_uint+0x9e>
		value /= radix;
    6742:	4604      	mov	r4, r0
    6744:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    6746:	464e      	mov	r6, r9
    6748:	2700      	movs	r7, #0
    674a:	464a      	mov	r2, r9
    674c:	463b      	mov	r3, r7
    674e:	4620      	mov	r0, r4
    6750:	4629      	mov	r1, r5
    6752:	f7f9 fcc3 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6756:	2a09      	cmp	r2, #9
    6758:	d8df      	bhi.n	671a <encode_uint+0x4e>
    675a:	b2d2      	uxtb	r2, r2
    675c:	3230      	adds	r2, #48	; 0x30
    675e:	b2d2      	uxtb	r2, r2
    6760:	e7e1      	b.n	6726 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    6762:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6764:	3257      	adds	r2, #87	; 0x57
    6766:	b2d2      	uxtb	r2, r2
    6768:	e7dd      	b.n	6726 <encode_uint+0x5a>
	if (conv->flag_hash) {
    676a:	9b01      	ldr	r3, [sp, #4]
    676c:	781b      	ldrb	r3, [r3, #0]
    676e:	f013 0f20 	tst.w	r3, #32
    6772:	d005      	beq.n	6780 <encode_uint+0xb4>
		if (radix == 8) {
    6774:	f1b9 0f08 	cmp.w	r9, #8
    6778:	d006      	beq.n	6788 <encode_uint+0xbc>
		} else if (radix == 16) {
    677a:	f1b9 0f10 	cmp.w	r9, #16
    677e:	d009      	beq.n	6794 <encode_uint+0xc8>
}
    6780:	4640      	mov	r0, r8
    6782:	b003      	add	sp, #12
    6784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    6788:	9a01      	ldr	r2, [sp, #4]
    678a:	7893      	ldrb	r3, [r2, #2]
    678c:	f043 0308 	orr.w	r3, r3, #8
    6790:	7093      	strb	r3, [r2, #2]
    6792:	e7f5      	b.n	6780 <encode_uint+0xb4>
			conv->altform_0c = true;
    6794:	9a01      	ldr	r2, [sp, #4]
    6796:	7893      	ldrb	r3, [r2, #2]
    6798:	f043 0310 	orr.w	r3, r3, #16
    679c:	7093      	strb	r3, [r2, #2]
    679e:	e7ef      	b.n	6780 <encode_uint+0xb4>

000067a0 <outs>:
{
    67a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67a4:	4607      	mov	r7, r0
    67a6:	460e      	mov	r6, r1
    67a8:	4614      	mov	r4, r2
    67aa:	4698      	mov	r8, r3
	size_t count = 0;
    67ac:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    67ae:	e006      	b.n	67be <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    67b0:	4631      	mov	r1, r6
    67b2:	f814 0b01 	ldrb.w	r0, [r4], #1
    67b6:	47b8      	blx	r7
		if (rc < 0) {
    67b8:	2800      	cmp	r0, #0
    67ba:	db09      	blt.n	67d0 <outs+0x30>
		++count;
    67bc:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    67be:	4544      	cmp	r4, r8
    67c0:	d3f6      	bcc.n	67b0 <outs+0x10>
    67c2:	f1b8 0f00 	cmp.w	r8, #0
    67c6:	d102      	bne.n	67ce <outs+0x2e>
    67c8:	7823      	ldrb	r3, [r4, #0]
    67ca:	2b00      	cmp	r3, #0
    67cc:	d1f0      	bne.n	67b0 <outs+0x10>
	return (int)count;
    67ce:	4628      	mov	r0, r5
}
    67d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000067d4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    67d4:	4770      	bx	lr

000067d6 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    67d6:	2200      	movs	r2, #0
    67d8:	6002      	str	r2, [r0, #0]
    67da:	6042      	str	r2, [r0, #4]
    67dc:	6082      	str	r2, [r0, #8]
}
    67de:	4770      	bx	lr

000067e0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    67e0:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    67e2:	f000 fe01 	bl	73e8 <z_fatal_error>
}
    67e6:	bd08      	pop	{r3, pc}

000067e8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    67e8:	b508      	push	{r3, lr}
    67ea:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    67ec:	6800      	ldr	r0, [r0, #0]
    67ee:	f7ff fff7 	bl	67e0 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    67f2:	bd08      	pop	{r3, pc}

000067f4 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    67f4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    67f6:	2100      	movs	r1, #0
    67f8:	2001      	movs	r0, #1
    67fa:	f7ff fff1 	bl	67e0 <z_arm_fatal_error>
}
    67fe:	bd08      	pop	{r3, pc}

00006800 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6800:	b508      	push	{r3, lr}
	handler();
    6802:	f7fc f841 	bl	2888 <z_SysNmiOnReset>
	z_arm_int_exit();
    6806:	f7fc f93d 	bl	2a84 <z_arm_exc_exit>
}
    680a:	bd08      	pop	{r3, pc}

0000680c <memory_fault_recoverable>:
}
    680c:	2000      	movs	r0, #0
    680e:	4770      	bx	lr

00006810 <debug_monitor>:
	*recoverable = false;
    6810:	2300      	movs	r3, #0
    6812:	700b      	strb	r3, [r1, #0]
}
    6814:	4770      	bx	lr

00006816 <fault_handle>:
{
    6816:	b508      	push	{r3, lr}
	*recoverable = false;
    6818:	2300      	movs	r3, #0
    681a:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    681c:	1ecb      	subs	r3, r1, #3
    681e:	2b09      	cmp	r3, #9
    6820:	d81a      	bhi.n	6858 <fault_handle+0x42>
    6822:	e8df f003 	tbb	[pc, r3]
    6826:	0905      	.short	0x0905
    6828:	1919110d 	.word	0x1919110d
    682c:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    6830:	4611      	mov	r1, r2
    6832:	f7fc f9b7 	bl	2ba4 <hard_fault>
		break;
    6836:	e010      	b.n	685a <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    6838:	2100      	movs	r1, #0
    683a:	f7fc f96d 	bl	2b18 <mem_manage_fault>
		break;
    683e:	e00c      	b.n	685a <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    6840:	2100      	movs	r1, #0
    6842:	f7fc f92d 	bl	2aa0 <bus_fault>
		break;
    6846:	e008      	b.n	685a <fault_handle+0x44>
		reason = usage_fault(esf);
    6848:	f7fc f954 	bl	2af4 <usage_fault>
		break;
    684c:	e005      	b.n	685a <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    684e:	4611      	mov	r1, r2
    6850:	f7ff ffde 	bl	6810 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6854:	2000      	movs	r0, #0
		break;
    6856:	e000      	b.n	685a <fault_handle+0x44>
	*recoverable = false;
    6858:	2000      	movs	r0, #0
}
    685a:	bd08      	pop	{r3, pc}

0000685c <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    685c:	6843      	ldr	r3, [r0, #4]
    685e:	1e5a      	subs	r2, r3, #1
		&&
    6860:	4213      	tst	r3, r2
    6862:	d106      	bne.n	6872 <mpu_partition_is_valid+0x16>
		&&
    6864:	2b1f      	cmp	r3, #31
    6866:	d906      	bls.n	6876 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    6868:	6803      	ldr	r3, [r0, #0]
		&&
    686a:	421a      	tst	r2, r3
    686c:	d005      	beq.n	687a <mpu_partition_is_valid+0x1e>
    686e:	2000      	movs	r0, #0
    6870:	4770      	bx	lr
    6872:	2000      	movs	r0, #0
    6874:	4770      	bx	lr
    6876:	2000      	movs	r0, #0
    6878:	4770      	bx	lr
    687a:	2001      	movs	r0, #1
}
    687c:	4770      	bx	lr

0000687e <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    687e:	2807      	cmp	r0, #7
    6880:	d805      	bhi.n	688e <region_allocate_and_init+0x10>
{
    6882:	b510      	push	{r4, lr}
    6884:	4604      	mov	r4, r0
	region_init(index, region_conf);
    6886:	f7fc fadf 	bl	2e48 <region_init>
	return index;
    688a:	4620      	mov	r0, r4
}
    688c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    688e:	f06f 0015 	mvn.w	r0, #21
}
    6892:	4770      	bx	lr

00006894 <mpu_configure_region>:
{
    6894:	b500      	push	{lr}
    6896:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    6898:	680b      	ldr	r3, [r1, #0]
    689a:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    689c:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    689e:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    68a0:	2b20      	cmp	r3, #32
    68a2:	d912      	bls.n	68ca <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    68a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    68a8:	d811      	bhi.n	68ce <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    68aa:	3b01      	subs	r3, #1
    68ac:	fab3 f383 	clz	r3, r3
    68b0:	f1c3 031f 	rsb	r3, r3, #31
    68b4:	005b      	lsls	r3, r3, #1
    68b6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    68ba:	4313      	orrs	r3, r2
    68bc:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    68be:	a901      	add	r1, sp, #4
    68c0:	f7ff ffdd 	bl	687e <region_allocate_and_init>
}
    68c4:	b005      	add	sp, #20
    68c6:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    68ca:	2308      	movs	r3, #8
    68cc:	e7f5      	b.n	68ba <mpu_configure_region+0x26>
		return REGION_4G;
    68ce:	233e      	movs	r3, #62	; 0x3e
    68d0:	e7f3      	b.n	68ba <mpu_configure_region+0x26>

000068d2 <mpu_configure_regions>:
{
    68d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    68d6:	4680      	mov	r8, r0
    68d8:	460f      	mov	r7, r1
    68da:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    68dc:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    68de:	2500      	movs	r5, #0
    68e0:	e009      	b.n	68f6 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    68e2:	4621      	mov	r1, r4
    68e4:	b2f0      	uxtb	r0, r6
    68e6:	f7ff ffd5 	bl	6894 <mpu_configure_region>
    68ea:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    68ec:	f110 0f16 	cmn.w	r0, #22
    68f0:	d014      	beq.n	691c <mpu_configure_regions+0x4a>
		reg_index++;
    68f2:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    68f4:	3501      	adds	r5, #1
    68f6:	42bd      	cmp	r5, r7
    68f8:	da10      	bge.n	691c <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    68fa:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    68fe:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    6902:	6862      	ldr	r2, [r4, #4]
    6904:	2a00      	cmp	r2, #0
    6906:	d0f5      	beq.n	68f4 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    6908:	f1b9 0f00 	cmp.w	r9, #0
    690c:	d0e9      	beq.n	68e2 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    690e:	4620      	mov	r0, r4
    6910:	f7ff ffa4 	bl	685c <mpu_partition_is_valid>
		if (do_sanity_check &&
    6914:	2800      	cmp	r0, #0
    6916:	d1e4      	bne.n	68e2 <mpu_configure_regions+0x10>
			return -EINVAL;
    6918:	f06f 0615 	mvn.w	r6, #21
}
    691c:	4630      	mov	r0, r6
    691e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006922 <arm_core_mpu_configure_static_mpu_regions>:
{
    6922:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    6924:	f7fc faa0 	bl	2e68 <mpu_configure_static_mpu_regions>
}
    6928:	bd08      	pop	{r3, pc}

0000692a <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    692a:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    692c:	f7fc faa6 	bl	2e7c <mpu_configure_dynamic_mpu_regions>
}
    6930:	bd08      	pop	{r3, pc}

00006932 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6932:	4602      	mov	r2, r0
    6934:	780b      	ldrb	r3, [r1, #0]
    6936:	b11b      	cbz	r3, 6940 <strcpy+0xe>
		*d = *s;
    6938:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    693c:	3101      	adds	r1, #1
    693e:	e7f9      	b.n	6934 <strcpy+0x2>
	}

	*d = '\0';
    6940:	7013      	strb	r3, [r2, #0]

	return dest;
}
    6942:	4770      	bx	lr

00006944 <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    6944:	4603      	mov	r3, r0
    6946:	b1a2      	cbz	r2, 6972 <strncpy+0x2e>
{
    6948:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    694a:	780c      	ldrb	r4, [r1, #0]
    694c:	b12c      	cbz	r4, 695a <strncpy+0x16>
		*d = *s;
    694e:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    6952:	3101      	adds	r1, #1
		d++;
		n--;
    6954:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    6956:	2a00      	cmp	r2, #0
    6958:	d1f7      	bne.n	694a <strncpy+0x6>
	}

	while (n > 0) {
    695a:	b122      	cbz	r2, 6966 <strncpy+0x22>
		*d = '\0';
    695c:	2100      	movs	r1, #0
    695e:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    6962:	3a01      	subs	r2, #1
    6964:	e7f9      	b.n	695a <strncpy+0x16>
	}

	return dest;
}
    6966:	bc10      	pop	{r4}
    6968:	4770      	bx	lr
		*d = '\0';
    696a:	2100      	movs	r1, #0
    696c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6970:	3a01      	subs	r2, #1
	while (n > 0) {
    6972:	2a00      	cmp	r2, #0
    6974:	d1f9      	bne.n	696a <strncpy+0x26>
    6976:	4770      	bx	lr

00006978 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6978:	4603      	mov	r3, r0
	size_t n = 0;
    697a:	2000      	movs	r0, #0

	while (*s != '\0') {
    697c:	781a      	ldrb	r2, [r3, #0]
    697e:	b112      	cbz	r2, 6986 <strlen+0xe>
		s++;
    6980:	3301      	adds	r3, #1
		n++;
    6982:	3001      	adds	r0, #1
    6984:	e7fa      	b.n	697c <strlen+0x4>
	}

	return n;
}
    6986:	4770      	bx	lr

00006988 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6988:	4603      	mov	r3, r0
	size_t n = 0;
    698a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    698c:	781a      	ldrb	r2, [r3, #0]
    698e:	b122      	cbz	r2, 699a <strnlen+0x12>
    6990:	4288      	cmp	r0, r1
    6992:	d202      	bcs.n	699a <strnlen+0x12>
		s++;
    6994:	3301      	adds	r3, #1
		n++;
    6996:	3001      	adds	r0, #1
    6998:	e7f8      	b.n	698c <strnlen+0x4>
	}

	return n;
}
    699a:	4770      	bx	lr

0000699c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    699c:	7803      	ldrb	r3, [r0, #0]
    699e:	780a      	ldrb	r2, [r1, #0]
    69a0:	4293      	cmp	r3, r2
    69a2:	d103      	bne.n	69ac <strcmp+0x10>
    69a4:	b113      	cbz	r3, 69ac <strcmp+0x10>
		s1++;
    69a6:	3001      	adds	r0, #1
		s2++;
    69a8:	3101      	adds	r1, #1
    69aa:	e7f7      	b.n	699c <strcmp>
	}

	return *s1 - *s2;
}
    69ac:	1a98      	subs	r0, r3, r2
    69ae:	4770      	bx	lr

000069b0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    69b0:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    69b2:	ea80 0301 	eor.w	r3, r0, r1
    69b6:	f013 0f03 	tst.w	r3, #3
    69ba:	d001      	beq.n	69c0 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    69bc:	4603      	mov	r3, r0
    69be:	e017      	b.n	69f0 <memcpy+0x40>
    69c0:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    69c2:	f013 0f03 	tst.w	r3, #3
    69c6:	d00b      	beq.n	69e0 <memcpy+0x30>
			if (n == 0) {
    69c8:	b1a2      	cbz	r2, 69f4 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    69ca:	f811 4b01 	ldrb.w	r4, [r1], #1
    69ce:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    69d2:	3a01      	subs	r2, #1
    69d4:	e7f5      	b.n	69c2 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    69d6:	f851 4b04 	ldr.w	r4, [r1], #4
    69da:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    69de:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    69e0:	2a03      	cmp	r2, #3
    69e2:	d8f8      	bhi.n	69d6 <memcpy+0x26>
    69e4:	e004      	b.n	69f0 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    69e6:	f811 4b01 	ldrb.w	r4, [r1], #1
    69ea:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    69ee:	3a01      	subs	r2, #1
	while (n > 0) {
    69f0:	2a00      	cmp	r2, #0
    69f2:	d1f8      	bne.n	69e6 <memcpy+0x36>
	}

	return d;
}
    69f4:	bc10      	pop	{r4}
    69f6:	4770      	bx	lr

000069f8 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    69f8:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    69fa:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    69fc:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    69fe:	f013 0f03 	tst.w	r3, #3
    6a02:	d004      	beq.n	6a0e <memset+0x16>
		if (n == 0) {
    6a04:	b19a      	cbz	r2, 6a2e <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    6a06:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    6a0a:	3a01      	subs	r2, #1
    6a0c:	e7f7      	b.n	69fe <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    6a0e:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    6a10:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    6a14:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    6a18:	2a03      	cmp	r2, #3
    6a1a:	d906      	bls.n	6a2a <memset+0x32>
		*(d_word++) = c_word;
    6a1c:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    6a20:	3a04      	subs	r2, #4
    6a22:	e7f9      	b.n	6a18 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    6a24:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    6a28:	3a01      	subs	r2, #1
	while (n > 0) {
    6a2a:	2a00      	cmp	r2, #0
    6a2c:	d1fa      	bne.n	6a24 <memset+0x2c>
	}

	return buf;
}
    6a2e:	bc10      	pop	{r4}
    6a30:	4770      	bx	lr

00006a32 <_stdout_hook_default>:
}
    6a32:	f04f 30ff 	mov.w	r0, #4294967295
    6a36:	4770      	bx	lr

00006a38 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    6a38:	684b      	ldr	r3, [r1, #4]
    6a3a:	2b01      	cmp	r3, #1
    6a3c:	dd07      	ble.n	6a4e <sprintf_out+0x16>
		*(p->ptr) = c;
    6a3e:	680b      	ldr	r3, [r1, #0]
    6a40:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    6a42:	680b      	ldr	r3, [r1, #0]
    6a44:	3301      	adds	r3, #1
    6a46:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    6a48:	684b      	ldr	r3, [r1, #4]
    6a4a:	3b01      	subs	r3, #1
    6a4c:	604b      	str	r3, [r1, #4]
}
    6a4e:	2000      	movs	r0, #0
    6a50:	4770      	bx	lr

00006a52 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    6a52:	b084      	sub	sp, #16
    6a54:	ab04      	add	r3, sp, #16
    6a56:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    6a5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6a5e:	2b06      	cmp	r3, #6
    6a60:	d001      	beq.n	6a66 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    6a62:	b004      	add	sp, #16
    6a64:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a6a:	2201      	movs	r2, #1
    6a6c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6a70:	f3bf 8f4f 	dsb	sy
        __WFE();
    6a74:	bf20      	wfe
    while (true)
    6a76:	e7fd      	b.n	6a74 <pm_power_state_set+0x22>

00006a78 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    6a78:	b084      	sub	sp, #16
    6a7a:	ab04      	add	r3, sp, #16
    6a7c:	e903 0007 	stmdb	r3, {r0, r1, r2}
    6a80:	2300      	movs	r3, #0
    6a82:	f383 8811 	msr	BASEPRI, r3
    6a86:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6a8a:	b004      	add	sp, #16
    6a8c:	4770      	bx	lr

00006a8e <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    6a8e:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6a90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6a94:	0089      	lsls	r1, r1, #2
    6a96:	3138      	adds	r1, #56	; 0x38
}
    6a98:	4408      	add	r0, r1
    6a9a:	4770      	bx	lr

00006a9c <get_sub_config>:
	const struct nrf_clock_control_config *config =
    6a9c:	6840      	ldr	r0, [r0, #4]
}
    6a9e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    6aa2:	4770      	bx	lr

00006aa4 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    6aa4:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    6aa6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    6aaa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6aae:	4770      	bx	lr

00006ab0 <get_status>:
{
    6ab0:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6ab2:	b2c9      	uxtb	r1, r1
    6ab4:	f7ff ffeb 	bl	6a8e <get_sub_data>
    6ab8:	6880      	ldr	r0, [r0, #8]
}
    6aba:	f000 0007 	and.w	r0, r0, #7
    6abe:	bd08      	pop	{r3, pc}

00006ac0 <set_off_state>:
	__asm__ volatile(
    6ac0:	f04f 0320 	mov.w	r3, #32
    6ac4:	f3ef 8211 	mrs	r2, BASEPRI
    6ac8:	f383 8812 	msr	BASEPRI_MAX, r3
    6acc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6ad0:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6ad2:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    6ad6:	d001      	beq.n	6adc <set_off_state+0x1c>
    6ad8:	428b      	cmp	r3, r1
    6ada:	d107      	bne.n	6aec <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6adc:	2301      	movs	r3, #1
    6ade:	6003      	str	r3, [r0, #0]
	int err = 0;
    6ae0:	2000      	movs	r0, #0
	__asm__ volatile(
    6ae2:	f382 8811 	msr	BASEPRI, r2
    6ae6:	f3bf 8f6f 	isb	sy
}
    6aea:	4770      	bx	lr
		err = -EPERM;
    6aec:	f04f 30ff 	mov.w	r0, #4294967295
    6af0:	e7f7      	b.n	6ae2 <set_off_state+0x22>

00006af2 <set_starting_state>:
{
    6af2:	b410      	push	{r4}
	__asm__ volatile(
    6af4:	f04f 0320 	mov.w	r3, #32
    6af8:	f3ef 8211 	mrs	r2, BASEPRI
    6afc:	f383 8812 	msr	BASEPRI_MAX, r3
    6b00:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6b04:	6803      	ldr	r3, [r0, #0]
    6b06:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6b0a:	f003 0307 	and.w	r3, r3, #7
    6b0e:	2b01      	cmp	r3, #1
    6b10:	d009      	beq.n	6b26 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    6b12:	428c      	cmp	r4, r1
    6b14:	d00a      	beq.n	6b2c <set_starting_state+0x3a>
		err = -EPERM;
    6b16:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    6b1a:	f382 8811 	msr	BASEPRI, r2
    6b1e:	f3bf 8f6f 	isb	sy
}
    6b22:	bc10      	pop	{r4}
    6b24:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6b26:	6001      	str	r1, [r0, #0]
	int err = 0;
    6b28:	2000      	movs	r0, #0
    6b2a:	e7f6      	b.n	6b1a <set_starting_state+0x28>
		err = -EALREADY;
    6b2c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6b30:	e7f3      	b.n	6b1a <set_starting_state+0x28>

00006b32 <set_on_state>:
	__asm__ volatile(
    6b32:	f04f 0320 	mov.w	r3, #32
    6b36:	f3ef 8211 	mrs	r2, BASEPRI
    6b3a:	f383 8812 	msr	BASEPRI_MAX, r3
    6b3e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6b42:	6803      	ldr	r3, [r0, #0]
    6b44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6b48:	f043 0302 	orr.w	r3, r3, #2
    6b4c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6b4e:	f382 8811 	msr	BASEPRI, r2
    6b52:	f3bf 8f6f 	isb	sy
}
    6b56:	4770      	bx	lr

00006b58 <clkstarted_handle>:
{
    6b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b5a:	4606      	mov	r6, r0
    6b5c:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    6b5e:	f7ff ff96 	bl	6a8e <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    6b62:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    6b64:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    6b66:	2300      	movs	r3, #0
    6b68:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    6b6c:	f7ff ffe1 	bl	6b32 <set_on_state>
	if (callback) {
    6b70:	b11d      	cbz	r5, 6b7a <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    6b72:	463a      	mov	r2, r7
    6b74:	4621      	mov	r1, r4
    6b76:	4630      	mov	r0, r6
    6b78:	47a8      	blx	r5
}
    6b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006b7c <stop>:
{
    6b7c:	b570      	push	{r4, r5, r6, lr}
    6b7e:	4606      	mov	r6, r0
    6b80:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6b82:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6b84:	4621      	mov	r1, r4
    6b86:	f7ff ff82 	bl	6a8e <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    6b8a:	4629      	mov	r1, r5
    6b8c:	3008      	adds	r0, #8
    6b8e:	f7ff ff97 	bl	6ac0 <set_off_state>
	if (err < 0) {
    6b92:	2800      	cmp	r0, #0
    6b94:	db06      	blt.n	6ba4 <stop+0x28>
	get_sub_config(dev, type)->stop();
    6b96:	4621      	mov	r1, r4
    6b98:	4630      	mov	r0, r6
    6b9a:	f7ff ff7f 	bl	6a9c <get_sub_config>
    6b9e:	6843      	ldr	r3, [r0, #4]
    6ba0:	4798      	blx	r3
	return 0;
    6ba2:	2000      	movs	r0, #0
}
    6ba4:	bd70      	pop	{r4, r5, r6, pc}

00006ba6 <api_stop>:
{
    6ba6:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    6ba8:	2280      	movs	r2, #128	; 0x80
    6baa:	f7ff ffe7 	bl	6b7c <stop>
}
    6bae:	bd08      	pop	{r3, pc}

00006bb0 <async_start>:
{
    6bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bb4:	4606      	mov	r6, r0
    6bb6:	4690      	mov	r8, r2
    6bb8:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6bba:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6bbc:	4629      	mov	r1, r5
    6bbe:	f7ff ff66 	bl	6a8e <get_sub_data>
    6bc2:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    6bc4:	9906      	ldr	r1, [sp, #24]
    6bc6:	3008      	adds	r0, #8
    6bc8:	f7ff ff93 	bl	6af2 <set_starting_state>
	if (err < 0) {
    6bcc:	2800      	cmp	r0, #0
    6bce:	db09      	blt.n	6be4 <async_start+0x34>
	subdata->cb = cb;
    6bd0:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    6bd4:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    6bd6:	4629      	mov	r1, r5
    6bd8:	4630      	mov	r0, r6
    6bda:	f7ff ff5f 	bl	6a9c <get_sub_config>
    6bde:	6803      	ldr	r3, [r0, #0]
    6be0:	4798      	blx	r3
	return 0;
    6be2:	2000      	movs	r0, #0
}
    6be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006be8 <api_start>:
{
    6be8:	b510      	push	{r4, lr}
    6bea:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6bec:	2480      	movs	r4, #128	; 0x80
    6bee:	9400      	str	r4, [sp, #0]
    6bf0:	f7ff ffde 	bl	6bb0 <async_start>
}
    6bf4:	b002      	add	sp, #8
    6bf6:	bd10      	pop	{r4, pc}

00006bf8 <onoff_started_callback>:
{
    6bf8:	b510      	push	{r4, lr}
    6bfa:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    6bfc:	b2c9      	uxtb	r1, r1
    6bfe:	f7ff ff51 	bl	6aa4 <get_onoff_manager>
	notify(mgr, 0);
    6c02:	2100      	movs	r1, #0
    6c04:	47a0      	blx	r4
}
    6c06:	bd10      	pop	{r4, pc}

00006c08 <hfclk_start>:
{
    6c08:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6c0a:	2001      	movs	r0, #1
    6c0c:	f7fd faba 	bl	4184 <nrfx_clock_start>
}
    6c10:	bd08      	pop	{r3, pc}

00006c12 <hfclk_stop>:
{
    6c12:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6c14:	2001      	movs	r0, #1
    6c16:	f7fd faf3 	bl	4200 <nrfx_clock_stop>
}
    6c1a:	bd08      	pop	{r3, pc}

00006c1c <lfclk_stop>:
{
    6c1c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6c1e:	2000      	movs	r0, #0
    6c20:	f7fd faee 	bl	4200 <nrfx_clock_stop>
}
    6c24:	bd08      	pop	{r3, pc}

00006c26 <blocking_start_callback>:
{
    6c26:	b508      	push	{r3, lr}
    6c28:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    6c2a:	f7fd fef7 	bl	4a1c <z_impl_k_sem_give>
}
    6c2e:	bd08      	pop	{r3, pc}

00006c30 <gpio_nrfx_port_get_raw>:
	return port->config;
    6c30:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6c32:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6c34:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6c38:	600b      	str	r3, [r1, #0]
}
    6c3a:	2000      	movs	r0, #0
    6c3c:	4770      	bx	lr

00006c3e <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    6c3e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6c40:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6c42:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6c46:	4042      	eors	r2, r0
    6c48:	400a      	ands	r2, r1
    6c4a:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6c4c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    6c50:	2000      	movs	r0, #0
    6c52:	4770      	bx	lr

00006c54 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    6c54:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6c56:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    6c58:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    6c5c:	2000      	movs	r0, #0
    6c5e:	4770      	bx	lr

00006c60 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    6c60:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6c62:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    6c64:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    6c68:	2000      	movs	r0, #0
    6c6a:	4770      	bx	lr

00006c6c <gpio_nrfx_port_toggle_bits>:
	return port->config;
    6c6c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6c6e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6c70:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    6c74:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6c76:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    6c7a:	2000      	movs	r0, #0
    6c7c:	4770      	bx	lr

00006c7e <gpio_nrfx_manage_callback>:
{
    6c7e:	b470      	push	{r4, r5, r6}
	return port->data;
    6c80:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6c82:	1d05      	adds	r5, r0, #4
	return list->head;
    6c84:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
    6c86:	b1db      	cbz	r3, 6cc0 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    6c88:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6c8a:	2400      	movs	r4, #0
    6c8c:	e00a      	b.n	6ca4 <gpio_nrfx_manage_callback+0x26>
	return node->next;
    6c8e:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    6c90:	6043      	str	r3, [r0, #4]
	return list->tail;
    6c92:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    6c94:	42a1      	cmp	r1, r4
    6c96:	d10f      	bne.n	6cb8 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    6c98:	606b      	str	r3, [r5, #4]
}
    6c9a:	e00d      	b.n	6cb8 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    6c9c:	606c      	str	r4, [r5, #4]
}
    6c9e:	e00b      	b.n	6cb8 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6ca0:	461c      	mov	r4, r3
    6ca2:	681b      	ldr	r3, [r3, #0]
    6ca4:	b15b      	cbz	r3, 6cbe <gpio_nrfx_manage_callback+0x40>
    6ca6:	429e      	cmp	r6, r3
    6ca8:	d1fa      	bne.n	6ca0 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    6caa:	2c00      	cmp	r4, #0
    6cac:	d0ef      	beq.n	6c8e <gpio_nrfx_manage_callback+0x10>
	return node->next;
    6cae:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    6cb0:	6023      	str	r3, [r4, #0]
	return list->tail;
    6cb2:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    6cb4:	4299      	cmp	r1, r3
    6cb6:	d0f1      	beq.n	6c9c <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    6cb8:	2300      	movs	r3, #0
    6cba:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6cbc:	e000      	b.n	6cc0 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    6cbe:	b152      	cbz	r2, 6cd6 <gpio_nrfx_manage_callback+0x58>
	if (set) {
    6cc0:	b162      	cbz	r2, 6cdc <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    6cc2:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    6cc4:	600b      	str	r3, [r1, #0]
	list->head = node;
    6cc6:	6041      	str	r1, [r0, #4]
	return list->tail;
    6cc8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    6cca:	b10b      	cbz	r3, 6cd0 <gpio_nrfx_manage_callback+0x52>
	return 0;
    6ccc:	2000      	movs	r0, #0
    6cce:	e006      	b.n	6cde <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    6cd0:	6069      	str	r1, [r5, #4]
    6cd2:	2000      	movs	r0, #0
}
    6cd4:	e003      	b.n	6cde <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    6cd6:	f06f 0015 	mvn.w	r0, #21
    6cda:	e000      	b.n	6cde <gpio_nrfx_manage_callback+0x60>
	return 0;
    6cdc:	2000      	movs	r0, #0
}
    6cde:	bc70      	pop	{r4, r5, r6}
    6ce0:	4770      	bx	lr

00006ce2 <cfg_level_pins>:
{
    6ce2:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    6ce4:	6905      	ldr	r5, [r0, #16]
	return port->config;
    6ce6:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    6ce8:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    6cea:	696a      	ldr	r2, [r5, #20]
    6cec:	69ab      	ldr	r3, [r5, #24]
    6cee:	4313      	orrs	r3, r2
    6cf0:	ea21 0103 	bic.w	r1, r1, r3
	uint32_t bit = 1U << pin;
    6cf4:	2201      	movs	r2, #1
	uint32_t pin = 0U;
    6cf6:	2000      	movs	r0, #0
	while (level_pins) {
    6cf8:	e013      	b.n	6d22 <cfg_level_pins+0x40>
		return NRF_GPIO_PIN_SENSE_HIGH;
    6cfa:	f04f 0c02 	mov.w	ip, #2
    *p_pin = pin_number & 0x1F;
    6cfe:	f003 031f 	and.w	r3, r3, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    6d02:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    6d06:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6d0a:	f857 4023 	ldr.w	r4, [r7, r3, lsl #2]
    6d0e:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    6d12:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
    6d16:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
			level_pins &= ~bit;
    6d1a:	ea21 0102 	bic.w	r1, r1, r2
		++pin;
    6d1e:	3001      	adds	r0, #1
		bit <<= 1;
    6d20:	0052      	lsls	r2, r2, #1
	while (level_pins) {
    6d22:	b171      	cbz	r1, 6d42 <cfg_level_pins+0x60>
		if (level_pins & bit) {
    6d24:	420a      	tst	r2, r1
    6d26:	d0fa      	beq.n	6d1e <cfg_level_pins+0x3c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6d28:	7a34      	ldrb	r4, [r6, #8]
    6d2a:	f000 031f 	and.w	r3, r0, #31
    6d2e:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    6d32:	692c      	ldr	r4, [r5, #16]
    6d34:	40c4      	lsrs	r4, r0
    6d36:	f014 0f01 	tst.w	r4, #1
    6d3a:	d1de      	bne.n	6cfa <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    6d3c:	f04f 0c03 	mov.w	ip, #3
    6d40:	e7dd      	b.n	6cfe <cfg_level_pins+0x1c>
}
    6d42:	bcf0      	pop	{r4, r5, r6, r7}
    6d44:	4770      	bx	lr

00006d46 <check_level_trigger_pins>:
{
    6d46:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d48:	468e      	mov	lr, r1
	return port->data;
    6d4a:	6903      	ldr	r3, [r0, #16]
	return port->config;
    6d4c:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    6d4e:	68d8      	ldr	r0, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    6d50:	695a      	ldr	r2, [r3, #20]
    6d52:	699c      	ldr	r4, [r3, #24]
    6d54:	4322      	orrs	r2, r4
    6d56:	ea20 0c02 	bic.w	ip, r0, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    6d5a:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    6d5c:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    6d60:	6918      	ldr	r0, [r3, #16]
    6d62:	4050      	eors	r0, r2
	uint32_t out = pin_states & level_pins;
    6d64:	ea2c 0000 	bic.w	r0, ip, r0
	uint32_t check_pins = level_pins;
    6d68:	4664      	mov	r4, ip
	uint32_t bit = 1U << pin;
    6d6a:	2201      	movs	r2, #1
	uint32_t pin = 0U;
    6d6c:	2500      	movs	r5, #0
	while (check_pins) {
    6d6e:	e00f      	b.n	6d90 <check_level_trigger_pins+0x4a>
    *p_pin = pin_number & 0x1F;
    6d70:	f003 031f 	and.w	r3, r3, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    6d74:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    6d78:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6d7c:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
    6d80:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    6d84:	f847 6023 	str.w	r6, [r7, r3, lsl #2]
			check_pins &= ~bit;
    6d88:	ea24 0402 	bic.w	r4, r4, r2
		++pin;
    6d8c:	3501      	adds	r5, #1
		bit <<= 1;
    6d8e:	0052      	lsls	r2, r2, #1
	while (check_pins) {
    6d90:	b1dc      	cbz	r4, 6dca <check_level_trigger_pins+0x84>
		if (check_pins & bit) {
    6d92:	4222      	tst	r2, r4
    6d94:	d0fa      	beq.n	6d8c <check_level_trigger_pins+0x46>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6d96:	7a0e      	ldrb	r6, [r1, #8]
    6d98:	f005 031f 	and.w	r3, r5, #31
    6d9c:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
			if (!(level_pins & bit)) {
    6da0:	ea12 0f0c 	tst.w	r2, ip
    6da4:	d1e4      	bne.n	6d70 <check_level_trigger_pins+0x2a>
    *p_pin = pin_number & 0x1F;
    6da6:	f003 061f 	and.w	r6, r3, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6daa:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    6dae:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    6db2:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    6db6:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    6dba:	2e02      	cmp	r6, #2
    6dbc:	d1d8      	bne.n	6d70 <check_level_trigger_pins+0x2a>
					*sense_levels |= bit;
    6dbe:	f8de 6000 	ldr.w	r6, [lr]
    6dc2:	4316      	orrs	r6, r2
    6dc4:	f8ce 6000 	str.w	r6, [lr]
    6dc8:	e7d2      	b.n	6d70 <check_level_trigger_pins+0x2a>
}
    6dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006dcc <gpiote_pin_int_cfg>:
{
    6dcc:	b570      	push	{r4, r5, r6, lr}
    6dce:	460c      	mov	r4, r1
	return port->data;
    6dd0:	6906      	ldr	r6, [r0, #16]
	return port->config;
    6dd2:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6dd4:	7a1b      	ldrb	r3, [r3, #8]
    6dd6:	f001 051f 	and.w	r5, r1, #31
    6dda:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    6dde:	4628      	mov	r0, r5
    6de0:	f7fc fb9a 	bl	3518 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    6de4:	f005 021f 	and.w	r2, r5, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    6de8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6dec:	f502 70e0 	add.w	r0, r2, #448	; 0x1c0
    6df0:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    6df4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    6df8:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    6dfc:	68f3      	ldr	r3, [r6, #12]
    6dfe:	40e3      	lsrs	r3, r4
    6e00:	f013 0f01 	tst.w	r3, #1
    6e04:	d02f      	beq.n	6e66 <gpiote_pin_int_cfg+0x9a>
		if (data->trig_edge & BIT(pin)) {
    6e06:	6973      	ldr	r3, [r6, #20]
    6e08:	40e3      	lsrs	r3, r4
    6e0a:	f013 0f01 	tst.w	r3, #1
    6e0e:	d013      	beq.n	6e38 <gpiote_pin_int_cfg+0x6c>
				if (data->double_edge & BIT(pin)) {
    6e10:	69b3      	ldr	r3, [r6, #24]
    6e12:	40e3      	lsrs	r3, r4
    6e14:	f013 0f01 	tst.w	r3, #1
    6e18:	d107      	bne.n	6e2a <gpiote_pin_int_cfg+0x5e>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    6e1a:	6931      	ldr	r1, [r6, #16]
    6e1c:	fa21 f404 	lsr.w	r4, r1, r4
    6e20:	f014 0f01 	tst.w	r4, #1
    6e24:	d006      	beq.n	6e34 <gpiote_pin_int_cfg+0x68>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    6e26:	2101      	movs	r1, #1
    6e28:	e000      	b.n	6e2c <gpiote_pin_int_cfg+0x60>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    6e2a:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    6e2c:	4628      	mov	r0, r5
    6e2e:	f7fc fb9f 	bl	3570 <gpiote_channel_alloc>
    6e32:	e019      	b.n	6e68 <gpiote_pin_int_cfg+0x9c>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    6e34:	2102      	movs	r1, #2
    6e36:	e7f9      	b.n	6e2c <gpiote_pin_int_cfg+0x60>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    6e38:	6931      	ldr	r1, [r6, #16]
    6e3a:	fa21 f404 	lsr.w	r4, r1, r4
    6e3e:	f014 0f01 	tst.w	r4, #1
    6e42:	d10e      	bne.n	6e62 <gpiote_pin_int_cfg+0x96>
	return NRF_GPIO_PIN_SENSE_LOW;
    6e44:	2003      	movs	r0, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    6e46:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6e4a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    6e4e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    6e52:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    6e56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    6e5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	int res = 0;
    6e5e:	2000      	movs	r0, #0
}
    6e60:	e002      	b.n	6e68 <gpiote_pin_int_cfg+0x9c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    6e62:	2002      	movs	r0, #2
    6e64:	e7ef      	b.n	6e46 <gpiote_pin_int_cfg+0x7a>
	int res = 0;
    6e66:	2000      	movs	r0, #0
}
    6e68:	bd70      	pop	{r4, r5, r6, pc}

00006e6a <gpio_nrfx_pin_interrupt_configure>:
{
    6e6a:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    6e6c:	6904      	ldr	r4, [r0, #16]
	return port->config;
    6e6e:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    6e70:	7a2e      	ldrb	r6, [r5, #8]
    6e72:	f001 051f 	and.w	r5, r1, #31
    6e76:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    6e7a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    6e7e:	d025      	beq.n	6ecc <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    6e80:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    6e84:	d030      	beq.n	6ee8 <gpio_nrfx_pin_interrupt_configure+0x7e>
    6e86:	68e5      	ldr	r5, [r4, #12]
    6e88:	2601      	movs	r6, #1
    6e8a:	408e      	lsls	r6, r1
    6e8c:	4335      	orrs	r5, r6
    6e8e:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    6e90:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    6e94:	d02e      	beq.n	6ef4 <gpio_nrfx_pin_interrupt_configure+0x8a>
    6e96:	6962      	ldr	r2, [r4, #20]
    6e98:	2501      	movs	r5, #1
    6e9a:	408d      	lsls	r5, r1
    6e9c:	ea22 0205 	bic.w	r2, r2, r5
    6ea0:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    6ea2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    6ea6:	d02a      	beq.n	6efe <gpio_nrfx_pin_interrupt_configure+0x94>
    6ea8:	69a2      	ldr	r2, [r4, #24]
    6eaa:	2501      	movs	r5, #1
    6eac:	408d      	lsls	r5, r1
    6eae:	ea22 0205 	bic.w	r2, r2, r5
    6eb2:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    6eb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    6eb8:	d026      	beq.n	6f08 <gpio_nrfx_pin_interrupt_configure+0x9e>
    6eba:	6923      	ldr	r3, [r4, #16]
    6ebc:	2201      	movs	r2, #1
    6ebe:	408a      	lsls	r2, r1
    6ec0:	ea23 0302 	bic.w	r3, r3, r2
    6ec4:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    6ec6:	f7ff ff81 	bl	6dcc <gpiote_pin_int_cfg>
}
    6eca:	bd70      	pop	{r4, r5, r6, pc}
    *p_pin = pin_number & 0x1F;
    6ecc:	f005 051f 	and.w	r5, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    6ed0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    6ed4:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    6ed8:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    6edc:	f015 0f01 	tst.w	r5, #1
    6ee0:	d0ce      	beq.n	6e80 <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    6ee2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6ee6:	e7f0      	b.n	6eca <gpio_nrfx_pin_interrupt_configure+0x60>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    6ee8:	68e5      	ldr	r5, [r4, #12]
    6eea:	2601      	movs	r6, #1
    6eec:	408e      	lsls	r6, r1
    6eee:	ea25 0506 	bic.w	r5, r5, r6
    6ef2:	e7cc      	b.n	6e8e <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    6ef4:	6962      	ldr	r2, [r4, #20]
    6ef6:	2501      	movs	r5, #1
    6ef8:	408d      	lsls	r5, r1
    6efa:	432a      	orrs	r2, r5
    6efc:	e7d0      	b.n	6ea0 <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    6efe:	69a2      	ldr	r2, [r4, #24]
    6f00:	2501      	movs	r5, #1
    6f02:	408d      	lsls	r5, r1
    6f04:	432a      	orrs	r2, r5
    6f06:	e7d4      	b.n	6eb2 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    6f08:	6923      	ldr	r3, [r4, #16]
    6f0a:	2201      	movs	r2, #1
    6f0c:	408a      	lsls	r2, r1
    6f0e:	4313      	orrs	r3, r2
    6f10:	e7d8      	b.n	6ec4 <gpio_nrfx_pin_interrupt_configure+0x5a>

00006f12 <endtx_isr>:
	return dev->config;
    6f12:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6f14:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    6f16:	f04f 0120 	mov.w	r1, #32
    6f1a:	f3ef 8211 	mrs	r2, BASEPRI
    6f1e:	f381 8812 	msr	BASEPRI_MAX, r1
    6f22:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f26:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6f2a:	b131      	cbz	r1, 6f3a <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6f2c:	2100      	movs	r1, #0
    6f2e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    6f32:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6f36:	2101      	movs	r1, #1
    6f38:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    6f3a:	f382 8811 	msr	BASEPRI, r2
    6f3e:	f3bf 8f6f 	isb	sy
}
    6f42:	4770      	bx	lr

00006f44 <uarte_nrfx_isr_int>:
{
    6f44:	b538      	push	{r3, r4, r5, lr}
    6f46:	4604      	mov	r4, r0
	return dev->config;
    6f48:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6f4a:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    6f4c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6f50:	f413 7f80 	tst.w	r3, #256	; 0x100
    6f54:	d002      	beq.n	6f5c <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f56:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    6f5a:	b9db      	cbnz	r3, 6f94 <uarte_nrfx_isr_int+0x50>
	return dev->config;
    6f5c:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6f5e:	685b      	ldr	r3, [r3, #4]
    6f60:	f013 0f10 	tst.w	r3, #16
    6f64:	d015      	beq.n	6f92 <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
    6f66:	f04f 0220 	mov.w	r2, #32
    6f6a:	f3ef 8311 	mrs	r3, BASEPRI
    6f6e:	f382 8812 	msr	BASEPRI_MAX, r2
    6f72:	f3bf 8f6f 	isb	sy
    6f76:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6f7a:	b112      	cbz	r2, 6f82 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6f7c:	2200      	movs	r2, #0
    6f7e:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    6f82:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6f86:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
    6f8a:	f383 8811 	msr	BASEPRI, r3
    6f8e:	f3bf 8f6f 	isb	sy
}
    6f92:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    6f94:	f7ff ffbd 	bl	6f12 <endtx_isr>
    6f98:	e7e0      	b.n	6f5c <uarte_nrfx_isr_int+0x18>

00006f9a <uarte_nrfx_configure>:
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    6f9a:	794b      	ldrb	r3, [r1, #5]
    6f9c:	2b01      	cmp	r3, #1
    6f9e:	d142      	bne.n	7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
{
    6fa0:	b530      	push	{r4, r5, lr}
    6fa2:	b083      	sub	sp, #12
    6fa4:	4605      	mov	r5, r0
    6fa6:	460c      	mov	r4, r1
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    6fa8:	798b      	ldrb	r3, [r1, #6]
    6faa:	2b03      	cmp	r3, #3
    6fac:	d13f      	bne.n	702e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
	switch (cfg->flow_ctrl) {
    6fae:	79cb      	ldrb	r3, [r1, #7]
    6fb0:	b133      	cbz	r3, 6fc0 <uarte_nrfx_configure+0x26>
    6fb2:	2b01      	cmp	r3, #1
    6fb4:	d00e      	beq.n	6fd4 <uarte_nrfx_configure+0x3a>
    6fb6:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    6fba:	4618      	mov	r0, r3
    6fbc:	b003      	add	sp, #12
    6fbe:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    6fc0:	2300      	movs	r3, #0
    6fc2:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    6fc6:	7923      	ldrb	r3, [r4, #4]
    6fc8:	b183      	cbz	r3, 6fec <uarte_nrfx_configure+0x52>
    6fca:	2b02      	cmp	r3, #2
    6fcc:	d027      	beq.n	701e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    6fce:	f06f 0385 	mvn.w	r3, #133	; 0x85
    6fd2:	e7f2      	b.n	6fba <uarte_nrfx_configure+0x20>
	return dev->config;
    6fd4:	6843      	ldr	r3, [r0, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    6fd6:	685b      	ldr	r3, [r3, #4]
    6fd8:	f003 0201 	and.w	r2, r3, #1
    6fdc:	f003 0302 	and.w	r3, r3, #2
    6fe0:	4313      	orrs	r3, r2
    6fe2:	d027      	beq.n	7034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    6fe4:	2301      	movs	r3, #1
    6fe6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    6fea:	e7ec      	b.n	6fc6 <uarte_nrfx_configure+0x2c>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    6fec:	2300      	movs	r3, #0
    6fee:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    6ff2:	6821      	ldr	r1, [r4, #0]
    6ff4:	4628      	mov	r0, r5
    6ff6:	f7fc fb1d 	bl	3634 <baudrate_set>
    6ffa:	4603      	mov	r3, r0
    6ffc:	b9e8      	cbnz	r0, 703a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
	return dev->config;
    6ffe:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    7000:	6811      	ldr	r1, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    7002:	f89d 2005 	ldrb.w	r2, [sp, #5]
                    | (uint32_t)p_cfg->hwfc;
    7006:	f89d 0004 	ldrb.w	r0, [sp, #4]
    700a:	4302      	orrs	r2, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    700c:	f8c1 256c 	str.w	r2, [r1, #1388]	; 0x56c
	return dev->data;
    7010:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    7012:	3204      	adds	r2, #4
    7014:	e894 0003 	ldmia.w	r4, {r0, r1}
    7018:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    701c:	e7cd      	b.n	6fba <uarte_nrfx_configure+0x20>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    701e:	230e      	movs	r3, #14
    7020:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    7024:	e7e5      	b.n	6ff2 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
    7026:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    702a:	4618      	mov	r0, r3
    702c:	4770      	bx	lr
		return -ENOTSUP;
    702e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    7032:	e7c2      	b.n	6fba <uarte_nrfx_configure+0x20>
			return -ENOTSUP;
    7034:	f06f 0385 	mvn.w	r3, #133	; 0x85
    7038:	e7bf      	b.n	6fba <uarte_nrfx_configure+0x20>
		return -ENOTSUP;
    703a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    703e:	e7bc      	b.n	6fba <uarte_nrfx_configure+0x20>

00007040 <uarte_nrfx_config_get>:
{
    7040:	460b      	mov	r3, r1
	return dev->data;
    7042:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    7044:	6891      	ldr	r1, [r2, #8]
    7046:	6850      	ldr	r0, [r2, #4]
    7048:	e883 0003 	stmia.w	r3, {r0, r1}
}
    704c:	2000      	movs	r0, #0
    704e:	4770      	bx	lr

00007050 <uarte_nrfx_err_check>:
	return dev->config;
    7050:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7052:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7054:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7058:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    705c:	4770      	bx	lr

0000705e <is_tx_ready>:
	return dev->config;
    705e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7060:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    7062:	685b      	ldr	r3, [r3, #4]
    7064:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7068:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    706c:	b929      	cbnz	r1, 707a <is_tx_ready+0x1c>
    706e:	b933      	cbnz	r3, 707e <is_tx_ready+0x20>
    7070:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    7074:	b92b      	cbnz	r3, 7082 <is_tx_ready+0x24>
    7076:	2000      	movs	r0, #0
    7078:	4770      	bx	lr
    707a:	2001      	movs	r0, #1
    707c:	4770      	bx	lr
    707e:	2000      	movs	r0, #0
    7080:	4770      	bx	lr
    7082:	2001      	movs	r0, #1
}
    7084:	4770      	bx	lr

00007086 <uarte_enable>:
	return dev->config;
    7086:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7088:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    708a:	2208      	movs	r2, #8
    708c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    7090:	4770      	bx	lr

00007092 <tx_start>:
{
    7092:	b510      	push	{r4, lr}
	return dev->config;
    7094:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7096:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    7098:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    709c:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    70a0:	2300      	movs	r3, #0
    70a2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    70a6:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    70aa:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    70ae:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    70b2:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    70b4:	685b      	ldr	r3, [r3, #4]
    70b6:	f013 0f10 	tst.w	r3, #16
    70ba:	d102      	bne.n	70c2 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    70bc:	2301      	movs	r3, #1
    70be:	60a3      	str	r3, [r4, #8]
}
    70c0:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    70c2:	2101      	movs	r1, #1
    70c4:	f7ff ffdf 	bl	7086 <uarte_enable>
    p_reg->INTENSET = mask;
    70c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    70cc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    70d0:	e7f4      	b.n	70bc <tx_start+0x2a>

000070d2 <uarte_nrfx_poll_in>:
{
    70d2:	b410      	push	{r4}
	return dev->data;
    70d4:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    70d6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    70d8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    70da:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    70de:	b152      	cbz	r2, 70f6 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    70e0:	7c62      	ldrb	r2, [r4, #17]
    70e2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    70e4:	2000      	movs	r0, #0
    70e6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    70ea:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    70ee:	2201      	movs	r2, #1
    70f0:	601a      	str	r2, [r3, #0]
}
    70f2:	bc10      	pop	{r4}
    70f4:	4770      	bx	lr
		return -1;
    70f6:	f04f 30ff 	mov.w	r0, #4294967295
    70fa:	e7fa      	b.n	70f2 <uarte_nrfx_poll_in+0x20>

000070fc <wait_tx_ready>:
{
    70fc:	b570      	push	{r4, r5, r6, lr}
    70fe:	4606      	mov	r6, r0
    7100:	e014      	b.n	712c <wait_tx_ready+0x30>
		if (res) {
    7102:	b17d      	cbz	r5, 7124 <wait_tx_ready+0x28>
	__asm__ volatile(
    7104:	f04f 0320 	mov.w	r3, #32
    7108:	f3ef 8411 	mrs	r4, BASEPRI
    710c:	f383 8812 	msr	BASEPRI_MAX, r3
    7110:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    7114:	4630      	mov	r0, r6
    7116:	f7ff ffa2 	bl	705e <is_tx_ready>
    711a:	b9a0      	cbnz	r0, 7146 <wait_tx_ready+0x4a>
	__asm__ volatile(
    711c:	f384 8811 	msr	BASEPRI, r4
    7120:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    7124:	2021      	movs	r0, #33	; 0x21
    7126:	2100      	movs	r1, #0
    7128:	f7fd fff8 	bl	511c <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    712c:	2464      	movs	r4, #100	; 0x64
    712e:	4630      	mov	r0, r6
    7130:	f7ff ff95 	bl	705e <is_tx_ready>
    7134:	4605      	mov	r5, r0
    7136:	2800      	cmp	r0, #0
    7138:	d1e3      	bne.n	7102 <wait_tx_ready+0x6>
    713a:	2001      	movs	r0, #1
    713c:	f000 f929 	bl	7392 <nrfx_busy_wait>
    7140:	3c01      	subs	r4, #1
    7142:	d1f4      	bne.n	712e <wait_tx_ready+0x32>
    7144:	e7dd      	b.n	7102 <wait_tx_ready+0x6>
}
    7146:	4620      	mov	r0, r4
    7148:	bd70      	pop	{r4, r5, r6, pc}

0000714a <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    714a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    714c:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    714e:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    7150:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7152:	2300      	movs	r3, #0
    7154:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    7158:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    715a:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    715c:	f003 021f 	and.w	r2, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7160:	2301      	movs	r3, #1
    7162:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7164:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7168:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
    716c:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    716e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7172:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7176:	2103      	movs	r1, #3
    7178:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    717c:	68e3      	ldr	r3, [r4, #12]
    717e:	f1b3 3fff 	cmp.w	r3, #4294967295
    7182:	d009      	beq.n	7198 <uarte_instance_init+0x4e>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    7184:	7e22      	ldrb	r2, [r4, #24]
    *p_pin = pin_number & 0x1F;
    7186:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    718a:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    718c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7190:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    7198:	68a2      	ldr	r2, [r4, #8]
    719a:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    719c:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    71a0:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    71a4:	6923      	ldr	r3, [r4, #16]
    71a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    71aa:	d009      	beq.n	71c0 <uarte_instance_init+0x76>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    71ac:	7e62      	ldrb	r2, [r4, #25]
    *p_pin = pin_number & 0x1F;
    71ae:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    71b2:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    71b4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    71b8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    71bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    71c0:	6963      	ldr	r3, [r4, #20]
    71c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    71c6:	d010      	beq.n	71ea <uarte_instance_init+0xa0>
    *p_pin = pin_number & 0x1F;
    71c8:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    71cc:	2201      	movs	r2, #1
    71ce:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    71d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    71d6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    71da:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    71dc:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    71e0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    71e4:	2103      	movs	r1, #3
    71e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    71ea:	6962      	ldr	r2, [r4, #20]
    71ec:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    71ee:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    71f2:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    71f6:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    71f8:	3104      	adds	r1, #4
    71fa:	f7ff fece 	bl	6f9a <uarte_nrfx_configure>
	if (err) {
    71fe:	4607      	mov	r7, r0
    7200:	bb80      	cbnz	r0, 7264 <uarte_instance_init+0x11a>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    7202:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    7204:	f013 0f08 	tst.w	r3, #8
    7208:	d12e      	bne.n	7268 <uarte_instance_init+0x11e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    720a:	2308      	movs	r3, #8
    720c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    7210:	68e3      	ldr	r3, [r4, #12]
    7212:	f1b3 3fff 	cmp.w	r3, #4294967295
    7216:	d00c      	beq.n	7232 <uarte_instance_init+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7218:	2300      	movs	r3, #0
    721a:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    721e:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    7222:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7226:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    722a:	2301      	movs	r3, #1
    722c:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7230:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    7232:	6863      	ldr	r3, [r4, #4]
    7234:	f013 0f08 	tst.w	r3, #8
    7238:	d103      	bne.n	7242 <uarte_instance_init+0xf8>
    p_reg->INTENSET = mask;
    723a:	f44f 7380 	mov.w	r3, #256	; 0x100
    723e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7242:	6863      	ldr	r3, [r4, #4]
    7244:	f013 0f10 	tst.w	r3, #16
    7248:	d003      	beq.n	7252 <uarte_instance_init+0x108>
    724a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    724e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    7252:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    7254:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    7258:	2300      	movs	r3, #0
    725a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    725e:	2301      	movs	r3, #1
    7260:	60ab      	str	r3, [r5, #8]
    7262:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    7264:	4638      	mov	r0, r7
    7266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    7268:	4631      	mov	r1, r6
    726a:	4628      	mov	r0, r5
    726c:	f7fc fac2 	bl	37f4 <endtx_stoptx_ppi_init>
		if (err < 0) {
    7270:	2800      	cmp	r0, #0
    7272:	daca      	bge.n	720a <uarte_instance_init+0xc0>
			return err;
    7274:	4607      	mov	r7, r0
    7276:	e7f5      	b.n	7264 <uarte_instance_init+0x11a>

00007278 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    7278:	b510      	push	{r4, lr}
    727a:	4604      	mov	r4, r0
    727c:	2200      	movs	r2, #0
    727e:	2101      	movs	r1, #1
    7280:	2002      	movs	r0, #2
    7282:	f7fb faeb 	bl	285c <z_arm_irq_priority_set>
    7286:	2002      	movs	r0, #2
    7288:	f7fb faca 	bl	2820 <arch_irq_enable>
    728c:	2100      	movs	r1, #0
    728e:	4620      	mov	r0, r4
    7290:	f7ff ff5b 	bl	714a <uarte_instance_init>
    7294:	bd10      	pop	{r4, pc}

00007296 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    7296:	4770      	bx	lr

00007298 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7298:	4770      	bx	lr

0000729a <counter_sub>:
	return (a - b) & COUNTER_MAX;
    729a:	1a40      	subs	r0, r0, r1
}
    729c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    72a0:	4770      	bx	lr

000072a2 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    72a2:	f100 0350 	add.w	r3, r0, #80	; 0x50
    72a6:	009b      	lsls	r3, r3, #2
    72a8:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    72aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    72ae:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    72b2:	2200      	movs	r2, #0
    72b4:	601a      	str	r2, [r3, #0]
    72b6:	681b      	ldr	r3, [r3, #0]
}
    72b8:	4770      	bx	lr

000072ba <absolute_time_to_cc>:
}
    72ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    72be:	4770      	bx	lr

000072c0 <full_int_lock>:
	__asm__ volatile(
    72c0:	f04f 0320 	mov.w	r3, #32
    72c4:	f3ef 8011 	mrs	r0, BASEPRI
    72c8:	f383 8812 	msr	BASEPRI_MAX, r3
    72cc:	f3bf 8f6f 	isb	sy
}
    72d0:	4770      	bx	lr

000072d2 <full_int_unlock>:
	__asm__ volatile(
    72d2:	f380 8811 	msr	BASEPRI, r0
    72d6:	f3bf 8f6f 	isb	sy
}
    72da:	4770      	bx	lr

000072dc <set_absolute_alarm>:
{
    72dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72de:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    72e0:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    72e4:	f7fc fab4 	bl	3850 <get_comparator>
    72e8:	4607      	mov	r7, r0
    72ea:	e019      	b.n	7320 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    72ec:	2013      	movs	r0, #19
    72ee:	f000 fa5f 	bl	77b0 <z_impl_k_busy_wait>
}
    72f2:	e022      	b.n	733a <set_absolute_alarm+0x5e>
		event_clear(chan);
    72f4:	4630      	mov	r0, r6
    72f6:	f7ff ffd4 	bl	72a2 <event_clear>
		event_enable(chan);
    72fa:	4630      	mov	r0, r6
    72fc:	f7fc fab0 	bl	3860 <event_enable>
		set_comparator(chan, cc_val);
    7300:	4629      	mov	r1, r5
    7302:	4630      	mov	r0, r6
    7304:	f7fc fa9a 	bl	383c <set_comparator>
		now2 = counter();
    7308:	f7fc fabe 	bl	3888 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    730c:	4284      	cmp	r4, r0
    730e:	d01e      	beq.n	734e <set_absolute_alarm+0x72>
    7310:	1c81      	adds	r1, r0, #2
    7312:	4628      	mov	r0, r5
    7314:	f7ff ffc1 	bl	729a <counter_sub>
	} while ((now2 != now) &&
    7318:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    731c:	d917      	bls.n	734e <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    731e:	462f      	mov	r7, r5
		now = counter();
    7320:	f7fc fab2 	bl	3888 <counter>
    7324:	4604      	mov	r4, r0
		set_comparator(chan, now);
    7326:	4601      	mov	r1, r0
    7328:	4630      	mov	r0, r6
    732a:	f7fc fa87 	bl	383c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    732e:	4621      	mov	r1, r4
    7330:	4638      	mov	r0, r7
    7332:	f7ff ffb2 	bl	729a <counter_sub>
    7336:	2801      	cmp	r0, #1
    7338:	d0d8      	beq.n	72ec <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    733a:	1ca7      	adds	r7, r4, #2
    733c:	4639      	mov	r1, r7
    733e:	4628      	mov	r0, r5
    7340:	f7ff ffab 	bl	729a <counter_sub>
    7344:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7348:	d9d4      	bls.n	72f4 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    734a:	463d      	mov	r5, r7
    734c:	e7d2      	b.n	72f4 <set_absolute_alarm+0x18>
}
    734e:	4628      	mov	r0, r5
    7350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007352 <compare_set>:
{
    7352:	b5f0      	push	{r4, r5, r6, r7, lr}
    7354:	b083      	sub	sp, #12
    7356:	4604      	mov	r4, r0
    7358:	4617      	mov	r7, r2
    735a:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    735c:	f7fc fa9a 	bl	3894 <compare_int_lock>
    7360:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    7362:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7364:	9301      	str	r3, [sp, #4]
    7366:	9b08      	ldr	r3, [sp, #32]
    7368:	9300      	str	r3, [sp, #0]
    736a:	463a      	mov	r2, r7
    736c:	462b      	mov	r3, r5
    736e:	4620      	mov	r0, r4
    7370:	f7fc fb7e 	bl	3a70 <compare_set_nolocks>
    7374:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    7376:	4631      	mov	r1, r6
    7378:	4620      	mov	r0, r4
    737a:	f7fc faef 	bl	395c <compare_int_unlock>
}
    737e:	4628      	mov	r0, r5
    7380:	b003      	add	sp, #12
    7382:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007384 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7384:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    7386:	2000      	movs	r0, #0
    7388:	f7fb fdf8 	bl	2f7c <sys_arch_reboot>

0000738c <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    738c:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    738e:	4780      	blx	r0
}
    7390:	bd08      	pop	{r3, pc}

00007392 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    7392:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    7394:	f000 fa0c 	bl	77b0 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    7398:	bd08      	pop	{r3, pc}

0000739a <nrfx_clock_enable>:
{
    739a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    739c:	2000      	movs	r0, #0
    739e:	f7fb fa4f 	bl	2840 <arch_irq_is_enabled>
    73a2:	b100      	cbz	r0, 73a6 <nrfx_clock_enable+0xc>
}
    73a4:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    73a6:	f7fb fa3b 	bl	2820 <arch_irq_enable>
    73aa:	e7fb      	b.n	73a4 <nrfx_clock_enable+0xa>

000073ac <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    73ac:	2301      	movs	r3, #1
    73ae:	4083      	lsls	r3, r0
    73b0:	f013 0fff 	tst.w	r3, #255	; 0xff
}
    73b4:	bf14      	ite	ne
    73b6:	2001      	movne	r0, #1
    73b8:	2000      	moveq	r0, #0
    73ba:	4770      	bx	lr

000073bc <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    73bc:	b508      	push	{r3, lr}
  _DoInit();
    73be:	f7fd f8ab 	bl	4518 <_DoInit>
}
    73c2:	bd08      	pop	{r3, pc}

000073c4 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    73c4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    73c6:	f7ff fff9 	bl	73bc <SEGGER_RTT_Init>

	return 0;
}
    73ca:	2000      	movs	r0, #0
    73cc:	bd08      	pop	{r3, pc}

000073ce <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    73ce:	b148      	cbz	r0, 73e4 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    73d0:	68c3      	ldr	r3, [r0, #12]
    73d2:	8818      	ldrh	r0, [r3, #0]
    73d4:	f3c0 0008 	ubfx	r0, r0, #0, #9
    73d8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    73dc:	bf14      	ite	ne
    73de:	2000      	movne	r0, #0
    73e0:	2001      	moveq	r0, #1
    73e2:	4770      	bx	lr
		return false;
    73e4:	2000      	movs	r0, #0
}
    73e6:	4770      	bx	lr

000073e8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    73e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73ea:	4605      	mov	r5, r0
    73ec:	460e      	mov	r6, r1
	__asm__ volatile(
    73ee:	f04f 0320 	mov.w	r3, #32
    73f2:	f3ef 8711 	mrs	r7, BASEPRI
    73f6:	f383 8812 	msr	BASEPRI_MAX, r3
    73fa:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    73fe:	f7fd feb9 	bl	5174 <z_impl_z_current_get>
    7402:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7404:	4631      	mov	r1, r6
    7406:	4628      	mov	r0, r5
    7408:	f7ff ffbc 	bl	7384 <k_sys_fatal_error_handler>
	__asm__ volatile(
    740c:	f387 8811 	msr	BASEPRI, r7
    7410:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7414:	4620      	mov	r0, r4
    7416:	f7fb fce1 	bl	2ddc <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    741a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000741c <setup_thread_stack>:
{
    741c:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    741e:	3207      	adds	r2, #7
    7420:	f022 0207 	bic.w	r2, r2, #7
    7424:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    7428:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    742c:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    7430:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    7434:	2200      	movs	r2, #0
    7436:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    743a:	18c8      	adds	r0, r1, r3
    743c:	bc10      	pop	{r4}
    743e:	4770      	bx	lr

00007440 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7440:	f3ef 8005 	mrs	r0, IPSR
}
    7444:	3800      	subs	r0, #0
    7446:	bf18      	it	ne
    7448:	2001      	movne	r0, #1
    744a:	4770      	bx	lr

0000744c <z_impl_k_thread_start>:
{
    744c:	b508      	push	{r3, lr}
	z_sched_start(thread);
    744e:	f7fd fcbf 	bl	4dd0 <z_sched_start>
}
    7452:	bd08      	pop	{r3, pc}

00007454 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    7454:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    7456:	2400      	movs	r4, #0
    7458:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    745a:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    745c:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    745e:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    7460:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    7462:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    7464:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    7466:	bc10      	pop	{r4}
    7468:	4770      	bx	lr

0000746a <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
    746a:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
    746c:	f7fb f916 	bl	269c <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
    7470:	f7ff ff12 	bl	7298 <sys_clock_idle_exit>
}
    7474:	bd08      	pop	{r3, pc}

00007476 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
    7476:	b508      	push	{r3, lr}
	__asm__ volatile(
    7478:	f04f 0220 	mov.w	r2, #32
    747c:	f3ef 8311 	mrs	r3, BASEPRI
    7480:	f382 8812 	msr	BASEPRI_MAX, r2
    7484:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
    7488:	f7fd faba 	bl	4a00 <pm_save_idle>
    748c:	e7f4      	b.n	7478 <idle+0x2>

0000748e <thread_active_elsewhere>:
}
    748e:	2000      	movs	r0, #0
    7490:	4770      	bx	lr

00007492 <pended_on_thread>:
}
    7492:	6880      	ldr	r0, [r0, #8]
    7494:	4770      	bx	lr

00007496 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    7496:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    749a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    749e:	4283      	cmp	r3, r0
    74a0:	d001      	beq.n	74a6 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    74a2:	1ac0      	subs	r0, r0, r3
    74a4:	4770      	bx	lr
	return 0;
    74a6:	2000      	movs	r0, #0
}
    74a8:	4770      	bx	lr

000074aa <z_unpend_thread_no_timeout>:
{
    74aa:	b538      	push	{r3, r4, r5, lr}
    74ac:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    74ae:	2300      	movs	r3, #0
    74b0:	f04f 0220 	mov.w	r2, #32
    74b4:	f3ef 8511 	mrs	r5, BASEPRI
    74b8:	f382 8812 	msr	BASEPRI_MAX, r2
    74bc:	f3bf 8f6f 	isb	sy
    74c0:	b98b      	cbnz	r3, 74e6 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    74c2:	4620      	mov	r0, r4
    74c4:	f7ff ffe5 	bl	7492 <pended_on_thread>
    74c8:	4621      	mov	r1, r4
    74ca:	f000 f822 	bl	7512 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    74ce:	7b63      	ldrb	r3, [r4, #13]
    74d0:	f023 0302 	bic.w	r3, r3, #2
    74d4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    74d6:	2300      	movs	r3, #0
    74d8:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    74da:	f385 8811 	msr	BASEPRI, r5
    74de:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    74e2:	2301      	movs	r3, #1
    74e4:	e7ec      	b.n	74c0 <z_unpend_thread_no_timeout+0x16>
}
    74e6:	bd38      	pop	{r3, r4, r5, pc}

000074e8 <z_reschedule_irqlock>:
{
    74e8:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    74ea:	4603      	mov	r3, r0
    74ec:	b920      	cbnz	r0, 74f8 <z_reschedule_irqlock+0x10>
    74ee:	f3ef 8205 	mrs	r2, IPSR
    74f2:	b942      	cbnz	r2, 7506 <z_reschedule_irqlock+0x1e>
    74f4:	2201      	movs	r2, #1
    74f6:	e000      	b.n	74fa <z_reschedule_irqlock+0x12>
    74f8:	2200      	movs	r2, #0
	if (resched(key)) {
    74fa:	b932      	cbnz	r2, 750a <z_reschedule_irqlock+0x22>
    74fc:	f383 8811 	msr	BASEPRI, r3
    7500:	f3bf 8f6f 	isb	sy
}
    7504:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7506:	2200      	movs	r2, #0
    7508:	e7f7      	b.n	74fa <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    750a:	4618      	mov	r0, r3
    750c:	f7fb f9dc 	bl	28c8 <arch_swap>
	return ret;
    7510:	e7f8      	b.n	7504 <z_reschedule_irqlock+0x1c>

00007512 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    7512:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    7514:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    7516:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7518:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    751a:	2300      	movs	r3, #0
    751c:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    751e:	604b      	str	r3, [r1, #4]
}
    7520:	4770      	bx	lr

00007522 <z_priq_dumb_best>:
{
    7522:	4603      	mov	r3, r0
	return list->head == list;
    7524:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7526:	4283      	cmp	r3, r0
    7528:	d000      	beq.n	752c <z_priq_dumb_best+0xa>
}
    752a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    752c:	2000      	movs	r0, #0
	return thread;
    752e:	e7fc      	b.n	752a <z_priq_dumb_best+0x8>

00007530 <z_ready_thread>:
{
    7530:	b538      	push	{r3, r4, r5, lr}
    7532:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    7534:	2300      	movs	r3, #0
	__asm__ volatile(
    7536:	f04f 0220 	mov.w	r2, #32
    753a:	f3ef 8511 	mrs	r5, BASEPRI
    753e:	f382 8812 	msr	BASEPRI_MAX, r2
    7542:	f3bf 8f6f 	isb	sy
    7546:	e007      	b.n	7558 <z_ready_thread+0x28>
			ready_thread(thread);
    7548:	4620      	mov	r0, r4
    754a:	f7fd fc01 	bl	4d50 <ready_thread>
	__asm__ volatile(
    754e:	f385 8811 	msr	BASEPRI, r5
    7552:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7556:	2301      	movs	r3, #1
    7558:	b92b      	cbnz	r3, 7566 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    755a:	4620      	mov	r0, r4
    755c:	f7ff ff97 	bl	748e <thread_active_elsewhere>
    7560:	2800      	cmp	r0, #0
    7562:	d1f4      	bne.n	754e <z_ready_thread+0x1e>
    7564:	e7f0      	b.n	7548 <z_ready_thread+0x18>
}
    7566:	bd38      	pop	{r3, r4, r5, pc}

00007568 <z_thread_timeout>:
{
    7568:	b570      	push	{r4, r5, r6, lr}
    756a:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    756c:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    7570:	2300      	movs	r3, #0
	__asm__ volatile(
    7572:	f04f 0220 	mov.w	r2, #32
    7576:	f3ef 8611 	mrs	r6, BASEPRI
    757a:	f382 8812 	msr	BASEPRI_MAX, r2
    757e:	f3bf 8f6f 	isb	sy
    7582:	e019      	b.n	75b8 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7584:	4628      	mov	r0, r5
    7586:	f7ff ff84 	bl	7492 <pended_on_thread>
    758a:	4629      	mov	r1, r5
    758c:	f7ff ffc1 	bl	7512 <z_priq_dumb_remove>
    7590:	7b6b      	ldrb	r3, [r5, #13]
    7592:	f023 0302 	bic.w	r3, r3, #2
    7596:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    7598:	2300      	movs	r3, #0
    759a:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    759c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    75a0:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    75a4:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    75a8:	4628      	mov	r0, r5
    75aa:	f7fd fbd1 	bl	4d50 <ready_thread>
	__asm__ volatile(
    75ae:	f386 8811 	msr	BASEPRI, r6
    75b2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    75b6:	2301      	movs	r3, #1
    75b8:	b94b      	cbnz	r3, 75ce <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    75ba:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    75be:	f013 0f28 	tst.w	r3, #40	; 0x28
    75c2:	d1f4      	bne.n	75ae <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    75c4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    75c8:	2b00      	cmp	r3, #0
    75ca:	d1db      	bne.n	7584 <z_thread_timeout+0x1c>
    75cc:	e7e6      	b.n	759c <z_thread_timeout+0x34>
}
    75ce:	bd70      	pop	{r4, r5, r6, pc}

000075d0 <add_to_waitq_locked>:
{
    75d0:	b570      	push	{r4, r5, r6, lr}
    75d2:	4605      	mov	r5, r0
    75d4:	460e      	mov	r6, r1
	unready_thread(thread);
    75d6:	f7fd fc19 	bl	4e0c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    75da:	7b6b      	ldrb	r3, [r5, #13]
    75dc:	f043 0302 	orr.w	r3, r3, #2
    75e0:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    75e2:	b1b6      	cbz	r6, 7612 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    75e4:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    75e6:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    75e8:	42a6      	cmp	r6, r4
    75ea:	d019      	beq.n	7620 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    75ec:	b164      	cbz	r4, 7608 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    75ee:	4621      	mov	r1, r4
    75f0:	4628      	mov	r0, r5
    75f2:	f7ff ff50 	bl	7496 <z_sched_prio_cmp>
    75f6:	2800      	cmp	r0, #0
    75f8:	dc0c      	bgt.n	7614 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    75fa:	b12c      	cbz	r4, 7608 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    75fc:	6873      	ldr	r3, [r6, #4]
    75fe:	429c      	cmp	r4, r3
    7600:	d002      	beq.n	7608 <add_to_waitq_locked+0x38>
    7602:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7604:	2c00      	cmp	r4, #0
    7606:	d1f1      	bne.n	75ec <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    7608:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    760a:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    760c:	606b      	str	r3, [r5, #4]
	tail->next = node;
    760e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    7610:	6075      	str	r5, [r6, #4]
}
    7612:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    7614:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    7616:	606b      	str	r3, [r5, #4]
	node->next = successor;
    7618:	602c      	str	r4, [r5, #0]
	prev->next = node;
    761a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    761c:	6065      	str	r5, [r4, #4]
}
    761e:	e7f8      	b.n	7612 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7620:	2400      	movs	r4, #0
    7622:	e7e3      	b.n	75ec <add_to_waitq_locked+0x1c>

00007624 <pend>:
{
    7624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7628:	4605      	mov	r5, r0
    762a:	460f      	mov	r7, r1
    762c:	4691      	mov	r9, r2
    762e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    7630:	2400      	movs	r4, #0
	__asm__ volatile(
    7632:	f04f 0320 	mov.w	r3, #32
    7636:	f3ef 8611 	mrs	r6, BASEPRI
    763a:	f383 8812 	msr	BASEPRI_MAX, r3
    763e:	f3bf 8f6f 	isb	sy
    7642:	b94c      	cbnz	r4, 7658 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    7644:	4639      	mov	r1, r7
    7646:	4628      	mov	r0, r5
    7648:	f7ff ffc2 	bl	75d0 <add_to_waitq_locked>
	__asm__ volatile(
    764c:	f386 8811 	msr	BASEPRI, r6
    7650:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7654:	2401      	movs	r4, #1
    7656:	e7f4      	b.n	7642 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    7658:	464a      	mov	r2, r9
    765a:	4643      	mov	r3, r8
    765c:	4628      	mov	r0, r5
    765e:	f7fd fa2b 	bl	4ab8 <add_thread_timeout>
}
    7662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007666 <z_unpend_first_thread>:
{
    7666:	b570      	push	{r4, r5, r6, lr}
    7668:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    766a:	2300      	movs	r3, #0
	__asm__ volatile(
    766c:	f04f 0220 	mov.w	r2, #32
    7670:	f3ef 8511 	mrs	r5, BASEPRI
    7674:	f382 8812 	msr	BASEPRI_MAX, r2
    7678:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    767c:	461c      	mov	r4, r3
    767e:	e013      	b.n	76a8 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7680:	f7ff ff07 	bl	7492 <pended_on_thread>
    7684:	4621      	mov	r1, r4
    7686:	f7ff ff44 	bl	7512 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    768a:	7b63      	ldrb	r3, [r4, #13]
    768c:	f023 0302 	bic.w	r3, r3, #2
    7690:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    7692:	2300      	movs	r3, #0
    7694:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    7696:	f104 0018 	add.w	r0, r4, #24
    769a:	f000 f826 	bl	76ea <z_abort_timeout>
	__asm__ volatile(
    769e:	f385 8811 	msr	BASEPRI, r5
    76a2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    76a6:	2301      	movs	r3, #1
    76a8:	b933      	cbnz	r3, 76b8 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    76aa:	4630      	mov	r0, r6
    76ac:	f7ff ff39 	bl	7522 <z_priq_dumb_best>
		if (thread != NULL) {
    76b0:	4604      	mov	r4, r0
    76b2:	2800      	cmp	r0, #0
    76b4:	d1e4      	bne.n	7680 <z_unpend_first_thread+0x1a>
    76b6:	e7f2      	b.n	769e <z_unpend_first_thread+0x38>
}
    76b8:	4620      	mov	r0, r4
    76ba:	bd70      	pop	{r4, r5, r6, pc}

000076bc <remove_timeout>:
{
    76bc:	b538      	push	{r3, r4, r5, lr}
    76be:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    76c0:	f7fd fdaa 	bl	5218 <next>
    76c4:	b148      	cbz	r0, 76da <remove_timeout+0x1e>
    76c6:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    76c8:	6920      	ldr	r0, [r4, #16]
    76ca:	6965      	ldr	r5, [r4, #20]
    76cc:	6913      	ldr	r3, [r2, #16]
    76ce:	6951      	ldr	r1, [r2, #20]
    76d0:	181b      	adds	r3, r3, r0
    76d2:	eb45 0101 	adc.w	r1, r5, r1
    76d6:	6113      	str	r3, [r2, #16]
    76d8:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    76da:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    76dc:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    76de:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    76e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    76e2:	2300      	movs	r3, #0
    76e4:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    76e6:	6063      	str	r3, [r4, #4]
}
    76e8:	bd38      	pop	{r3, r4, r5, pc}

000076ea <z_abort_timeout>:
{
    76ea:	b570      	push	{r4, r5, r6, lr}
    76ec:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    76ee:	2300      	movs	r3, #0
	__asm__ volatile(
    76f0:	f04f 0220 	mov.w	r2, #32
    76f4:	f3ef 8611 	mrs	r6, BASEPRI
    76f8:	f382 8812 	msr	BASEPRI_MAX, r2
    76fc:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    7700:	f06f 0015 	mvn.w	r0, #21
    7704:	e008      	b.n	7718 <z_abort_timeout+0x2e>
			remove_timeout(to);
    7706:	4620      	mov	r0, r4
    7708:	f7ff ffd8 	bl	76bc <remove_timeout>
			ret = 0;
    770c:	4628      	mov	r0, r5
	__asm__ volatile(
    770e:	f386 8811 	msr	BASEPRI, r6
    7712:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7716:	2301      	movs	r3, #1
    7718:	461d      	mov	r5, r3
    771a:	b91b      	cbnz	r3, 7724 <z_abort_timeout+0x3a>
	return node->next != NULL;
    771c:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    771e:	2b00      	cmp	r3, #0
    7720:	d1f1      	bne.n	7706 <z_abort_timeout+0x1c>
    7722:	e7f4      	b.n	770e <z_abort_timeout+0x24>
}
    7724:	bd70      	pop	{r4, r5, r6, pc}

00007726 <z_get_next_timeout_expiry>:
{
    7726:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    7728:	2300      	movs	r3, #0
	__asm__ volatile(
    772a:	f04f 0220 	mov.w	r2, #32
    772e:	f3ef 8411 	mrs	r4, BASEPRI
    7732:	f382 8812 	msr	BASEPRI_MAX, r2
    7736:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    773a:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
    773e:	b93b      	cbnz	r3, 7750 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    7740:	f7fd fd82 	bl	5248 <next_timeout>
	__asm__ volatile(
    7744:	f384 8811 	msr	BASEPRI, r4
    7748:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    774c:	2301      	movs	r3, #1
    774e:	e7f6      	b.n	773e <z_get_next_timeout_expiry+0x18>
}
    7750:	bd10      	pop	{r4, pc}

00007752 <z_set_timeout_expiry>:
{
    7752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7754:	4606      	mov	r6, r0
    7756:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    7758:	2300      	movs	r3, #0
	__asm__ volatile(
    775a:	f04f 0220 	mov.w	r2, #32
    775e:	f3ef 8511 	mrs	r5, BASEPRI
    7762:	f382 8812 	msr	BASEPRI_MAX, r2
    7766:	f3bf 8f6f 	isb	sy
    776a:	e00a      	b.n	7782 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    776c:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    776e:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7772:	2801      	cmp	r0, #1
    7774:	dd00      	ble.n	7778 <z_set_timeout_expiry+0x26>
    7776:	b97c      	cbnz	r4, 7798 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    7778:	f385 8811 	msr	BASEPRI, r5
    777c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7780:	2301      	movs	r3, #1
    7782:	461c      	mov	r4, r3
    7784:	b97b      	cbnz	r3, 77a6 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    7786:	f7fd fd5f 	bl	5248 <next_timeout>
			      || (ticks <= next_to);
    778a:	f1b0 3fff 	cmp.w	r0, #4294967295
    778e:	d0ed      	beq.n	776c <z_set_timeout_expiry+0x1a>
    7790:	42b0      	cmp	r0, r6
    7792:	dbec      	blt.n	776e <z_set_timeout_expiry+0x1c>
    7794:	2401      	movs	r4, #1
    7796:	e7ea      	b.n	776e <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7798:	4639      	mov	r1, r7
    779a:	42b0      	cmp	r0, r6
    779c:	bfa8      	it	ge
    779e:	4630      	movge	r0, r6
    77a0:	f7fc fa64 	bl	3c6c <sys_clock_set_timeout>
    77a4:	e7e8      	b.n	7778 <z_set_timeout_expiry+0x26>
}
    77a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000077a8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    77a8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    77aa:	f7fd fe7f 	bl	54ac <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    77ae:	bd08      	pop	{r3, pc}

000077b0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    77b0:	b900      	cbnz	r0, 77b4 <z_impl_k_busy_wait+0x4>
    77b2:	4770      	bx	lr
{
    77b4:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    77b6:	f7fb fbf7 	bl	2fa8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    77ba:	bd08      	pop	{r3, pc}

000077bc <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    77bc:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    77be:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    77c0:	2300      	movs	r3, #0
    77c2:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    77c4:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    77c8:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    77ca:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    77cc:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    77ce:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    77d0:	6343      	str	r3, [r0, #52]	; 0x34
}
    77d2:	4770      	bx	lr

000077d4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    77d4:	4770      	bx	lr
	...

000077d8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    77d8:	f7fc bba0 	b.w	3f1c <SystemInit>
