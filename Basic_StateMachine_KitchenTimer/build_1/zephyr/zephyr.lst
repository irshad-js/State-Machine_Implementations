
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20000d20 	.word	0x20000d20
}
   4:	00001991 	.word	0x00001991
   8:	000051cf 	.word	0x000051cf
   c:	00001949 	.word	0x00001949
  10:	00001949 	.word	0x00001949
  14:	00001949 	.word	0x00001949
  18:	00001949 	.word	0x00001949
	...
  2c:	000015d5 	.word	0x000015d5
  30:	00001949 	.word	0x00001949
  34:	00000000 	.word	0x00000000
  38:	0000157d 	.word	0x0000157d
  3c:	00005ea9 	.word	0x00005ea9

00000040 <_irq_vector_table>:
  40:	000016c1 000016c1 000016c1 000016c1     ................
  50:	000016c1 000016c1 000016c1 000016c1     ................
  60:	000016c1 000016c1 000016c1 000016c1     ................
  70:	000016c1 000016c1 000016c1 000016c1     ................
  80:	000016c1 000016c1 000016c1 000016c1     ................
  90:	000016c1 000016c1 000016c1 000016c1     ................
  a0:	000016c1 000016c1 000016c1 000016c1     ................
  b0:	000016c1 000016c1 000016c1 000016c1     ................
  c0:	000016c1 000016c1 000016c1 000016c1     ................
  d0:	000016c1 000016c1 000016c1              ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b96c 	b.w	3cc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	468e      	mov	lr, r1
     118:	2b00      	cmp	r3, #0
     11a:	f040 8082 	bne.w	222 <CONFIG_FLASH_SIZE+0x22>
     11e:	428a      	cmp	r2, r1
     120:	4617      	mov	r7, r2
     122:	d946      	bls.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     124:	fab2 f282 	clz	r2, r2
     128:	b14a      	cbz	r2, 13e <__udivmoddi4+0x32>
     12a:	f1c2 0120 	rsb	r1, r2, #32
     12e:	fa05 f302 	lsl.w	r3, r5, r2
     132:	fa20 f101 	lsr.w	r1, r0, r1
     136:	4097      	lsls	r7, r2
     138:	ea41 0e03 	orr.w	lr, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     142:	0c23      	lsrs	r3, r4, #16
     144:	fbbe fcf8 	udiv	ip, lr, r8
     148:	b2b9      	uxth	r1, r7
     14a:	fb08 ee1c 	mls	lr, r8, ip, lr
     14e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     152:	fb0c f001 	mul.w	r0, ip, r1
     156:	4298      	cmp	r0, r3
     158:	d90a      	bls.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     15a:	18fb      	adds	r3, r7, r3
     15c:	f10c 35ff 	add.w	r5, ip, #4294967295
     160:	f080 8116 	bcs.w	390 <CONFIG_FLASH_SIZE+0x190>
     164:	4298      	cmp	r0, r3
     166:	f240 8113 	bls.w	390 <CONFIG_FLASH_SIZE+0x190>
     16a:	f1ac 0c02 	sub.w	ip, ip, #2
     16e:	443b      	add	r3, r7
     170:	1a1b      	subs	r3, r3, r0
     172:	b2a4      	uxth	r4, r4
     174:	fbb3 f0f8 	udiv	r0, r3, r8
     178:	fb08 3310 	mls	r3, r8, r0, r3
     17c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     180:	fb00 f101 	mul.w	r1, r0, r1
     184:	42a1      	cmp	r1, r4
     186:	d909      	bls.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     188:	193c      	adds	r4, r7, r4
     18a:	f100 33ff 	add.w	r3, r0, #4294967295
     18e:	f080 8101 	bcs.w	394 <CONFIG_FLASH_SIZE+0x194>
     192:	42a1      	cmp	r1, r4
     194:	f240 80fe 	bls.w	394 <CONFIG_FLASH_SIZE+0x194>
     198:	3802      	subs	r0, #2
     19a:	443c      	add	r4, r7
     19c:	1a64      	subs	r4, r4, r1
     19e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a2:	2100      	movs	r1, #0
     1a4:	b11e      	cbz	r6, 1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     1a6:	40d4      	lsrs	r4, r2
     1a8:	2300      	movs	r3, #0
     1aa:	e9c6 4300 	strd	r4, r3, [r6]
     1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b2:	b902      	cbnz	r2, 1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     1b4:	deff      	udf	#255	; 0xff
     1b6:	fab2 f282 	clz	r2, r2
     1ba:	2a00      	cmp	r2, #0
     1bc:	d14f      	bne.n	25e <CONFIG_FLASH_SIZE+0x5e>
     1be:	1bcb      	subs	r3, r1, r7
     1c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c4:	fa1f f887 	uxth.w	r8, r7
     1c8:	2101      	movs	r1, #1
     1ca:	fbb3 fcfe 	udiv	ip, r3, lr
     1ce:	0c25      	lsrs	r5, r4, #16
     1d0:	fb0e 331c 	mls	r3, lr, ip, r3
     1d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1d8:	fb08 f30c 	mul.w	r3, r8, ip
     1dc:	42ab      	cmp	r3, r5
     1de:	d907      	bls.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     1e0:	197d      	adds	r5, r7, r5
     1e2:	f10c 30ff 	add.w	r0, ip, #4294967295
     1e6:	d202      	bcs.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     1e8:	42ab      	cmp	r3, r5
     1ea:	f200 80e7 	bhi.w	3bc <CONFIG_FLASH_SIZE+0x1bc>
     1ee:	4684      	mov	ip, r0
     1f0:	1aed      	subs	r5, r5, r3
     1f2:	b2a3      	uxth	r3, r4
     1f4:	fbb5 f0fe 	udiv	r0, r5, lr
     1f8:	fb0e 5510 	mls	r5, lr, r0, r5
     1fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     200:	fb08 f800 	mul.w	r8, r8, r0
     204:	45a0      	cmp	r8, r4
     206:	d907      	bls.n	218 <CONFIG_FLASH_SIZE+0x18>
     208:	193c      	adds	r4, r7, r4
     20a:	f100 33ff 	add.w	r3, r0, #4294967295
     20e:	d202      	bcs.n	216 <CONFIG_FLASH_SIZE+0x16>
     210:	45a0      	cmp	r8, r4
     212:	f200 80d7 	bhi.w	3c4 <CONFIG_FLASH_SIZE+0x1c4>
     216:	4618      	mov	r0, r3
     218:	eba4 0408 	sub.w	r4, r4, r8
     21c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     220:	e7c0      	b.n	1a4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5a>
     222:	428b      	cmp	r3, r1
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	2e00      	cmp	r6, #0
     228:	f000 80af 	beq.w	38a <CONFIG_FLASH_SIZE+0x18a>
     22c:	2100      	movs	r1, #0
     22e:	e9c6 0500 	strd	r0, r5, [r6]
     232:	4608      	mov	r0, r1
     234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     238:	fab3 f183 	clz	r1, r3
     23c:	2900      	cmp	r1, #0
     23e:	d14b      	bne.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
     240:	42ab      	cmp	r3, r5
     242:	d302      	bcc.n	24a <CONFIG_FLASH_SIZE+0x4a>
     244:	4282      	cmp	r2, r0
     246:	f200 80b7 	bhi.w	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     24a:	1a84      	subs	r4, r0, r2
     24c:	eb65 0303 	sbc.w	r3, r5, r3
     250:	2001      	movs	r0, #1
     252:	469e      	mov	lr, r3
     254:	2e00      	cmp	r6, #0
     256:	d0aa      	beq.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     258:	e9c6 4e00 	strd	r4, lr, [r6]
     25c:	e7a7      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     25e:	f1c2 0c20 	rsb	ip, r2, #32
     262:	fa01 f302 	lsl.w	r3, r1, r2
     266:	4097      	lsls	r7, r2
     268:	fa20 f00c 	lsr.w	r0, r0, ip
     26c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     270:	fa21 fc0c 	lsr.w	ip, r1, ip
     274:	4318      	orrs	r0, r3
     276:	fbbc f1fe 	udiv	r1, ip, lr
     27a:	0c05      	lsrs	r5, r0, #16
     27c:	fb0e cc11 	mls	ip, lr, r1, ip
     280:	fa1f f887 	uxth.w	r8, r7
     284:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     288:	fb01 f308 	mul.w	r3, r1, r8
     28c:	42ab      	cmp	r3, r5
     28e:	fa04 f402 	lsl.w	r4, r4, r2
     292:	d909      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     294:	197d      	adds	r5, r7, r5
     296:	f101 3cff 	add.w	ip, r1, #4294967295
     29a:	f080 808b 	bcs.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     29e:	42ab      	cmp	r3, r5
     2a0:	f240 8088 	bls.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     2a4:	3902      	subs	r1, #2
     2a6:	443d      	add	r5, r7
     2a8:	1aeb      	subs	r3, r5, r3
     2aa:	b285      	uxth	r5, r0
     2ac:	fbb3 f0fe 	udiv	r0, r3, lr
     2b0:	fb0e 3310 	mls	r3, lr, r0, r3
     2b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2b8:	fb00 f308 	mul.w	r3, r0, r8
     2bc:	42ab      	cmp	r3, r5
     2be:	d907      	bls.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     2c0:	197d      	adds	r5, r7, r5
     2c2:	f100 3cff 	add.w	ip, r0, #4294967295
     2c6:	d271      	bcs.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2c8:	42ab      	cmp	r3, r5
     2ca:	d96f      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2cc:	3802      	subs	r0, #2
     2ce:	443d      	add	r5, r7
     2d0:	1aeb      	subs	r3, r5, r3
     2d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d6:	e778      	b.n	1ca <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x80>
     2d8:	f1c1 0c20 	rsb	ip, r1, #32
     2dc:	408b      	lsls	r3, r1
     2de:	fa22 f70c 	lsr.w	r7, r2, ip
     2e2:	431f      	orrs	r7, r3
     2e4:	fa20 f40c 	lsr.w	r4, r0, ip
     2e8:	fa05 f301 	lsl.w	r3, r5, r1
     2ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f0:	fa25 f50c 	lsr.w	r5, r5, ip
     2f4:	431c      	orrs	r4, r3
     2f6:	0c23      	lsrs	r3, r4, #16
     2f8:	fbb5 f9fe 	udiv	r9, r5, lr
     2fc:	fa1f f887 	uxth.w	r8, r7
     300:	fb0e 5519 	mls	r5, lr, r9, r5
     304:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     308:	fb09 fa08 	mul.w	sl, r9, r8
     30c:	45aa      	cmp	sl, r5
     30e:	fa02 f201 	lsl.w	r2, r2, r1
     312:	fa00 f301 	lsl.w	r3, r0, r1
     316:	d908      	bls.n	32a <CONFIG_FLASH_SIZE+0x12a>
     318:	197d      	adds	r5, r7, r5
     31a:	f109 30ff 	add.w	r0, r9, #4294967295
     31e:	d247      	bcs.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     320:	45aa      	cmp	sl, r5
     322:	d945      	bls.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     324:	f1a9 0902 	sub.w	r9, r9, #2
     328:	443d      	add	r5, r7
     32a:	eba5 050a 	sub.w	r5, r5, sl
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fe 	udiv	r0, r5, lr
     334:	fb0e 5510 	mls	r5, lr, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f808 	mul.w	r8, r0, r8
     340:	45a0      	cmp	r8, r4
     342:	d907      	bls.n	354 <CONFIG_FLASH_SIZE+0x154>
     344:	193c      	adds	r4, r7, r4
     346:	f100 35ff 	add.w	r5, r0, #4294967295
     34a:	d22d      	bcs.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     34c:	45a0      	cmp	r8, r4
     34e:	d92b      	bls.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     350:	3802      	subs	r0, #2
     352:	443c      	add	r4, r7
     354:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     358:	eba4 0408 	sub.w	r4, r4, r8
     35c:	fba0 8902 	umull	r8, r9, r0, r2
     360:	454c      	cmp	r4, r9
     362:	46c6      	mov	lr, r8
     364:	464d      	mov	r5, r9
     366:	d319      	bcc.n	39c <CONFIG_FLASH_SIZE+0x19c>
     368:	d016      	beq.n	398 <CONFIG_FLASH_SIZE+0x198>
     36a:	b15e      	cbz	r6, 384 <CONFIG_FLASH_SIZE+0x184>
     36c:	ebb3 020e 	subs.w	r2, r3, lr
     370:	eb64 0405 	sbc.w	r4, r4, r5
     374:	fa04 fc0c 	lsl.w	ip, r4, ip
     378:	40ca      	lsrs	r2, r1
     37a:	ea4c 0202 	orr.w	r2, ip, r2
     37e:	40cc      	lsrs	r4, r1
     380:	e9c6 2400 	strd	r2, r4, [r6]
     384:	2100      	movs	r1, #0
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	4631      	mov	r1, r6
     38c:	4630      	mov	r0, r6
     38e:	e70e      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     390:	46ac      	mov	ip, r5
     392:	e6ed      	b.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     394:	4618      	mov	r0, r3
     396:	e701      	b.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     398:	4543      	cmp	r3, r8
     39a:	d2e6      	bcs.n	36a <CONFIG_FLASH_SIZE+0x16a>
     39c:	ebb8 0e02 	subs.w	lr, r8, r2
     3a0:	eb69 0507 	sbc.w	r5, r9, r7
     3a4:	3801      	subs	r0, #1
     3a6:	e7e0      	b.n	36a <CONFIG_FLASH_SIZE+0x16a>
     3a8:	4628      	mov	r0, r5
     3aa:	e7d3      	b.n	354 <CONFIG_FLASH_SIZE+0x154>
     3ac:	4660      	mov	r0, ip
     3ae:	e78f      	b.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     3b0:	4681      	mov	r9, r0
     3b2:	e7ba      	b.n	32a <CONFIG_FLASH_SIZE+0x12a>
     3b4:	4661      	mov	r1, ip
     3b6:	e777      	b.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     3b8:	4608      	mov	r0, r1
     3ba:	e74b      	b.n	254 <CONFIG_FLASH_SIZE+0x54>
     3bc:	f1ac 0c02 	sub.w	ip, ip, #2
     3c0:	443d      	add	r5, r7
     3c2:	e715      	b.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     3c4:	3802      	subs	r0, #2
     3c6:	443c      	add	r4, r7
     3c8:	e726      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     3ca:	bf00      	nop

000003cc <__aeabi_idiv0>:
     3cc:	4770      	bx	lr
     3ce:	bf00      	nop

000003d0 <ALARM_Handler>:
event_t SET_TIME_Handler(KitchenTimer_t * MainObject, GenericEvent_t * Event);

void Event_dispatcher(KitchenTimer_t * MainObject,GenericEvent_t * e);

  
event_t ALARM_Handler(KitchenTimer_t * MainObject, GenericEvent_t * Event){
     3d0:	b510      	push	{r4, lr}

	switch (Event->Signal)	{
     3d2:	780b      	ldrb	r3, [r1, #0]
     3d4:	2b02      	cmp	r3, #2
     3d6:	d014      	beq.n	402 <CONFIG_MAIN_STACK_SIZE+0x2>
     3d8:	4604      	mov	r4, r0
     3da:	d807      	bhi.n	3ec <ALARM_Handler+0x1c>
     3dc:	b923      	cbnz	r3, 3e8 <ALARM_Handler+0x18>

	}

	case Entry:{

	printk("Alarm State Entry- Count down expired\n");
     3de:	480f      	ldr	r0, [pc, #60]	; (41c <CONFIG_MAIN_STACK_SIZE+0x1c>)
     3e0:	f004 fbd9 	bl	4b96 <printk>

    return EVENT_HANDLED;
     3e4:	2007      	movs	r0, #7
     3e6:	e000      	b.n	3ea <ALARM_Handler+0x1a>
	switch (Event->Signal)	{
     3e8:	2001      	movs	r0, #1
					}
	}

return 1;

}
     3ea:	bd10      	pop	{r4, pc}
	switch (Event->Signal)	{
     3ec:	3b03      	subs	r3, #3
     3ee:	b2db      	uxtb	r3, r3
     3f0:	2b02      	cmp	r3, #2
     3f2:	d810      	bhi.n	416 <CONFIG_MAIN_STACK_SIZE+0x16>
	printk("Alarm cleared\n");
     3f4:	480a      	ldr	r0, [pc, #40]	; (420 <CONFIG_MAIN_STACK_SIZE+0x20>)
     3f6:	f004 fbce 	bl	4b96 <printk>
	MainObject->CurrentState = IDLE;
     3fa:	2300      	movs	r3, #0
     3fc:	7123      	strb	r3, [r4, #4]
	return EVENT_TRANISITON;
     3fe:	2006      	movs	r0, #6
     400:	e7f3      	b.n	3ea <ALARM_Handler+0x1a>
	if(((SystemGenerated_Event_t*)Event)->SubSecond == 10){
     402:	784b      	ldrb	r3, [r1, #1]
     404:	2b0a      	cmp	r3, #10
     406:	d001      	beq.n	40c <CONFIG_MAIN_STACK_SIZE+0xc>
    return EVENT_HANDLED;
     408:	2007      	movs	r0, #7
     40a:	e7ee      	b.n	3ea <ALARM_Handler+0x1a>
	printk("Alarm State Tick Event - New Alarm\n");
     40c:	4805      	ldr	r0, [pc, #20]	; (424 <CONFIG_MAIN_STACK_SIZE+0x24>)
     40e:	f004 fbc2 	bl	4b96 <printk>
    return EVENT_HANDLED;
     412:	2007      	movs	r0, #7
     414:	e7e9      	b.n	3ea <ALARM_Handler+0x1a>
	switch (Event->Signal)	{
     416:	2001      	movs	r0, #1
     418:	e7e7      	b.n	3ea <ALARM_Handler+0x1a>
     41a:	bf00      	nop
     41c:	00006738 	.word	0x00006738
     420:	00006728 	.word	0x00006728
     424:	00006760 	.word	0x00006760

00000428 <COUNTDOWN_Handler>:


event_t COUNTDOWN_Handler(KitchenTimer_t * MainObject, GenericEvent_t * Event){
     428:	b510      	push	{r4, lr}
     42a:	4604      	mov	r4, r0

	switch (Event->Signal){
     42c:	780b      	ldrb	r3, [r1, #0]
     42e:	2b02      	cmp	r3, #2
     430:	d00a      	beq.n	448 <COUNTDOWN_Handler+0x20>
     432:	2b05      	cmp	r3, #5
     434:	d01b      	beq.n	46e <COUNTDOWN_Handler+0x46>
     436:	b10b      	cbz	r3, 43c <COUNTDOWN_Handler+0x14>
     438:	2001      	movs	r0, #1
	}
	}

return 1;

}
     43a:	bd10      	pop	{r4, pc}
	printk("Countdown State - Entry event - Countdown time in seconds - %d\n",MainObject->CountDownValue);
     43c:	6801      	ldr	r1, [r0, #0]
     43e:	480f      	ldr	r0, [pc, #60]	; (47c <COUNTDOWN_Handler+0x54>)
     440:	f004 fba9 	bl	4b96 <printk>
	return EVENT_HANDLED;
     444:	2007      	movs	r0, #7
     446:	e7f8      	b.n	43a <COUNTDOWN_Handler+0x12>
	if(((SystemGenerated_Event_t*)Event)->SubSecond == 10){
     448:	784b      	ldrb	r3, [r1, #1]
     44a:	2b0a      	cmp	r3, #10
     44c:	d001      	beq.n	452 <COUNTDOWN_Handler+0x2a>
	return EVENT_HANDLED;
     44e:	2007      	movs	r0, #7
     450:	e7f3      	b.n	43a <COUNTDOWN_Handler+0x12>
	MainObject->CountDownValue -=1;
     452:	6801      	ldr	r1, [r0, #0]
     454:	3901      	subs	r1, #1
     456:	6001      	str	r1, [r0, #0]
	printk("Countdown State Tick event- Countdown time in seconds - %d\n",MainObject->CountDownValue);
     458:	4809      	ldr	r0, [pc, #36]	; (480 <COUNTDOWN_Handler+0x58>)
     45a:	f004 fb9c 	bl	4b96 <printk>
	if(MainObject->CountDownValue ==0){
     45e:	6823      	ldr	r3, [r4, #0]
     460:	b10b      	cbz	r3, 466 <COUNTDOWN_Handler+0x3e>
	return EVENT_HANDLED;
     462:	2007      	movs	r0, #7
     464:	e7e9      	b.n	43a <COUNTDOWN_Handler+0x12>
		MainObject->CurrentState = ALARM;
     466:	2304      	movs	r3, #4
     468:	7123      	strb	r3, [r4, #4]
		return EVENT_TRANISITON;
     46a:	2006      	movs	r0, #6
     46c:	e7e5      	b.n	43a <COUNTDOWN_Handler+0x12>
	printk("START_PAUSE event received in Countdown state\n");
     46e:	4805      	ldr	r0, [pc, #20]	; (484 <COUNTDOWN_Handler+0x5c>)
     470:	f004 fb91 	bl	4b96 <printk>
	MainObject->CurrentState = PAUSE;
     474:	2303      	movs	r3, #3
     476:	7123      	strb	r3, [r4, #4]
	return EVENT_TRANISITON;
     478:	2006      	movs	r0, #6
     47a:	e7de      	b.n	43a <COUNTDOWN_Handler+0x12>
     47c:	00006784 	.word	0x00006784
     480:	000067c4 	.word	0x000067c4
     484:	00006800 	.word	0x00006800

00000488 <PAUSE_Handler>:


event_t PAUSE_Handler(KitchenTimer_t * MainObject, GenericEvent_t * Event){
     488:	b510      	push	{r4, lr}
     48a:	4604      	mov	r4, r0
	
	switch (Event->Signal){
     48c:	780b      	ldrb	r3, [r1, #0]
     48e:	2b05      	cmp	r3, #5
     490:	d823      	bhi.n	4da <PAUSE_Handler+0x52>
     492:	e8df f003 	tbb	[pc, r3]
     496:	2203      	.short	0x2203
     498:	11091822 	.word	0x11091822

	case Entry:{

	printk("Pause State - Entry - Countdown time in seconds - %d\n",MainObject->CountDownValue);
     49c:	6801      	ldr	r1, [r0, #0]
     49e:	4810      	ldr	r0, [pc, #64]	; (4e0 <PAUSE_Handler+0x58>)
     4a0:	f004 fb79 	bl	4b96 <printk>

	return EVENT_HANDLED;
     4a4:	2007      	movs	r0, #7
     4a6:	e019      	b.n	4dc <PAUSE_Handler+0x54>

	}
	
	case RESET_TIME:{

	printk("Reset time event received in Pause state\n");
     4a8:	480e      	ldr	r0, [pc, #56]	; (4e4 <PAUSE_Handler+0x5c>)
     4aa:	f004 fb74 	bl	4b96 <printk>

	MainObject->CountDownValue =0;
     4ae:	2300      	movs	r3, #0
     4b0:	6023      	str	r3, [r4, #0]

	MainObject->CurrentState = IDLE;
     4b2:	7123      	strb	r3, [r4, #4]

	return EVENT_TRANISITON;
     4b4:	2006      	movs	r0, #6
     4b6:	e011      	b.n	4dc <PAUSE_Handler+0x54>
	
	}
	
	case START_PAUSE:{

	printk("START_PAUSE event received in Pause state\n");
     4b8:	480b      	ldr	r0, [pc, #44]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     4ba:	f004 fb6c 	bl	4b96 <printk>

	MainObject->CurrentState = COUNTDOWN;
     4be:	2302      	movs	r3, #2
     4c0:	7123      	strb	r3, [r4, #4]

	return EVENT_TRANISITON;
     4c2:	2006      	movs	r0, #6
     4c4:	e00a      	b.n	4dc <PAUSE_Handler+0x54>
		
	}
	
	case INCREMENT_TIME:{

	printk("Increment time event received in Pause state\n");
     4c6:	4809      	ldr	r0, [pc, #36]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     4c8:	f004 fb65 	bl	4b96 <printk>

	MainObject->CountDownValue +=60;
     4cc:	6823      	ldr	r3, [r4, #0]
     4ce:	333c      	adds	r3, #60	; 0x3c
     4d0:	6023      	str	r3, [r4, #0]

	MainObject->CurrentState = SET_TIME;
     4d2:	2301      	movs	r3, #1
     4d4:	7123      	strb	r3, [r4, #4]

	return EVENT_TRANISITON;
     4d6:	2006      	movs	r0, #6
     4d8:	e000      	b.n	4dc <PAUSE_Handler+0x54>
	switch (Event->Signal){
     4da:	2001      	movs	r0, #1
						}
	}

return 1;

}
     4dc:	bd10      	pop	{r4, pc}
     4de:	bf00      	nop
     4e0:	00006830 	.word	0x00006830
     4e4:	00006868 	.word	0x00006868
     4e8:	00006894 	.word	0x00006894
     4ec:	000068c0 	.word	0x000068c0

000004f0 <IDLE_Handler>:


event_t IDLE_Handler(KitchenTimer_t * MainObject, GenericEvent_t * Event){
     4f0:	b510      	push	{r4, lr}
     4f2:	4604      	mov	r4, r0

	switch (Event->Signal){
     4f4:	780b      	ldrb	r3, [r1, #0]
     4f6:	b11b      	cbz	r3, 500 <IDLE_Handler+0x10>
     4f8:	2b03      	cmp	r3, #3
     4fa:	d007      	beq.n	50c <IDLE_Handler+0x1c>
     4fc:	2001      	movs	r0, #1
						}
	}

return 1;

}
     4fe:	bd10      	pop	{r4, pc}
		printk("Idle State - Entry - Countdown time in seconds - %d\n",MainObject->CountDownValue);
     500:	6801      	ldr	r1, [r0, #0]
     502:	4807      	ldr	r0, [pc, #28]	; (520 <IDLE_Handler+0x30>)
     504:	f004 fb47 	bl	4b96 <printk>
		return EVENT_HANDLED;
     508:	2007      	movs	r0, #7
     50a:	e7f8      	b.n	4fe <IDLE_Handler+0xe>
		printk("Increment time event received in Idle state\n");
     50c:	4805      	ldr	r0, [pc, #20]	; (524 <IDLE_Handler+0x34>)
     50e:	f004 fb42 	bl	4b96 <printk>
		MainObject->CountDownValue +=60;
     512:	6823      	ldr	r3, [r4, #0]
     514:	333c      	adds	r3, #60	; 0x3c
     516:	6023      	str	r3, [r4, #0]
		MainObject->CurrentState = SET_TIME;
     518:	2301      	movs	r3, #1
     51a:	7123      	strb	r3, [r4, #4]
		return EVENT_TRANISITON;
     51c:	2006      	movs	r0, #6
     51e:	e7ee      	b.n	4fe <IDLE_Handler+0xe>
     520:	000068f0 	.word	0x000068f0
     524:	00006928 	.word	0x00006928

00000528 <SET_TIME_Handler>:


event_t SET_TIME_Handler(KitchenTimer_t * MainObject, GenericEvent_t * Event){
     528:	b510      	push	{r4, lr}
     52a:	4604      	mov	r4, r0

	switch (Event->Signal){
     52c:	780b      	ldrb	r3, [r1, #0]
     52e:	2b05      	cmp	r3, #5
     530:	d827      	bhi.n	582 <SET_TIME_Handler+0x5a>
     532:	e8df f003 	tbb	[pc, r3]
     536:	2603      	.short	0x2603
     538:	1f170926 	.word	0x1f170926

	case Entry:{

	printk("SET_TIME State - Countdown time in seconds - %d\n",MainObject->CountDownValue);
     53c:	6801      	ldr	r1, [r0, #0]
     53e:	4812      	ldr	r0, [pc, #72]	; (588 <SET_TIME_Handler+0x60>)
     540:	f004 fb29 	bl	4b96 <printk>

	return EVENT_HANDLED;
     544:	2007      	movs	r0, #7
     546:	e01d      	b.n	584 <SET_TIME_Handler+0x5c>

	}

	case INCREMENT_TIME:{

	if(MainObject->CountDownValue<(60*25)){
     548:	6801      	ldr	r1, [r0, #0]
     54a:	f240 53db 	movw	r3, #1499	; 0x5db
     54e:	4299      	cmp	r1, r3
     550:	dd01      	ble.n	556 <SET_TIME_Handler+0x2e>

	return EVENT_HANDLED;
		
		}

	return EVENT_HANDLED;
     552:	2007      	movs	r0, #7
     554:	e016      	b.n	584 <SET_TIME_Handler+0x5c>
	MainObject->CountDownValue +=60;
     556:	313c      	adds	r1, #60	; 0x3c
     558:	6001      	str	r1, [r0, #0]
	printk("Increment time event received in Set_Time state - Countdown time in seconds - %d\n",MainObject->CountDownValue);
     55a:	480c      	ldr	r0, [pc, #48]	; (58c <SET_TIME_Handler+0x64>)
     55c:	f004 fb1b 	bl	4b96 <printk>
	return EVENT_HANDLED;
     560:	2007      	movs	r0, #7
     562:	e00f      	b.n	584 <SET_TIME_Handler+0x5c>
		
	}

	case RESET_TIME:{

	printk("Reset time event received in Set_Time state\n");
     564:	480a      	ldr	r0, [pc, #40]	; (590 <SET_TIME_Handler+0x68>)
     566:	f004 fb16 	bl	4b96 <printk>

	MainObject->CountDownValue =0;
     56a:	2300      	movs	r3, #0
     56c:	6023      	str	r3, [r4, #0]

	MainObject->CurrentState = IDLE;
     56e:	7123      	strb	r3, [r4, #4]

	return EVENT_TRANISITON;
     570:	2006      	movs	r0, #6
     572:	e007      	b.n	584 <SET_TIME_Handler+0x5c>
		
	}

	case START_PAUSE:{

	printk("START_PAUSE event received in set_time state\n");
     574:	4807      	ldr	r0, [pc, #28]	; (594 <SET_TIME_Handler+0x6c>)
     576:	f004 fb0e 	bl	4b96 <printk>

	MainObject->CurrentState = COUNTDOWN;
     57a:	2302      	movs	r3, #2
     57c:	7123      	strb	r3, [r4, #4]

	return EVENT_TRANISITON;
     57e:	2006      	movs	r0, #6
     580:	e000      	b.n	584 <SET_TIME_Handler+0x5c>
	switch (Event->Signal){
     582:	2001      	movs	r0, #1

	}

return 1;

}
     584:	bd10      	pop	{r4, pc}
     586:	bf00      	nop
     588:	00006958 	.word	0x00006958
     58c:	0000698c 	.word	0x0000698c
     590:	000069e0 	.word	0x000069e0
     594:	00006a10 	.word	0x00006a10

00000598 <Initialize_StateMachine>:
    StateMachine_Handler(MainObject,&TransitionEvent);
  
}

} 
void Initialize_StateMachine(void){
     598:	b508      	push	{r3, lr}

	Main_KitchenTimer.CountDownValue =(60*0);
     59a:	4804      	ldr	r0, [pc, #16]	; (5ac <Initialize_StateMachine+0x14>)
     59c:	2300      	movs	r3, #0
     59e:	6003      	str	r3, [r0, #0]

	EventStatus.Signal = Entry;
     5a0:	4903      	ldr	r1, [pc, #12]	; (5b0 <Initialize_StateMachine+0x18>)
     5a2:	700b      	strb	r3, [r1, #0]

	Main_KitchenTimer.CurrentState = IDLE;
     5a4:	7103      	strb	r3, [r0, #4]

	StateMachine_Handler(&Main_KitchenTimer,&EventStatus);
     5a6:	f004 fa82 	bl	4aae <StateMachine_Handler>

}
     5aa:	bd08      	pop	{r3, pc}
     5ac:	20000244 	.word	0x20000244
     5b0:	20000240 	.word	0x20000240

000005b4 <main>:

}



void main(void){
     5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5b8:	b082      	sub	sp, #8

	//console_init();

	Initialize_StateMachine();
     5ba:	f7ff ffed 	bl	598 <Initialize_StateMachine>
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
     5be:	f005 ff53 	bl	6468 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     5c2:	014e      	lsls	r6, r1, #5
     5c4:	0143      	lsls	r3, r0, #5
     5c6:	ea46 62d0 	orr.w	r2, r6, r0, lsr #27
     5ca:	1a1b      	subs	r3, r3, r0
     5cc:	eb62 0201 	sbc.w	r2, r2, r1
     5d0:	0096      	lsls	r6, r2, #2
     5d2:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
     5d6:	009f      	lsls	r7, r3, #2
     5d8:	4632      	mov	r2, r6
     5da:	183b      	adds	r3, r7, r0
     5dc:	eb41 0202 	adc.w	r2, r1, r2
     5e0:	00d1      	lsls	r1, r2, #3
     5e2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
     5e6:	00d8      	lsls	r0, r3, #3
     5e8:	0bc3      	lsrs	r3, r0, #15
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     5ea:	ea43 4641 	orr.w	r6, r3, r1, lsl #17
     5ee:	0bcf      	lsrs	r7, r1, #15
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     5f0:	485e      	ldr	r0, [pc, #376]	; (76c <main+0x1b8>)
     5f2:	f003 fa97 	bl	3b24 <z_impl_device_get_binding>

	static SystemGenerated_Event_t SystemTick;

	static UserGenerated_Event_t UserActivity;

	gpio0 = device_get_binding("GPIO_0");
     5f6:	f8df 8184 	ldr.w	r8, [pc, #388]	; 77c <main+0x1c8>
     5fa:	f8c8 0000 	str.w	r0, [r8]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
     5fe:	f44f 7280 	mov.w	r2, #256	; 0x100
     602:	2102      	movs	r1, #2
     604:	f004 fa2e 	bl	4a64 <z_impl_gpio_pin_configure>

   	gpio_pin_configure(gpio0, 2, GPIO_INPUT);

   	gpio_pin_configure(gpio0, 3, GPIO_INPUT);
     608:	f8d8 0000 	ldr.w	r0, [r8]
     60c:	f44f 7280 	mov.w	r2, #256	; 0x100
     610:	2103      	movs	r1, #3
     612:	f004 fa27 	bl	4a64 <z_impl_gpio_pin_configure>

   	gpio_pin_configure(gpio0, 30, GPIO_INPUT);
     616:	f8d8 0000 	ldr.w	r0, [r8]
     61a:	f44f 7280 	mov.w	r2, #256	; 0x100
     61e:	211e      	movs	r1, #30
     620:	f004 fa20 	bl	4a64 <z_impl_gpio_pin_configure>
     624:	e01a      	b.n	65c <main+0xa8>

	int button_state3 = gpio_pin_get(gpio0, 30);

	if((button_state2 !=1)|(button_state3 !=1)|(button_state !=1)){

	if(button_state2 !=1){
     626:	2f01      	cmp	r7, #1
     628:	d002      	beq.n	630 <main+0x7c>

		UserActivity.UserSignal.Signal = INCREMENT_TIME;
     62a:	4a51      	ldr	r2, [pc, #324]	; (770 <main+0x1bc>)
     62c:	2103      	movs	r1, #3
     62e:	7011      	strb	r1, [r2, #0]

	}

	if(button_state3 !=1){
     630:	2b01      	cmp	r3, #1
     632:	d002      	beq.n	63a <main+0x86>

	UserActivity.UserSignal.Signal = START_PAUSE;
     634:	4b4e      	ldr	r3, [pc, #312]	; (770 <main+0x1bc>)
     636:	2205      	movs	r2, #5
     638:	701a      	strb	r2, [r3, #0]

	}

	if(button_state !=1){
     63a:	2e01      	cmp	r6, #1
     63c:	d002      	beq.n	644 <main+0x90>

	UserActivity.UserSignal.Signal = RESET_TIME;
     63e:	4b4c      	ldr	r3, [pc, #304]	; (770 <main+0x1bc>)
     640:	2204      	movs	r2, #4
     642:	701a      	strb	r2, [r3, #0]

	}

	Event_dispatcher(&Main_KitchenTimer,&UserActivity.UserSignal);
     644:	494a      	ldr	r1, [pc, #296]	; (770 <main+0x1bc>)
     646:	484b      	ldr	r0, [pc, #300]	; (774 <main+0x1c0>)
     648:	f004 fa4b 	bl	4ae2 <Event_dispatcher>
     64c:	e069      	b.n	722 <main+0x16e>

	if(SystemTick.SubSecond>10){

		SystemTick.SubSecond=1;
	}
	else SystemTick.SubSecond++;
     64e:	3301      	adds	r3, #1
     650:	4a49      	ldr	r2, [pc, #292]	; (778 <main+0x1c4>)
     652:	7053      	strb	r3, [r2, #1]

	// control reaches every 100 milli second

	Event_dispatcher(&Main_KitchenTimer,&SystemTick.SystemSignal);
     654:	4948      	ldr	r1, [pc, #288]	; (778 <main+0x1c4>)
     656:	4847      	ldr	r0, [pc, #284]	; (774 <main+0x1c0>)
     658:	f004 fa43 	bl	4ae2 <Event_dispatcher>
     65c:	f005 ff04 	bl	6468 <z_impl_k_uptime_ticks>
     660:	014b      	lsls	r3, r1, #5
     662:	0142      	lsls	r2, r0, #5
     664:	ea43 6cd0 	orr.w	ip, r3, r0, lsr #27
     668:	1a13      	subs	r3, r2, r0
     66a:	eb6c 0201 	sbc.w	r2, ip, r1
     66e:	ea4f 0c82 	mov.w	ip, r2, lsl #2
     672:	ea4c 7c93 	orr.w	ip, ip, r3, lsr #30
     676:	ea4f 0e83 	mov.w	lr, r3, lsl #2
     67a:	4662      	mov	r2, ip
     67c:	eb1e 0300 	adds.w	r3, lr, r0
     680:	eb41 0202 	adc.w	r2, r1, r2
     684:	00d1      	lsls	r1, r2, #3
     686:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
     68a:	00d8      	lsls	r0, r3, #3
     68c:	0bc3      	lsrs	r3, r0, #15
     68e:	ea43 4241 	orr.w	r2, r3, r1, lsl #17
     692:	0bc8      	lsrs	r0, r1, #15
	if(k_uptime_get()-Current_time>=100){
     694:	1b94      	subs	r4, r2, r6
     696:	eb60 0507 	sbc.w	r5, r0, r7
     69a:	2c64      	cmp	r4, #100	; 0x64
     69c:	f175 0300 	sbcs.w	r3, r5, #0
     6a0:	dbdc      	blt.n	65c <main+0xa8>
	int button_state = gpio_pin_get(gpio0, 3);
     6a2:	4b36      	ldr	r3, [pc, #216]	; (77c <main+0x1c8>)
     6a4:	6818      	ldr	r0, [r3, #0]
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_port_get(const struct device *port,
				gpio_port_value_t *value)
{
	const struct gpio_driver_data *const data =
     6a6:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
     6a8:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
     6aa:	685b      	ldr	r3, [r3, #4]
     6ac:	a901      	add	r1, sp, #4
     6ae:	4798      	blx	r3
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
     6b0:	4606      	mov	r6, r0
     6b2:	b918      	cbnz	r0, 6bc <main+0x108>
		*value ^= data->invert;
     6b4:	683a      	ldr	r2, [r7, #0]
     6b6:	9b01      	ldr	r3, [sp, #4]
     6b8:	4053      	eors	r3, r2
     6ba:	9301      	str	r3, [sp, #4]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
     6bc:	b916      	cbnz	r6, 6c4 <main+0x110>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
     6be:	9e01      	ldr	r6, [sp, #4]
     6c0:	f3c6 06c0 	ubfx	r6, r6, #3, #1
	int button_state2 = gpio_pin_get(gpio0, 2);
     6c4:	4b2d      	ldr	r3, [pc, #180]	; (77c <main+0x1c8>)
     6c6:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
     6c8:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct gpio_driver_api *api =
     6cc:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
     6ce:	685b      	ldr	r3, [r3, #4]
     6d0:	a901      	add	r1, sp, #4
     6d2:	4798      	blx	r3
	if (ret == 0) {
     6d4:	4607      	mov	r7, r0
     6d6:	b920      	cbnz	r0, 6e2 <main+0x12e>
		*value ^= data->invert;
     6d8:	f8d8 2000 	ldr.w	r2, [r8]
     6dc:	9b01      	ldr	r3, [sp, #4]
     6de:	4053      	eors	r3, r2
     6e0:	9301      	str	r3, [sp, #4]
	if (ret == 0) {
     6e2:	b917      	cbnz	r7, 6ea <main+0x136>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
     6e4:	9f01      	ldr	r7, [sp, #4]
     6e6:	f3c7 0780 	ubfx	r7, r7, #2, #1
	int button_state3 = gpio_pin_get(gpio0, 30);
     6ea:	4b24      	ldr	r3, [pc, #144]	; (77c <main+0x1c8>)
     6ec:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
     6ee:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct gpio_driver_api *api =
     6f2:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
     6f4:	685b      	ldr	r3, [r3, #4]
     6f6:	a901      	add	r1, sp, #4
     6f8:	4798      	blx	r3
	if (ret == 0) {
     6fa:	4603      	mov	r3, r0
     6fc:	b920      	cbnz	r0, 708 <main+0x154>
		*value ^= data->invert;
     6fe:	f8d8 1000 	ldr.w	r1, [r8]
     702:	9a01      	ldr	r2, [sp, #4]
     704:	404a      	eors	r2, r1
     706:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
     708:	b913      	cbnz	r3, 710 <main+0x15c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
     70a:	9b01      	ldr	r3, [sp, #4]
     70c:	f3c3 7380 	ubfx	r3, r3, #30, #1
	if((button_state2 !=1)|(button_state3 !=1)|(button_state !=1)){
     710:	1e72      	subs	r2, r6, #1
     712:	bf18      	it	ne
     714:	2201      	movne	r2, #1
     716:	2b01      	cmp	r3, #1
     718:	bf08      	it	eq
     71a:	2f01      	cmpeq	r7, #1
     71c:	d183      	bne.n	626 <main+0x72>
     71e:	2a00      	cmp	r2, #0
     720:	d181      	bne.n	626 <main+0x72>
     722:	f005 fea1 	bl	6468 <z_impl_k_uptime_ticks>
     726:	014b      	lsls	r3, r1, #5
     728:	0142      	lsls	r2, r0, #5
     72a:	ea43 66d0 	orr.w	r6, r3, r0, lsr #27
     72e:	1a13      	subs	r3, r2, r0
     730:	eb66 0201 	sbc.w	r2, r6, r1
     734:	0096      	lsls	r6, r2, #2
     736:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
     73a:	009f      	lsls	r7, r3, #2
     73c:	4632      	mov	r2, r6
     73e:	183b      	adds	r3, r7, r0
     740:	eb41 0202 	adc.w	r2, r1, r2
     744:	00d1      	lsls	r1, r2, #3
     746:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
     74a:	00d8      	lsls	r0, r3, #3
     74c:	0bc3      	lsrs	r3, r0, #15
     74e:	ea43 4641 	orr.w	r6, r3, r1, lsl #17
     752:	0bcf      	lsrs	r7, r1, #15
	SystemTick.SystemSignal.Signal = TIME_TICK;
     754:	4b08      	ldr	r3, [pc, #32]	; (778 <main+0x1c4>)
     756:	2202      	movs	r2, #2
     758:	701a      	strb	r2, [r3, #0]
	if(SystemTick.SubSecond>10){
     75a:	785b      	ldrb	r3, [r3, #1]
     75c:	2b0a      	cmp	r3, #10
     75e:	f67f af76 	bls.w	64e <main+0x9a>
		SystemTick.SubSecond=1;
     762:	4b05      	ldr	r3, [pc, #20]	; (778 <main+0x1c4>)
     764:	2201      	movs	r2, #1
     766:	705a      	strb	r2, [r3, #1]
     768:	e774      	b.n	654 <main+0xa0>
     76a:	bf00      	nop
     76c:	00006a40 	.word	0x00006a40
     770:	20000250 	.word	0x20000250
     774:	20000244 	.word	0x20000244
     778:	2000024c 	.word	0x2000024c
     77c:	20000254 	.word	0x20000254

00000780 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     780:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     782:	680b      	ldr	r3, [r1, #0]
     784:	3301      	adds	r3, #1
     786:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     788:	4b01      	ldr	r3, [pc, #4]	; (790 <char_out+0x10>)
     78a:	681b      	ldr	r3, [r3, #0]
     78c:	4798      	blx	r3
}
     78e:	bd08      	pop	{r3, pc}
     790:	20000000 	.word	0x20000000

00000794 <__printk_hook_install>:
	_char_out = fn;
     794:	4b01      	ldr	r3, [pc, #4]	; (79c <__printk_hook_install+0x8>)
     796:	6018      	str	r0, [r3, #0]
}
     798:	4770      	bx	lr
     79a:	bf00      	nop
     79c:	20000000 	.word	0x20000000

000007a0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     7a0:	b500      	push	{lr}
     7a2:	b083      	sub	sp, #12
     7a4:	4602      	mov	r2, r0
     7a6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     7a8:	2100      	movs	r1, #0
     7aa:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     7ac:	a901      	add	r1, sp, #4
     7ae:	4803      	ldr	r0, [pc, #12]	; (7bc <vprintk+0x1c>)
     7b0:	f000 f8c8 	bl	944 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     7b4:	b003      	add	sp, #12
     7b6:	f85d fb04 	ldr.w	pc, [sp], #4
     7ba:	bf00      	nop
     7bc:	00000781 	.word	0x00000781

000007c0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     7c0:	b510      	push	{r4, lr}
     7c2:	b084      	sub	sp, #16
     7c4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     7c6:	9001      	str	r0, [sp, #4]
     7c8:	9102      	str	r1, [sp, #8]
     7ca:	2100      	movs	r1, #0
     7cc:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     7ce:	a901      	add	r1, sp, #4
     7d0:	4805      	ldr	r0, [pc, #20]	; (7e8 <vsnprintk+0x28>)
     7d2:	f000 f8b7 	bl	944 <cbvprintf>

	if (ctx.count < ctx.max) {
     7d6:	9b03      	ldr	r3, [sp, #12]
     7d8:	9a02      	ldr	r2, [sp, #8]
     7da:	4293      	cmp	r3, r2
     7dc:	da01      	bge.n	7e2 <vsnprintk+0x22>
		str[ctx.count] = '\0';
     7de:	2200      	movs	r2, #0
     7e0:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     7e2:	9803      	ldr	r0, [sp, #12]
     7e4:	b004      	add	sp, #16
     7e6:	bd10      	pop	{r4, pc}
     7e8:	00004b67 	.word	0x00004b67

000007ec <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     7ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     7f0:	b083      	sub	sp, #12
     7f2:	4604      	mov	r4, r0
     7f4:	4608      	mov	r0, r1
     7f6:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     7f8:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     7fa:	f013 0f08 	tst.w	r3, #8
     7fe:	d105      	bne.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     800:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     804:	2300      	movs	r3, #0
     806:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     808:	9301      	str	r3, [sp, #4]
}
     80a:	e069      	b.n	8e0 <CONFIG_ISR_STACK_SIZE+0xe0>
		if (evt == EVT_COMPLETE) {
     80c:	2901      	cmp	r1, #1
     80e:	d009      	beq.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     810:	f043 0320 	orr.w	r3, r3, #32
     814:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     816:	f385 8811 	msr	BASEPRI, r5
     81a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     81e:	b003      	add	sp, #12
     820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     824:	f043 0310 	orr.w	r3, r3, #16
     828:	8323      	strh	r3, [r4, #24]
     82a:	e7f4      	b.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
			evt = process_recheck(mgr);
     82c:	4620      	mov	r0, r4
     82e:	f004 f9f5 	bl	4c1c <process_recheck>
     832:	e057      	b.n	8e4 <CONFIG_ISR_STACK_SIZE+0xe4>
			res = mgr->last_res;
     834:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     838:	464a      	mov	r2, r9
     83a:	4669      	mov	r1, sp
     83c:	4620      	mov	r0, r4
     83e:	f004 fa06 	bl	4c4e <process_complete>
		onoff_transition_fn transit = NULL;
     842:	2700      	movs	r7, #0
     844:	e05a      	b.n	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
			transit = mgr->transitions->start;
     846:	6923      	ldr	r3, [r4, #16]
     848:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     84a:	2106      	movs	r1, #6
     84c:	4620      	mov	r0, r4
     84e:	f004 f9be 	bl	4bce <set_state>
		res = 0;
     852:	f04f 0900 	mov.w	r9, #0
     856:	e051      	b.n	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
			transit = mgr->transitions->stop;
     858:	6923      	ldr	r3, [r4, #16]
     85a:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     85c:	2104      	movs	r1, #4
     85e:	4620      	mov	r0, r4
     860:	f004 f9b5 	bl	4bce <set_state>
		res = 0;
     864:	f04f 0900 	mov.w	r9, #0
     868:	e048      	b.n	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
			transit = mgr->transitions->reset;
     86a:	6923      	ldr	r3, [r4, #16]
     86c:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     86e:	2105      	movs	r1, #5
     870:	4620      	mov	r0, r4
     872:	f004 f9ac 	bl	4bce <set_state>
		res = 0;
     876:	f04f 0900 	mov.w	r9, #0
     87a:	e03f      	b.n	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
     87c:	2200      	movs	r2, #0
     87e:	e046      	b.n	90e <CONFIG_ISR_STACK_SIZE+0x10e>
     880:	2200      	movs	r2, #0
     882:	e044      	b.n	90e <CONFIG_ISR_STACK_SIZE+0x10e>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     884:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     888:	8323      	strh	r3, [r4, #24]
     88a:	f385 8811 	msr	BASEPRI, r5
     88e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     892:	2900      	cmp	r1, #0
     894:	d144      	bne.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     896:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     898:	b12b      	cbz	r3, 8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
				notify_all(mgr, &clients, state, res);
     89a:	464b      	mov	r3, r9
     89c:	4642      	mov	r2, r8
     89e:	4669      	mov	r1, sp
     8a0:	4620      	mov	r0, r4
     8a2:	f004 fa4a 	bl	4d3a <notify_all>
			if (transit != NULL) {
     8a6:	b117      	cbz	r7, 8ae <CONFIG_ISR_STACK_SIZE+0xae>
				transit(mgr, transition_complete);
     8a8:	4925      	ldr	r1, [pc, #148]	; (940 <CONFIG_ISR_STACK_SIZE+0x140>)
     8aa:	4620      	mov	r0, r4
     8ac:	47b8      	blx	r7
	__asm__ volatile(
     8ae:	f04f 0320 	mov.w	r3, #32
     8b2:	f3ef 8511 	mrs	r5, BASEPRI
     8b6:	f383 8812 	msr	BASEPRI_MAX, r3
     8ba:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     8be:	8b23      	ldrh	r3, [r4, #24]
     8c0:	f023 0308 	bic.w	r3, r3, #8
     8c4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     8c6:	8b23      	ldrh	r3, [r4, #24]
     8c8:	f013 0f10 	tst.w	r3, #16
     8cc:	d02e      	beq.n	92c <CONFIG_ISR_STACK_SIZE+0x12c>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     8ce:	f023 0310 	bic.w	r3, r3, #16
     8d2:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     8d4:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     8d6:	8b26      	ldrh	r6, [r4, #24]
     8d8:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     8dc:	2800      	cmp	r0, #0
     8de:	d09a      	beq.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
		if (evt == EVT_RECHECK) {
     8e0:	2802      	cmp	r0, #2
     8e2:	d0a3      	beq.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
		if (evt == EVT_NOP) {
     8e4:	2800      	cmp	r0, #0
     8e6:	d096      	beq.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
		if (evt == EVT_COMPLETE) {
     8e8:	2801      	cmp	r0, #1
     8ea:	d0a3      	beq.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
		} else if (evt == EVT_START) {
     8ec:	2803      	cmp	r0, #3
     8ee:	d0aa      	beq.n	846 <CONFIG_ISR_STACK_SIZE+0x46>
		} else if (evt == EVT_STOP) {
     8f0:	2804      	cmp	r0, #4
     8f2:	d0b1      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
		} else if (evt == EVT_RESET) {
     8f4:	2805      	cmp	r0, #5
     8f6:	d0b8      	beq.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
		onoff_transition_fn transit = NULL;
     8f8:	2700      	movs	r7, #0
		res = 0;
     8fa:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     8fc:	8b23      	ldrh	r3, [r4, #24]
     8fe:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     902:	45b0      	cmp	r8, r6
     904:	d0ba      	beq.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     906:	68a2      	ldr	r2, [r4, #8]
     908:	2a00      	cmp	r2, #0
     90a:	d0b9      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     90c:	2201      	movs	r2, #1
		if (do_monitors
     90e:	4611      	mov	r1, r2
     910:	2a00      	cmp	r2, #0
     912:	d1b7      	bne.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
     914:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     916:	2a00      	cmp	r2, #0
     918:	d1b4      	bne.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
		    || (transit != NULL)) {
     91a:	2f00      	cmp	r7, #0
     91c:	d1b2      	bne.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
     91e:	e7d2      	b.n	8c6 <CONFIG_ISR_STACK_SIZE+0xc6>
				notify_monitors(mgr, state, res);
     920:	464a      	mov	r2, r9
     922:	4641      	mov	r1, r8
     924:	4620      	mov	r0, r4
     926:	f004 f95a 	bl	4bde <notify_monitors>
     92a:	e7b4      	b.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     92c:	f013 0f20 	tst.w	r3, #32
     930:	d004      	beq.n	93c <CONFIG_ISR_STACK_SIZE+0x13c>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     932:	f023 0320 	bic.w	r3, r3, #32
     936:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     938:	2002      	movs	r0, #2
     93a:	e7cc      	b.n	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
		evt = EVT_NOP;
     93c:	2000      	movs	r0, #0
     93e:	e7ca      	b.n	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
     940:	00004d69 	.word	0x00004d69

00000944 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     948:	b093      	sub	sp, #76	; 0x4c
     94a:	4606      	mov	r6, r0
     94c:	460d      	mov	r5, r1
     94e:	4692      	mov	sl, r2
     950:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     952:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     954:	f89a 0000 	ldrb.w	r0, [sl]
     958:	2800      	cmp	r0, #0
     95a:	f000 84d6 	beq.w	130a <CONFIG_FPROTECT_BLOCK_SIZE+0x30a>
		if (*fp != '%') {
     95e:	2825      	cmp	r0, #37	; 0x25
     960:	d008      	beq.n	974 <cbvprintf+0x30>
			OUTC(*fp++);
     962:	f10a 0a01 	add.w	sl, sl, #1
     966:	4629      	mov	r1, r5
     968:	47b0      	blx	r6
     96a:	2800      	cmp	r0, #0
     96c:	f2c0 84ce 	blt.w	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
     970:	3401      	adds	r4, #1
			continue;
     972:	e7ef      	b.n	954 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     974:	2300      	movs	r3, #0
     976:	9306      	str	r3, [sp, #24]
     978:	9307      	str	r3, [sp, #28]
     97a:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     97c:	9308      	str	r3, [sp, #32]
     97e:	9309      	str	r3, [sp, #36]	; 0x24
     980:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     982:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     986:	f89a 3001 	ldrb.w	r3, [sl, #1]
     98a:	2b25      	cmp	r3, #37	; 0x25
     98c:	d001      	beq.n	992 <cbvprintf+0x4e>
	bool loop = true;
     98e:	2701      	movs	r7, #1
     990:	e02c      	b.n	9ec <cbvprintf+0xa8>
		conv->specifier = *sp++;
     992:	f10a 0802 	add.w	r8, sl, #2
     996:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     99a:	e1a8      	b.n	cee <cbvprintf+0x3aa>
			conv->flag_dash = true;
     99c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     9a0:	f043 0304 	orr.w	r3, r3, #4
     9a4:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     9a8:	b1ff      	cbz	r7, 9ea <cbvprintf+0xa6>
			++sp;
     9aa:	f108 0801 	add.w	r8, r8, #1
     9ae:	e01c      	b.n	9ea <cbvprintf+0xa6>
			conv->flag_plus = true;
     9b0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     9b4:	f043 0308 	orr.w	r3, r3, #8
     9b8:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     9bc:	e7f4      	b.n	9a8 <cbvprintf+0x64>
			conv->flag_space = true;
     9be:	f89d 3020 	ldrb.w	r3, [sp, #32]
     9c2:	f043 0310 	orr.w	r3, r3, #16
     9c6:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     9ca:	e7ed      	b.n	9a8 <cbvprintf+0x64>
			conv->flag_hash = true;
     9cc:	f89d 3020 	ldrb.w	r3, [sp, #32]
     9d0:	f043 0320 	orr.w	r3, r3, #32
     9d4:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     9d8:	e7e6      	b.n	9a8 <cbvprintf+0x64>
			conv->flag_zero = true;
     9da:	f89d 3020 	ldrb.w	r3, [sp, #32]
     9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     9e2:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     9e6:	e7df      	b.n	9a8 <cbvprintf+0x64>
		switch (*sp) {
     9e8:	2700      	movs	r7, #0
	} while (loop);
     9ea:	b34f      	cbz	r7, a40 <cbvprintf+0xfc>
		switch (*sp) {
     9ec:	f898 3000 	ldrb.w	r3, [r8]
     9f0:	3b20      	subs	r3, #32
     9f2:	2b10      	cmp	r3, #16
     9f4:	d8f8      	bhi.n	9e8 <cbvprintf+0xa4>
     9f6:	a201      	add	r2, pc, #4	; (adr r2, 9fc <cbvprintf+0xb8>)
     9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     9fc:	000009bf 	.word	0x000009bf
     a00:	000009e9 	.word	0x000009e9
     a04:	000009e9 	.word	0x000009e9
     a08:	000009cd 	.word	0x000009cd
     a0c:	000009e9 	.word	0x000009e9
     a10:	000009e9 	.word	0x000009e9
     a14:	000009e9 	.word	0x000009e9
     a18:	000009e9 	.word	0x000009e9
     a1c:	000009e9 	.word	0x000009e9
     a20:	000009e9 	.word	0x000009e9
     a24:	000009e9 	.word	0x000009e9
     a28:	000009b1 	.word	0x000009b1
     a2c:	000009e9 	.word	0x000009e9
     a30:	0000099d 	.word	0x0000099d
     a34:	000009e9 	.word	0x000009e9
     a38:	000009e9 	.word	0x000009e9
     a3c:	000009db 	.word	0x000009db
	if (conv->flag_zero && conv->flag_dash) {
     a40:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a44:	f003 0344 	and.w	r3, r3, #68	; 0x44
     a48:	2b44      	cmp	r3, #68	; 0x44
     a4a:	d06d      	beq.n	b28 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
     a4c:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     a50:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     a58:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     a5c:	f898 3000 	ldrb.w	r3, [r8]
     a60:	2b2a      	cmp	r3, #42	; 0x2a
     a62:	d068      	beq.n	b36 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
     a64:	a805      	add	r0, sp, #20
     a66:	f004 fb05 	bl	5074 <extract_decimal>
	if (sp != wp) {
     a6a:	9b05      	ldr	r3, [sp, #20]
     a6c:	4598      	cmp	r8, r3
     a6e:	d012      	beq.n	a96 <cbvprintf+0x152>
		conv->width_present = true;
     a70:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     a78:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     a7c:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     a7e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     a82:	2800      	cmp	r0, #0
     a84:	db60      	blt.n	b48 <cbvprintf+0x204>
     a86:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     a88:	4313      	orrs	r3, r2
     a8a:	f89d 2020 	ldrb.w	r2, [sp, #32]
     a8e:	f363 0241 	bfi	r2, r3, #1, #1
     a92:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     a96:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     a98:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     a9a:	781b      	ldrb	r3, [r3, #0]
     a9c:	2b2e      	cmp	r3, #46	; 0x2e
     a9e:	bf14      	ite	ne
     aa0:	2300      	movne	r3, #0
     aa2:	2301      	moveq	r3, #1
     aa4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     aa8:	f363 0241 	bfi	r2, r3, #1, #1
     aac:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     ab0:	2b00      	cmp	r3, #0
     ab2:	d04b      	beq.n	b4c <cbvprintf+0x208>
	++sp;
     ab4:	9b05      	ldr	r3, [sp, #20]
     ab6:	1c5a      	adds	r2, r3, #1
     ab8:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     aba:	785b      	ldrb	r3, [r3, #1]
     abc:	2b2a      	cmp	r3, #42	; 0x2a
     abe:	d048      	beq.n	b52 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
     ac0:	a805      	add	r0, sp, #20
     ac2:	f004 fad7 	bl	5074 <extract_decimal>
	conv->prec_value = prec;
     ac6:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     ac8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     acc:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     ad0:	2800      	cmp	r0, #0
     ad2:	db47      	blt.n	b64 <cbvprintf+0x220>
     ad4:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     ad6:	4313      	orrs	r3, r2
     ad8:	f89d 2020 	ldrb.w	r2, [sp, #32]
     adc:	f363 0241 	bfi	r2, r3, #1, #1
     ae0:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     ae4:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
     ae8:	f898 3000 	ldrb.w	r3, [r8]
     aec:	3b4c      	subs	r3, #76	; 0x4c
     aee:	2b2e      	cmp	r3, #46	; 0x2e
     af0:	f200 80dc 	bhi.w	cac <cbvprintf+0x368>
     af4:	e8df f003 	tbb	[pc, r3]
     af8:	dadadaca 	.word	0xdadadaca
     afc:	dadadada 	.word	0xdadadada
     b00:	dadadada 	.word	0xdadadada
     b04:	dadadada 	.word	0xdadadada
     b08:	dadadada 	.word	0xdadadada
     b0c:	dadadada 	.word	0xdadadada
     b10:	dadadada 	.word	0xdadadada
     b14:	da6ada38 	.word	0xda6ada38
     b18:	dadada51 	.word	0xdadada51
     b1c:	dadadada 	.word	0xdadadada
     b20:	dadadac0 	.word	0xdadadac0
     b24:	dada      	.short	0xdada
     b26:	b6          	.byte	0xb6
     b27:	00          	.byte	0x00
		conv->flag_zero = false;
     b28:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b2c:	f36f 1386 	bfc	r3, #6, #1
     b30:	f88d 3020 	strb.w	r3, [sp, #32]
     b34:	e78a      	b.n	a4c <cbvprintf+0x108>
		conv->width_star = true;
     b36:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b3a:	f043 0301 	orr.w	r3, r3, #1
     b3e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     b42:	4643      	mov	r3, r8
     b44:	3301      	adds	r3, #1
     b46:	e7a7      	b.n	a98 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
     b48:	2201      	movs	r2, #1
     b4a:	e79d      	b.n	a88 <cbvprintf+0x144>
		return sp;
     b4c:	f8dd 8014 	ldr.w	r8, [sp, #20]
     b50:	e7ca      	b.n	ae8 <cbvprintf+0x1a4>
		conv->prec_star = true;
     b52:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b56:	f043 0304 	orr.w	r3, r3, #4
     b5a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     b5e:	f102 0801 	add.w	r8, r2, #1
     b62:	e7c1      	b.n	ae8 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
     b64:	2201      	movs	r2, #1
     b66:	e7b6      	b.n	ad6 <cbvprintf+0x192>
		if (*++sp == 'h') {
     b68:	f108 0201 	add.w	r2, r8, #1
     b6c:	f898 3001 	ldrb.w	r3, [r8, #1]
     b70:	2b68      	cmp	r3, #104	; 0x68
     b72:	d008      	beq.n	b86 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
     b74:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b78:	2102      	movs	r1, #2
     b7a:	f361 03c6 	bfi	r3, r1, #3, #4
     b7e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
     b82:	4690      	mov	r8, r2
     b84:	e02b      	b.n	bde <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
     b86:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b8a:	2201      	movs	r2, #1
     b8c:	f362 03c6 	bfi	r3, r2, #3, #4
     b90:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     b94:	f108 0802 	add.w	r8, r8, #2
     b98:	e021      	b.n	bde <cbvprintf+0x29a>
		if (*++sp == 'l') {
     b9a:	f108 0201 	add.w	r2, r8, #1
     b9e:	f898 3001 	ldrb.w	r3, [r8, #1]
     ba2:	2b6c      	cmp	r3, #108	; 0x6c
     ba4:	d008      	beq.n	bb8 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
     ba6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     baa:	2103      	movs	r1, #3
     bac:	f361 03c6 	bfi	r3, r1, #3, #4
     bb0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
     bb4:	4690      	mov	r8, r2
     bb6:	e012      	b.n	bde <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
     bb8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     bbc:	2204      	movs	r2, #4
     bbe:	f362 03c6 	bfi	r3, r2, #3, #4
     bc2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     bc6:	f108 0802 	add.w	r8, r8, #2
     bca:	e008      	b.n	bde <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
     bcc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     bd0:	2205      	movs	r2, #5
     bd2:	f362 03c6 	bfi	r3, r2, #3, #4
     bd6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     bda:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
     bde:	f818 3b01 	ldrb.w	r3, [r8], #1
     be2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
     be6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     bea:	2a37      	cmp	r2, #55	; 0x37
     bec:	f200 8150 	bhi.w	e90 <cbvprintf+0x54c>
     bf0:	e8df f012 	tbh	[pc, r2, lsl #1]
     bf4:	014e0126 	.word	0x014e0126
     bf8:	014e014e 	.word	0x014e014e
     bfc:	01260126 	.word	0x01260126
     c00:	014e0126 	.word	0x014e0126
     c04:	014e014e 	.word	0x014e014e
     c08:	014e014e 	.word	0x014e014e
     c0c:	014e014e 	.word	0x014e014e
     c10:	014e014e 	.word	0x014e014e
     c14:	014e014e 	.word	0x014e014e
     c18:	014e014e 	.word	0x014e014e
     c1c:	014e014e 	.word	0x014e014e
     c20:	0113014e 	.word	0x0113014e
     c24:	014e014e 	.word	0x014e014e
     c28:	014e014e 	.word	0x014e014e
     c2c:	014e014e 	.word	0x014e014e
     c30:	014e014e 	.word	0x014e014e
     c34:	014e0126 	.word	0x014e0126
     c38:	00630113 	.word	0x00630113
     c3c:	01260126 	.word	0x01260126
     c40:	014e0126 	.word	0x014e0126
     c44:	014e0063 	.word	0x014e0063
     c48:	014e014e 	.word	0x014e014e
     c4c:	012f014e 	.word	0x012f014e
     c50:	013f0113 	.word	0x013f0113
     c54:	014e014e 	.word	0x014e014e
     c58:	014e013f 	.word	0x014e013f
     c5c:	014e0113 	.word	0x014e0113
     c60:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
     c64:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c68:	2206      	movs	r2, #6
     c6a:	f362 03c6 	bfi	r3, r2, #3, #4
     c6e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     c72:	f108 0801 	add.w	r8, r8, #1
		break;
     c76:	e7b2      	b.n	bde <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
     c78:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c7c:	2207      	movs	r2, #7
     c7e:	f362 03c6 	bfi	r3, r2, #3, #4
     c82:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     c86:	f108 0801 	add.w	r8, r8, #1
		break;
     c8a:	e7a8      	b.n	bde <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
     c8c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c90:	2208      	movs	r2, #8
     c92:	f362 03c6 	bfi	r3, r2, #3, #4
     c96:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     c9a:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
     c9e:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ca2:	f043 0302 	orr.w	r3, r3, #2
     ca6:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     caa:	e798      	b.n	bde <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
     cac:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     cb0:	f36f 03c6 	bfc	r3, #3, #4
     cb4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
     cb8:	e791      	b.n	bde <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
     cba:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     cbe:	2101      	movs	r1, #1
     cc0:	f361 0202 	bfi	r2, r1, #0, #3
     cc4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     cc8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     ccc:	f002 0278 	and.w	r2, r2, #120	; 0x78
     cd0:	2a40      	cmp	r2, #64	; 0x40
     cd2:	f000 80aa 	beq.w	e2a <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
     cd6:	2b63      	cmp	r3, #99	; 0x63
     cd8:	f000 80ae 	beq.w	e38 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
     cdc:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ce0:	f3c3 0240 	ubfx	r2, r3, #1, #1
     ce4:	4317      	orrs	r7, r2
     ce6:	f367 0341 	bfi	r3, r7, #1, #1
     cea:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     cee:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     cf2:	f013 0f01 	tst.w	r3, #1
     cf6:	f000 80da 	beq.w	eae <cbvprintf+0x56a>
			width = va_arg(ap, int);
     cfa:	9b03      	ldr	r3, [sp, #12]
     cfc:	1d1a      	adds	r2, r3, #4
     cfe:	9203      	str	r2, [sp, #12]
     d00:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     d02:	2f00      	cmp	r7, #0
     d04:	f2c0 80cb 	blt.w	e9e <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     d08:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d0c:	f013 0f04 	tst.w	r3, #4
     d10:	f000 80df 	beq.w	ed2 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
     d14:	9b03      	ldr	r3, [sp, #12]
     d16:	1d1a      	adds	r2, r3, #4
     d18:	9203      	str	r2, [sp, #12]
     d1a:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
     d1e:	f1bb 0f00 	cmp.w	fp, #0
     d22:	f2c0 80cd 	blt.w	ec0 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     d26:	2300      	movs	r3, #0
     d28:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
     d2a:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     d2c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     d30:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     d34:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
     d38:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     d3c:	2b01      	cmp	r3, #1
     d3e:	f000 80d1 	beq.w	ee4 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     d42:	2b02      	cmp	r3, #2
     d44:	f000 8116 	beq.w	f74 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     d48:	2b04      	cmp	r3, #4
     d4a:	f000 8167 	beq.w	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     d4e:	2b03      	cmp	r3, #3
     d50:	f000 817e 	beq.w	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     d54:	f89d 9020 	ldrb.w	r9, [sp, #32]
     d58:	f019 0303 	ands.w	r3, r9, #3
     d5c:	9302      	str	r3, [sp, #8]
     d5e:	f040 817d 	bne.w	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     d62:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     d66:	3b25      	subs	r3, #37	; 0x25
     d68:	2b53      	cmp	r3, #83	; 0x53
     d6a:	f200 8233 	bhi.w	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
     d6e:	e8df f013 	tbh	[pc, r3, lsl #1]
     d72:	0181      	.short	0x0181
     d74:	02310231 	.word	0x02310231
     d78:	02310231 	.word	0x02310231
     d7c:	02310231 	.word	0x02310231
     d80:	02310231 	.word	0x02310231
     d84:	02310231 	.word	0x02310231
     d88:	02310231 	.word	0x02310231
     d8c:	02310231 	.word	0x02310231
     d90:	02310231 	.word	0x02310231
     d94:	02310231 	.word	0x02310231
     d98:	02310231 	.word	0x02310231
     d9c:	02310231 	.word	0x02310231
     da0:	02310231 	.word	0x02310231
     da4:	02310231 	.word	0x02310231
     da8:	02310231 	.word	0x02310231
     dac:	02310231 	.word	0x02310231
     db0:	02310231 	.word	0x02310231
     db4:	02310231 	.word	0x02310231
     db8:	02310231 	.word	0x02310231
     dbc:	02310231 	.word	0x02310231
     dc0:	02310231 	.word	0x02310231
     dc4:	02310231 	.word	0x02310231
     dc8:	02310231 	.word	0x02310231
     dcc:	02310231 	.word	0x02310231
     dd0:	02310231 	.word	0x02310231
     dd4:	02310231 	.word	0x02310231
     dd8:	023101c7 	.word	0x023101c7
     ddc:	02310231 	.word	0x02310231
     de0:	02310231 	.word	0x02310231
     de4:	02310231 	.word	0x02310231
     de8:	02310231 	.word	0x02310231
     dec:	01a10231 	.word	0x01a10231
     df0:	023101ab 	.word	0x023101ab
     df4:	02310231 	.word	0x02310231
     df8:	01ab0231 	.word	0x01ab0231
     dfc:	02310231 	.word	0x02310231
     e00:	02310231 	.word	0x02310231
     e04:	01c70208 	.word	0x01c70208
     e08:	023101ea 	.word	0x023101ea
     e0c:	018f0231 	.word	0x018f0231
     e10:	01c70231 	.word	0x01c70231
     e14:	02310231 	.word	0x02310231
     e18:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
     e1a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     e1e:	2102      	movs	r1, #2
     e20:	f361 0202 	bfi	r2, r1, #0, #3
     e24:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
     e28:	e74e      	b.n	cc8 <cbvprintf+0x384>
			conv->invalid = true;
     e2a:	f89d 1020 	ldrb.w	r1, [sp, #32]
     e2e:	f041 0101 	orr.w	r1, r1, #1
     e32:	f88d 1020 	strb.w	r1, [sp, #32]
     e36:	e74e      	b.n	cd6 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
     e38:	1e17      	subs	r7, r2, #0
     e3a:	bf18      	it	ne
     e3c:	2701      	movne	r7, #1
     e3e:	e74d      	b.n	cdc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
     e40:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     e44:	2204      	movs	r2, #4
     e46:	f362 0302 	bfi	r3, r2, #0, #3
     e4a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
     e4e:	2701      	movs	r7, #1
			break;
     e50:	e744      	b.n	cdc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
     e52:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     e56:	2203      	movs	r2, #3
     e58:	f362 0302 	bfi	r3, r2, #0, #3
     e5c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     e60:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e64:	f003 0378 	and.w	r3, r3, #120	; 0x78
     e68:	2b40      	cmp	r3, #64	; 0x40
     e6a:	f47f af37 	bne.w	cdc <cbvprintf+0x398>
			unsupported = true;
     e6e:	2701      	movs	r7, #1
     e70:	e734      	b.n	cdc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
     e72:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     e76:	2203      	movs	r2, #3
     e78:	f362 0302 	bfi	r3, r2, #0, #3
     e7c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
     e80:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e84:	f013 0f78 	tst.w	r3, #120	; 0x78
     e88:	f43f af28 	beq.w	cdc <cbvprintf+0x398>
			unsupported = true;
     e8c:	2701      	movs	r7, #1
     e8e:	e725      	b.n	cdc <cbvprintf+0x398>
		conv->invalid = true;
     e90:	f89d 3020 	ldrb.w	r3, [sp, #32]
     e94:	f043 0301 	orr.w	r3, r3, #1
     e98:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     e9c:	e71e      	b.n	cdc <cbvprintf+0x398>
				conv->flag_dash = true;
     e9e:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ea2:	f043 0304 	orr.w	r3, r3, #4
     ea6:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
     eaa:	427f      	negs	r7, r7
     eac:	e72c      	b.n	d08 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
     eae:	f99d 3020 	ldrsb.w	r3, [sp, #32]
     eb2:	2b00      	cmp	r3, #0
     eb4:	db02      	blt.n	ebc <cbvprintf+0x578>
		int width = -1;
     eb6:	f04f 37ff 	mov.w	r7, #4294967295
     eba:	e725      	b.n	d08 <cbvprintf+0x3c4>
			width = conv->width_value;
     ebc:	9f09      	ldr	r7, [sp, #36]	; 0x24
     ebe:	e723      	b.n	d08 <cbvprintf+0x3c4>
				conv->prec_present = false;
     ec0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     ec4:	f36f 0341 	bfc	r3, #1, #1
     ec8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
     ecc:	f04f 3bff 	mov.w	fp, #4294967295
     ed0:	e729      	b.n	d26 <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
     ed2:	f013 0f02 	tst.w	r3, #2
     ed6:	d002      	beq.n	ede <cbvprintf+0x59a>
			precision = conv->prec_value;
     ed8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
     edc:	e723      	b.n	d26 <cbvprintf+0x3e2>
		int precision = -1;
     ede:	f04f 3bff 	mov.w	fp, #4294967295
     ee2:	e720      	b.n	d26 <cbvprintf+0x3e2>
			switch (length_mod) {
     ee4:	1ecb      	subs	r3, r1, #3
     ee6:	2b04      	cmp	r3, #4
     ee8:	d804      	bhi.n	ef4 <cbvprintf+0x5b0>
     eea:	e8df f003 	tbb	[pc, r3]
     eee:	1d0b      	.short	0x1d0b
     ef0:	3529      	.short	0x3529
     ef2:	35          	.byte	0x35
     ef3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     ef4:	9b03      	ldr	r3, [sp, #12]
     ef6:	1d1a      	adds	r2, r3, #4
     ef8:	9203      	str	r2, [sp, #12]
     efa:	681a      	ldr	r2, [r3, #0]
     efc:	17d3      	asrs	r3, r2, #31
     efe:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     f02:	e006      	b.n	f12 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
     f04:	9b03      	ldr	r3, [sp, #12]
     f06:	1d1a      	adds	r2, r3, #4
     f08:	9203      	str	r2, [sp, #12]
     f0a:	681a      	ldr	r2, [r3, #0]
     f0c:	17d3      	asrs	r3, r2, #31
     f0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     f12:	2901      	cmp	r1, #1
     f14:	d028      	beq.n	f68 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
     f16:	2902      	cmp	r1, #2
     f18:	f47f af1c 	bne.w	d54 <cbvprintf+0x410>
				value->sint = (short)value->sint;
     f1c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
     f20:	17d3      	asrs	r3, r2, #31
     f22:	e9cd 2306 	strd	r2, r3, [sp, #24]
     f26:	e715      	b.n	d54 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
     f28:	9b03      	ldr	r3, [sp, #12]
     f2a:	3307      	adds	r3, #7
     f2c:	f023 0307 	bic.w	r3, r3, #7
     f30:	f103 0208 	add.w	r2, r3, #8
     f34:	9203      	str	r2, [sp, #12]
     f36:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     f3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     f3e:	e7e8      	b.n	f12 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
     f40:	9b03      	ldr	r3, [sp, #12]
     f42:	3307      	adds	r3, #7
     f44:	f023 0307 	bic.w	r3, r3, #7
     f48:	f103 0208 	add.w	r2, r3, #8
     f4c:	9203      	str	r2, [sp, #12]
     f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     f52:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     f56:	e7dc      	b.n	f12 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f58:	9b03      	ldr	r3, [sp, #12]
     f5a:	1d1a      	adds	r2, r3, #4
     f5c:	9203      	str	r2, [sp, #12]
     f5e:	681a      	ldr	r2, [r3, #0]
     f60:	17d3      	asrs	r3, r2, #31
				value->sint =
     f62:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     f66:	e7d4      	b.n	f12 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
     f68:	f89d 3018 	ldrb.w	r3, [sp, #24]
     f6c:	9306      	str	r3, [sp, #24]
     f6e:	2300      	movs	r3, #0
     f70:	9307      	str	r3, [sp, #28]
     f72:	e6ef      	b.n	d54 <cbvprintf+0x410>
			switch (length_mod) {
     f74:	1ecb      	subs	r3, r1, #3
     f76:	2b04      	cmp	r3, #4
     f78:	d804      	bhi.n	f84 <cbvprintf+0x640>
     f7a:	e8df f003 	tbb	[pc, r3]
     f7e:	1f0b      	.short	0x1f0b
     f80:	4135      	.short	0x4135
     f82:	41          	.byte	0x41
     f83:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     f84:	9b03      	ldr	r3, [sp, #12]
     f86:	1d1a      	adds	r2, r3, #4
     f88:	9203      	str	r2, [sp, #12]
     f8a:	681b      	ldr	r3, [r3, #0]
     f8c:	9306      	str	r3, [sp, #24]
     f8e:	2300      	movs	r3, #0
     f90:	9307      	str	r3, [sp, #28]
				break;
     f92:	e01e      	b.n	fd2 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
     f94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
     f98:	2b63      	cmp	r3, #99	; 0x63
     f9a:	d007      	beq.n	fac <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
     f9c:	9b03      	ldr	r3, [sp, #12]
     f9e:	1d1a      	adds	r2, r3, #4
     fa0:	9203      	str	r2, [sp, #12]
     fa2:	681b      	ldr	r3, [r3, #0]
     fa4:	9306      	str	r3, [sp, #24]
     fa6:	2300      	movs	r3, #0
     fa8:	9307      	str	r3, [sp, #28]
     faa:	e012      	b.n	fd2 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
     fac:	9b03      	ldr	r3, [sp, #12]
     fae:	1d1a      	adds	r2, r3, #4
     fb0:	9203      	str	r2, [sp, #12]
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	9306      	str	r3, [sp, #24]
     fb6:	2300      	movs	r3, #0
     fb8:	9307      	str	r3, [sp, #28]
     fba:	e00a      	b.n	fd2 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
     fbc:	9b03      	ldr	r3, [sp, #12]
     fbe:	3307      	adds	r3, #7
     fc0:	f023 0307 	bic.w	r3, r3, #7
     fc4:	f103 0208 	add.w	r2, r3, #8
     fc8:	9203      	str	r2, [sp, #12]
     fca:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     fce:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     fd2:	2901      	cmp	r1, #1
     fd4:	d01c      	beq.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
			} else if (length_mod == LENGTH_H) {
     fd6:	2902      	cmp	r1, #2
     fd8:	f47f aebc 	bne.w	d54 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
     fdc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     fe0:	9306      	str	r3, [sp, #24]
     fe2:	2300      	movs	r3, #0
     fe4:	9307      	str	r3, [sp, #28]
     fe6:	e6b5      	b.n	d54 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
     fe8:	9b03      	ldr	r3, [sp, #12]
     fea:	3307      	adds	r3, #7
     fec:	f023 0307 	bic.w	r3, r3, #7
     ff0:	f103 0208 	add.w	r2, r3, #8
     ff4:	9203      	str	r2, [sp, #12]
     ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     ffa:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     ffe:	e7e8      	b.n	fd2 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    1000:	9b03      	ldr	r3, [sp, #12]
    1002:	1d1a      	adds	r2, r3, #4
    1004:	9203      	str	r2, [sp, #12]
    1006:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1008:	9306      	str	r3, [sp, #24]
    100a:	2300      	movs	r3, #0
    100c:	9307      	str	r3, [sp, #28]
				break;
    100e:	e7e0      	b.n	fd2 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    1010:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1014:	9306      	str	r3, [sp, #24]
    1016:	2300      	movs	r3, #0
    1018:	9307      	str	r3, [sp, #28]
    101a:	e69b      	b.n	d54 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    101c:	2908      	cmp	r1, #8
    101e:	d00b      	beq.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
				value->dbl = va_arg(ap, double);
    1020:	9b03      	ldr	r3, [sp, #12]
    1022:	3307      	adds	r3, #7
    1024:	f023 0307 	bic.w	r3, r3, #7
    1028:	f103 0208 	add.w	r2, r3, #8
    102c:	9203      	str	r2, [sp, #12]
    102e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1032:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1036:	e68d      	b.n	d54 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    1038:	9b03      	ldr	r3, [sp, #12]
    103a:	3307      	adds	r3, #7
    103c:	f023 0307 	bic.w	r3, r3, #7
    1040:	f103 0208 	add.w	r2, r3, #8
    1044:	9203      	str	r2, [sp, #12]
    1046:	e9d3 2300 	ldrd	r2, r3, [r3]
    104a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    104e:	e681      	b.n	d54 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    1050:	9b03      	ldr	r3, [sp, #12]
    1052:	1d1a      	adds	r2, r3, #4
    1054:	9203      	str	r2, [sp, #12]
    1056:	681b      	ldr	r3, [r3, #0]
    1058:	9306      	str	r3, [sp, #24]
    105a:	e67b      	b.n	d54 <cbvprintf+0x410>
			OUTS(sp, fp);
    105c:	4643      	mov	r3, r8
    105e:	4652      	mov	r2, sl
    1060:	4629      	mov	r1, r5
    1062:	4630      	mov	r0, r6
    1064:	f004 f883 	bl	516e <outs>
    1068:	2800      	cmp	r0, #0
    106a:	f2c0 814f 	blt.w	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    106e:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1070:	46c2      	mov	sl, r8
			continue;
    1072:	e46f      	b.n	954 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    1074:	4629      	mov	r1, r5
    1076:	2025      	movs	r0, #37	; 0x25
    1078:	47b0      	blx	r6
    107a:	2800      	cmp	r0, #0
    107c:	f2c0 8146 	blt.w	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    1080:	3401      	adds	r4, #1
		char sign = 0;
    1082:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    1086:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    108a:	f04f 0a00 	mov.w	sl, #0
			break;
    108e:	e0a7      	b.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
		case 's': {
			bps = (const char *)value->ptr;
    1090:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    1094:	f1bb 0f00 	cmp.w	fp, #0
    1098:	db08      	blt.n	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
				len = strnlen(bps, precision);
    109a:	4659      	mov	r1, fp
    109c:	4650      	mov	r0, sl
    109e:	f004 f95a 	bl	5356 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    10a2:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    10a6:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    10aa:	e099      	b.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
				len = strlen(bps);
    10ac:	4650      	mov	r0, sl
    10ae:	f004 f94a 	bl	5346 <strlen>
    10b2:	e7f6      	b.n	10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    10b4:	9b06      	ldr	r3, [sp, #24]
    10b6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    10ba:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    10be:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    10c2:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    10c6:	e08b      	b.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    10c8:	f019 0f08 	tst.w	r9, #8
    10cc:	d105      	bne.n	10da <CONFIG_FPROTECT_BLOCK_SIZE+0xda>
				sign = '+';
			} else if (conv->flag_space) {
    10ce:	f019 0910 	ands.w	r9, r9, #16
    10d2:	d004      	beq.n	10de <CONFIG_FPROTECT_BLOCK_SIZE+0xde>
				sign = ' ';
    10d4:	f04f 0920 	mov.w	r9, #32
    10d8:	e001      	b.n	10de <CONFIG_FPROTECT_BLOCK_SIZE+0xde>
				sign = '+';
    10da:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    10de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    10e2:	2a00      	cmp	r2, #0
    10e4:	f173 0100 	sbcs.w	r1, r3, #0
    10e8:	db02      	blt.n	10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    10ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
    10ee:	e009      	b.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
				value->uint = (uint_value_type)-sint;
    10f0:	4252      	negs	r2, r2
    10f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    10f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    10fa:	f04f 092d 	mov.w	r9, #45	; 0x2d
    10fe:	e001      	b.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
		switch (conv->specifier) {
    1100:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    1104:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    1108:	9300      	str	r3, [sp, #0]
    110a:	ab0c      	add	r3, sp, #48	; 0x30
    110c:	aa08      	add	r2, sp, #32
    110e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1112:	f003 ffc2 	bl	509a <encode_uint>
    1116:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    1118:	f1bb 0f00 	cmp.w	fp, #0
    111c:	f2c0 8090 	blt.w	1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>
				size_t len = bpe - bps;
    1120:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    1124:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    1128:	f89d 2020 	ldrb.w	r2, [sp, #32]
    112c:	f36f 1286 	bfc	r2, #6, #1
    1130:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    1134:	459b      	cmp	fp, r3
    1136:	f240 8086 	bls.w	1246 <CONFIG_FPROTECT_BLOCK_SIZE+0x246>
					conv->pad0_value = precision - (int)len;
    113a:	ebab 0303 	sub.w	r3, fp, r3
    113e:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    1140:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    1144:	e04c      	b.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    1146:	9806      	ldr	r0, [sp, #24]
    1148:	b930      	cbnz	r0, 1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
		char sign = 0;
    114a:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    114e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>
			bps = "(nil)";
    1152:	f1ab 0a05 	sub.w	sl, fp, #5
    1156:	e043      	b.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1158:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    115c:	9300      	str	r3, [sp, #0]
    115e:	ab0c      	add	r3, sp, #48	; 0x30
    1160:	aa08      	add	r2, sp, #32
    1162:	2100      	movs	r1, #0
    1164:	f003 ff99 	bl	509a <encode_uint>
    1168:	4682      	mov	sl, r0
				conv->altform_0c = true;
    116a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    116e:	f043 0310 	orr.w	r3, r3, #16
    1172:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    1176:	2378      	movs	r3, #120	; 0x78
    1178:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    117c:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    1180:	e7ca      	b.n	1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1182:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    1184:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1188:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    118c:	2b07      	cmp	r3, #7
    118e:	d806      	bhi.n	119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
    1190:	e8df f003 	tbb	[pc, r3]
    1194:	100e0c04 	.word	0x100e0c04
    1198:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    119c:	6014      	str	r4, [r2, #0]
		char sign = 0;
    119e:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    11a2:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    11a6:	f04f 0a00 	mov.w	sl, #0
}
    11aa:	e019      	b.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
		*(signed char *)dp = (signed char)count;
    11ac:	7014      	strb	r4, [r2, #0]
		break;
    11ae:	e7f6      	b.n	119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
		*(short *)dp = (short)count;
    11b0:	8014      	strh	r4, [r2, #0]
		break;
    11b2:	e7f4      	b.n	119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
		*(long *)dp = (long)count;
    11b4:	6014      	str	r4, [r2, #0]
		break;
    11b6:	e7f2      	b.n	119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
		*(long long *)dp = (long long)count;
    11b8:	4620      	mov	r0, r4
    11ba:	17e1      	asrs	r1, r4, #31
    11bc:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    11c0:	e7ed      	b.n	119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
		*(intmax_t *)dp = (intmax_t)count;
    11c2:	4620      	mov	r0, r4
    11c4:	17e1      	asrs	r1, r4, #31
    11c6:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    11ca:	e7e8      	b.n	119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
		*(size_t *)dp = (size_t)count;
    11cc:	6014      	str	r4, [r2, #0]
		break;
    11ce:	e7e6      	b.n	119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    11d0:	6014      	str	r4, [r2, #0]
		break;
    11d2:	e7e4      	b.n	119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
		switch (conv->specifier) {
    11d4:	f8dd 9008 	ldr.w	r9, [sp, #8]
    11d8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    11dc:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    11e0:	f1ba 0f00 	cmp.w	sl, #0
    11e4:	f000 808e 	beq.w	1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    11e8:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    11ec:	f1b9 0f00 	cmp.w	r9, #0
    11f0:	d000      	beq.n	11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>
			nj_len += 1U;
    11f2:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    11f4:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    11f8:	f011 0f10 	tst.w	r1, #16
    11fc:	d026      	beq.n	124c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>
			nj_len += 2U;
    11fe:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1200:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1202:	4413      	add	r3, r2
		if (conv->pad_fp) {
    1204:	f011 0f40 	tst.w	r1, #64	; 0x40
    1208:	d001      	beq.n	120e <CONFIG_FPROTECT_BLOCK_SIZE+0x20e>
			nj_len += conv->pad0_pre_exp;
    120a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    120c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    120e:	2f00      	cmp	r7, #0
    1210:	dd32      	ble.n	1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>
			width -= (int)nj_len;
    1212:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    1214:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1218:	f013 0f04 	tst.w	r3, #4
    121c:	d12c      	bne.n	1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    121e:	f013 0f40 	tst.w	r3, #64	; 0x40
    1222:	d018      	beq.n	1256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
					if (sign != 0) {
    1224:	f1b9 0f00 	cmp.w	r9, #0
    1228:	d018      	beq.n	125c <CONFIG_FPROTECT_BLOCK_SIZE+0x25c>
						OUTC(sign);
    122a:	4629      	mov	r1, r5
    122c:	4648      	mov	r0, r9
    122e:	47b0      	blx	r6
    1230:	2800      	cmp	r0, #0
    1232:	db6b      	blt.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    1234:	3401      	adds	r4, #1
						sign = 0;
    1236:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    123a:	2330      	movs	r3, #48	; 0x30
    123c:	9302      	str	r3, [sp, #8]
    123e:	e00f      	b.n	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
		const char *bpe = buf + sizeof(buf);
    1240:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    1244:	e7cc      	b.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
    1246:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    124a:	e7c9      	b.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
		} else if (conv->altform_0) {
    124c:	f011 0f08 	tst.w	r1, #8
    1250:	d0d6      	beq.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
			nj_len += 1U;
    1252:	3201      	adds	r2, #1
    1254:	e7d4      	b.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
				char pad = ' ';
    1256:	2320      	movs	r3, #32
    1258:	9302      	str	r3, [sp, #8]
    125a:	e001      	b.n	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
					pad = '0';
    125c:	2330      	movs	r3, #48	; 0x30
    125e:	9302      	str	r3, [sp, #8]
    1260:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1262:	1e5f      	subs	r7, r3, #1
    1264:	2b00      	cmp	r3, #0
    1266:	dd07      	ble.n	1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>
					OUTC(pad);
    1268:	4629      	mov	r1, r5
    126a:	9802      	ldr	r0, [sp, #8]
    126c:	47b0      	blx	r6
    126e:	2800      	cmp	r0, #0
    1270:	db4c      	blt.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    1272:	3401      	adds	r4, #1
				while (width-- > 0) {
    1274:	463b      	mov	r3, r7
    1276:	e7f4      	b.n	1262 <CONFIG_FPROTECT_BLOCK_SIZE+0x262>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1278:	f1b9 0f00 	cmp.w	r9, #0
    127c:	d005      	beq.n	128a <CONFIG_FPROTECT_BLOCK_SIZE+0x28a>
			OUTC(sign);
    127e:	4629      	mov	r1, r5
    1280:	4648      	mov	r0, r9
    1282:	47b0      	blx	r6
    1284:	2800      	cmp	r0, #0
    1286:	db41      	blt.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    1288:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    128a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    128e:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1292:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1296:	4313      	orrs	r3, r2
    1298:	d005      	beq.n	12a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a6>
				OUTC('0');
    129a:	4629      	mov	r1, r5
    129c:	2030      	movs	r0, #48	; 0x30
    129e:	47b0      	blx	r6
    12a0:	2800      	cmp	r0, #0
    12a2:	db33      	blt.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    12a4:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    12a6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    12aa:	f013 0f10 	tst.w	r3, #16
    12ae:	d006      	beq.n	12be <CONFIG_FPROTECT_BLOCK_SIZE+0x2be>
				OUTC(conv->specifier);
    12b0:	4629      	mov	r1, r5
    12b2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    12b6:	47b0      	blx	r6
    12b8:	2800      	cmp	r0, #0
    12ba:	db27      	blt.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    12bc:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    12be:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    12c0:	f103 39ff 	add.w	r9, r3, #4294967295
    12c4:	2b00      	cmp	r3, #0
    12c6:	dd07      	ble.n	12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
				OUTC('0');
    12c8:	4629      	mov	r1, r5
    12ca:	2030      	movs	r0, #48	; 0x30
    12cc:	47b0      	blx	r6
    12ce:	2800      	cmp	r0, #0
    12d0:	db1c      	blt.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    12d2:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    12d4:	464b      	mov	r3, r9
    12d6:	e7f3      	b.n	12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>
			}

			OUTS(bps, bpe);
    12d8:	465b      	mov	r3, fp
    12da:	4652      	mov	r2, sl
    12dc:	4629      	mov	r1, r5
    12de:	4630      	mov	r0, r6
    12e0:	f003 ff45 	bl	516e <outs>
    12e4:	2800      	cmp	r0, #0
    12e6:	db11      	blt.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    12e8:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    12ea:	2f00      	cmp	r7, #0
    12ec:	dd07      	ble.n	12fe <CONFIG_FPROTECT_BLOCK_SIZE+0x2fe>
			OUTC(' ');
    12ee:	4629      	mov	r1, r5
    12f0:	2020      	movs	r0, #32
    12f2:	47b0      	blx	r6
    12f4:	2800      	cmp	r0, #0
    12f6:	db09      	blt.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    12f8:	3401      	adds	r4, #1
			--width;
    12fa:	3f01      	subs	r7, #1
    12fc:	e7f5      	b.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
		fp = extract_conversion(conv, sp);
    12fe:	46c2      	mov	sl, r8
    1300:	f7ff bb28 	b.w	954 <cbvprintf+0x10>
    1304:	46c2      	mov	sl, r8
    1306:	f7ff bb25 	b.w	954 <cbvprintf+0x10>
		}
	}

	return count;
    130a:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    130c:	b013      	add	sp, #76	; 0x4c
    130e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1312:	bf00      	nop
    1314:	00006a4d 	.word	0x00006a4d

00001318 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    1318:	4b1b      	ldr	r3, [pc, #108]	; (1388 <pm_system_resume+0x70>)
    131a:	681b      	ldr	r3, [r3, #0]
    131c:	2b00      	cmp	r3, #0
    131e:	d132      	bne.n	1386 <pm_system_resume+0x6e>
{
    1320:	b530      	push	{r4, r5, lr}
    1322:	b085      	sub	sp, #20
		post_ops_done = 1;
    1324:	4b18      	ldr	r3, [pc, #96]	; (1388 <pm_system_resume+0x70>)
    1326:	2201      	movs	r2, #1
    1328:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    132a:	4b18      	ldr	r3, [pc, #96]	; (138c <pm_system_resume+0x74>)
    132c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1330:	ab04      	add	r3, sp, #16
    1332:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1336:	4b16      	ldr	r3, [pc, #88]	; (1390 <pm_system_resume+0x78>)
    1338:	b163      	cbz	r3, 1354 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    133a:	f004 f877 	bl	542c <pm_power_state_exit_post_ops>
    133e:	f04f 0320 	mov.w	r3, #32
    1342:	f3ef 8511 	mrs	r5, BASEPRI
    1346:	f383 8812 	msr	BASEPRI_MAX, r3
    134a:	f3bf 8f6f 	isb	sy
    134e:	4b11      	ldr	r3, [pc, #68]	; (1394 <pm_system_resume+0x7c>)
    1350:	681c      	ldr	r4, [r3, #0]
    1352:	e00a      	b.n	136a <pm_system_resume+0x52>
	__asm__ volatile(
    1354:	2300      	movs	r3, #0
    1356:	f383 8811 	msr	BASEPRI, r3
    135a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    135e:	e7ee      	b.n	133e <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1360:	4623      	mov	r3, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    1362:	b10c      	cbz	r4, 1368 <pm_system_resume+0x50>
	return node->next;
    1364:	6823      	ldr	r3, [r4, #0]
    1366:	b143      	cbz	r3, 137a <pm_system_resume+0x62>
{
    1368:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    136a:	b134      	cbz	r4, 137a <pm_system_resume+0x62>
			callback = notifier->state_exit;
    136c:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    136e:	2b00      	cmp	r3, #0
    1370:	d0f6      	beq.n	1360 <pm_system_resume+0x48>
			callback(z_power_state.state);
    1372:	4a06      	ldr	r2, [pc, #24]	; (138c <pm_system_resume+0x74>)
    1374:	7810      	ldrb	r0, [r2, #0]
    1376:	4798      	blx	r3
    1378:	e7f2      	b.n	1360 <pm_system_resume+0x48>
	__asm__ volatile(
    137a:	f385 8811 	msr	BASEPRI, r5
    137e:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    1382:	b005      	add	sp, #20
    1384:	bd30      	pop	{r4, r5, pc}
    1386:	4770      	bx	lr
    1388:	20000004 	.word	0x20000004
    138c:	20000260 	.word	0x20000260
    1390:	0000542d 	.word	0x0000542d
    1394:	20000258 	.word	0x20000258

00001398 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    1398:	b570      	push	{r4, r5, r6, lr}
    139a:	b088      	sub	sp, #32
    139c:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    139e:	4c2a      	ldr	r4, [pc, #168]	; (1448 <pm_system_suspend+0xb0>)
    13a0:	466d      	mov	r5, sp
    13a2:	4601      	mov	r1, r0
    13a4:	4628      	mov	r0, r5
    13a6:	f003 fefd 	bl	51a4 <pm_policy_next_state>
    13aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    13ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    13b2:	7820      	ldrb	r0, [r4, #0]
    13b4:	2800      	cmp	r0, #0
    13b6:	d045      	beq.n	1444 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    13b8:	4b24      	ldr	r3, [pc, #144]	; (144c <pm_system_suspend+0xb4>)
    13ba:	2200      	movs	r2, #0
    13bc:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    13be:	f1b6 3fff 	cmp.w	r6, #4294967295
    13c2:	d10c      	bne.n	13de <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    13c4:	f002 fe92 	bl	40ec <k_sched_lock>
	__asm__ volatile(
    13c8:	f04f 0320 	mov.w	r3, #32
    13cc:	f3ef 8511 	mrs	r5, BASEPRI
    13d0:	f383 8812 	msr	BASEPRI_MAX, r3
    13d4:	f3bf 8f6f 	isb	sy
	return list->head;
    13d8:	4b1d      	ldr	r3, [pc, #116]	; (1450 <pm_system_suspend+0xb8>)
    13da:	681c      	ldr	r4, [r3, #0]
    13dc:	e016      	b.n	140c <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    13de:	68a3      	ldr	r3, [r4, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    13e0:	0c59      	lsrs	r1, r3, #17
    13e2:	03d8      	lsls	r0, r3, #15
    13e4:	4c1b      	ldr	r4, [pc, #108]	; (1454 <pm_system_suspend+0xbc>)
    13e6:	4a1c      	ldr	r2, [pc, #112]	; (1458 <pm_system_suspend+0xc0>)
    13e8:	2300      	movs	r3, #0
    13ea:	1900      	adds	r0, r0, r4
    13ec:	f04f 0400 	mov.w	r4, #0
    13f0:	eb44 0101 	adc.w	r1, r4, r1
    13f4:	f7fe fe72 	bl	dc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    13f8:	2101      	movs	r1, #1
    13fa:	1a30      	subs	r0, r6, r0
    13fc:	f005 f805 	bl	640a <z_set_timeout_expiry>
    1400:	e7e0      	b.n	13c4 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1402:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    1404:	b10c      	cbz	r4, 140a <pm_system_suspend+0x72>
	return node->next;
    1406:	6823      	ldr	r3, [r4, #0]
    1408:	b143      	cbz	r3, 141c <pm_system_suspend+0x84>
{
    140a:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    140c:	b134      	cbz	r4, 141c <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    140e:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    1410:	2b00      	cmp	r3, #0
    1412:	d0f6      	beq.n	1402 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    1414:	4a0c      	ldr	r2, [pc, #48]	; (1448 <pm_system_suspend+0xb0>)
    1416:	7810      	ldrb	r0, [r2, #0]
    1418:	4798      	blx	r3
    141a:	e7f2      	b.n	1402 <pm_system_suspend+0x6a>
	__asm__ volatile(
    141c:	f385 8811 	msr	BASEPRI, r5
    1420:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    1424:	4b08      	ldr	r3, [pc, #32]	; (1448 <pm_system_suspend+0xb0>)
    1426:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    142a:	ab08      	add	r3, sp, #32
    142c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1430:	4b0a      	ldr	r3, [pc, #40]	; (145c <pm_system_suspend+0xc4>)
    1432:	b10b      	cbz	r3, 1438 <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    1434:	f003 ffe7 	bl	5406 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    1438:	f7ff ff6e 	bl	1318 <pm_system_resume>
	k_sched_unlock();
    143c:	f002 fff4 	bl	4428 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    1440:	4b01      	ldr	r3, [pc, #4]	; (1448 <pm_system_suspend+0xb0>)
    1442:	7818      	ldrb	r0, [r3, #0]
}
    1444:	b008      	add	sp, #32
    1446:	bd70      	pop	{r4, r5, r6, pc}
    1448:	20000260 	.word	0x20000260
    144c:	20000004 	.word	0x20000004
    1450:	20000258 	.word	0x20000258
    1454:	000f423f 	.word	0x000f423f
    1458:	000f4240 	.word	0x000f4240
    145c:	00005407 	.word	0x00005407

00001460 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1460:	4901      	ldr	r1, [pc, #4]	; (1468 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1462:	2210      	movs	r2, #16
	str	r2, [r1]
    1464:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1466:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1468:	e000ed10 	.word	0xe000ed10

0000146c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    146c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    146e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1470:	f380 8811 	msr	BASEPRI, r0
	isb
    1474:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1478:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    147c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    147e:	b662      	cpsie	i
	isb
    1480:	f3bf 8f6f 	isb	sy

	bx	lr
    1484:	4770      	bx	lr
    1486:	bf00      	nop

00001488 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1488:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    148a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    148c:	f381 8811 	msr	BASEPRI, r1

	wfe
    1490:	bf20      	wfe

	msr	BASEPRI, r0
    1492:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1496:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1498:	4770      	bx	lr
    149a:	bf00      	nop

0000149c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    149c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    149e:	2b00      	cmp	r3, #0
    14a0:	db08      	blt.n	14b4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14a2:	f000 001f 	and.w	r0, r0, #31
    14a6:	095b      	lsrs	r3, r3, #5
    14a8:	2201      	movs	r2, #1
    14aa:	fa02 f000 	lsl.w	r0, r2, r0
    14ae:	4a02      	ldr	r2, [pc, #8]	; (14b8 <arch_irq_enable+0x1c>)
    14b0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    14b4:	4770      	bx	lr
    14b6:	bf00      	nop
    14b8:	e000e100 	.word	0xe000e100

000014bc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    14bc:	0942      	lsrs	r2, r0, #5
    14be:	4b05      	ldr	r3, [pc, #20]	; (14d4 <arch_irq_is_enabled+0x18>)
    14c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    14c4:	f000 001f 	and.w	r0, r0, #31
    14c8:	2301      	movs	r3, #1
    14ca:	fa03 f000 	lsl.w	r0, r3, r0
}
    14ce:	4010      	ands	r0, r2
    14d0:	4770      	bx	lr
    14d2:	bf00      	nop
    14d4:	e000e100 	.word	0xe000e100

000014d8 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    14d8:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    14da:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    14dc:	2b00      	cmp	r3, #0
    14de:	db08      	blt.n	14f2 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14e0:	0149      	lsls	r1, r1, #5
    14e2:	b2c9      	uxtb	r1, r1
    14e4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    14e8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    14ec:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    14f0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f2:	f000 000f 	and.w	r0, r0, #15
    14f6:	0149      	lsls	r1, r1, #5
    14f8:	b2c9      	uxtb	r1, r1
    14fa:	4b01      	ldr	r3, [pc, #4]	; (1500 <z_arm_irq_priority_set+0x28>)
    14fc:	5419      	strb	r1, [r3, r0]
}
    14fe:	4770      	bx	lr
    1500:	e000ed14 	.word	0xe000ed14

00001504 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1504:	bf30      	wfi
    b z_SysNmiOnReset
    1506:	f7ff bffd 	b.w	1504 <z_SysNmiOnReset>
    150a:	bf00      	nop

0000150c <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    150c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    150e:	4b0b      	ldr	r3, [pc, #44]	; (153c <z_arm_prep_c+0x30>)
    1510:	4a0b      	ldr	r2, [pc, #44]	; (1540 <z_arm_prep_c+0x34>)
    1512:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1516:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1518:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    151c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1520:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1524:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    152c:	f002 fbd2 	bl	3cd4 <z_bss_zero>
	z_data_copy();
    1530:	f003 f8ea 	bl	4708 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1534:	f000 fa12 	bl	195c <z_arm_interrupt_init>
	z_cstart();
    1538:	f002 fbd8 	bl	3cec <z_cstart>
    153c:	e000ed00 	.word	0xe000ed00
    1540:	00000000 	.word	0x00000000

00001544 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1544:	4a0a      	ldr	r2, [pc, #40]	; (1570 <arch_swap+0x2c>)
    1546:	6893      	ldr	r3, [r2, #8]
    1548:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    154c:	4909      	ldr	r1, [pc, #36]	; (1574 <arch_swap+0x30>)
    154e:	6809      	ldr	r1, [r1, #0]
    1550:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1554:	4908      	ldr	r1, [pc, #32]	; (1578 <arch_swap+0x34>)
    1556:	684b      	ldr	r3, [r1, #4]
    1558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    155c:	604b      	str	r3, [r1, #4]
    155e:	2300      	movs	r3, #0
    1560:	f383 8811 	msr	BASEPRI, r3
    1564:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1568:	6893      	ldr	r3, [r2, #8]
}
    156a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    156e:	4770      	bx	lr
    1570:	200008c8 	.word	0x200008c8
    1574:	00006bf8 	.word	0x00006bf8
    1578:	e000ed00 	.word	0xe000ed00

0000157c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    157c:	4913      	ldr	r1, [pc, #76]	; (15cc <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    157e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1580:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1584:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1586:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    158a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    158e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1590:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1594:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1598:	4f0d      	ldr	r7, [pc, #52]	; (15d0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    159a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    159e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    15a0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    15a2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    15a4:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    15a8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    15aa:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    15ae:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    15b2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    15b4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    15b6:	f000 fa73 	bl	1aa0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    15ba:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    15be:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    15c2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    15c6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    15ca:	4770      	bx	lr
    ldr r1, =_kernel
    15cc:	200008c8 	.word	0x200008c8
    ldr v4, =_SCS_ICSR
    15d0:	e000ed04 	.word	0xe000ed04

000015d4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    15d4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    15d8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    15da:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    15de:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    15e2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    15e4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    15e8:	2902      	cmp	r1, #2
    beq _oops
    15ea:	d0ff      	beq.n	15ec <_oops>

000015ec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    15ec:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    15ee:	f003 fde2 	bl	51b6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    15f2:	bd01      	pop	{r0, pc}

000015f4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    15f4:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    15f6:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    15fa:	490d      	ldr	r1, [pc, #52]	; (1630 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    15fc:	f021 0101 	bic.w	r1, r1, #1
    1600:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1604:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1608:	9b01      	ldr	r3, [sp, #4]
    160a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    160e:	9b02      	ldr	r3, [sp, #8]
    1610:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1614:	9b03      	ldr	r3, [sp, #12]
    1616:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    161a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    161e:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    1622:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1624:	2300      	movs	r3, #0
    1626:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    162a:	bc10      	pop	{r4}
    162c:	4770      	bx	lr
    162e:	bf00      	nop
    1630:	00004e75 	.word	0x00004e75

00001634 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1634:	4b16      	ldr	r3, [pc, #88]	; (1690 <z_check_thread_stack_fail+0x5c>)
    1636:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    1638:	b1da      	cbz	r2, 1672 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    163a:	f110 0f16 	cmn.w	r0, #22
    163e:	d01a      	beq.n	1676 <z_check_thread_stack_fail+0x42>
{
    1640:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1642:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    1646:	f1a3 0420 	sub.w	r4, r3, #32
    164a:	4284      	cmp	r4, r0
    164c:	d805      	bhi.n	165a <z_check_thread_stack_fail+0x26>
    164e:	4283      	cmp	r3, r0
    1650:	d908      	bls.n	1664 <z_check_thread_stack_fail+0x30>
    1652:	428b      	cmp	r3, r1
    1654:	d808      	bhi.n	1668 <z_check_thread_stack_fail+0x34>
    1656:	2100      	movs	r1, #0
    1658:	e000      	b.n	165c <z_check_thread_stack_fail+0x28>
    165a:	2100      	movs	r1, #0
    165c:	b931      	cbnz	r1, 166c <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    165e:	2000      	movs	r0, #0
}
    1660:	bc10      	pop	{r4}
    1662:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1664:	2100      	movs	r1, #0
    1666:	e7f9      	b.n	165c <z_check_thread_stack_fail+0x28>
    1668:	2101      	movs	r1, #1
    166a:	e7f7      	b.n	165c <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    166c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    1670:	e7f6      	b.n	1660 <z_check_thread_stack_fail+0x2c>
		return 0;
    1672:	2000      	movs	r0, #0
    1674:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1676:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    167a:	428b      	cmp	r3, r1
    167c:	bf94      	ite	ls
    167e:	2100      	movls	r1, #0
    1680:	2101      	movhi	r1, #1
    1682:	b909      	cbnz	r1, 1688 <z_check_thread_stack_fail+0x54>
	return 0;
    1684:	2000      	movs	r0, #0
}
    1686:	4770      	bx	lr
		return thread->stack_info.start;
    1688:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    168c:	4770      	bx	lr
    168e:	bf00      	nop
    1690:	200008c8 	.word	0x200008c8

00001694 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1694:	b508      	push	{r3, lr}
    1696:	460d      	mov	r5, r1
    1698:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    169a:	4b08      	ldr	r3, [pc, #32]	; (16bc <arch_switch_to_main_thread+0x28>)
    169c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    169e:	f000 f9ff 	bl	1aa0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    16a2:	4620      	mov	r0, r4
    16a4:	f385 8809 	msr	PSP, r5
    16a8:	2100      	movs	r1, #0
    16aa:	b663      	cpsie	if
    16ac:	f381 8811 	msr	BASEPRI, r1
    16b0:	f3bf 8f6f 	isb	sy
    16b4:	2200      	movs	r2, #0
    16b6:	2300      	movs	r3, #0
    16b8:	f003 fbdc 	bl	4e74 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    16bc:	200008c8 	.word	0x200008c8

000016c0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    16c0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    16c2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    16c4:	4a0b      	ldr	r2, [pc, #44]	; (16f4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    16c6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    16c8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    16ca:	bf1e      	ittt	ne
	movne	r1, #0
    16cc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    16ce:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    16d0:	f004 fd46 	blne	6160 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    16d4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    16d6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    16da:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    16de:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    16e2:	4905      	ldr	r1, [pc, #20]	; (16f8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    16e4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    16e6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    16e8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    16ea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    16ee:	4903      	ldr	r1, [pc, #12]	; (16fc <_isr_wrapper+0x3c>)
	bx r1
    16f0:	4708      	bx	r1
    16f2:	0000      	.short	0x0000
	ldr r2, =_kernel
    16f4:	200008c8 	.word	0x200008c8
	ldr r1, =_sw_isr_table
    16f8:	0000657c 	.word	0x0000657c
	ldr r1, =z_arm_int_exit
    16fc:	00001701 	.word	0x00001701

00001700 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1700:	4b04      	ldr	r3, [pc, #16]	; (1714 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1702:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1704:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1706:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1708:	d003      	beq.n	1712 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    170a:	4903      	ldr	r1, [pc, #12]	; (1718 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    170c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1710:	600a      	str	r2, [r1, #0]

00001712 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1712:	4770      	bx	lr
	ldr r3, =_kernel
    1714:	200008c8 	.word	0x200008c8
	ldr r1, =_SCS_ICSR
    1718:	e000ed04 	.word	0xe000ed04

0000171c <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    171c:	b510      	push	{r4, lr}
    171e:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1720:	4b12      	ldr	r3, [pc, #72]	; (176c <bus_fault+0x50>)
    1722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1728:	f413 7f00 	tst.w	r3, #512	; 0x200
    172c:	d00b      	beq.n	1746 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    172e:	4b0f      	ldr	r3, [pc, #60]	; (176c <bus_fault+0x50>)
    1730:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1734:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1738:	d005      	beq.n	1746 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    173a:	b121      	cbz	r1, 1746 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    173c:	4a0b      	ldr	r2, [pc, #44]	; (176c <bus_fault+0x50>)
    173e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1740:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1744:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1746:	4b09      	ldr	r3, [pc, #36]	; (176c <bus_fault+0x50>)
    1748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    174c:	f413 7f80 	tst.w	r3, #256	; 0x100
    1750:	d101      	bne.n	1756 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1752:	4b06      	ldr	r3, [pc, #24]	; (176c <bus_fault+0x50>)
    1754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1756:	4a05      	ldr	r2, [pc, #20]	; (176c <bus_fault+0x50>)
    1758:	6a93      	ldr	r3, [r2, #40]	; 0x28
    175a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    175e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1760:	2101      	movs	r1, #1
    1762:	f003 fd3a 	bl	51da <memory_fault_recoverable>
    1766:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1768:	2000      	movs	r0, #0
    176a:	bd10      	pop	{r4, pc}
    176c:	e000ed00 	.word	0xe000ed00

00001770 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1770:	4b07      	ldr	r3, [pc, #28]	; (1790 <usage_fault+0x20>)
    1772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    177a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    177c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    177e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1780:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1784:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1788:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    178a:	2000      	movs	r0, #0
    178c:	4770      	bx	lr
    178e:	bf00      	nop
    1790:	e000ed00 	.word	0xe000ed00

00001794 <mem_manage_fault>:
{
    1794:	b570      	push	{r4, r5, r6, lr}
    1796:	4605      	mov	r5, r0
    1798:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    179a:	4b20      	ldr	r3, [pc, #128]	; (181c <mem_manage_fault+0x88>)
    179c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    179e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    17a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17a2:	f013 0f02 	tst.w	r3, #2
    17a6:	d00c      	beq.n	17c2 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    17a8:	4b1c      	ldr	r3, [pc, #112]	; (181c <mem_manage_fault+0x88>)
    17aa:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    17ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17ae:	f013 0f80 	tst.w	r3, #128	; 0x80
    17b2:	d025      	beq.n	1800 <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
    17b4:	b139      	cbz	r1, 17c6 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    17b6:	4a19      	ldr	r2, [pc, #100]	; (181c <mem_manage_fault+0x88>)
    17b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    17ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    17be:	6293      	str	r3, [r2, #40]	; 0x28
    17c0:	e001      	b.n	17c6 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    17c2:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    17c6:	4b15      	ldr	r3, [pc, #84]	; (181c <mem_manage_fault+0x88>)
    17c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    17ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    17cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17ce:	f013 0f10 	tst.w	r3, #16
    17d2:	d104      	bne.n	17de <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    17d4:	4b11      	ldr	r3, [pc, #68]	; (181c <mem_manage_fault+0x88>)
    17d6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    17d8:	f014 0402 	ands.w	r4, r4, #2
    17dc:	d004      	beq.n	17e8 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    17de:	4b0f      	ldr	r3, [pc, #60]	; (181c <mem_manage_fault+0x88>)
    17e0:	685c      	ldr	r4, [r3, #4]
    17e2:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    17e6:	d10e      	bne.n	1806 <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    17e8:	4a0c      	ldr	r2, [pc, #48]	; (181c <mem_manage_fault+0x88>)
    17ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
    17ec:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    17f0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    17f2:	2101      	movs	r1, #1
    17f4:	4628      	mov	r0, r5
    17f6:	f003 fcf0 	bl	51da <memory_fault_recoverable>
    17fa:	7030      	strb	r0, [r6, #0]
}
    17fc:	4620      	mov	r0, r4
    17fe:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1800:	f06f 0015 	mvn.w	r0, #21
    1804:	e7df      	b.n	17c6 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1806:	4629      	mov	r1, r5
    1808:	f7ff ff14 	bl	1634 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    180c:	4604      	mov	r4, r0
    180e:	2800      	cmp	r0, #0
    1810:	d0ea      	beq.n	17e8 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1812:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1816:	2402      	movs	r4, #2
    1818:	e7e6      	b.n	17e8 <mem_manage_fault+0x54>
    181a:	bf00      	nop
    181c:	e000ed00 	.word	0xe000ed00

00001820 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1820:	b510      	push	{r4, lr}
    1822:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    1824:	2300      	movs	r3, #0
    1826:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1828:	4b1b      	ldr	r3, [pc, #108]	; (1898 <hard_fault+0x78>)
    182a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    182c:	f010 0002 	ands.w	r0, r0, #2
    1830:	d12d      	bne.n	188e <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1834:	2b00      	cmp	r3, #0
    1836:	db2b      	blt.n	1890 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1838:	4b17      	ldr	r3, [pc, #92]	; (1898 <hard_fault+0x78>)
    183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    183c:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    1840:	d027      	beq.n	1892 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1842:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    1844:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1848:	f64d 7302 	movw	r3, #57090	; 0xdf02
    184c:	429a      	cmp	r2, r3
    184e:	d010      	beq.n	1872 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    1850:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1854:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    1858:	781b      	ldrb	r3, [r3, #0]
    185a:	b963      	cbnz	r3, 1876 <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    185c:	4b0f      	ldr	r3, [pc, #60]	; (189c <hard_fault+0x7c>)
    185e:	781b      	ldrb	r3, [r3, #0]
    1860:	b97b      	cbnz	r3, 1882 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    1862:	4b0f      	ldr	r3, [pc, #60]	; (18a0 <hard_fault+0x80>)
    1864:	881b      	ldrh	r3, [r3, #0]
    1866:	b29b      	uxth	r3, r3
    1868:	b193      	cbz	r3, 1890 <hard_fault+0x70>
			reason = usage_fault(esf);
    186a:	4620      	mov	r0, r4
    186c:	f7ff ff80 	bl	1770 <usage_fault>
    1870:	e00e      	b.n	1890 <hard_fault+0x70>
			reason = esf->basic.r0;
    1872:	6820      	ldr	r0, [r4, #0]
    1874:	e00c      	b.n	1890 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    1876:	460a      	mov	r2, r1
    1878:	2101      	movs	r1, #1
    187a:	4620      	mov	r0, r4
    187c:	f7ff ff8a 	bl	1794 <mem_manage_fault>
    1880:	e006      	b.n	1890 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    1882:	460a      	mov	r2, r1
    1884:	2101      	movs	r1, #1
    1886:	4620      	mov	r0, r4
    1888:	f7ff ff48 	bl	171c <bus_fault>
    188c:	e000      	b.n	1890 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    188e:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    1890:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1892:	4618      	mov	r0, r3
	return reason;
    1894:	e7fc      	b.n	1890 <hard_fault+0x70>
    1896:	bf00      	nop
    1898:	e000ed00 	.word	0xe000ed00
    189c:	e000ed29 	.word	0xe000ed29
    18a0:	e000ed2a 	.word	0xe000ed2a

000018a4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    18a4:	b570      	push	{r4, r5, r6, lr}
    18a6:	b08a      	sub	sp, #40	; 0x28
    18a8:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    18aa:	4b22      	ldr	r3, [pc, #136]	; (1934 <z_arm_fault+0x90>)
    18ac:	6859      	ldr	r1, [r3, #4]
    18ae:	f3c1 0108 	ubfx	r1, r1, #0, #9
    18b2:	2300      	movs	r3, #0
    18b4:	f383 8811 	msr	BASEPRI, r3
    18b8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    18bc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    18c0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    18c4:	d115      	bne.n	18f2 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    18c6:	f002 030c 	and.w	r3, r2, #12
    18ca:	2b08      	cmp	r3, #8
    18cc:	d014      	beq.n	18f8 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    18ce:	f012 0f08 	tst.w	r2, #8
    18d2:	d00b      	beq.n	18ec <z_arm_fault+0x48>
	*nested_exc = false;
    18d4:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    18d6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    18da:	4620      	mov	r0, r4
    18dc:	f003 fc82 	bl	51e4 <fault_handle>
    18e0:	4605      	mov	r5, r0
	if (recoverable) {
    18e2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    18e6:	b153      	cbz	r3, 18fe <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    18e8:	b00a      	add	sp, #40	; 0x28
    18ea:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    18ec:	4604      	mov	r4, r0
			*nested_exc = true;
    18ee:	2601      	movs	r6, #1
    18f0:	e7f1      	b.n	18d6 <z_arm_fault+0x32>
	*nested_exc = false;
    18f2:	2600      	movs	r6, #0
		return NULL;
    18f4:	4634      	mov	r4, r6
    18f6:	e7ee      	b.n	18d6 <z_arm_fault+0x32>
	*nested_exc = false;
    18f8:	2600      	movs	r6, #0
		return NULL;
    18fa:	4634      	mov	r4, r6
    18fc:	e7eb      	b.n	18d6 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    18fe:	2220      	movs	r2, #32
    1900:	4621      	mov	r1, r4
    1902:	a801      	add	r0, sp, #4
    1904:	f003 fd3b 	bl	537e <memcpy>
	if (nested_exc) {
    1908:	b14e      	cbz	r6, 191e <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    190a:	9b08      	ldr	r3, [sp, #32]
    190c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1910:	b95a      	cbnz	r2, 192a <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1912:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1916:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    191a:	9308      	str	r3, [sp, #32]
    191c:	e005      	b.n	192a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    191e:	9b08      	ldr	r3, [sp, #32]
    1920:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1924:	f023 0301 	bic.w	r3, r3, #1
    1928:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    192a:	a901      	add	r1, sp, #4
    192c:	4628      	mov	r0, r5
    192e:	f003 fc3e 	bl	51ae <z_arm_fatal_error>
    1932:	e7d9      	b.n	18e8 <z_arm_fault+0x44>
    1934:	e000ed00 	.word	0xe000ed00

00001938 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1938:	4a02      	ldr	r2, [pc, #8]	; (1944 <z_arm_fault_init+0xc>)
    193a:	6953      	ldr	r3, [r2, #20]
    193c:	f043 0310 	orr.w	r3, r3, #16
    1940:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1942:	4770      	bx	lr
    1944:	e000ed00 	.word	0xe000ed00

00001948 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1948:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    194c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1950:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1952:	4672      	mov	r2, lr
	bl z_arm_fault
    1954:	f7ff ffa6 	bl	18a4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1958:	bd01      	pop	{r0, pc}
    195a:	bf00      	nop

0000195c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    195c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    195e:	e006      	b.n	196e <z_arm_interrupt_init+0x12>
    1960:	f002 010f 	and.w	r1, r2, #15
    1964:	4b09      	ldr	r3, [pc, #36]	; (198c <z_arm_interrupt_init+0x30>)
    1966:	440b      	add	r3, r1
    1968:	2120      	movs	r1, #32
    196a:	7619      	strb	r1, [r3, #24]
    196c:	3201      	adds	r2, #1
    196e:	2a26      	cmp	r2, #38	; 0x26
    1970:	dc0a      	bgt.n	1988 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    1972:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1974:	2b00      	cmp	r3, #0
    1976:	dbf3      	blt.n	1960 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1978:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    197c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1980:	2120      	movs	r1, #32
    1982:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    1986:	e7f1      	b.n	196c <z_arm_interrupt_init+0x10>
	}
}
    1988:	4770      	bx	lr
    198a:	bf00      	nop
    198c:	e000ecfc 	.word	0xe000ecfc

00001990 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1990:	2000      	movs	r0, #0
    msr CONTROL, r0
    1992:	f380 8814 	msr	CONTROL, r0
    isb
    1996:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    199a:	f004 fd79 	bl	6490 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    199e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    19a0:	490d      	ldr	r1, [pc, #52]	; (19d8 <__start+0x48>)
    str r0, [r1]
    19a2:	6008      	str	r0, [r1, #0]
    dsb
    19a4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    19a8:	480c      	ldr	r0, [pc, #48]	; (19dc <__start+0x4c>)
    msr msp, r0
    19aa:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    19ae:	f000 f829 	bl	1a04 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    19b2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    19b4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    19b8:	4809      	ldr	r0, [pc, #36]	; (19e0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    19ba:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    19be:	1840      	adds	r0, r0, r1
    msr PSP, r0
    19c0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    19c4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    19c8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    19ca:	4308      	orrs	r0, r1
    msr CONTROL, r0
    19cc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    19d0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    19d4:	f7ff fd9a 	bl	150c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    19d8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    19dc:	20000d20 	.word	0x20000d20
    ldr r0, =z_interrupt_stacks
    19e0:	20000ea0 	.word	0x20000ea0

000019e4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    19e4:	4b06      	ldr	r3, [pc, #24]	; (1a00 <z_arm_clear_arm_mpu_config+0x1c>)
    19e6:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    19e8:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    19ec:	2300      	movs	r3, #0
    19ee:	4283      	cmp	r3, r0
    19f0:	da05      	bge.n	19fe <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    19f2:	4a03      	ldr	r2, [pc, #12]	; (1a00 <z_arm_clear_arm_mpu_config+0x1c>)
    19f4:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    19f6:	2100      	movs	r1, #0
    19f8:	6111      	str	r1, [r2, #16]
    19fa:	3301      	adds	r3, #1
    19fc:	e7f7      	b.n	19ee <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    19fe:	4770      	bx	lr
    1a00:	e000ed90 	.word	0xe000ed90

00001a04 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1a04:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1a06:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1a08:	2400      	movs	r4, #0
    1a0a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1a0e:	f7ff ffe9 	bl	19e4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1a12:	4623      	mov	r3, r4
    1a14:	e008      	b.n	1a28 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    1a16:	f103 0120 	add.w	r1, r3, #32
    1a1a:	4a0e      	ldr	r2, [pc, #56]	; (1a54 <z_arm_init_arch_hw_at_boot+0x50>)
    1a1c:	f04f 30ff 	mov.w	r0, #4294967295
    1a20:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1a24:	3301      	adds	r3, #1
    1a26:	b2db      	uxtb	r3, r3
    1a28:	2b07      	cmp	r3, #7
    1a2a:	d9f4      	bls.n	1a16 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1a2c:	2300      	movs	r3, #0
    1a2e:	e008      	b.n	1a42 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1a30:	f103 0160 	add.w	r1, r3, #96	; 0x60
    1a34:	4a07      	ldr	r2, [pc, #28]	; (1a54 <z_arm_init_arch_hw_at_boot+0x50>)
    1a36:	f04f 30ff 	mov.w	r0, #4294967295
    1a3a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1a3e:	3301      	adds	r3, #1
    1a40:	b2db      	uxtb	r3, r3
    1a42:	2b07      	cmp	r3, #7
    1a44:	d9f4      	bls.n	1a30 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1a46:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1a48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a4c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1a50:	bd10      	pop	{r4, pc}
    1a52:	bf00      	nop
    1a54:	e000e100 	.word	0xe000e100

00001a58 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1a58:	b508      	push	{r3, lr}
	if (_current == thread) {
    1a5a:	4b08      	ldr	r3, [pc, #32]	; (1a7c <z_impl_k_thread_abort+0x24>)
    1a5c:	689b      	ldr	r3, [r3, #8]
    1a5e:	4283      	cmp	r3, r0
    1a60:	d002      	beq.n	1a68 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    1a62:	f002 fe29 	bl	46b8 <z_thread_abort>
}
    1a66:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1a68:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	d0f8      	beq.n	1a62 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a70:	4a03      	ldr	r2, [pc, #12]	; (1a80 <z_impl_k_thread_abort+0x28>)
    1a72:	6853      	ldr	r3, [r2, #4]
    1a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1a78:	6053      	str	r3, [r2, #4]
    1a7a:	e7f2      	b.n	1a62 <z_impl_k_thread_abort+0xa>
    1a7c:	200008c8 	.word	0x200008c8
    1a80:	e000ed00 	.word	0xe000ed00

00001a84 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1a84:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1a86:	4b03      	ldr	r3, [pc, #12]	; (1a94 <z_arm_configure_static_mpu_regions+0x10>)
    1a88:	4a03      	ldr	r2, [pc, #12]	; (1a98 <z_arm_configure_static_mpu_regions+0x14>)
    1a8a:	2101      	movs	r1, #1
    1a8c:	4803      	ldr	r0, [pc, #12]	; (1a9c <z_arm_configure_static_mpu_regions+0x18>)
    1a8e:	f003 fc2f 	bl	52f0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1a92:	bd08      	pop	{r3, pc}
    1a94:	20010000 	.word	0x20010000
    1a98:	20000000 	.word	0x20000000
    1a9c:	00006a50 	.word	0x00006a50

00001aa0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    1aa0:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1aa2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    1aa6:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1aa8:	4804      	ldr	r0, [pc, #16]	; (1abc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1aaa:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    1aac:	2320      	movs	r3, #32
    1aae:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1ab0:	4b03      	ldr	r3, [pc, #12]	; (1ac0 <z_arm_configure_dynamic_mpu_regions+0x20>)
    1ab2:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1ab4:	2101      	movs	r1, #1
    1ab6:	f003 fc1f 	bl	52f8 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    1aba:	bd08      	pop	{r3, pc}
    1abc:	2000026c 	.word	0x2000026c
    1ac0:	150b0000 	.word	0x150b0000

00001ac4 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1ac4:	4a06      	ldr	r2, [pc, #24]	; (1ae0 <region_init+0x1c>)
    1ac6:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1ac8:	680b      	ldr	r3, [r1, #0]
    1aca:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1ace:	4303      	orrs	r3, r0
    1ad0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1ad4:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1ad6:	688b      	ldr	r3, [r1, #8]
    1ad8:	f043 0301 	orr.w	r3, r3, #1
    1adc:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    1ade:	4770      	bx	lr
    1ae0:	e000ed90 	.word	0xe000ed90

00001ae4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1ae4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1ae6:	4c03      	ldr	r4, [pc, #12]	; (1af4 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1ae8:	2301      	movs	r3, #1
    1aea:	7822      	ldrb	r2, [r4, #0]
    1aec:	f003 fbd8 	bl	52a0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1af0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1af2:	bd10      	pop	{r4, pc}
    1af4:	20000904 	.word	0x20000904

00001af8 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1af8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1afa:	2300      	movs	r3, #0
    1afc:	4a08      	ldr	r2, [pc, #32]	; (1b20 <mpu_configure_dynamic_mpu_regions+0x28>)
    1afe:	7812      	ldrb	r2, [r2, #0]
    1b00:	f003 fbce 	bl	52a0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1b04:	f110 0f16 	cmn.w	r0, #22
    1b08:	d008      	beq.n	1b1c <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1b0a:	4603      	mov	r3, r0
    1b0c:	2b07      	cmp	r3, #7
    1b0e:	dc05      	bgt.n	1b1c <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    1b10:	4a04      	ldr	r2, [pc, #16]	; (1b24 <mpu_configure_dynamic_mpu_regions+0x2c>)
    1b12:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    1b14:	2100      	movs	r1, #0
    1b16:	6111      	str	r1, [r2, #16]
    1b18:	3301      	adds	r3, #1
    1b1a:	e7f7      	b.n	1b0c <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    1b1c:	bd08      	pop	{r3, pc}
    1b1e:	bf00      	nop
    1b20:	20000904 	.word	0x20000904
    1b24:	e000ed90 	.word	0xe000ed90

00001b28 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1b28:	4b03      	ldr	r3, [pc, #12]	; (1b38 <arm_core_mpu_enable+0x10>)
    1b2a:	2205      	movs	r2, #5
    1b2c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b32:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1b36:	4770      	bx	lr
    1b38:	e000ed90 	.word	0xe000ed90

00001b3c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1b3c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1b40:	4b01      	ldr	r3, [pc, #4]	; (1b48 <arm_core_mpu_disable+0xc>)
    1b42:	2200      	movs	r2, #0
    1b44:	605a      	str	r2, [r3, #4]
}
    1b46:	4770      	bx	lr
    1b48:	e000ed90 	.word	0xe000ed90

00001b4c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1b4c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1b4e:	4b0e      	ldr	r3, [pc, #56]	; (1b88 <z_arm_mpu_init+0x3c>)
    1b50:	681d      	ldr	r5, [r3, #0]
    1b52:	2d08      	cmp	r5, #8
    1b54:	d815      	bhi.n	1b82 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1b56:	f7ff fff1 	bl	1b3c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b5a:	2400      	movs	r4, #0
    1b5c:	42a5      	cmp	r5, r4
    1b5e:	d90a      	bls.n	1b76 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1b60:	4b09      	ldr	r3, [pc, #36]	; (1b88 <z_arm_mpu_init+0x3c>)
    1b62:	6859      	ldr	r1, [r3, #4]
    1b64:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1b68:	0093      	lsls	r3, r2, #2
    1b6a:	4419      	add	r1, r3
    1b6c:	4620      	mov	r0, r4
    1b6e:	f7ff ffa9 	bl	1ac4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b72:	3401      	adds	r4, #1
    1b74:	e7f2      	b.n	1b5c <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1b76:	4b05      	ldr	r3, [pc, #20]	; (1b8c <z_arm_mpu_init+0x40>)
    1b78:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1b7a:	f7ff ffd5 	bl	1b28 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1b7e:	2000      	movs	r0, #0
}
    1b80:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1b82:	f04f 30ff 	mov.w	r0, #4294967295
    1b86:	e7fb      	b.n	1b80 <z_arm_mpu_init+0x34>
    1b88:	00006a6c 	.word	0x00006a6c
    1b8c:	20000904 	.word	0x20000904

00001b90 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1b90:	4b01      	ldr	r3, [pc, #4]	; (1b98 <__stdout_hook_install+0x8>)
    1b92:	6018      	str	r0, [r3, #0]
}
    1b94:	4770      	bx	lr
    1b96:	bf00      	nop
    1b98:	20000008 	.word	0x20000008

00001b9c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1b9c:	f04f 0220 	mov.w	r2, #32
    1ba0:	f3ef 8311 	mrs	r3, BASEPRI
    1ba4:	f382 8812 	msr	BASEPRI_MAX, r2
    1ba8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1bac:	4a04      	ldr	r2, [pc, #16]	; (1bc0 <nordicsemi_nrf52_init+0x24>)
    1bae:	2101      	movs	r1, #1
    1bb0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1bb4:	f383 8811 	msr	BASEPRI, r3
    1bb8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1bbc:	2000      	movs	r0, #0
    1bbe:	4770      	bx	lr
    1bc0:	4001e000 	.word	0x4001e000

00001bc4 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    1bc4:	b2c0      	uxtb	r0, r0
    1bc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bca:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1bce:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1bd2:	4905      	ldr	r1, [pc, #20]	; (1be8 <sys_arch_reboot+0x24>)
    1bd4:	68ca      	ldr	r2, [r1, #12]
    1bd6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1bda:	4b04      	ldr	r3, [pc, #16]	; (1bec <sys_arch_reboot+0x28>)
    1bdc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1bde:	60cb      	str	r3, [r1, #12]
    1be0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1be4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1be6:	e7fd      	b.n	1be4 <sys_arch_reboot+0x20>
    1be8:	e000ed00 	.word	0xe000ed00
    1bec:	05fa0004 	.word	0x05fa0004

00001bf0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1bf0:	b130      	cbz	r0, 1c00 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    1bf2:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1bf4:	0180      	lsls	r0, r0, #6
    1bf6:	4b03      	ldr	r3, [pc, #12]	; (1c04 <arch_busy_wait+0x14>)
    1bf8:	f043 0301 	orr.w	r3, r3, #1
    1bfc:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    1bfe:	bd08      	pop	{r3, pc}
    1c00:	4770      	bx	lr
    1c02:	bf00      	nop
    1c04:	00006720 	.word	0x00006720

00001c08 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1c08:	4800      	ldr	r0, [pc, #0]	; (1c0c <get_hf_flags+0x4>)
    1c0a:	4770      	bx	lr
    1c0c:	200002c8 	.word	0x200002c8

00001c10 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1c10:	4b03      	ldr	r3, [pc, #12]	; (1c20 <get_subsys+0x10>)
    1c12:	1ac0      	subs	r0, r0, r3
    1c14:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1c16:	4b03      	ldr	r3, [pc, #12]	; (1c24 <get_subsys+0x14>)
    1c18:	fb03 f000 	mul.w	r0, r3, r0
    1c1c:	4770      	bx	lr
    1c1e:	bf00      	nop
    1c20:	20000288 	.word	0x20000288
    1c24:	b6db6db7 	.word	0xb6db6db7

00001c28 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1c28:	b538      	push	{r3, r4, r5, lr}
    1c2a:	4605      	mov	r5, r0
    1c2c:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1c2e:	f7ff ffef 	bl	1c10 <get_subsys>
    1c32:	4601      	mov	r1, r0
    1c34:	2240      	movs	r2, #64	; 0x40
    1c36:	4803      	ldr	r0, [pc, #12]	; (1c44 <onoff_stop+0x1c>)
    1c38:	f003 fc7a 	bl	5530 <stop>
    1c3c:	4601      	mov	r1, r0
	notify(mgr, res);
    1c3e:	4628      	mov	r0, r5
    1c40:	47a0      	blx	r4
}
    1c42:	bd38      	pop	{r3, r4, r5, pc}
    1c44:	000064ec 	.word	0x000064ec

00001c48 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1c48:	b530      	push	{r4, r5, lr}
    1c4a:	b083      	sub	sp, #12
    1c4c:	4605      	mov	r5, r0
    1c4e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1c50:	f7ff ffde 	bl	1c10 <get_subsys>
    1c54:	4601      	mov	r1, r0
    1c56:	2340      	movs	r3, #64	; 0x40
    1c58:	9300      	str	r3, [sp, #0]
    1c5a:	4623      	mov	r3, r4
    1c5c:	4a05      	ldr	r2, [pc, #20]	; (1c74 <onoff_start+0x2c>)
    1c5e:	4806      	ldr	r0, [pc, #24]	; (1c78 <onoff_start+0x30>)
    1c60:	f003 fc80 	bl	5564 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1c64:	1e01      	subs	r1, r0, #0
    1c66:	db01      	blt.n	1c6c <onoff_start+0x24>
		notify(mgr, err);
	}
}
    1c68:	b003      	add	sp, #12
    1c6a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    1c6c:	4628      	mov	r0, r5
    1c6e:	47a0      	blx	r4
}
    1c70:	e7fa      	b.n	1c68 <onoff_start+0x20>
    1c72:	bf00      	nop
    1c74:	000055ad 	.word	0x000055ad
    1c78:	000064ec 	.word	0x000064ec

00001c7c <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    1c7c:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    1c7e:	b110      	cbz	r0, 1c86 <clock_event_handler+0xa>
    1c80:	2801      	cmp	r0, #1
    1c82:	d00d      	beq.n	1ca0 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    1c84:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1c86:	2100      	movs	r1, #0
    1c88:	4808      	ldr	r0, [pc, #32]	; (1cac <clock_event_handler+0x30>)
    1c8a:	f003 fbda 	bl	5442 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1c8e:	6883      	ldr	r3, [r0, #8]
    1c90:	f013 0f07 	tst.w	r3, #7
    1c94:	d1f6      	bne.n	1c84 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1c96:	2100      	movs	r1, #0
    1c98:	4804      	ldr	r0, [pc, #16]	; (1cac <clock_event_handler+0x30>)
    1c9a:	f003 fc37 	bl	550c <clkstarted_handle>
    1c9e:	e7f1      	b.n	1c84 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1ca0:	2101      	movs	r1, #1
    1ca2:	4802      	ldr	r0, [pc, #8]	; (1cac <clock_event_handler+0x30>)
    1ca4:	f003 fc32 	bl	550c <clkstarted_handle>
}
    1ca8:	e7ec      	b.n	1c84 <clock_event_handler+0x8>
    1caa:	bf00      	nop
    1cac:	000064ec 	.word	0x000064ec

00001cb0 <generic_hfclk_start>:
{
    1cb0:	b510      	push	{r4, lr}
	__asm__ volatile(
    1cb2:	f04f 0320 	mov.w	r3, #32
    1cb6:	f3ef 8411 	mrs	r4, BASEPRI
    1cba:	f383 8812 	msr	BASEPRI_MAX, r3
    1cbe:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1cc2:	4a13      	ldr	r2, [pc, #76]	; (1d10 <generic_hfclk_start+0x60>)
    1cc4:	6813      	ldr	r3, [r2, #0]
    1cc6:	f043 0302 	orr.w	r3, r3, #2
    1cca:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1ccc:	f013 0f01 	tst.w	r3, #1
    1cd0:	d108      	bne.n	1ce4 <generic_hfclk_start+0x34>
	bool already_started = false;
    1cd2:	2300      	movs	r3, #0
	__asm__ volatile(
    1cd4:	f384 8811 	msr	BASEPRI, r4
    1cd8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1cdc:	b99b      	cbnz	r3, 1d06 <generic_hfclk_start+0x56>
	hfclk_start();
    1cde:	f003 fc6d 	bl	55bc <hfclk_start>
}
    1ce2:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ce8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1cec:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1cf0:	f012 0f01 	tst.w	r2, #1
    1cf4:	d101      	bne.n	1cfa <generic_hfclk_start+0x4a>
	bool already_started = false;
    1cf6:	2300      	movs	r3, #0
    1cf8:	e7ec      	b.n	1cd4 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    1cfa:	f7ff ff85 	bl	1c08 <get_hf_flags>
    1cfe:	f003 fbf2 	bl	54e6 <set_on_state>
			already_started = true;
    1d02:	2301      	movs	r3, #1
    1d04:	e7e6      	b.n	1cd4 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    1d06:	2100      	movs	r1, #0
    1d08:	4802      	ldr	r0, [pc, #8]	; (1d14 <generic_hfclk_start+0x64>)
    1d0a:	f003 fbff 	bl	550c <clkstarted_handle>
		return;
    1d0e:	e7e8      	b.n	1ce2 <generic_hfclk_start+0x32>
    1d10:	200002d8 	.word	0x200002d8
    1d14:	000064ec 	.word	0x000064ec

00001d18 <generic_hfclk_stop>:
{
    1d18:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1d1a:	4b0a      	ldr	r3, [pc, #40]	; (1d44 <generic_hfclk_stop+0x2c>)
    1d1c:	f3bf 8f5b 	dmb	ish
    1d20:	e853 2f00 	ldrex	r2, [r3]
    1d24:	f022 0102 	bic.w	r1, r2, #2
    1d28:	e843 1000 	strex	r0, r1, [r3]
    1d2c:	2800      	cmp	r0, #0
    1d2e:	d1f7      	bne.n	1d20 <generic_hfclk_stop+0x8>
    1d30:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1d34:	f012 0f01 	tst.w	r2, #1
    1d38:	d000      	beq.n	1d3c <generic_hfclk_stop+0x24>
}
    1d3a:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1d3c:	f003 fc43 	bl	55c6 <hfclk_stop>
    1d40:	e7fb      	b.n	1d3a <generic_hfclk_stop+0x22>
    1d42:	bf00      	nop
    1d44:	200002d8 	.word	0x200002d8

00001d48 <api_blocking_start>:
{
    1d48:	b500      	push	{lr}
    1d4a:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1d4c:	f8cd d000 	str.w	sp, [sp]
    1d50:	f8cd d004 	str.w	sp, [sp, #4]
    1d54:	2300      	movs	r3, #0
    1d56:	9302      	str	r3, [sp, #8]
    1d58:	2301      	movs	r3, #1
    1d5a:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1d5c:	466b      	mov	r3, sp
    1d5e:	4a07      	ldr	r2, [pc, #28]	; (1d7c <api_blocking_start+0x34>)
    1d60:	f003 fc1c 	bl	559c <api_start>
	if (err < 0) {
    1d64:	2800      	cmp	r0, #0
    1d66:	db05      	blt.n	1d74 <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1d68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1d6c:	2300      	movs	r3, #0
    1d6e:	4668      	mov	r0, sp
    1d70:	f002 f914 	bl	3f9c <z_impl_k_sem_take>
}
    1d74:	b005      	add	sp, #20
    1d76:	f85d fb04 	ldr.w	pc, [sp], #4
    1d7a:	bf00      	nop
    1d7c:	000055db 	.word	0x000055db

00001d80 <lfclk_start>:
{
    1d80:	b508      	push	{r3, lr}
	if (!once) {
    1d82:	4b07      	ldr	r3, [pc, #28]	; (1da0 <lfclk_start+0x20>)
    1d84:	781b      	ldrb	r3, [r3, #0]
    1d86:	b11b      	cbz	r3, 1d90 <lfclk_start+0x10>
}
#endif // defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK_192M

NRFX_STATIC_INLINE void nrfx_clock_lfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    1d88:	2000      	movs	r0, #0
    1d8a:	f001 f957 	bl	303c <nrfx_clock_start>
}
    1d8e:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    1d90:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    1d94:	f004 fb6c 	bl	6470 <z_impl_k_busy_wait>
		once = true;
    1d98:	4b01      	ldr	r3, [pc, #4]	; (1da0 <lfclk_start+0x20>)
    1d9a:	2201      	movs	r2, #1
    1d9c:	701a      	strb	r2, [r3, #0]
    1d9e:	e7f3      	b.n	1d88 <lfclk_start+0x8>
    1da0:	20000905 	.word	0x20000905

00001da4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1da4:	b570      	push	{r4, r5, r6, lr}
    1da6:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1da8:	2200      	movs	r2, #0
    1daa:	2101      	movs	r1, #1
    1dac:	4610      	mov	r0, r2
    1dae:	f7ff fb93 	bl	14d8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1db2:	2000      	movs	r0, #0
    1db4:	f7ff fb72 	bl	149c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1db8:	4811      	ldr	r0, [pc, #68]	; (1e00 <clk_init+0x5c>)
    1dba:	f001 f92b 	bl	3014 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1dbe:	4b11      	ldr	r3, [pc, #68]	; (1e04 <clk_init+0x60>)
    1dc0:	4298      	cmp	r0, r3
    1dc2:	d11a      	bne.n	1dfa <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1dc4:	f004 f8f2 	bl	5fac <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    1dc8:	2400      	movs	r4, #0
    1dca:	e003      	b.n	1dd4 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1dcc:	2301      	movs	r3, #1
    1dce:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1dd0:	441c      	add	r4, r3
    1dd2:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    1dd4:	2c01      	cmp	r4, #1
    1dd6:	d80e      	bhi.n	1df6 <clk_init+0x52>
						get_sub_data(dev, i);
    1dd8:	4621      	mov	r1, r4
    1dda:	4630      	mov	r0, r6
    1ddc:	f003 fb31 	bl	5442 <get_sub_data>
    1de0:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1de2:	4621      	mov	r1, r4
    1de4:	4630      	mov	r0, r6
    1de6:	f003 fb37 	bl	5458 <get_onoff_manager>
    1dea:	4907      	ldr	r1, [pc, #28]	; (1e08 <clk_init+0x64>)
    1dec:	f002 ffca 	bl	4d84 <onoff_manager_init>
		if (err < 0) {
    1df0:	2800      	cmp	r0, #0
    1df2:	daeb      	bge.n	1dcc <clk_init+0x28>
    1df4:	e000      	b.n	1df8 <clk_init+0x54>
	}

	return 0;
    1df6:	2000      	movs	r0, #0
}
    1df8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1dfa:	f06f 0004 	mvn.w	r0, #4
    1dfe:	e7fb      	b.n	1df8 <clk_init+0x54>
    1e00:	00001c7d 	.word	0x00001c7d
    1e04:	0bad0000 	.word	0x0bad0000
    1e08:	00006ab8 	.word	0x00006ab8

00001e0c <lfclk_spinwait>:
{
    1e0c:	b570      	push	{r4, r5, r6, lr}
    1e0e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1e10:	2801      	cmp	r0, #1
    1e12:	d107      	bne.n	1e24 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e18:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1e1c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1e20:	2b01      	cmp	r3, #1
    1e22:	d058      	beq.n	1ed6 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1e24:	f004 f987 	bl	6136 <k_is_in_isr>
    1e28:	b928      	cbnz	r0, 1e36 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    1e2a:	4b2e      	ldr	r3, [pc, #184]	; (1ee4 <lfclk_spinwait+0xd8>)
    1e2c:	781b      	ldrb	r3, [r3, #0]
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d041      	beq.n	1eb6 <lfclk_spinwait+0xaa>
    1e32:	2300      	movs	r3, #0
    1e34:	e000      	b.n	1e38 <lfclk_spinwait+0x2c>
    1e36:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    1e38:	461c      	mov	r4, r3
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	d03d      	beq.n	1eba <lfclk_spinwait+0xae>
	__asm__ volatile(
    1e3e:	f04f 0320 	mov.w	r3, #32
    1e42:	f3ef 8611 	mrs	r6, BASEPRI
    1e46:	f383 8812 	msr	BASEPRI_MAX, r3
    1e4a:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    1e4e:	b924      	cbnz	r4, 1e5a <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    1e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e54:	2202      	movs	r2, #2
    1e56:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1e5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1e5e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1e62:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1e66:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1e6a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    1e6e:	d12b      	bne.n	1ec8 <lfclk_spinwait+0xbc>
    return false;
    1e70:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1e72:	b11a      	cbz	r2, 1e7c <lfclk_spinwait+0x70>
    1e74:	2b01      	cmp	r3, #1
    1e76:	d029      	beq.n	1ecc <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1e78:	2d01      	cmp	r5, #1
    1e7a:	d027      	beq.n	1ecc <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1e7c:	b1fc      	cbz	r4, 1ebe <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1e7e:	4630      	mov	r0, r6
    1e80:	f7ff fb02 	bl	1488 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e88:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	d1e4      	bne.n	1e5a <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1e90:	4b15      	ldr	r3, [pc, #84]	; (1ee8 <lfclk_spinwait+0xdc>)
    1e92:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    1e94:	2b00      	cmp	r3, #0
    1e96:	d0e0      	beq.n	1e5a <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1e98:	4b13      	ldr	r3, [pc, #76]	; (1ee8 <lfclk_spinwait+0xdc>)
    1e9a:	2200      	movs	r2, #0
    1e9c:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1e9e:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    1ea0:	2301      	movs	r3, #1
    1ea2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1ea6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1eaa:	4a10      	ldr	r2, [pc, #64]	; (1eec <lfclk_spinwait+0xe0>)
    1eac:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1eb0:	4a0f      	ldr	r2, [pc, #60]	; (1ef0 <lfclk_spinwait+0xe4>)
    1eb2:	6013      	str	r3, [r2, #0]
}
    1eb4:	e7d1      	b.n	1e5a <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1eb6:	2301      	movs	r3, #1
    1eb8:	e7be      	b.n	1e38 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    1eba:	2600      	movs	r6, #0
    1ebc:	e7c7      	b.n	1e4e <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    1ebe:	2021      	movs	r0, #33	; 0x21
    1ec0:	2100      	movs	r1, #0
    1ec2:	f002 fbc7 	bl	4654 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1ec6:	e7dd      	b.n	1e84 <lfclk_spinwait+0x78>
                return true;
    1ec8:	2201      	movs	r2, #1
    1eca:	e7d2      	b.n	1e72 <lfclk_spinwait+0x66>
	if (isr_mode) {
    1ecc:	b124      	cbz	r4, 1ed8 <lfclk_spinwait+0xcc>
	__asm__ volatile(
    1ece:	f386 8811 	msr	BASEPRI, r6
    1ed2:	f3bf 8f6f 	isb	sy
}
    1ed6:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    1ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1edc:	2202      	movs	r2, #2
    1ede:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1ee2:	e7f8      	b.n	1ed6 <lfclk_spinwait+0xca>
    1ee4:	20000907 	.word	0x20000907
    1ee8:	40000104 	.word	0x40000104
    1eec:	e000e100 	.word	0xe000e100
    1ef0:	40000008 	.word	0x40000008

00001ef4 <z_nrf_clock_control_lf_on>:
{
    1ef4:	b510      	push	{r4, lr}
    1ef6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1ef8:	4b10      	ldr	r3, [pc, #64]	; (1f3c <z_nrf_clock_control_lf_on+0x48>)
    1efa:	2101      	movs	r1, #1
    1efc:	f3bf 8f5b 	dmb	ish
    1f00:	e853 2f00 	ldrex	r2, [r3]
    1f04:	e843 1000 	strex	r0, r1, [r3]
    1f08:	2800      	cmp	r0, #0
    1f0a:	d1f9      	bne.n	1f00 <z_nrf_clock_control_lf_on+0xc>
    1f0c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1f10:	b11a      	cbz	r2, 1f1a <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    1f12:	1e63      	subs	r3, r4, #1
    1f14:	2b01      	cmp	r3, #1
    1f16:	d90c      	bls.n	1f32 <z_nrf_clock_control_lf_on+0x3e>
}
    1f18:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    1f1a:	4809      	ldr	r0, [pc, #36]	; (1f40 <z_nrf_clock_control_lf_on+0x4c>)
    1f1c:	f003 fa9c 	bl	5458 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1f20:	4908      	ldr	r1, [pc, #32]	; (1f44 <z_nrf_clock_control_lf_on+0x50>)
    1f22:	2300      	movs	r3, #0
    1f24:	604b      	str	r3, [r1, #4]
    1f26:	60cb      	str	r3, [r1, #12]
    1f28:	2301      	movs	r3, #1
    1f2a:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    1f2c:	f002 ff46 	bl	4dbc <onoff_request>
    1f30:	e7ef      	b.n	1f12 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    1f32:	4620      	mov	r0, r4
    1f34:	f7ff ff6a 	bl	1e0c <lfclk_spinwait>
		break;
    1f38:	e7ee      	b.n	1f18 <z_nrf_clock_control_lf_on+0x24>
    1f3a:	bf00      	nop
    1f3c:	200002dc 	.word	0x200002dc
    1f40:	000064ec 	.word	0x000064ec
    1f44:	20000278 	.word	0x20000278

00001f48 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1f48:	b538      	push	{r3, r4, r5, lr}
    1f4a:	4604      	mov	r4, r0
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    1f4c:	b2c5      	uxtb	r5, r0
    1f4e:	4b0b      	ldr	r3, [pc, #44]	; (1f7c <console_out+0x34>)
    1f50:	681b      	ldr	r3, [r3, #0]
    1f52:	4628      	mov	r0, r5
    1f54:	4798      	blx	r3

	if (handled_by_debug_server) {
    1f56:	2801      	cmp	r0, #1
    1f58:	d007      	beq.n	1f6a <console_out+0x22>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1f5a:	2c0a      	cmp	r4, #10
    1f5c:	d007      	beq.n	1f6e <console_out+0x26>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1f5e:	4b08      	ldr	r3, [pc, #32]	; (1f80 <console_out+0x38>)
    1f60:	6818      	ldr	r0, [r3, #0]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    1f62:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1f64:	685b      	ldr	r3, [r3, #4]
    1f66:	4629      	mov	r1, r5
    1f68:	4798      	blx	r3

	return c;
}
    1f6a:	4620      	mov	r0, r4
    1f6c:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_console_dev, '\r');
    1f6e:	4b04      	ldr	r3, [pc, #16]	; (1f80 <console_out+0x38>)
    1f70:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    1f72:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1f74:	685b      	ldr	r3, [r3, #4]
    1f76:	210d      	movs	r1, #13
    1f78:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    1f7a:	e7f0      	b.n	1f5e <console_out+0x16>
    1f7c:	2000000c 	.word	0x2000000c
    1f80:	200002e0 	.word	0x200002e0

00001f84 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    1f84:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    1f86:	4c04      	ldr	r4, [pc, #16]	; (1f98 <uart_console_hook_install+0x14>)
    1f88:	4620      	mov	r0, r4
    1f8a:	f7ff fe01 	bl	1b90 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1f8e:	4620      	mov	r0, r4
    1f90:	f7fe fc00 	bl	794 <__printk_hook_install>
}
    1f94:	bd10      	pop	{r4, pc}
    1f96:	bf00      	nop
    1f98:	00001f49 	.word	0x00001f49

00001f9c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1f9c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1f9e:	4806      	ldr	r0, [pc, #24]	; (1fb8 <uart_console_init+0x1c>)
    1fa0:	4b06      	ldr	r3, [pc, #24]	; (1fbc <uart_console_init+0x20>)
    1fa2:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    1fa4:	f004 f88e 	bl	60c4 <z_device_ready>
    1fa8:	b118      	cbz	r0, 1fb2 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    1faa:	f7ff ffeb 	bl	1f84 <uart_console_hook_install>

	return 0;
    1fae:	2000      	movs	r0, #0
}
    1fb0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1fb2:	f06f 0012 	mvn.w	r0, #18
    1fb6:	e7fb      	b.n	1fb0 <uart_console_init+0x14>
    1fb8:	00006504 	.word	0x00006504
    1fbc:	200002e0 	.word	0x200002e0

00001fc0 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    1fc0:	b470      	push	{r4, r5, r6}
	return port->config;
    1fc2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1fc4:	685e      	ldr	r6, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1fc6:	4b32      	ldr	r3, [pc, #200]	; (2090 <gpio_nrfx_config+0xd0>)
    1fc8:	4013      	ands	r3, r2
    1fca:	4832      	ldr	r0, [pc, #200]	; (2094 <gpio_nrfx_config+0xd4>)
    1fcc:	4283      	cmp	r3, r0
    1fce:	d027      	beq.n	2020 <gpio_nrfx_config+0x60>
    1fd0:	d812      	bhi.n	1ff8 <gpio_nrfx_config+0x38>
    1fd2:	2b06      	cmp	r3, #6
    1fd4:	d026      	beq.n	2024 <gpio_nrfx_config+0x64>
    1fd6:	d904      	bls.n	1fe2 <gpio_nrfx_config+0x22>
    1fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1fdc:	d109      	bne.n	1ff2 <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    1fde:	2001      	movs	r0, #1
    1fe0:	e016      	b.n	2010 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1fe2:	b30b      	cbz	r3, 2028 <gpio_nrfx_config+0x68>
    1fe4:	2b02      	cmp	r3, #2
    1fe6:	d101      	bne.n	1fec <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    1fe8:	2004      	movs	r0, #4
    1fea:	e011      	b.n	2010 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1fec:	f06f 0015 	mvn.w	r0, #21
    1ff0:	e03f      	b.n	2072 <gpio_nrfx_config+0xb2>
    1ff2:	f06f 0015 	mvn.w	r0, #21
    1ff6:	e03c      	b.n	2072 <gpio_nrfx_config+0xb2>
    1ff8:	4827      	ldr	r0, [pc, #156]	; (2098 <gpio_nrfx_config+0xd8>)
    1ffa:	4283      	cmp	r3, r0
    1ffc:	d016      	beq.n	202c <gpio_nrfx_config+0x6c>
    1ffe:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2002:	d101      	bne.n	2008 <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
    2004:	2003      	movs	r0, #3
    2006:	e003      	b.n	2010 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    200c:	d13d      	bne.n	208a <gpio_nrfx_config+0xca>
		drive = NRF_GPIO_PIN_S0H1;
    200e:	2002      	movs	r0, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    2010:	f012 0f10 	tst.w	r2, #16
    2014:	d10c      	bne.n	2030 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    2016:	f012 0f20 	tst.w	r2, #32
    201a:	d02c      	beq.n	2076 <gpio_nrfx_config+0xb6>
		pull = NRF_GPIO_PIN_PULLDOWN;
    201c:	2401      	movs	r4, #1
    201e:	e008      	b.n	2032 <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
    2020:	2007      	movs	r0, #7
    2022:	e7f5      	b.n	2010 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
    2024:	2006      	movs	r0, #6
    2026:	e7f3      	b.n	2010 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2028:	2000      	movs	r0, #0
    202a:	e7f1      	b.n	2010 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
    202c:	2005      	movs	r0, #5
    202e:	e7ef      	b.n	2010 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
    2030:	2403      	movs	r4, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    2032:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2036:	f412 7f80 	tst.w	r2, #256	; 0x100
    203a:	bf0c      	ite	eq
    203c:	2501      	moveq	r5, #1
    203e:	2500      	movne	r5, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    2040:	f412 7f00 	tst.w	r2, #512	; 0x200
    2044:	d006      	beq.n	2054 <gpio_nrfx_config+0x94>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2046:	f412 6f00 	tst.w	r2, #2048	; 0x800
    204a:	d016      	beq.n	207a <gpio_nrfx_config+0xba>
			nrf_gpio_port_out_set(reg, BIT(pin));
    204c:	2201      	movs	r2, #1
    204e:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    2050:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2054:	f001 011f 	and.w	r1, r1, #31
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2058:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    205c:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2060:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    2064:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    2068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    206c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    2070:	2000      	movs	r0, #0
}
    2072:	bc70      	pop	{r4, r5, r6}
    2074:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    2076:	2400      	movs	r4, #0
    2078:	e7db      	b.n	2032 <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    207a:	f412 6f80 	tst.w	r2, #1024	; 0x400
    207e:	d0e9      	beq.n	2054 <gpio_nrfx_config+0x94>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    2080:	2201      	movs	r2, #1
    2082:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    2084:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
}
    2088:	e7e4      	b.n	2054 <gpio_nrfx_config+0x94>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    208a:	f06f 0015 	mvn.w	r0, #21
    208e:	e7f0      	b.n	2072 <gpio_nrfx_config+0xb2>
    2090:	00f00006 	.word	0x00f00006
    2094:	00100006 	.word	0x00100006
    2098:	00400002 	.word	0x00400002

0000209c <gpiote_event_handler>:

	gpio_fire_callbacks(list, port, pins);
}

static void gpiote_event_handler(void)
{
    209c:	b570      	push	{r4, r5, r6, lr}
    209e:	b082      	sub	sp, #8
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    20a0:	2300      	movs	r3, #0
    20a2:	9301      	str	r3, [sp, #4]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    20a4:	9300      	str	r3, [sp, #0]
}

NRF_STATIC_INLINE bool nrf_gpiote_event_check(NRF_GPIOTE_Type const * p_reg,
                                              nrf_gpiote_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    20a6:	4b2e      	ldr	r3, [pc, #184]	; (2160 <gpiote_event_handler+0xc4>)
    20a8:	681c      	ldr	r4, [r3, #0]
	bool port_event = nrf_gpiote_event_check(NRF_GPIOTE,
						 NRF_GPIOTE_EVENT_PORT);

	if (port_event) {
    20aa:	b90c      	cbnz	r4, 20b0 <gpiote_event_handler+0x14>
{
    20ac:	2100      	movs	r1, #0
    20ae:	e00a      	b.n	20c6 <gpiote_event_handler+0x2a>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    20b0:	4669      	mov	r1, sp
    20b2:	482c      	ldr	r0, [pc, #176]	; (2164 <gpiote_event_handler+0xc8>)
    20b4:	f003 fb23 	bl	56fe <check_level_trigger_pins>
		fired_triggers[0] =
    20b8:	9001      	str	r0, [sp, #4]
}

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    20ba:	4b29      	ldr	r3, [pc, #164]	; (2160 <gpiote_event_handler+0xc4>)
    20bc:	2200      	movs	r2, #0
    20be:	601a      	str	r2, [r3, #0]
    20c0:	681b      	ldr	r3, [r3, #0]
    nrf_event_readback((void *)nrf_gpiote_event_address_get(p_reg, event));
}
    20c2:	e7f3      	b.n	20ac <gpiote_event_handler+0x10>
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    20c4:	3101      	adds	r1, #1
    20c6:	2907      	cmp	r1, #7
    20c8:	d826      	bhi.n	2118 <gpiote_event_handler+0x7c>
		nrf_gpiote_event_t evt =
    20ca:	f101 0340 	add.w	r3, r1, #64	; 0x40
    20ce:	009b      	lsls	r3, r3, #2
    20d0:	b29a      	uxth	r2, r3
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    20d2:	2301      	movs	r3, #1
    20d4:	408b      	lsls	r3, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    20d6:	4824      	ldr	r0, [pc, #144]	; (2168 <gpiote_event_handler+0xcc>)
    20d8:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    20dc:	4203      	tst	r3, r0
    20de:	d0f1      	beq.n	20c4 <gpiote_event_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    20e0:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    20e4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    20e8:	681b      	ldr	r3, [r3, #0]
    20ea:	2b00      	cmp	r3, #0
    20ec:	d0ea      	beq.n	20c4 <gpiote_event_handler+0x28>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    20ee:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    20f2:	481d      	ldr	r0, [pc, #116]	; (2168 <gpiote_event_handler+0xcc>)
    20f4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    20f8:	f3c0 2004 	ubfx	r0, r0, #8, #5
		    nrf_gpiote_event_check(NRF_GPIOTE, evt)) {
			uint32_t abs_pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, i);
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    20fc:	2301      	movs	r3, #1
    20fe:	fa03 f000 	lsl.w	r0, r3, r0
    2102:	9b01      	ldr	r3, [sp, #4]
    2104:	4303      	orrs	r3, r0
    2106:	9301      	str	r3, [sp, #4]
    return ((uint32_t)p_reg + event);
    2108:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    210c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2110:	2200      	movs	r2, #0
    2112:	601a      	str	r2, [r3, #0]
    2114:	681b      	ldr	r3, [r3, #0]
}
    2116:	e7d5      	b.n	20c4 <gpiote_event_handler+0x28>
		cfg_edge_sense_pins(DEVICE_DT_GET(GPIO(1)), sense_levels[1]);
#endif
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
    2118:	9e01      	ldr	r6, [sp, #4]
    211a:	b916      	cbnz	r6, 2122 <gpiote_event_handler+0x86>
	if (fired_triggers[1]) {
		fire_callbacks(DEVICE_DT_GET(GPIO(1)), fired_triggers[1]);
	}
#endif

	if (port_event) {
    211c:	b9dc      	cbnz	r4, 2156 <gpiote_event_handler+0xba>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
#endif
	}
}
    211e:	b002      	add	sp, #8
    2120:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    2122:	4b12      	ldr	r3, [pc, #72]	; (216c <gpiote_event_handler+0xd0>)
    2124:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2126:	b119      	cbz	r1, 2130 <gpiote_event_handler+0x94>
    2128:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    212a:	b149      	cbz	r1, 2140 <gpiote_event_handler+0xa4>
	return node->next;
    212c:	680d      	ldr	r5, [r1, #0]
    212e:	e007      	b.n	2140 <gpiote_event_handler+0xa4>
    2130:	460d      	mov	r5, r1
    2132:	e005      	b.n	2140 <gpiote_event_handler+0xa4>
    2134:	b16d      	cbz	r5, 2152 <gpiote_event_handler+0xb6>
    2136:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    2138:	b105      	cbz	r5, 213c <gpiote_event_handler+0xa0>
	return node->next;
    213a:	682b      	ldr	r3, [r5, #0]
    213c:	4629      	mov	r1, r5
    213e:	461d      	mov	r5, r3
    2140:	2900      	cmp	r1, #0
    2142:	d0eb      	beq.n	211c <gpiote_event_handler+0x80>
		if (cb->pin_mask & pins) {
    2144:	688a      	ldr	r2, [r1, #8]
    2146:	4032      	ands	r2, r6
    2148:	d0f4      	beq.n	2134 <gpiote_event_handler+0x98>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    214a:	684b      	ldr	r3, [r1, #4]
    214c:	4805      	ldr	r0, [pc, #20]	; (2164 <gpiote_event_handler+0xc8>)
    214e:	4798      	blx	r3
    2150:	e7f0      	b.n	2134 <gpiote_event_handler+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2152:	462b      	mov	r3, r5
    2154:	e7f2      	b.n	213c <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    2156:	4803      	ldr	r0, [pc, #12]	; (2164 <gpiote_event_handler+0xc8>)
    2158:	f003 fa9f 	bl	569a <cfg_level_pins>
}
    215c:	e7df      	b.n	211e <gpiote_event_handler+0x82>
    215e:	bf00      	nop
    2160:	4000617c 	.word	0x4000617c
    2164:	00006534 	.word	0x00006534
    2168:	40006000 	.word	0x40006000
    216c:	200002e4 	.word	0x200002e4

00002170 <gpiote_pin_cleanup>:
{
    2170:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    2172:	4b14      	ldr	r3, [pc, #80]	; (21c4 <gpiote_pin_cleanup+0x54>)
    2174:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    2178:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    217a:	2300      	movs	r3, #0
    217c:	e000      	b.n	2180 <gpiote_pin_cleanup+0x10>
    217e:	3301      	adds	r3, #1
    2180:	2b07      	cmp	r3, #7
    2182:	d81d      	bhi.n	21c0 <gpiote_pin_cleanup+0x50>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2184:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    2188:	490e      	ldr	r1, [pc, #56]	; (21c4 <gpiote_pin_cleanup+0x54>)
    218a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    218e:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    2192:	4290      	cmp	r0, r2
    2194:	d1f3      	bne.n	217e <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    2196:	fa24 f203 	lsr.w	r2, r4, r3
    219a:	f012 0f01 	tst.w	r2, #1
    219e:	d0ee      	beq.n	217e <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    21a0:	460a      	mov	r2, r1
    21a2:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    21a6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    21aa:	f021 0101 	bic.w	r1, r1, #1
    21ae:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    21b2:	2101      	movs	r1, #1
    21b4:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    21b6:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    21ba:	b2d8      	uxtb	r0, r3
    21bc:	f001 f868 	bl	3290 <nrfx_gpiote_channel_free>
}
    21c0:	bd10      	pop	{r4, pc}
    21c2:	bf00      	nop
    21c4:	40006000 	.word	0x40006000

000021c8 <gpiote_channel_alloc>:
{
    21c8:	b570      	push	{r4, r5, r6, lr}
    21ca:	b082      	sub	sp, #8
    21cc:	4604      	mov	r4, r0
    21ce:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    21d0:	f10d 0007 	add.w	r0, sp, #7
    21d4:	f001 f878 	bl	32c8 <nrfx_gpiote_channel_alloc>
    21d8:	4b1c      	ldr	r3, [pc, #112]	; (224c <gpiote_channel_alloc+0x84>)
    21da:	4298      	cmp	r0, r3
    21dc:	d132      	bne.n	2244 <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    21de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    21e2:	f103 0240 	add.w	r2, r3, #64	; 0x40
    21e6:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    21e8:	4e19      	ldr	r6, [pc, #100]	; (2250 <gpiote_channel_alloc+0x88>)
    21ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    21ee:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    21f2:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    21f6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    21fa:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    21fe:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    2202:	0224      	lsls	r4, r4, #8
    2204:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    2208:	042d      	lsls	r5, r5, #16
    220a:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    220e:	432c      	orrs	r4, r5
    2210:	430c      	orrs	r4, r1
    2212:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    2216:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    221a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    221e:	2000      	movs	r0, #0
    2220:	6018      	str	r0, [r3, #0]
    2222:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    2224:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2228:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    222c:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    2230:	f042 0201 	orr.w	r2, r2, #1
    2234:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    2238:	2301      	movs	r3, #1
    223a:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    223c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    2240:	b002      	add	sp, #8
    2242:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    2244:	f06f 0012 	mvn.w	r0, #18
    2248:	e7fa      	b.n	2240 <gpiote_channel_alloc+0x78>
    224a:	bf00      	nop
    224c:	0bad0000 	.word	0x0bad0000
    2250:	40006000 	.word	0x40006000

00002254 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2254:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    2256:	4b0b      	ldr	r3, [pc, #44]	; (2284 <gpio_nrfx_init+0x30>)
    2258:	781b      	ldrb	r3, [r3, #0]
    225a:	b10b      	cbz	r3, 2260 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    225c:	2000      	movs	r0, #0
    225e:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    2260:	4b08      	ldr	r3, [pc, #32]	; (2284 <gpio_nrfx_init+0x30>)
    2262:	2201      	movs	r2, #1
    2264:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2266:	2200      	movs	r2, #0
    2268:	2105      	movs	r1, #5
    226a:	2006      	movs	r0, #6
    226c:	f7ff f934 	bl	14d8 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    2270:	2006      	movs	r0, #6
    2272:	f7ff f913 	bl	149c <arch_irq_enable>
    2276:	4b04      	ldr	r3, [pc, #16]	; (2288 <gpio_nrfx_init+0x34>)
    2278:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    227c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2280:	e7ec      	b.n	225c <gpio_nrfx_init+0x8>
    2282:	bf00      	nop
    2284:	20000906 	.word	0x20000906
    2288:	40006000 	.word	0x40006000

0000228c <i2c_nrfx_twim_transfer>:
}

static int i2c_nrfx_twim_transfer(const struct device *dev,
				  struct i2c_msg *msgs,
				  uint8_t num_msgs, uint16_t addr)
{
    228c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2290:	b08f      	sub	sp, #60	; 0x3c
    2292:	4688      	mov	r8, r1
    2294:	4691      	mov	r9, r2
	return dev->data;
    2296:	6901      	ldr	r1, [r0, #16]
    2298:	460e      	mov	r6, r1
    229a:	9104      	str	r1, [sp, #16]
	return dev->config;
    229c:	6844      	ldr	r4, [r0, #4]
    229e:	9407      	str	r4, [sp, #28]
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
	const struct i2c_nrfx_twim_config *dev_config = get_dev_config(dev);
	int ret = 0;
	uint8_t *msg_buf = dev_data->msg_buf;
    22a0:	f8d1 a028 	ldr.w	sl, [r1, #40]	; 0x28
	uint16_t msg_buf_used = 0;
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    22a4:	8b22      	ldrh	r2, [r4, #24]
    22a6:	9203      	str	r2, [sp, #12]
	nrfx_twim_xfer_desc_t cur_xfer = {
    22a8:	2500      	movs	r5, #0
    22aa:	9509      	str	r5, [sp, #36]	; 0x24
    22ac:	950a      	str	r5, [sp, #40]	; 0x28
    22ae:	950b      	str	r5, [sp, #44]	; 0x2c
    22b0:	950c      	str	r5, [sp, #48]	; 0x30
    22b2:	950d      	str	r5, [sp, #52]	; 0x34
    22b4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	return z_impl_k_sem_take(sem, timeout);
    22b8:	f04f 32ff 	mov.w	r2, #4294967295
    22bc:	f04f 33ff 	mov.w	r3, #4294967295
    22c0:	4608      	mov	r0, r1
    22c2:	f001 fe6b 	bl	3f9c <z_impl_k_sem_take>
	};

	k_sem_take(&dev_data->transfer_sync, K_FOREVER);

	/* Dummy take on completion_sync sem to be sure that it is empty */
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    22c6:	f106 0310 	add.w	r3, r6, #16
    22ca:	4618      	mov	r0, r3
    22cc:	9306      	str	r3, [sp, #24]
    22ce:	2200      	movs	r2, #0
    22d0:	2300      	movs	r3, #0
    22d2:	f001 fe63 	bl	3f9c <z_impl_k_sem_take>

	nrfx_twim_enable(&dev_config->twim);
    22d6:	4620      	mov	r0, r4
    22d8:	9405      	str	r4, [sp, #20]
    22da:	f001 fb13 	bl	3904 <nrfx_twim_enable>

	for (size_t i = 0; i < num_msgs; i++) {
    22de:	462e      	mov	r6, r5
	uint16_t msg_buf_used = 0;
    22e0:	462c      	mov	r4, r5
	int ret = 0;
    22e2:	9502      	str	r5, [sp, #8]
	for (size_t i = 0; i < num_msgs; i++) {
    22e4:	e041      	b.n	236a <i2c_nrfx_twim_transfer+0xde>
		 * - the direction of the next fragment is the same as this one
		 */
		bool concat_next = ((i + 1) < num_msgs)
				&& !(msgs[i].flags & I2C_MSG_STOP)
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
				&& ((msgs[i].flags & I2C_MSG_READ)
    22e6:	2200      	movs	r2, #0

		/* If we need to concatenate the next message, or we've
		 * already committed to concatenate this message, add it to
		 * the buffer after verifying there's room.
		 */
		if (concat_next || (msg_buf_used != 0)) {
    22e8:	9201      	str	r2, [sp, #4]
    22ea:	b90a      	cbnz	r2, 22f0 <i2c_nrfx_twim_transfer+0x64>
    22ec:	2c00      	cmp	r4, #0
    22ee:	d069      	beq.n	23c4 <i2c_nrfx_twim_transfer+0x138>
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    22f0:	686a      	ldr	r2, [r5, #4]
    22f2:	18a1      	adds	r1, r4, r2
    22f4:	9803      	ldr	r0, [sp, #12]
    22f6:	4281      	cmp	r1, r0
    22f8:	f200 80b4 	bhi.w	2464 <i2c_nrfx_twim_transfer+0x1d8>
					msg_buf_used, msgs[i].len,
					concat_buf_size, dev->name);
				ret = -ENOSPC;
				break;
			}
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    22fc:	f013 0f01 	tst.w	r3, #1
    2300:	d059      	beq.n	23b6 <i2c_nrfx_twim_transfer+0x12a>
				memcpy(msg_buf + msg_buf_used,
				       msgs[i].buf,
				       msgs[i].len);
			}
			msg_buf_used += msgs[i].len;
    2302:	686b      	ldr	r3, [r5, #4]
    2304:	441c      	add	r4, r3
    2306:	b2a4      	uxth	r4, r4

			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
			msg_buf_used = msgs[i].len;
		}

		if (concat_next) {
    2308:	9b01      	ldr	r3, [sp, #4]
    230a:	bb6b      	cbnz	r3, 2368 <i2c_nrfx_twim_transfer+0xdc>
			continue;
		}

		if (msg_buf_used == 0) {
    230c:	2c00      	cmp	r4, #0
    230e:	d16d      	bne.n	23ec <i2c_nrfx_twim_transfer+0x160>
			cur_xfer.p_primary_buf = msgs[i].buf;
    2310:	f858 300b 	ldr.w	r3, [r8, fp]
    2314:	930c      	str	r3, [sp, #48]	; 0x30
			cur_xfer.primary_length = msgs[i].len;
    2316:	686b      	ldr	r3, [r5, #4]
    2318:	930a      	str	r3, [sp, #40]	; 0x28
		} else {
			cur_xfer.p_primary_buf = msg_buf;
			cur_xfer.primary_length = msg_buf_used;
		}
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    231a:	7a2b      	ldrb	r3, [r5, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    231c:	f003 0201 	and.w	r2, r3, #1
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2320:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24

		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    2324:	f013 0f02 	tst.w	r3, #2
    2328:	d064      	beq.n	23f4 <i2c_nrfx_twim_transfer+0x168>
    232a:	2200      	movs	r2, #0
    232c:	a909      	add	r1, sp, #36	; 0x24
    232e:	9805      	ldr	r0, [sp, #20]
    2330:	f001 fb16 	bl	3960 <nrfx_twim_xfer>
						&cur_xfer,
						(msgs[i].flags & I2C_MSG_STOP) ?
						 0 : NRFX_TWIM_FLAG_TX_NO_STOP);
		if (res != NRFX_SUCCESS) {
    2334:	4b51      	ldr	r3, [pc, #324]	; (247c <i2c_nrfx_twim_transfer+0x1f0>)
    2336:	4298      	cmp	r0, r3
    2338:	d15e      	bne.n	23f8 <i2c_nrfx_twim_transfer+0x16c>
    233a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    233e:	2300      	movs	r3, #0
    2340:	9806      	ldr	r0, [sp, #24]
    2342:	f001 fe2b 	bl	3f9c <z_impl_k_sem_take>
			}
		}

		ret = k_sem_take(&dev_data->completion_sync,
				 I2C_TRANSFER_TIMEOUT_MSEC);
		if (ret != 0) {
    2346:	9002      	str	r0, [sp, #8]
    2348:	2800      	cmp	r0, #0
    234a:	d160      	bne.n	240e <i2c_nrfx_twim_transfer+0x182>
					      dev_config->config.sda);
			ret = -EIO;
			break;
		}

		res = dev_data->res;
    234c:	9b04      	ldr	r3, [sp, #16]
    234e:	6a1a      	ldr	r2, [r3, #32]

		if (res != NRFX_SUCCESS) {
    2350:	4b4a      	ldr	r3, [pc, #296]	; (247c <i2c_nrfx_twim_transfer+0x1f0>)
    2352:	429a      	cmp	r2, r3
    2354:	f040 808e 	bne.w	2474 <i2c_nrfx_twim_transfer+0x1e8>
		}

		/* If concatenated messages were I2C_MSG_READ type, then
		 * content of concatenation buffer has to be copied back into
		 * buffers provided by user. */
		if ((msgs[i].flags & I2C_MSG_READ)
    2358:	7a2b      	ldrb	r3, [r5, #8]
    235a:	f013 0f01 	tst.w	r3, #1
    235e:	d002      	beq.n	2366 <i2c_nrfx_twim_transfer+0xda>
		    && cur_xfer.p_primary_buf == msg_buf) {
    2360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2362:	459a      	cmp	sl, r3
    2364:	d068      	beq.n	2438 <i2c_nrfx_twim_transfer+0x1ac>
				j--;
			}

		}

		msg_buf_used = 0;
    2366:	2400      	movs	r4, #0
    2368:	463e      	mov	r6, r7
	for (size_t i = 0; i < num_msgs; i++) {
    236a:	454e      	cmp	r6, r9
    236c:	d270      	bcs.n	2450 <i2c_nrfx_twim_transfer+0x1c4>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    236e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
    2372:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    2376:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    237a:	7a2b      	ldrb	r3, [r5, #8]
    237c:	f013 0f08 	tst.w	r3, #8
    2380:	d163      	bne.n	244a <i2c_nrfx_twim_transfer+0x1be>
		bool concat_next = ((i + 1) < num_msgs)
    2382:	1c77      	adds	r7, r6, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    2384:	454f      	cmp	r7, r9
    2386:	d2ae      	bcs.n	22e6 <i2c_nrfx_twim_transfer+0x5a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    2388:	f013 0f02 	tst.w	r3, #2
    238c:	d10d      	bne.n	23aa <i2c_nrfx_twim_transfer+0x11e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    238e:	eb07 0247 	add.w	r2, r7, r7, lsl #1
    2392:	eb08 0282 	add.w	r2, r8, r2, lsl #2
    2396:	7a12      	ldrb	r2, [r2, #8]
    2398:	f012 0f04 	tst.w	r2, #4
    239c:	d107      	bne.n	23ae <i2c_nrfx_twim_transfer+0x122>
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    239e:	405a      	eors	r2, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    23a0:	f012 0f01 	tst.w	r2, #1
    23a4:	d005      	beq.n	23b2 <i2c_nrfx_twim_transfer+0x126>
    23a6:	2200      	movs	r2, #0
    23a8:	e79e      	b.n	22e8 <i2c_nrfx_twim_transfer+0x5c>
    23aa:	2200      	movs	r2, #0
    23ac:	e79c      	b.n	22e8 <i2c_nrfx_twim_transfer+0x5c>
    23ae:	2200      	movs	r2, #0
    23b0:	e79a      	b.n	22e8 <i2c_nrfx_twim_transfer+0x5c>
    23b2:	2201      	movs	r2, #1
    23b4:	e798      	b.n	22e8 <i2c_nrfx_twim_transfer+0x5c>
				memcpy(msg_buf + msg_buf_used,
    23b6:	f858 100b 	ldr.w	r1, [r8, fp]
    23ba:	eb04 000a 	add.w	r0, r4, sl
    23be:	f002 ffde 	bl	537e <memcpy>
    23c2:	e79e      	b.n	2302 <i2c_nrfx_twim_transfer+0x76>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    23c4:	f013 0f01 	tst.w	r3, #1
    23c8:	d19e      	bne.n	2308 <i2c_nrfx_twim_transfer+0x7c>
			   !nrfx_is_in_ram(msgs[i].buf)) {
    23ca:	f858 100b 	ldr.w	r1, [r8, fp]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    23ce:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    23d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    23d6:	d097      	beq.n	2308 <i2c_nrfx_twim_transfer+0x7c>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    23d8:	686a      	ldr	r2, [r5, #4]
    23da:	9b07      	ldr	r3, [sp, #28]
    23dc:	8b5b      	ldrh	r3, [r3, #26]
    23de:	429a      	cmp	r2, r3
    23e0:	d844      	bhi.n	246c <i2c_nrfx_twim_transfer+0x1e0>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    23e2:	4650      	mov	r0, sl
    23e4:	f002 ffcb 	bl	537e <memcpy>
			msg_buf_used = msgs[i].len;
    23e8:	88ac      	ldrh	r4, [r5, #4]
    23ea:	e78d      	b.n	2308 <i2c_nrfx_twim_transfer+0x7c>
			cur_xfer.p_primary_buf = msg_buf;
    23ec:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
			cur_xfer.primary_length = msg_buf_used;
    23f0:	940a      	str	r4, [sp, #40]	; 0x28
    23f2:	e792      	b.n	231a <i2c_nrfx_twim_transfer+0x8e>
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    23f4:	2220      	movs	r2, #32
    23f6:	e799      	b.n	232c <i2c_nrfx_twim_transfer+0xa0>
			if (res == NRFX_ERROR_BUSY) {
    23f8:	330b      	adds	r3, #11
    23fa:	4298      	cmp	r0, r3
    23fc:	d003      	beq.n	2406 <i2c_nrfx_twim_transfer+0x17a>
				ret = -EIO;
    23fe:	f06f 0304 	mvn.w	r3, #4
    2402:	9302      	str	r3, [sp, #8]
    2404:	e024      	b.n	2450 <i2c_nrfx_twim_transfer+0x1c4>
				ret = -EBUSY;
    2406:	f06f 030f 	mvn.w	r3, #15
    240a:	9302      	str	r3, [sp, #8]
    240c:	e020      	b.n	2450 <i2c_nrfx_twim_transfer+0x1c4>
			nrfx_twim_disable(&dev_config->twim);
    240e:	9c07      	ldr	r4, [sp, #28]
    2410:	4620      	mov	r0, r4
    2412:	f001 fa87 	bl	3924 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    2416:	68e1      	ldr	r1, [r4, #12]
    2418:	68a0      	ldr	r0, [r4, #8]
    241a:	f001 fac3 	bl	39a4 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
    241e:	f06f 0304 	mvn.w	r3, #4
    2422:	9302      	str	r3, [sp, #8]
			break;
    2424:	e014      	b.n	2450 <i2c_nrfx_twim_transfer+0x1c4>
				msg_buf_used -= msgs[j].len;
    2426:	1aa4      	subs	r4, r4, r2
    2428:	b2a4      	uxth	r4, r4
				memcpy(msgs[j].buf,
    242a:	eb0a 0104 	add.w	r1, sl, r4
    242e:	f858 0000 	ldr.w	r0, [r8, r0]
    2432:	f002 ffa4 	bl	537e <memcpy>
				j--;
    2436:	3e01      	subs	r6, #1
			while (msg_buf_used >= msgs[j].len) {
    2438:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    243c:	0098      	lsls	r0, r3, #2
    243e:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    2442:	685a      	ldr	r2, [r3, #4]
    2444:	4294      	cmp	r4, r2
    2446:	d2ee      	bcs.n	2426 <i2c_nrfx_twim_transfer+0x19a>
    2448:	e78d      	b.n	2366 <i2c_nrfx_twim_transfer+0xda>
			ret = -ENOTSUP;
    244a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    244e:	9302      	str	r3, [sp, #8]
	}

	nrfx_twim_disable(&dev_config->twim);
    2450:	9807      	ldr	r0, [sp, #28]
    2452:	f001 fa67 	bl	3924 <nrfx_twim_disable>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2456:	9804      	ldr	r0, [sp, #16]
    2458:	f001 fd7c 	bl	3f54 <z_impl_k_sem_give>
	k_sem_give(&dev_data->transfer_sync);

	return ret;
}
    245c:	9802      	ldr	r0, [sp, #8]
    245e:	b00f      	add	sp, #60	; 0x3c
    2460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ret = -ENOSPC;
    2464:	f06f 031b 	mvn.w	r3, #27
    2468:	9302      	str	r3, [sp, #8]
    246a:	e7f1      	b.n	2450 <i2c_nrfx_twim_transfer+0x1c4>
				ret = -EINVAL;
    246c:	f06f 0315 	mvn.w	r3, #21
    2470:	9302      	str	r3, [sp, #8]
    2472:	e7ed      	b.n	2450 <i2c_nrfx_twim_transfer+0x1c4>
			ret = -EIO;
    2474:	f06f 0304 	mvn.w	r3, #4
    2478:	9302      	str	r3, [sp, #8]
    247a:	e7e9      	b.n	2450 <i2c_nrfx_twim_transfer+0x1c4>
    247c:	0bad0000 	.word	0x0bad0000

00002480 <event_handler>:

static void event_handler(nrfx_twim_evt_t const *p_event, void *p_context)
{
    2480:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = p_context;

	switch (p_event->type) {
    2482:	7803      	ldrb	r3, [r0, #0]
    2484:	2b01      	cmp	r3, #1
    2486:	d00c      	beq.n	24a2 <event_handler+0x22>
    2488:	2b02      	cmp	r3, #2
    248a:	d00d      	beq.n	24a8 <event_handler+0x28>
    248c:	b113      	cbz	r3, 2494 <event_handler+0x14>
		break;
	case NRFX_TWIM_EVT_DATA_NACK:
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
		break;
	default:
		dev_data->res = NRFX_ERROR_INTERNAL;
    248e:	4b08      	ldr	r3, [pc, #32]	; (24b0 <event_handler+0x30>)
    2490:	620b      	str	r3, [r1, #32]
		break;
    2492:	e001      	b.n	2498 <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
    2494:	4b07      	ldr	r3, [pc, #28]	; (24b4 <event_handler+0x34>)
    2496:	620b      	str	r3, [r1, #32]
	}

	k_sem_give(&dev_data->completion_sync);
    2498:	f101 0010 	add.w	r0, r1, #16
    249c:	f001 fd5a 	bl	3f54 <z_impl_k_sem_give>
}
    24a0:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    24a2:	4b05      	ldr	r3, [pc, #20]	; (24b8 <event_handler+0x38>)
    24a4:	620b      	str	r3, [r1, #32]
		break;
    24a6:	e7f7      	b.n	2498 <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    24a8:	4b04      	ldr	r3, [pc, #16]	; (24bc <event_handler+0x3c>)
    24aa:	620b      	str	r3, [r1, #32]
		break;
    24ac:	e7f4      	b.n	2498 <event_handler+0x18>
    24ae:	bf00      	nop
    24b0:	0bad0001 	.word	0x0bad0001
    24b4:	0bad0000 	.word	0x0bad0000
    24b8:	0bae0001 	.word	0x0bae0001
    24bc:	0bae0002 	.word	0x0bae0002

000024c0 <init_twim>:
	.configure = i2c_nrfx_twim_configure,
	.transfer  = i2c_nrfx_twim_transfer,
};

static int init_twim(const struct device *dev)
{
    24c0:	b508      	push	{r3, lr}
    24c2:	4603      	mov	r3, r0
	return dev->config;
    24c4:	6840      	ldr	r0, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    24c6:	691b      	ldr	r3, [r3, #16]
    24c8:	4a06      	ldr	r2, [pc, #24]	; (24e4 <init_twim+0x24>)
    24ca:	f100 0108 	add.w	r1, r0, #8
    24ce:	f001 f9d5 	bl	387c <nrfx_twim_init>
					   &get_dev_config(dev)->config,
					   event_handler,
					   dev_data);
	if (result != NRFX_SUCCESS) {
    24d2:	4b05      	ldr	r3, [pc, #20]	; (24e8 <init_twim+0x28>)
    24d4:	4298      	cmp	r0, r3
    24d6:	d101      	bne.n	24dc <init_twim+0x1c>
		LOG_ERR("Failed to initialize device: %s",
			dev->name);
		return -EBUSY;
	}

	return 0;
    24d8:	2000      	movs	r0, #0
}
    24da:	bd08      	pop	{r3, pc}
		return -EBUSY;
    24dc:	f06f 000f 	mvn.w	r0, #15
    24e0:	e7fb      	b.n	24da <init_twim+0x1a>
    24e2:	bf00      	nop
    24e4:	00002481 	.word	0x00002481
    24e8:	0bad0000 	.word	0x0bad0000

000024ec <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    24ec:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    24ee:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    24f0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    24f4:	d06f      	beq.n	25d6 <baudrate_set+0xea>
    24f6:	d83a      	bhi.n	256e <baudrate_set+0x82>
    24f8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    24fc:	d06e      	beq.n	25dc <baudrate_set+0xf0>
    24fe:	d90a      	bls.n	2516 <baudrate_set+0x2a>
    2500:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    2504:	d075      	beq.n	25f2 <baudrate_set+0x106>
    2506:	d924      	bls.n	2552 <baudrate_set+0x66>
    2508:	f647 2312 	movw	r3, #31250	; 0x7a12
    250c:	4299      	cmp	r1, r3
    250e:	d12b      	bne.n	2568 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2510:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2514:	e013      	b.n	253e <baudrate_set+0x52>
	switch (baudrate) {
    2516:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    251a:	d061      	beq.n	25e0 <baudrate_set+0xf4>
    251c:	d907      	bls.n	252e <baudrate_set+0x42>
    251e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2522:	d063      	beq.n	25ec <baudrate_set+0x100>
    2524:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2528:	d110      	bne.n	254c <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    252a:	4b3c      	ldr	r3, [pc, #240]	; (261c <baudrate_set+0x130>)
    252c:	e007      	b.n	253e <baudrate_set+0x52>
	switch (baudrate) {
    252e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2532:	d058      	beq.n	25e6 <baudrate_set+0xfa>
    2534:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2538:	d105      	bne.n	2546 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    253a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    253e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    2542:	2000      	movs	r0, #0
    2544:	4770      	bx	lr
	switch (baudrate) {
    2546:	f06f 0015 	mvn.w	r0, #21
    254a:	4770      	bx	lr
    254c:	f06f 0015 	mvn.w	r0, #21
    2550:	4770      	bx	lr
    2552:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2556:	d04e      	beq.n	25f6 <baudrate_set+0x10a>
    2558:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    255c:	d101      	bne.n	2562 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    255e:	4b30      	ldr	r3, [pc, #192]	; (2620 <baudrate_set+0x134>)
    2560:	e7ed      	b.n	253e <baudrate_set+0x52>
	switch (baudrate) {
    2562:	f06f 0015 	mvn.w	r0, #21
    2566:	4770      	bx	lr
    2568:	f06f 0015 	mvn.w	r0, #21
    256c:	4770      	bx	lr
    256e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2572:	d042      	beq.n	25fa <baudrate_set+0x10e>
    2574:	d909      	bls.n	258a <baudrate_set+0x9e>
    2576:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    257a:	d046      	beq.n	260a <baudrate_set+0x11e>
    257c:	d91f      	bls.n	25be <baudrate_set+0xd2>
    257e:	4b29      	ldr	r3, [pc, #164]	; (2624 <baudrate_set+0x138>)
    2580:	4299      	cmp	r1, r3
    2582:	d148      	bne.n	2616 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2584:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2588:	e7d9      	b.n	253e <baudrate_set+0x52>
	switch (baudrate) {
    258a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    258e:	d037      	beq.n	2600 <baudrate_set+0x114>
    2590:	d905      	bls.n	259e <baudrate_set+0xb2>
    2592:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    2596:	d10f      	bne.n	25b8 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2598:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    259c:	e7cf      	b.n	253e <baudrate_set+0x52>
	switch (baudrate) {
    259e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    25a2:	4299      	cmp	r1, r3
    25a4:	d02e      	beq.n	2604 <baudrate_set+0x118>
    25a6:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    25aa:	d102      	bne.n	25b2 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    25ac:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    25b0:	e7c5      	b.n	253e <baudrate_set+0x52>
	switch (baudrate) {
    25b2:	f06f 0015 	mvn.w	r0, #21
    25b6:	4770      	bx	lr
    25b8:	f06f 0015 	mvn.w	r0, #21
    25bc:	4770      	bx	lr
    25be:	4b1a      	ldr	r3, [pc, #104]	; (2628 <baudrate_set+0x13c>)
    25c0:	4299      	cmp	r1, r3
    25c2:	d025      	beq.n	2610 <baudrate_set+0x124>
    25c4:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    25c8:	d102      	bne.n	25d0 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    25ca:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    25ce:	e7b6      	b.n	253e <baudrate_set+0x52>
	switch (baudrate) {
    25d0:	f06f 0015 	mvn.w	r0, #21
    25d4:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    25d6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    25da:	e7b0      	b.n	253e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    25dc:	4b13      	ldr	r3, [pc, #76]	; (262c <baudrate_set+0x140>)
    25de:	e7ae      	b.n	253e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    25e0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    25e4:	e7ab      	b.n	253e <baudrate_set+0x52>
	switch (baudrate) {
    25e6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    25ea:	e7a8      	b.n	253e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    25ec:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    25f0:	e7a5      	b.n	253e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    25f2:	4b0f      	ldr	r3, [pc, #60]	; (2630 <baudrate_set+0x144>)
    25f4:	e7a3      	b.n	253e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    25f6:	4b0f      	ldr	r3, [pc, #60]	; (2634 <baudrate_set+0x148>)
    25f8:	e7a1      	b.n	253e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    25fa:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    25fe:	e79e      	b.n	253e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2600:	4b0d      	ldr	r3, [pc, #52]	; (2638 <baudrate_set+0x14c>)
    2602:	e79c      	b.n	253e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2604:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2608:	e799      	b.n	253e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    260a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    260e:	e796      	b.n	253e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2610:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2614:	e793      	b.n	253e <baudrate_set+0x52>
	switch (baudrate) {
    2616:	f06f 0015 	mvn.w	r0, #21
}
    261a:	4770      	bx	lr
    261c:	0013b000 	.word	0x0013b000
    2620:	004ea000 	.word	0x004ea000
    2624:	000f4240 	.word	0x000f4240
    2628:	0003d090 	.word	0x0003d090
    262c:	00275000 	.word	0x00275000
    2630:	0075c000 	.word	0x0075c000
    2634:	003af000 	.word	0x003af000
    2638:	013a9000 	.word	0x013a9000

0000263c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    263c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2640:	4605      	mov	r5, r0
    2642:	460f      	mov	r7, r1
	return dev->data;
    2644:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2648:	f003 fd75 	bl	6136 <k_is_in_isr>
    264c:	b920      	cbnz	r0, 2658 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    264e:	4b16      	ldr	r3, [pc, #88]	; (26a8 <uarte_nrfx_poll_out+0x6c>)
    2650:	781b      	ldrb	r3, [r3, #0]
    2652:	b1ab      	cbz	r3, 2680 <uarte_nrfx_poll_out+0x44>
    2654:	2300      	movs	r3, #0
    2656:	e000      	b.n	265a <uarte_nrfx_poll_out+0x1e>
    2658:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    265a:	b19b      	cbz	r3, 2684 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    265c:	f04f 0320 	mov.w	r3, #32
    2660:	f3ef 8411 	mrs	r4, BASEPRI
    2664:	f383 8812 	msr	BASEPRI_MAX, r3
    2668:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    266c:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    266e:	4628      	mov	r0, r5
    2670:	f003 fa2c 	bl	5acc <is_tx_ready>
    2674:	b950      	cbnz	r0, 268c <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    2676:	f384 8811 	msr	BASEPRI, r4
    267a:	f3bf 8f6f 	isb	sy
}
    267e:	e7ed      	b.n	265c <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2680:	2301      	movs	r3, #1
    2682:	e7ea      	b.n	265a <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    2684:	4628      	mov	r0, r5
    2686:	f003 fb42 	bl	5d0e <wait_tx_ready>
    268a:	4606      	mov	r6, r0
	}

	data->char_out = c;
    268c:	4641      	mov	r1, r8
    268e:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    2692:	2201      	movs	r2, #1
    2694:	4628      	mov	r0, r5
    2696:	f003 fa33 	bl	5b00 <tx_start>
	__asm__ volatile(
    269a:	f386 8811 	msr	BASEPRI, r6
    269e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    26a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26a6:	bf00      	nop
    26a8:	20000907 	.word	0x20000907

000026ac <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    26ac:	b538      	push	{r3, r4, r5, lr}
    26ae:	4604      	mov	r4, r0
    26b0:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    26b2:	f101 0016 	add.w	r0, r1, #22
    26b6:	f000 fe55 	bl	3364 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    26ba:	4b0c      	ldr	r3, [pc, #48]	; (26ec <endtx_stoptx_ppi_init+0x40>)
    26bc:	4298      	cmp	r0, r3
    26be:	d111      	bne.n	26e4 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    26c0:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    26c2:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    26c6:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    26c8:	4a09      	ldr	r2, [pc, #36]	; (26f0 <endtx_stoptx_ppi_init+0x44>)
    26ca:	33a2      	adds	r3, #162	; 0xa2
    26cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    26d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    26d4:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    26d6:	7da9      	ldrb	r1, [r5, #22]
    26d8:	2301      	movs	r3, #1
    26da:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    26dc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    26e0:	2000      	movs	r0, #0
}
    26e2:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    26e4:	f06f 0004 	mvn.w	r0, #4
    26e8:	e7fb      	b.n	26e2 <endtx_stoptx_ppi_init+0x36>
    26ea:	bf00      	nop
    26ec:	0bad0000 	.word	0x0bad0000
    26f0:	4001f000 	.word	0x4001f000

000026f4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    26f4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    26f8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    26fc:	4b01      	ldr	r3, [pc, #4]	; (2704 <set_comparator+0x10>)
    26fe:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    2702:	4770      	bx	lr
    2704:	40011000 	.word	0x40011000

00002708 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    2708:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    270c:	4b01      	ldr	r3, [pc, #4]	; (2714 <get_comparator+0xc>)
    270e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    2712:	4770      	bx	lr
    2714:	40011000 	.word	0x40011000

00002718 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    271c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    271e:	4a02      	ldr	r2, [pc, #8]	; (2728 <event_enable+0x10>)
    2720:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    2724:	4770      	bx	lr
    2726:	bf00      	nop
    2728:	40011000 	.word	0x40011000

0000272c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    272c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2730:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2732:	4a02      	ldr	r2, [pc, #8]	; (273c <event_disable+0x10>)
    2734:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    2738:	4770      	bx	lr
    273a:	bf00      	nop
    273c:	40011000 	.word	0x40011000

00002740 <counter>:
     return p_reg->COUNTER;
    2740:	4b01      	ldr	r3, [pc, #4]	; (2748 <counter+0x8>)
    2742:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    2746:	4770      	bx	lr
    2748:	40011000 	.word	0x40011000

0000274c <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    274c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    274e:	2301      	movs	r3, #1
    2750:	4083      	lsls	r3, r0
    2752:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2754:	4a10      	ldr	r2, [pc, #64]	; (2798 <compare_int_lock+0x4c>)
    2756:	f3bf 8f5b 	dmb	ish
    275a:	e852 1f00 	ldrex	r1, [r2]
    275e:	ea01 0c04 	and.w	ip, r1, r4
    2762:	e842 ce00 	strex	lr, ip, [r2]
    2766:	f1be 0f00 	cmp.w	lr, #0
    276a:	d1f6      	bne.n	275a <compare_int_lock+0xe>
    276c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2770:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2774:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    2778:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    277c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2780:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2784:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2788:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    278c:	420b      	tst	r3, r1
}
    278e:	bf14      	ite	ne
    2790:	2001      	movne	r0, #1
    2792:	2000      	moveq	r0, #0
    2794:	bd10      	pop	{r4, pc}
    2796:	bf00      	nop
    2798:	20000344 	.word	0x20000344

0000279c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    279c:	b570      	push	{r4, r5, r6, lr}
    279e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    27a0:	f003 fb97 	bl	5ed2 <full_int_lock>
    27a4:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    27a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    27aa:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    27ac:	4a17      	ldr	r2, [pc, #92]	; (280c <channel_processing_check_and_clear+0x70>)
    27ae:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    27b2:	4213      	tst	r3, r2
    27b4:	d105      	bne.n	27c2 <channel_processing_check_and_clear+0x26>
	bool result = false;
    27b6:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    27b8:	4628      	mov	r0, r5
    27ba:	f003 fb93 	bl	5ee4 <full_int_unlock>

	return result;
}
    27be:	4630      	mov	r0, r6
    27c0:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    27c2:	2301      	movs	r3, #1
    27c4:	40a3      	lsls	r3, r4
    27c6:	43db      	mvns	r3, r3
    27c8:	4a11      	ldr	r2, [pc, #68]	; (2810 <channel_processing_check_and_clear+0x74>)
    27ca:	f3bf 8f5b 	dmb	ish
    27ce:	e852 1f00 	ldrex	r1, [r2]
    27d2:	ea01 0003 	and.w	r0, r1, r3
    27d6:	e842 0600 	strex	r6, r0, [r2]
    27da:	2e00      	cmp	r6, #0
    27dc:	d1f7      	bne.n	27ce <channel_processing_check_and_clear+0x32>
    27de:	f3bf 8f5b 	dmb	ish
    27e2:	b959      	cbnz	r1, 27fc <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    27e4:	f104 0350 	add.w	r3, r4, #80	; 0x50
    27e8:	009b      	lsls	r3, r3, #2
    27ea:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    27ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    27f0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    27f4:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    27f6:	b113      	cbz	r3, 27fe <channel_processing_check_and_clear+0x62>
    27f8:	2301      	movs	r3, #1
    27fa:	e000      	b.n	27fe <channel_processing_check_and_clear+0x62>
    27fc:	2301      	movs	r3, #1
		if (result) {
    27fe:	461e      	mov	r6, r3
    2800:	2b00      	cmp	r3, #0
    2802:	d0d9      	beq.n	27b8 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    2804:	4620      	mov	r0, r4
    2806:	f003 fb55 	bl	5eb4 <event_clear>
    280a:	e7d5      	b.n	27b8 <channel_processing_check_and_clear+0x1c>
    280c:	40011000 	.word	0x40011000
    2810:	20000340 	.word	0x20000340

00002814 <compare_int_unlock>:
	if (key) {
    2814:	b901      	cbnz	r1, 2818 <compare_int_unlock+0x4>
}
    2816:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    2818:	2301      	movs	r3, #1
    281a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    281c:	4a11      	ldr	r2, [pc, #68]	; (2864 <compare_int_unlock+0x50>)
    281e:	f3bf 8f5b 	dmb	ish
    2822:	e852 1f00 	ldrex	r1, [r2]
    2826:	4319      	orrs	r1, r3
    2828:	e842 1c00 	strex	ip, r1, [r2]
    282c:	f1bc 0f00 	cmp.w	ip, #0
    2830:	d1f7      	bne.n	2822 <compare_int_unlock+0xe>
    2832:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2836:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    283a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    283c:	4a0a      	ldr	r2, [pc, #40]	; (2868 <compare_int_unlock+0x54>)
    283e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2842:	f3bf 8f5b 	dmb	ish
    2846:	4b09      	ldr	r3, [pc, #36]	; (286c <compare_int_unlock+0x58>)
    2848:	681b      	ldr	r3, [r3, #0]
    284a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    284e:	fa23 f000 	lsr.w	r0, r3, r0
    2852:	f010 0f01 	tst.w	r0, #1
    2856:	d0de      	beq.n	2816 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2858:	4b05      	ldr	r3, [pc, #20]	; (2870 <compare_int_unlock+0x5c>)
    285a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    285e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2862:	e7d8      	b.n	2816 <compare_int_unlock+0x2>
    2864:	20000344 	.word	0x20000344
    2868:	40011000 	.word	0x40011000
    286c:	20000340 	.word	0x20000340
    2870:	e000e100 	.word	0xe000e100

00002874 <sys_clock_timeout_handler>:
{
    2874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2876:	4607      	mov	r7, r0
    2878:	4614      	mov	r4, r2
    287a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    287c:	4610      	mov	r0, r2
    287e:	4619      	mov	r1, r3
    2880:	f003 fb24 	bl	5ecc <absolute_time_to_cc>
    2884:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2886:	4b15      	ldr	r3, [pc, #84]	; (28dc <sys_clock_timeout_handler+0x68>)
    2888:	681a      	ldr	r2, [r3, #0]
    288a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    288c:	601c      	str	r4, [r3, #0]
    288e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2890:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2894:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2898:	d308      	bcc.n	28ac <sys_clock_timeout_handler+0x38>
	return false;
    289a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    289c:	f002 f840 	bl	4920 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    28a0:	4638      	mov	r0, r7
    28a2:	f7ff ff31 	bl	2708 <get_comparator>
    28a6:	42a8      	cmp	r0, r5
    28a8:	d00c      	beq.n	28c4 <sys_clock_timeout_handler+0x50>
}
    28aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    28ac:	4b0c      	ldr	r3, [pc, #48]	; (28e0 <sys_clock_timeout_handler+0x6c>)
    28ae:	6819      	ldr	r1, [r3, #0]
    28b0:	0a0b      	lsrs	r3, r1, #8
    28b2:	060a      	lsls	r2, r1, #24
    28b4:	1952      	adds	r2, r2, r5
    28b6:	f143 0300 	adc.w	r3, r3, #0
    28ba:	490a      	ldr	r1, [pc, #40]	; (28e4 <sys_clock_timeout_handler+0x70>)
    28bc:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    28c0:	2401      	movs	r4, #1
    28c2:	e7eb      	b.n	289c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    28c4:	b11c      	cbz	r4, 28ce <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    28c6:	4638      	mov	r0, r7
    28c8:	f7ff ff26 	bl	2718 <event_enable>
}
    28cc:	e7ed      	b.n	28aa <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    28ce:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    28d2:	4638      	mov	r0, r7
    28d4:	f7ff ff0e 	bl	26f4 <set_comparator>
    28d8:	e7f5      	b.n	28c6 <sys_clock_timeout_handler+0x52>
    28da:	bf00      	nop
    28dc:	200000d0 	.word	0x200000d0
    28e0:	20000348 	.word	0x20000348
    28e4:	200000b8 	.word	0x200000b8

000028e8 <z_nrf_rtc_timer_read>:
{
    28e8:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    28ea:	4b0d      	ldr	r3, [pc, #52]	; (2920 <z_nrf_rtc_timer_read+0x38>)
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	0a1d      	lsrs	r5, r3, #8
    28f0:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    28f2:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    28f6:	f7ff ff23 	bl	2740 <counter>
    28fa:	4603      	mov	r3, r0
	val += cntr;
    28fc:	1820      	adds	r0, r4, r0
    28fe:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2906:	d20a      	bcs.n	291e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    2908:	4b06      	ldr	r3, [pc, #24]	; (2924 <z_nrf_rtc_timer_read+0x3c>)
    290a:	e9d3 2300 	ldrd	r2, r3, [r3]
    290e:	4299      	cmp	r1, r3
    2910:	bf08      	it	eq
    2912:	4290      	cmpeq	r0, r2
    2914:	d203      	bcs.n	291e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    2916:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    291a:	f141 0100 	adc.w	r1, r1, #0
}
    291e:	bd38      	pop	{r3, r4, r5, pc}
    2920:	20000348 	.word	0x20000348
    2924:	200000b8 	.word	0x200000b8

00002928 <compare_set_nolocks>:
{
    2928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    292c:	4606      	mov	r6, r0
    292e:	4614      	mov	r4, r2
    2930:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    2932:	4610      	mov	r0, r2
    2934:	4619      	mov	r1, r3
    2936:	f003 fac9 	bl	5ecc <absolute_time_to_cc>
    293a:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    293c:	f7ff ffd4 	bl	28e8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2940:	42a9      	cmp	r1, r5
    2942:	bf08      	it	eq
    2944:	42a0      	cmpeq	r0, r4
    2946:	d21e      	bcs.n	2986 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    2948:	ebb4 0800 	subs.w	r8, r4, r0
    294c:	eb65 0901 	sbc.w	r9, r5, r1
    2950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2954:	2300      	movs	r3, #0
    2956:	454b      	cmp	r3, r9
    2958:	bf08      	it	eq
    295a:	4542      	cmpeq	r2, r8
    295c:	d32e      	bcc.n	29bc <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    295e:	4b19      	ldr	r3, [pc, #100]	; (29c4 <compare_set_nolocks+0x9c>)
    2960:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2964:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2968:	42ab      	cmp	r3, r5
    296a:	bf08      	it	eq
    296c:	42a2      	cmpeq	r2, r4
    296e:	d018      	beq.n	29a2 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2970:	4639      	mov	r1, r7
    2972:	4630      	mov	r0, r6
    2974:	f003 fabb 	bl	5eee <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    2978:	4639      	mov	r1, r7
    297a:	f003 fa97 	bl	5eac <counter_sub>
    297e:	1824      	adds	r4, r4, r0
    2980:	f145 0500 	adc.w	r5, r5, #0
    2984:	e00d      	b.n	29a2 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    2986:	2301      	movs	r3, #1
    2988:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    298a:	4a0f      	ldr	r2, [pc, #60]	; (29c8 <compare_set_nolocks+0xa0>)
    298c:	f3bf 8f5b 	dmb	ish
    2990:	e852 1f00 	ldrex	r1, [r2]
    2994:	4319      	orrs	r1, r3
    2996:	e842 1000 	strex	r0, r1, [r2]
    299a:	2800      	cmp	r0, #0
    299c:	d1f8      	bne.n	2990 <compare_set_nolocks+0x68>
    299e:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    29a2:	4b08      	ldr	r3, [pc, #32]	; (29c4 <compare_set_nolocks+0x9c>)
    29a4:	0132      	lsls	r2, r6, #4
    29a6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    29aa:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    29ae:	9908      	ldr	r1, [sp, #32]
    29b0:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    29b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29b4:	6073      	str	r3, [r6, #4]
	return ret;
    29b6:	2000      	movs	r0, #0
}
    29b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    29bc:	f06f 0015 	mvn.w	r0, #21
    29c0:	e7fa      	b.n	29b8 <compare_set_nolocks+0x90>
    29c2:	bf00      	nop
    29c4:	200000c0 	.word	0x200000c0
    29c8:	20000340 	.word	0x20000340

000029cc <process_channel>:

static void process_channel(int32_t chan)
{
    29cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    29d0:	b082      	sub	sp, #8
    29d2:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    29d4:	f7ff fee2 	bl	279c <channel_processing_check_and_clear>
    29d8:	b910      	cbnz	r0, 29e0 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    29da:	b002      	add	sp, #8
    29dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    29e0:	f7ff ff82 	bl	28e8 <z_nrf_rtc_timer_read>
    29e4:	4606      	mov	r6, r0
    29e6:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    29e8:	f003 fa73 	bl	5ed2 <full_int_lock>
    29ec:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    29ee:	4b13      	ldr	r3, [pc, #76]	; (2a3c <process_channel+0x70>)
    29f0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    29f4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    29f8:	454f      	cmp	r7, r9
    29fa:	bf08      	it	eq
    29fc:	4546      	cmpeq	r6, r8
    29fe:	d20b      	bcs.n	2a18 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2a00:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    2a02:	4650      	mov	r0, sl
    2a04:	f003 fa6e 	bl	5ee4 <full_int_unlock>
		if (handler) {
    2a08:	2e00      	cmp	r6, #0
    2a0a:	d0e6      	beq.n	29da <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2a0c:	9500      	str	r5, [sp, #0]
    2a0e:	4642      	mov	r2, r8
    2a10:	464b      	mov	r3, r9
    2a12:	4620      	mov	r0, r4
    2a14:	47b0      	blx	r6
}
    2a16:	e7e0      	b.n	29da <process_channel+0xe>
			handler = cc_data[chan].callback;
    2a18:	4a08      	ldr	r2, [pc, #32]	; (2a3c <process_channel+0x70>)
    2a1a:	0123      	lsls	r3, r4, #4
    2a1c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2a20:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    2a22:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    2a24:	2000      	movs	r0, #0
    2a26:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2a28:	f04f 32ff 	mov.w	r2, #4294967295
    2a2c:	f04f 33ff 	mov.w	r3, #4294967295
    2a30:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    2a34:	4620      	mov	r0, r4
    2a36:	f7ff fe79 	bl	272c <event_disable>
    2a3a:	e7e2      	b.n	2a02 <process_channel+0x36>
    2a3c:	200000c0 	.word	0x200000c0

00002a40 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    2a40:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    2a42:	4b0d      	ldr	r3, [pc, #52]	; (2a78 <rtc_nrf_isr+0x38>)
    2a44:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2a48:	f013 0f02 	tst.w	r3, #2
    2a4c:	d00a      	beq.n	2a64 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a4e:	4b0b      	ldr	r3, [pc, #44]	; (2a7c <rtc_nrf_isr+0x3c>)
    2a50:	681b      	ldr	r3, [r3, #0]
    2a52:	b13b      	cbz	r3, 2a64 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2a54:	4b09      	ldr	r3, [pc, #36]	; (2a7c <rtc_nrf_isr+0x3c>)
    2a56:	2200      	movs	r2, #0
    2a58:	601a      	str	r2, [r3, #0]
    2a5a:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    2a5c:	4a08      	ldr	r2, [pc, #32]	; (2a80 <rtc_nrf_isr+0x40>)
    2a5e:	6813      	ldr	r3, [r2, #0]
    2a60:	3301      	adds	r3, #1
    2a62:	6013      	str	r3, [r2, #0]
{
    2a64:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2a66:	2c00      	cmp	r4, #0
    2a68:	dd00      	ble.n	2a6c <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    2a6a:	bd10      	pop	{r4, pc}
		process_channel(chan);
    2a6c:	4620      	mov	r0, r4
    2a6e:	f7ff ffad 	bl	29cc <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2a72:	3401      	adds	r4, #1
    2a74:	e7f7      	b.n	2a66 <rtc_nrf_isr+0x26>
    2a76:	bf00      	nop
    2a78:	40011000 	.word	0x40011000
    2a7c:	40011104 	.word	0x40011104
    2a80:	20000348 	.word	0x20000348

00002a84 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    2a84:	b530      	push	{r4, r5, lr}
    2a86:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    2a88:	2300      	movs	r3, #0
    2a8a:	4a1f      	ldr	r2, [pc, #124]	; (2b08 <sys_clock_driver_init+0x84>)
    2a8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2a90:	2b00      	cmp	r3, #0
    2a92:	dd27      	ble.n	2ae4 <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    2a94:	4c1c      	ldr	r4, [pc, #112]	; (2b08 <sys_clock_driver_init+0x84>)
    2a96:	2502      	movs	r5, #2
    2a98:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a9c:	4b1b      	ldr	r3, [pc, #108]	; (2b0c <sys_clock_driver_init+0x88>)
    2a9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2aa2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2aa6:	2200      	movs	r2, #0
    2aa8:	2101      	movs	r1, #1
    2aaa:	2011      	movs	r0, #17
    2aac:	f7fe fd14 	bl	14d8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2ab0:	2011      	movs	r0, #17
    2ab2:	f7fe fcf3 	bl	149c <arch_irq_enable>
    2ab6:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2aba:	2301      	movs	r3, #1
    2abc:	4a14      	ldr	r2, [pc, #80]	; (2b10 <sys_clock_driver_init+0x8c>)
    2abe:	6013      	str	r3, [r2, #0]
    2ac0:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2ac2:	4a14      	ldr	r2, [pc, #80]	; (2b14 <sys_clock_driver_init+0x90>)
    2ac4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2ac6:	2400      	movs	r4, #0
    2ac8:	9401      	str	r4, [sp, #4]
    2aca:	4b13      	ldr	r3, [pc, #76]	; (2b18 <sys_clock_driver_init+0x94>)
    2acc:	9300      	str	r3, [sp, #0]
    2ace:	4a13      	ldr	r2, [pc, #76]	; (2b1c <sys_clock_driver_init+0x98>)
    2ad0:	2300      	movs	r3, #0
    2ad2:	4620      	mov	r0, r4
    2ad4:	f003 fa46 	bl	5f64 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2ad8:	4628      	mov	r0, r5
    2ada:	f7ff fa0b 	bl	1ef4 <z_nrf_clock_control_lf_on>

	return 0;
}
    2ade:	4620      	mov	r0, r4
    2ae0:	b003      	add	sp, #12
    2ae2:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2ae4:	4a0e      	ldr	r2, [pc, #56]	; (2b20 <sys_clock_driver_init+0x9c>)
    2ae6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2aea:	f04f 30ff 	mov.w	r0, #4294967295
    2aee:	f04f 31ff 	mov.w	r1, #4294967295
    2af2:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2af6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2afa:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    2afc:	4902      	ldr	r1, [pc, #8]	; (2b08 <sys_clock_driver_init+0x84>)
    2afe:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2b02:	3301      	adds	r3, #1
    2b04:	e7c4      	b.n	2a90 <sys_clock_driver_init+0xc>
    2b06:	bf00      	nop
    2b08:	40011000 	.word	0x40011000
    2b0c:	e000e100 	.word	0xe000e100
    2b10:	40011008 	.word	0x40011008
    2b14:	20000344 	.word	0x20000344
    2b18:	00002875 	.word	0x00002875
    2b1c:	007fffff 	.word	0x007fffff
    2b20:	200000c0 	.word	0x200000c0

00002b24 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    2b24:	b510      	push	{r4, lr}
    2b26:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2b28:	f1b0 3fff 	cmp.w	r0, #4294967295
    2b2c:	d007      	beq.n	2b3e <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2b2e:	1e44      	subs	r4, r0, #1
    2b30:	2c00      	cmp	r4, #0
    2b32:	dd07      	ble.n	2b44 <sys_clock_set_timeout+0x20>
    2b34:	4b11      	ldr	r3, [pc, #68]	; (2b7c <sys_clock_set_timeout+0x58>)
    2b36:	429c      	cmp	r4, r3
    2b38:	dd05      	ble.n	2b46 <sys_clock_set_timeout+0x22>
    2b3a:	4c11      	ldr	r4, [pc, #68]	; (2b80 <sys_clock_set_timeout+0x5c>)
    2b3c:	e003      	b.n	2b46 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2b3e:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    2b42:	e7f4      	b.n	2b2e <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2b44:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2b46:	f7ff fecf 	bl	28e8 <z_nrf_rtc_timer_read>
    2b4a:	4b0e      	ldr	r3, [pc, #56]	; (2b84 <sys_clock_set_timeout+0x60>)
    2b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b50:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    2b52:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2b56:	d300      	bcc.n	2b5a <sys_clock_set_timeout+0x36>
		ticks = 0;
    2b58:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2b5a:	4404      	add	r4, r0
    2b5c:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    2b5e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    2b62:	d300      	bcc.n	2b66 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    2b64:	4c06      	ldr	r4, [pc, #24]	; (2b80 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2b66:	2000      	movs	r0, #0
    2b68:	9001      	str	r0, [sp, #4]
    2b6a:	4907      	ldr	r1, [pc, #28]	; (2b88 <sys_clock_set_timeout+0x64>)
    2b6c:	9100      	str	r1, [sp, #0]
    2b6e:	1912      	adds	r2, r2, r4
    2b70:	f143 0300 	adc.w	r3, r3, #0
    2b74:	f003 f9f6 	bl	5f64 <compare_set>
}
    2b78:	b002      	add	sp, #8
    2b7a:	bd10      	pop	{r4, pc}
    2b7c:	007ffffe 	.word	0x007ffffe
    2b80:	007fffff 	.word	0x007fffff
    2b84:	200000d0 	.word	0x200000d0
    2b88:	00002875 	.word	0x00002875

00002b8c <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    2b8c:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2b8e:	f7ff feab 	bl	28e8 <z_nrf_rtc_timer_read>
    2b92:	4b02      	ldr	r3, [pc, #8]	; (2b9c <sys_clock_elapsed+0x10>)
    2b94:	681b      	ldr	r3, [r3, #0]
}
    2b96:	1ac0      	subs	r0, r0, r3
    2b98:	bd08      	pop	{r3, pc}
    2b9a:	bf00      	nop
    2b9c:	200000d0 	.word	0x200000d0

00002ba0 <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2ba0:	4b06      	ldr	r3, [pc, #24]	; (2bbc <nrf52_errata_12+0x1c>)
    2ba2:	681b      	ldr	r3, [r3, #0]
    2ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
    2ba8:	d003      	beq.n	2bb2 <nrf52_errata_12+0x12>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2baa:	2b06      	cmp	r3, #6
    2bac:	d004      	beq.n	2bb8 <nrf52_errata_12+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2bae:	2000      	movs	r0, #0
    2bb0:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2bb2:	4b03      	ldr	r3, [pc, #12]	; (2bc0 <nrf52_errata_12+0x20>)
    2bb4:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2bb6:	e7f8      	b.n	2baa <nrf52_errata_12+0xa>
                        return true;
    2bb8:	2001      	movs	r0, #1
    #endif
}
    2bba:	4770      	bx	lr
    2bbc:	10000130 	.word	0x10000130
    2bc0:	f0000fe0 	.word	0xf0000fe0

00002bc4 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2bc4:	4b09      	ldr	r3, [pc, #36]	; (2bec <nrf52_errata_16+0x28>)
    2bc6:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2bc8:	3308      	adds	r3, #8
    2bca:	681b      	ldr	r3, [r3, #0]
    2bcc:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2bd0:	2a06      	cmp	r2, #6
    2bd2:	d001      	beq.n	2bd8 <nrf52_errata_16+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2bd4:	2000      	movs	r0, #0
    2bd6:	4770      	bx	lr
                switch(var2)
    2bd8:	3b03      	subs	r3, #3
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d804      	bhi.n	2be8 <nrf52_errata_16+0x24>
    2bde:	e8df f003 	tbb	[pc, r3]
    2be2:	01          	.byte	0x01
    2be3:	00          	.byte	0x00
            if (var1 == 0x06)
    2be4:	2001      	movs	r0, #1
    2be6:	4770      	bx	lr
                        return false;
    2be8:	2000      	movs	r0, #0
    #endif
}
    2bea:	4770      	bx	lr
    2bec:	f0000fe0 	.word	0xf0000fe0

00002bf0 <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2bf0:	4b06      	ldr	r3, [pc, #24]	; (2c0c <nrf52_errata_31+0x1c>)
    2bf2:	681b      	ldr	r3, [r3, #0]
    2bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
    2bf8:	d003      	beq.n	2c02 <nrf52_errata_31+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2bfa:	2b06      	cmp	r3, #6
    2bfc:	d004      	beq.n	2c08 <nrf52_errata_31+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2bfe:	2000      	movs	r0, #0
    2c00:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2c02:	4b03      	ldr	r3, [pc, #12]	; (2c10 <nrf52_errata_31+0x20>)
    2c04:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2c06:	e7f8      	b.n	2bfa <nrf52_errata_31+0xa>
                        return true;
    2c08:	2001      	movs	r0, #1
    #endif
}
    2c0a:	4770      	bx	lr
    2c0c:	10000130 	.word	0x10000130
    2c10:	f0000fe0 	.word	0xf0000fe0

00002c14 <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2c14:	4b09      	ldr	r3, [pc, #36]	; (2c3c <nrf52_errata_32+0x28>)
    2c16:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2c18:	3308      	adds	r3, #8
    2c1a:	681b      	ldr	r3, [r3, #0]
    2c1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2c20:	2a06      	cmp	r2, #6
    2c22:	d001      	beq.n	2c28 <nrf52_errata_32+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2c24:	2000      	movs	r0, #0
    2c26:	4770      	bx	lr
                switch(var2)
    2c28:	3b03      	subs	r3, #3
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d804      	bhi.n	2c38 <nrf52_errata_32+0x24>
    2c2e:	e8df f003 	tbb	[pc, r3]
    2c32:	01          	.byte	0x01
    2c33:	00          	.byte	0x00
            if (var1 == 0x06)
    2c34:	2001      	movs	r0, #1
    2c36:	4770      	bx	lr
                        return false;
    2c38:	2000      	movs	r0, #0
    #endif
}
    2c3a:	4770      	bx	lr
    2c3c:	f0000fe0 	.word	0xf0000fe0

00002c40 <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2c40:	4b06      	ldr	r3, [pc, #24]	; (2c5c <nrf52_errata_36+0x1c>)
    2c42:	681b      	ldr	r3, [r3, #0]
    2c44:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c48:	d003      	beq.n	2c52 <nrf52_errata_36+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2c4a:	2b06      	cmp	r3, #6
    2c4c:	d004      	beq.n	2c58 <nrf52_errata_36+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2c4e:	2000      	movs	r0, #0
    2c50:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2c52:	4b03      	ldr	r3, [pc, #12]	; (2c60 <nrf52_errata_36+0x20>)
    2c54:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2c56:	e7f8      	b.n	2c4a <nrf52_errata_36+0xa>
                        return true;
    2c58:	2001      	movs	r0, #1
    #endif
}
    2c5a:	4770      	bx	lr
    2c5c:	10000130 	.word	0x10000130
    2c60:	f0000fe0 	.word	0xf0000fe0

00002c64 <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2c64:	4b09      	ldr	r3, [pc, #36]	; (2c8c <nrf52_errata_37+0x28>)
    2c66:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2c68:	3308      	adds	r3, #8
    2c6a:	681b      	ldr	r3, [r3, #0]
    2c6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2c70:	2a06      	cmp	r2, #6
    2c72:	d001      	beq.n	2c78 <nrf52_errata_37+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2c74:	2000      	movs	r0, #0
    2c76:	4770      	bx	lr
                switch(var2)
    2c78:	3b03      	subs	r3, #3
    2c7a:	2b00      	cmp	r3, #0
    2c7c:	d804      	bhi.n	2c88 <nrf52_errata_37+0x24>
    2c7e:	e8df f003 	tbb	[pc, r3]
    2c82:	01          	.byte	0x01
    2c83:	00          	.byte	0x00
            if (var1 == 0x06)
    2c84:	2001      	movs	r0, #1
    2c86:	4770      	bx	lr
                        return false;
    2c88:	2000      	movs	r0, #0
    #endif
}
    2c8a:	4770      	bx	lr
    2c8c:	f0000fe0 	.word	0xf0000fe0

00002c90 <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2c90:	4b09      	ldr	r3, [pc, #36]	; (2cb8 <nrf52_errata_57+0x28>)
    2c92:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2c94:	3308      	adds	r3, #8
    2c96:	681b      	ldr	r3, [r3, #0]
    2c98:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2c9c:	2a06      	cmp	r2, #6
    2c9e:	d001      	beq.n	2ca4 <nrf52_errata_57+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2ca0:	2000      	movs	r0, #0
    2ca2:	4770      	bx	lr
                switch(var2)
    2ca4:	3b03      	subs	r3, #3
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d804      	bhi.n	2cb4 <nrf52_errata_57+0x24>
    2caa:	e8df f003 	tbb	[pc, r3]
    2cae:	01          	.byte	0x01
    2caf:	00          	.byte	0x00
            if (var1 == 0x06)
    2cb0:	2001      	movs	r0, #1
    2cb2:	4770      	bx	lr
                        return false;
    2cb4:	2000      	movs	r0, #0
    #endif
}
    2cb6:	4770      	bx	lr
    2cb8:	f0000fe0 	.word	0xf0000fe0

00002cbc <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2cbc:	4b0d      	ldr	r3, [pc, #52]	; (2cf4 <nrf52_errata_66+0x38>)
    2cbe:	681a      	ldr	r2, [r3, #0]
    2cc0:	f1b2 3fff 	cmp.w	r2, #4294967295
    2cc4:	d005      	beq.n	2cd2 <nrf52_errata_66+0x16>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    2cc6:	4b0c      	ldr	r3, [pc, #48]	; (2cf8 <nrf52_errata_66+0x3c>)
    2cc8:	681b      	ldr	r3, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2cca:	2a06      	cmp	r2, #6
    2ccc:	d008      	beq.n	2ce0 <nrf52_errata_66+0x24>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2cce:	2000      	movs	r0, #0
    2cd0:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2cd2:	4b0a      	ldr	r3, [pc, #40]	; (2cfc <nrf52_errata_66+0x40>)
    2cd4:	781a      	ldrb	r2, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2cd6:	3308      	adds	r3, #8
    2cd8:	681b      	ldr	r3, [r3, #0]
    2cda:	f3c3 1303 	ubfx	r3, r3, #4, #4
    2cde:	e7f4      	b.n	2cca <nrf52_errata_66+0xe>
                switch(var2)
    2ce0:	3b03      	subs	r3, #3
    2ce2:	2b01      	cmp	r3, #1
    2ce4:	d804      	bhi.n	2cf0 <nrf52_errata_66+0x34>
    2ce6:	e8df f003 	tbb	[pc, r3]
    2cea:	0101      	.short	0x0101
            if (var1 == 0x06)
    2cec:	2000      	movs	r0, #0
    2cee:	4770      	bx	lr
                        return true;
    2cf0:	2001      	movs	r0, #1
    #endif
}
    2cf2:	4770      	bx	lr
    2cf4:	10000130 	.word	0x10000130
    2cf8:	10000134 	.word	0x10000134
    2cfc:	f0000fe0 	.word	0xf0000fe0

00002d00 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2d00:	4b06      	ldr	r3, [pc, #24]	; (2d1c <nrf52_errata_108+0x1c>)
    2d02:	681b      	ldr	r3, [r3, #0]
    2d04:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d08:	d003      	beq.n	2d12 <nrf52_errata_108+0x12>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2d0a:	2b06      	cmp	r3, #6
    2d0c:	d004      	beq.n	2d18 <nrf52_errata_108+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2d0e:	2000      	movs	r0, #0
    2d10:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2d12:	4b03      	ldr	r3, [pc, #12]	; (2d20 <nrf52_errata_108+0x20>)
    2d14:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2d16:	e7f8      	b.n	2d0a <nrf52_errata_108+0xa>
                        return true;
    2d18:	2001      	movs	r0, #1
    #endif
}
    2d1a:	4770      	bx	lr
    2d1c:	10000130 	.word	0x10000130
    2d20:	f0000fe0 	.word	0xf0000fe0

00002d24 <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2d24:	4b06      	ldr	r3, [pc, #24]	; (2d40 <nrf52_errata_136+0x1c>)
    2d26:	681b      	ldr	r3, [r3, #0]
    2d28:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d2c:	d003      	beq.n	2d36 <nrf52_errata_136+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2d2e:	2b06      	cmp	r3, #6
    2d30:	d004      	beq.n	2d3c <nrf52_errata_136+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2d32:	2000      	movs	r0, #0
    2d34:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2d36:	4b03      	ldr	r3, [pc, #12]	; (2d44 <nrf52_errata_136+0x20>)
    2d38:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2d3a:	e7f8      	b.n	2d2e <nrf52_errata_136+0xa>
                        return true;
    2d3c:	2001      	movs	r0, #1
    #endif
}
    2d3e:	4770      	bx	lr
    2d40:	10000130 	.word	0x10000130
    2d44:	f0000fe0 	.word	0xf0000fe0

00002d48 <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2d48:	4b08      	ldr	r3, [pc, #32]	; (2d6c <nrf52_errata_182+0x24>)
    2d4a:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2d4c:	4a08      	ldr	r2, [pc, #32]	; (2d70 <nrf52_errata_182+0x28>)
    2d4e:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2d50:	2b06      	cmp	r3, #6
    2d52:	d001      	beq.n	2d58 <nrf52_errata_182+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2d54:	2000      	movs	r0, #0
    2d56:	4770      	bx	lr
                switch(var2)
    2d58:	2a05      	cmp	r2, #5
    2d5a:	d803      	bhi.n	2d64 <nrf52_errata_182+0x1c>
    2d5c:	2a03      	cmp	r2, #3
    2d5e:	d303      	bcc.n	2d68 <nrf52_errata_182+0x20>
    2d60:	2000      	movs	r0, #0
    2d62:	4770      	bx	lr
                        return true;
    2d64:	2001      	movs	r0, #1
    2d66:	4770      	bx	lr
                        return true;
    2d68:	2001      	movs	r0, #1
    #endif
}
    2d6a:	4770      	bx	lr
    2d6c:	10000130 	.word	0x10000130
    2d70:	10000134 	.word	0x10000134

00002d74 <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2d74:	4b08      	ldr	r3, [pc, #32]	; (2d98 <nrf52_errata_249+0x24>)
    2d76:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2d78:	4a08      	ldr	r2, [pc, #32]	; (2d9c <nrf52_errata_249+0x28>)
    2d7a:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2d7c:	2b06      	cmp	r3, #6
    2d7e:	d001      	beq.n	2d84 <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2d80:	2000      	movs	r0, #0
    2d82:	4770      	bx	lr
                switch(var2)
    2d84:	2a06      	cmp	r2, #6
    2d86:	d803      	bhi.n	2d90 <nrf52_errata_249+0x1c>
    2d88:	2a03      	cmp	r2, #3
    2d8a:	d303      	bcc.n	2d94 <nrf52_errata_249+0x20>
    2d8c:	2000      	movs	r0, #0
    2d8e:	4770      	bx	lr
                        return true;
    2d90:	2001      	movs	r0, #1
    2d92:	4770      	bx	lr
                        return true;
    2d94:	2001      	movs	r0, #1
    #endif
}
    2d96:	4770      	bx	lr
    2d98:	10000130 	.word	0x10000130
    2d9c:	10000134 	.word	0x10000134

00002da0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2da0:	4b02      	ldr	r3, [pc, #8]	; (2dac <nvmc_wait+0xc>)
    2da2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2da6:	2b00      	cmp	r3, #0
    2da8:	d0fa      	beq.n	2da0 <nvmc_wait>
}
    2daa:	4770      	bx	lr
    2dac:	4001e000 	.word	0x4001e000

00002db0 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    2db0:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2db2:	4b03      	ldr	r3, [pc, #12]	; (2dc0 <nvmc_config+0x10>)
    2db4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    2db8:	f7ff fff2 	bl	2da0 <nvmc_wait>
}
    2dbc:	bd08      	pop	{r3, pc}
    2dbe:	bf00      	nop
    2dc0:	4001e000 	.word	0x4001e000

00002dc4 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2dc4:	4b01      	ldr	r3, [pc, #4]	; (2dcc <SystemCoreClockUpdate+0x8>)
    2dc6:	4a02      	ldr	r2, [pc, #8]	; (2dd0 <SystemCoreClockUpdate+0xc>)
    2dc8:	601a      	str	r2, [r3, #0]
}
    2dca:	4770      	bx	lr
    2dcc:	20000094 	.word	0x20000094
    2dd0:	03d09000 	.word	0x03d09000

00002dd4 <SystemInit>:

void SystemInit(void)
{
    2dd4:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    2dd6:	f7ff fee3 	bl	2ba0 <nrf52_errata_12>
    2dda:	b128      	cbz	r0, 2de8 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    2ddc:	4b70      	ldr	r3, [pc, #448]	; (2fa0 <SystemInit+0x1cc>)
    2dde:	681b      	ldr	r3, [r3, #0]
    2de0:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2de4:	4a6f      	ldr	r2, [pc, #444]	; (2fa4 <SystemInit+0x1d0>)
    2de6:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    2de8:	f7ff feec 	bl	2bc4 <nrf52_errata_16>
    2dec:	b110      	cbz	r0, 2df4 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    2dee:	4b6e      	ldr	r3, [pc, #440]	; (2fa8 <SystemInit+0x1d4>)
    2df0:	4a6e      	ldr	r2, [pc, #440]	; (2fac <SystemInit+0x1d8>)
    2df2:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    2df4:	f7ff fefc 	bl	2bf0 <nrf52_errata_31>
    2df8:	b128      	cbz	r0, 2e06 <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2dfa:	4b6d      	ldr	r3, [pc, #436]	; (2fb0 <SystemInit+0x1dc>)
    2dfc:	681b      	ldr	r3, [r3, #0]
    2dfe:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2e02:	4a6c      	ldr	r2, [pc, #432]	; (2fb4 <SystemInit+0x1e0>)
    2e04:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    2e06:	f7ff ff05 	bl	2c14 <nrf52_errata_32>
    2e0a:	b120      	cbz	r0, 2e16 <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    2e0c:	4a6a      	ldr	r2, [pc, #424]	; (2fb8 <SystemInit+0x1e4>)
    2e0e:	68d3      	ldr	r3, [r2, #12]
    2e10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    2e14:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2e16:	f7ff ff13 	bl	2c40 <nrf52_errata_36>
    2e1a:	b140      	cbz	r0, 2e2e <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
    2e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e20:	2200      	movs	r2, #0
    2e22:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2e26:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2e2a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    2e2e:	f7ff ff19 	bl	2c64 <nrf52_errata_37>
    2e32:	b110      	cbz	r0, 2e3a <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    2e34:	4b61      	ldr	r3, [pc, #388]	; (2fbc <SystemInit+0x1e8>)
    2e36:	2203      	movs	r2, #3
    2e38:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    2e3a:	f7ff ff29 	bl	2c90 <nrf52_errata_57>
    2e3e:	b158      	cbz	r0, 2e58 <SystemInit+0x84>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    2e40:	4b5f      	ldr	r3, [pc, #380]	; (2fc0 <SystemInit+0x1ec>)
    2e42:	2205      	movs	r2, #5
    2e44:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    2e46:	3378      	adds	r3, #120	; 0x78
    2e48:	2201      	movs	r2, #1
    2e4a:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    2e4c:	3b70      	subs	r3, #112	; 0x70
    2e4e:	2200      	movs	r2, #0
    2e50:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    2e52:	3b04      	subs	r3, #4
    2e54:	223f      	movs	r2, #63	; 0x3f
    2e56:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2e58:	f7ff ff30 	bl	2cbc <nrf52_errata_66>
    2e5c:	2800      	cmp	r0, #0
    2e5e:	d046      	beq.n	2eee <SystemInit+0x11a>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2e64:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2e68:	4b56      	ldr	r3, [pc, #344]	; (2fc4 <SystemInit+0x1f0>)
    2e6a:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2e6e:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2e72:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2e76:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2e7a:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2e7e:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2e82:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2e86:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2e8a:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2e8e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2e92:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2e96:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2e9a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2e9e:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2ea2:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2ea6:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2eaa:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2eae:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2eb2:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2eb6:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2eba:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2ebe:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2ec2:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2ec6:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2eca:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2ece:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2ed2:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2ed6:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2eda:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2ede:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2ee2:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2ee6:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2eea:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    2eee:	f7ff ff07 	bl	2d00 <nrf52_errata_108>
    2ef2:	b128      	cbz	r0, 2f00 <SystemInit+0x12c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    2ef4:	4b34      	ldr	r3, [pc, #208]	; (2fc8 <SystemInit+0x1f4>)
    2ef6:	681b      	ldr	r3, [r3, #0]
    2ef8:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    2efc:	4a33      	ldr	r2, [pc, #204]	; (2fcc <SystemInit+0x1f8>)
    2efe:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2f00:	f7ff ff10 	bl	2d24 <nrf52_errata_136>
    2f04:	b160      	cbz	r0, 2f20 <SystemInit+0x14c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f0a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2f0e:	f013 0f01 	tst.w	r3, #1
    2f12:	d005      	beq.n	2f20 <SystemInit+0x14c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f18:	f06f 0201 	mvn.w	r2, #1
    2f1c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    2f20:	f7ff ff12 	bl	2d48 <nrf52_errata_182>
    2f24:	b120      	cbz	r0, 2f30 <SystemInit+0x15c>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    2f26:	4a2a      	ldr	r2, [pc, #168]	; (2fd0 <SystemInit+0x1fc>)
    2f28:	6813      	ldr	r3, [r2, #0]
    2f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2f2e:	6013      	str	r3, [r2, #0]
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    2f30:	f7ff ff20 	bl	2d74 <nrf52_errata_249>
    2f34:	b138      	cbz	r0, 2f46 <SystemInit+0x172>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    2f36:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2f3a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f42:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2f46:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2f4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f4e:	2b00      	cmp	r3, #0
    2f50:	db08      	blt.n	2f64 <SystemInit+0x190>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2f52:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2f56:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	db02      	blt.n	2f64 <SystemInit+0x190>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    2f5e:	f7ff ff31 	bl	2dc4 <SystemCoreClockUpdate>
}
    2f62:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    2f64:	2001      	movs	r0, #1
    2f66:	f7ff ff23 	bl	2db0 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2f6a:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    2f6e:	2515      	movs	r5, #21
    2f70:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    2f74:	f7ff ff14 	bl	2da0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2f78:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    2f7c:	f7ff ff10 	bl	2da0 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    2f80:	2000      	movs	r0, #0
    2f82:	f7ff ff15 	bl	2db0 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    2f86:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2f8a:	4912      	ldr	r1, [pc, #72]	; (2fd4 <SystemInit+0x200>)
    2f8c:	68ca      	ldr	r2, [r1, #12]
    2f8e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2f92:	4b11      	ldr	r3, [pc, #68]	; (2fd8 <SystemInit+0x204>)
    2f94:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2f96:	60cb      	str	r3, [r1, #12]
    2f98:	f3bf 8f4f 	dsb	sy
    __NOP();
    2f9c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2f9e:	e7fd      	b.n	2f9c <SystemInit+0x1c8>
    2fa0:	10000324 	.word	0x10000324
    2fa4:	40013540 	.word	0x40013540
    2fa8:	4007c074 	.word	0x4007c074
    2fac:	baadf00d 	.word	0xbaadf00d
    2fb0:	10000244 	.word	0x10000244
    2fb4:	4000053c 	.word	0x4000053c
    2fb8:	e000edf0 	.word	0xe000edf0
    2fbc:	400005a0 	.word	0x400005a0
    2fc0:	40005610 	.word	0x40005610
    2fc4:	4000c000 	.word	0x4000c000
    2fc8:	10000258 	.word	0x10000258
    2fcc:	40000ee4 	.word	0x40000ee4
    2fd0:	4000173c 	.word	0x4000173c
    2fd4:	e000ed00 	.word	0xe000ed00
    2fd8:	05fa0004 	.word	0x05fa0004

00002fdc <nrfx_clock_anomaly_132>:
    uint32_t core_debug;
    uint32_t dwt_ctrl;

    // Preserve DEMCR register to do not influence into its configuration. Enable the trace and
    // debug blocks. It is required to read and write data to DWT block.
    core_debug = CoreDebug->DEMCR;
    2fdc:	4b0b      	ldr	r3, [pc, #44]	; (300c <nrfx_clock_anomaly_132+0x30>)
    2fde:	68d9      	ldr	r1, [r3, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    2fe0:	f041 7280 	orr.w	r2, r1, #16777216	; 0x1000000
    2fe4:	60da      	str	r2, [r3, #12]

    // Preserve CTRL register in DWT block to do not influence into its configuration. Make sure
    // that cycle counter is enabled.
    dwt_ctrl = DWT->CTRL;
    2fe6:	4b0a      	ldr	r3, [pc, #40]	; (3010 <nrfx_clock_anomaly_132+0x34>)
    2fe8:	6818      	ldr	r0, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    2fea:	f040 0201 	orr.w	r2, r0, #1
    2fee:	601a      	str	r2, [r3, #0]

    // Store start value of cycle counter.
    cyccnt_inital = DWT->CYCCNT;
    2ff0:	685a      	ldr	r2, [r3, #4]

    // Delay required time.
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    2ff2:	4b07      	ldr	r3, [pc, #28]	; (3010 <nrfx_clock_anomaly_132+0x34>)
    2ff4:	685b      	ldr	r3, [r3, #4]
    2ff6:	1a9b      	subs	r3, r3, r2
    2ff8:	f5b3 5f0a 	cmp.w	r3, #8832	; 0x2280
    2ffc:	d3f9      	bcc.n	2ff2 <nrfx_clock_anomaly_132+0x16>
    {}

    // Restore preserved registers.
    DWT->CTRL = dwt_ctrl;
    2ffe:	4b04      	ldr	r3, [pc, #16]	; (3010 <nrfx_clock_anomaly_132+0x34>)
    3000:	6018      	str	r0, [r3, #0]
    CoreDebug->DEMCR = core_debug;
    3002:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
    3006:	33f0      	adds	r3, #240	; 0xf0
    3008:	60d9      	str	r1, [r3, #12]
}
    300a:	4770      	bx	lr
    300c:	e000edf0 	.word	0xe000edf0
    3010:	e0001000 	.word	0xe0001000

00003014 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3014:	4b06      	ldr	r3, [pc, #24]	; (3030 <nrfx_clock_init+0x1c>)
    3016:	791b      	ldrb	r3, [r3, #4]
    3018:	b93b      	cbnz	r3, 302a <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    301a:	4b05      	ldr	r3, [pc, #20]	; (3030 <nrfx_clock_init+0x1c>)
    301c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    301e:	2201      	movs	r2, #1
    3020:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    3022:	2200      	movs	r2, #0
    3024:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3026:	4803      	ldr	r0, [pc, #12]	; (3034 <nrfx_clock_init+0x20>)
    3028:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    302a:	4803      	ldr	r0, [pc, #12]	; (3038 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    302c:	4770      	bx	lr
    302e:	bf00      	nop
    3030:	2000034c 	.word	0x2000034c
    3034:	0bad0000 	.word	0x0bad0000
    3038:	0bad000c 	.word	0x0bad000c

0000303c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    303c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    303e:	b110      	cbz	r0, 3046 <nrfx_clock_start+0xa>
    3040:	2801      	cmp	r0, #1
    3042:	d027      	beq.n	3094 <nrfx_clock_start+0x58>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    3044:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3046:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    304a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    304e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3052:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3056:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    305a:	d113      	bne.n	3084 <nrfx_clock_start+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
    305c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3060:	2200      	movs	r2, #0
    3062:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3066:	4b11      	ldr	r3, [pc, #68]	; (30ac <nrfx_clock_start+0x70>)
    3068:	2200      	movs	r2, #0
    306a:	601a      	str	r2, [r3, #0]
    306c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    306e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3072:	2202      	movs	r2, #2
    3074:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            nrfx_clock_anomaly_132();
    3078:	f7ff ffb0 	bl	2fdc <nrfx_clock_anomaly_132>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    307c:	4b0c      	ldr	r3, [pc, #48]	; (30b0 <nrfx_clock_start+0x74>)
    307e:	2201      	movs	r2, #1
    3080:	601a      	str	r2, [r3, #0]
}
    3082:	e7df      	b.n	3044 <nrfx_clock_start+0x8>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3084:	2b01      	cmp	r3, #1
    3086:	d1e9      	bne.n	305c <nrfx_clock_start+0x20>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    308c:	2201      	movs	r2, #1
    308e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    3092:	e7e8      	b.n	3066 <nrfx_clock_start+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3094:	4b07      	ldr	r3, [pc, #28]	; (30b4 <nrfx_clock_start+0x78>)
    3096:	2200      	movs	r2, #0
    3098:	601a      	str	r2, [r3, #0]
    309a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    309c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30a0:	2201      	movs	r2, #1
    30a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30a6:	601a      	str	r2, [r3, #0]
}
    30a8:	e7cc      	b.n	3044 <nrfx_clock_start+0x8>
    30aa:	bf00      	nop
    30ac:	40000104 	.word	0x40000104
    30b0:	40000008 	.word	0x40000008
    30b4:	40000100 	.word	0x40000100

000030b8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    30b8:	b530      	push	{r4, r5, lr}
    30ba:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    30bc:	4604      	mov	r4, r0
    30be:	b118      	cbz	r0, 30c8 <nrfx_clock_stop+0x10>
    30c0:	2801      	cmp	r0, #1
    30c2:	d013      	beq.n	30ec <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    30c4:	b003      	add	sp, #12
    30c6:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    30c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30cc:	2202      	movs	r2, #2
    30ce:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30d2:	f503 7382 	add.w	r3, r3, #260	; 0x104
    30d6:	2200      	movs	r2, #0
    30d8:	601a      	str	r2, [r3, #0]
    30da:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30dc:	4b39      	ldr	r3, [pc, #228]	; (31c4 <nrfx_clock_stop+0x10c>)
    30de:	2201      	movs	r2, #1
    30e0:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    30e2:	2c01      	cmp	r4, #1
    30e4:	d00f      	beq.n	3106 <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    30e6:	f242 7510 	movw	r5, #10000	; 0x2710
    30ea:	e052      	b.n	3192 <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    30ec:	2301      	movs	r3, #1
    30ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    30f2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30f6:	f502 7280 	add.w	r2, r2, #256	; 0x100
    30fa:	2100      	movs	r1, #0
    30fc:	6011      	str	r1, [r2, #0]
    30fe:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3100:	4a31      	ldr	r2, [pc, #196]	; (31c8 <nrfx_clock_stop+0x110>)
    3102:	6013      	str	r3, [r2, #0]
}
    3104:	e7ed      	b.n	30e2 <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3106:	2301      	movs	r3, #1
    3108:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    310c:	f242 7510 	movw	r5, #10000	; 0x2710
    3110:	e018      	b.n	3144 <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3116:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    311a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    311e:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3122:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    3126:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    312a:	d120      	bne.n	316e <nrfx_clock_stop+0xb6>
    return false;
    312c:	2300      	movs	r3, #0
    312e:	2b00      	cmp	r3, #0
    3130:	d042      	beq.n	31b8 <nrfx_clock_stop+0x100>
    3132:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3136:	2b01      	cmp	r3, #1
    3138:	d13e      	bne.n	31b8 <nrfx_clock_stop+0x100>
    313a:	2001      	movs	r0, #1
    313c:	f002 ff32 	bl	5fa4 <nrfx_busy_wait>
    3140:	3d01      	subs	r5, #1
    3142:	d039      	beq.n	31b8 <nrfx_clock_stop+0x100>
    switch (domain)
    3144:	2c00      	cmp	r4, #0
    3146:	d0e4      	beq.n	3112 <nrfx_clock_stop+0x5a>
    3148:	2c01      	cmp	r4, #1
    314a:	d001      	beq.n	3150 <nrfx_clock_stop+0x98>
    314c:	2300      	movs	r3, #0
    314e:	e7ee      	b.n	312e <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3150:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3154:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    3158:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    315c:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3160:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    3164:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3168:	d103      	bne.n	3172 <nrfx_clock_stop+0xba>
    return false;
    316a:	2300      	movs	r3, #0
    316c:	e7df      	b.n	312e <nrfx_clock_stop+0x76>
                return true;
    316e:	2301      	movs	r3, #1
    3170:	e7dd      	b.n	312e <nrfx_clock_stop+0x76>
                return true;
    3172:	2301      	movs	r3, #1
    3174:	e7db      	b.n	312e <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    317a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    317e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3182:	d115      	bne.n	31b0 <nrfx_clock_stop+0xf8>
    return false;
    3184:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3186:	b1bb      	cbz	r3, 31b8 <nrfx_clock_stop+0x100>
    3188:	2001      	movs	r0, #1
    318a:	f002 ff0b 	bl	5fa4 <nrfx_busy_wait>
    318e:	3d01      	subs	r5, #1
    3190:	d012      	beq.n	31b8 <nrfx_clock_stop+0x100>
    switch (domain)
    3192:	2c00      	cmp	r4, #0
    3194:	d0ef      	beq.n	3176 <nrfx_clock_stop+0xbe>
    3196:	2c01      	cmp	r4, #1
    3198:	d001      	beq.n	319e <nrfx_clock_stop+0xe6>
    319a:	2300      	movs	r3, #0
    319c:	e7f3      	b.n	3186 <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    319e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31a2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    31a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    31aa:	d103      	bne.n	31b4 <nrfx_clock_stop+0xfc>
    return false;
    31ac:	2300      	movs	r3, #0
    31ae:	e7ea      	b.n	3186 <nrfx_clock_stop+0xce>
                return true;
    31b0:	2301      	movs	r3, #1
    31b2:	e7e8      	b.n	3186 <nrfx_clock_stop+0xce>
                return true;
    31b4:	2301      	movs	r3, #1
    31b6:	e7e6      	b.n	3186 <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    31b8:	2c01      	cmp	r4, #1
    31ba:	d183      	bne.n	30c4 <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    31bc:	4b03      	ldr	r3, [pc, #12]	; (31cc <nrfx_clock_stop+0x114>)
    31be:	2200      	movs	r2, #0
    31c0:	715a      	strb	r2, [r3, #5]
    31c2:	e77f      	b.n	30c4 <nrfx_clock_stop+0xc>
    31c4:	4000000c 	.word	0x4000000c
    31c8:	40000004 	.word	0x40000004
    31cc:	2000034c 	.word	0x2000034c

000031d0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    31d0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    31d2:	4b1b      	ldr	r3, [pc, #108]	; (3240 <nrfx_power_clock_irq_handler+0x70>)
    31d4:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    31d6:	b183      	cbz	r3, 31fa <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31d8:	4b19      	ldr	r3, [pc, #100]	; (3240 <nrfx_power_clock_irq_handler+0x70>)
    31da:	2200      	movs	r2, #0
    31dc:	601a      	str	r2, [r3, #0]
    31de:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    31e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31e4:	2201      	movs	r2, #1
    31e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    31ea:	4b16      	ldr	r3, [pc, #88]	; (3244 <nrfx_power_clock_irq_handler+0x74>)
    31ec:	795b      	ldrb	r3, [r3, #5]
    31ee:	b923      	cbnz	r3, 31fa <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    31f0:	4b14      	ldr	r3, [pc, #80]	; (3244 <nrfx_power_clock_irq_handler+0x74>)
    31f2:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    31f4:	681b      	ldr	r3, [r3, #0]
    31f6:	2000      	movs	r0, #0
    31f8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    31fa:	4b13      	ldr	r3, [pc, #76]	; (3248 <nrfx_power_clock_irq_handler+0x78>)
    31fc:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    31fe:	b19b      	cbz	r3, 3228 <nrfx_power_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3200:	4b11      	ldr	r3, [pc, #68]	; (3248 <nrfx_power_clock_irq_handler+0x78>)
    3202:	2200      	movs	r2, #0
    3204:	601a      	str	r2, [r3, #0]
    3206:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    320c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3210:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3214:	f012 0f03 	tst.w	r2, #3
    3218:	d107      	bne.n	322a <nrfx_power_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    321a:	2301      	movs	r3, #1
    321c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3220:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3224:	3208      	adds	r2, #8
    3226:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3228:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    322a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    322e:	2202      	movs	r2, #2
    3230:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3234:	4b03      	ldr	r3, [pc, #12]	; (3244 <nrfx_power_clock_irq_handler+0x74>)
    3236:	681b      	ldr	r3, [r3, #0]
    3238:	2001      	movs	r0, #1
    323a:	4798      	blx	r3
}
    323c:	e7f4      	b.n	3228 <nrfx_power_clock_irq_handler+0x58>
    323e:	bf00      	nop
    3240:	40000100 	.word	0x40000100
    3244:	2000034c 	.word	0x2000034c
    3248:	40000104 	.word	0x40000104

0000324c <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    324c:	4b04      	ldr	r3, [pc, #16]	; (3260 <is_allocated_channel+0x14>)
    324e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3250:	2301      	movs	r3, #1
    3252:	4083      	lsls	r3, r0
    3254:	421a      	tst	r2, r3
}
    3256:	bf14      	ite	ne
    3258:	2001      	movne	r0, #1
    325a:	2000      	moveq	r0, #0
    325c:	4770      	bx	lr
    325e:	bf00      	nop
    3260:	20000354 	.word	0x20000354

00003264 <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    3264:	2301      	movs	r3, #1
    3266:	fa03 f000 	lsl.w	r0, r3, r0
    326a:	4a02      	ldr	r2, [pc, #8]	; (3274 <channel_allocated_set+0x10>)
    326c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    326e:	4303      	orrs	r3, r0
    3270:	64d3      	str	r3, [r2, #76]	; 0x4c
}
    3272:	4770      	bx	lr
    3274:	20000354 	.word	0x20000354

00003278 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    3278:	2301      	movs	r3, #1
    327a:	fa03 f000 	lsl.w	r0, r3, r0
    327e:	4a03      	ldr	r2, [pc, #12]	; (328c <channel_allocated_clr+0x14>)
    3280:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    3282:	ea23 0300 	bic.w	r3, r3, r0
    3286:	64d3      	str	r3, [r2, #76]	; 0x4c
}
    3288:	4770      	bx	lr
    328a:	bf00      	nop
    328c:	20000354 	.word	0x20000354

00003290 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    3290:	b538      	push	{r3, r4, r5, lr}
    3292:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    3294:	f002 fe93 	bl	5fbe <is_app_channel>
    3298:	b908      	cbnz	r0, 329e <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    329a:	4809      	ldr	r0, [pc, #36]	; (32c0 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    329c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    329e:	f04f 0320 	mov.w	r3, #32
    32a2:	f3ef 8511 	mrs	r5, BASEPRI
    32a6:	f383 8812 	msr	BASEPRI_MAX, r3
    32aa:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    32ae:	4620      	mov	r0, r4
    32b0:	f7ff ffe2 	bl	3278 <channel_allocated_clr>
	__asm__ volatile(
    32b4:	f385 8811 	msr	BASEPRI, r5
    32b8:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    32bc:	4801      	ldr	r0, [pc, #4]	; (32c4 <nrfx_gpiote_channel_free+0x34>)
}
    32be:	e7ed      	b.n	329c <nrfx_gpiote_channel_free+0xc>
    32c0:	0bad0004 	.word	0x0bad0004
    32c4:	0bad0000 	.word	0x0bad0000

000032c8 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    32c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    32cc:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    32ce:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    32d0:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    32d2:	4f17      	ldr	r7, [pc, #92]	; (3330 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    32d4:	e013      	b.n	32fe <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    32d6:	4620      	mov	r0, r4
    32d8:	f7ff ffc4 	bl	3264 <channel_allocated_set>
            *p_channel = ch_idx;
    32dc:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    32e0:	4f14      	ldr	r7, [pc, #80]	; (3334 <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    32e2:	f386 8811 	msr	BASEPRI, r6
    32e6:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    32ea:	4b12      	ldr	r3, [pc, #72]	; (3334 <nrfx_gpiote_channel_alloc+0x6c>)
    32ec:	429f      	cmp	r7, r3
    32ee:	d01b      	beq.n	3328 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    32f0:	2301      	movs	r3, #1
    32f2:	fa03 f309 	lsl.w	r3, r3, r9
    32f6:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    32fa:	3401      	adds	r4, #1
    32fc:	b2e4      	uxtb	r4, r4
    32fe:	b19d      	cbz	r5, 3328 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    3300:	f04f 0320 	mov.w	r3, #32
    3304:	f3ef 8611 	mrs	r6, BASEPRI
    3308:	f383 8812 	msr	BASEPRI_MAX, r3
    330c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    3310:	46a1      	mov	r9, r4
    3312:	fa25 f304 	lsr.w	r3, r5, r4
    3316:	f013 0f01 	tst.w	r3, #1
    331a:	d0e2      	beq.n	32e2 <nrfx_gpiote_channel_alloc+0x1a>
    331c:	4620      	mov	r0, r4
    331e:	f7ff ff95 	bl	324c <is_allocated_channel>
    3322:	2800      	cmp	r0, #0
    3324:	d1dd      	bne.n	32e2 <nrfx_gpiote_channel_alloc+0x1a>
    3326:	e7d6      	b.n	32d6 <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3328:	4638      	mov	r0, r7
    332a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    332e:	bf00      	nop
    3330:	0bad0002 	.word	0x0bad0002
    3334:	0bad0000 	.word	0x0bad0000

00003338 <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    3338:	2301      	movs	r3, #1
    333a:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    333c:	4a03      	ldr	r2, [pc, #12]	; (334c <is_allocated_channel+0x14>)
    333e:	6812      	ldr	r2, [r2, #0]
    3340:	4213      	tst	r3, r2
}
    3342:	bf14      	ite	ne
    3344:	2001      	movne	r0, #1
    3346:	2000      	moveq	r0, #0
    3348:	4770      	bx	lr
    334a:	bf00      	nop
    334c:	200003a4 	.word	0x200003a4

00003350 <channel_allocated_set>:
    3350:	2301      	movs	r3, #1
    3352:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    3356:	4a02      	ldr	r2, [pc, #8]	; (3360 <channel_allocated_set+0x10>)
    3358:	6813      	ldr	r3, [r2, #0]
    335a:	4303      	orrs	r3, r0
    335c:	6013      	str	r3, [r2, #0]
}
    335e:	4770      	bx	lr
    3360:	200003a4 	.word	0x200003a4

00003364 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3368:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    336a:	2400      	movs	r4, #0
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    336c:	4e15      	ldr	r6, [pc, #84]	; (33c4 <nrfx_ppi_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    336e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 33cc <nrfx_ppi_channel_alloc+0x68>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    3372:	e011      	b.n	3398 <nrfx_ppi_channel_alloc+0x34>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
    3374:	4620      	mov	r0, r4
    3376:	f7ff ffeb 	bl	3350 <channel_allocated_set>
            *p_channel = channel;
    337a:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
    337e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 33c8 <nrfx_ppi_channel_alloc+0x64>
	__asm__ volatile(
    3382:	f387 8811 	msr	BASEPRI, r7
    3386:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    338a:	4b0f      	ldr	r3, [pc, #60]	; (33c8 <nrfx_ppi_channel_alloc+0x64>)
    338c:	4598      	cmp	r8, r3
    338e:	d016      	beq.n	33be <nrfx_ppi_channel_alloc+0x5a>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    3390:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    3394:	3401      	adds	r4, #1
    3396:	b2e4      	uxtb	r4, r4
    3398:	b18e      	cbz	r6, 33be <nrfx_ppi_channel_alloc+0x5a>
	__asm__ volatile(
    339a:	f04f 0320 	mov.w	r3, #32
    339e:	f3ef 8711 	mrs	r7, BASEPRI
    33a2:	f383 8812 	msr	BASEPRI_MAX, r3
    33a6:	f3bf 8f6f 	isb	sy
    33aa:	2501      	movs	r5, #1
    33ac:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    33ae:	4235      	tst	r5, r6
    33b0:	d0e7      	beq.n	3382 <nrfx_ppi_channel_alloc+0x1e>
    33b2:	4620      	mov	r0, r4
    33b4:	f7ff ffc0 	bl	3338 <is_allocated_channel>
    33b8:	2800      	cmp	r0, #0
    33ba:	d1e2      	bne.n	3382 <nrfx_ppi_channel_alloc+0x1e>
    33bc:	e7da      	b.n	3374 <nrfx_ppi_channel_alloc+0x10>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    33be:	4640      	mov	r0, r8
    33c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    33c4:	000fffff 	.word	0x000fffff
    33c8:	0bad0000 	.word	0x0bad0000
    33cc:	0bad0002 	.word	0x0bad0002

000033d0 <twi_process_error>:
} twim_control_block_t;

static twim_control_block_t m_cb[NRFX_TWIM_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
    33d0:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    33d2:	f010 0f01 	tst.w	r0, #1
    33d6:	d108      	bne.n	33ea <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
    33d8:	4806      	ldr	r0, [pc, #24]	; (33f4 <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    33da:	f013 0f02 	tst.w	r3, #2
    33de:	d000      	beq.n	33e2 <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    33e0:	4805      	ldr	r0, [pc, #20]	; (33f8 <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    33e2:	f013 0f04 	tst.w	r3, #4
    33e6:	d102      	bne.n	33ee <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
    33e8:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    33ea:	4804      	ldr	r0, [pc, #16]	; (33fc <twi_process_error+0x2c>)
    33ec:	e7f5      	b.n	33da <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    33ee:	4804      	ldr	r0, [pc, #16]	; (3400 <twi_process_error+0x30>)
    return ret;
    33f0:	e7fa      	b.n	33e8 <twi_process_error+0x18>
    33f2:	bf00      	nop
    33f4:	0bad0001 	.word	0x0bad0001
    33f8:	0bae0001 	.word	0x0bae0001
    33fc:	0bae0000 	.word	0x0bae0000
    3400:	0bae0002 	.word	0x0bae0002

00003404 <twim_xfer>:
}
static nrfx_err_t twim_xfer(twim_control_block_t        * p_cb,
                            NRF_TWIM_Type               * p_twim,
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    3404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3408:	4605      	mov	r5, r0
    340a:	460c      	mov	r4, r1
    340c:	4616      	mov	r6, r2
    340e:	461f      	mov	r7, r3
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
    3410:	2300      	movs	r3, #0
    3412:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e

    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    3416:	6853      	ldr	r3, [r2, #4]
    3418:	b133      	cbz	r3, 3428 <twim_xfer+0x24>
    341a:	68d3      	ldr	r3, [r2, #12]
    341c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    3420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3424:	f040 8131 	bne.w	368a <twim_xfer+0x286>
}

NRF_STATIC_INLINE void nrf_twim_int_disable(NRF_TWIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3428:	4b9c      	ldr	r3, [pc, #624]	; (369c <twim_xfer+0x298>)
    342a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    if (p_cb->busy)
    342e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    3432:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    3436:	2b00      	cmp	r3, #0
    3438:	d136      	bne.n	34a8 <twim_xfer+0xa4>
        return err_code;
    }
    else
    {
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    343a:	f017 0f14 	tst.w	r7, #20
    343e:	bf0c      	ite	eq
    3440:	2301      	moveq	r3, #1
    3442:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    3444:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    p_cb->xfer_desc = *p_xfer_desc;
    3448:	f105 0c0c 	add.w	ip, r5, #12
    344c:	46b6      	mov	lr, r6
    344e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3452:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3456:	f8de 3000 	ldr.w	r3, [lr]
    345a:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    345e:	f3c7 1300 	ubfx	r3, r7, #4, #1
    3462:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags = flags;
    3466:	622f      	str	r7, [r5, #32]
    nrf_twim_address_set(p_twim, p_xfer_desc->address);
    3468:	7873      	ldrb	r3, [r6, #1]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    346a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    346e:	2300      	movs	r3, #0
    3470:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3474:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    3478:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    347c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    3480:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    3484:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    3488:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    348c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_SUSPENDED);

    twim_list_enable_handle(p_twim, flags);
    3490:	4639      	mov	r1, r7
    3492:	4620      	mov	r0, r4
    3494:	f002 fdf8 	bl	6088 <twim_list_enable_handle>
    switch (p_xfer_desc->type)
    3498:	7833      	ldrb	r3, [r6, #0]
    349a:	2b03      	cmp	r3, #3
    349c:	f200 80a8 	bhi.w	35f0 <twim_xfer+0x1ec>
    34a0:	e8df f003 	tbb	[pc, r3]
    34a4:	08379455 	.word	0x08379455
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    34a8:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    34aa:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    34ae:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 36a0 <twim_xfer+0x29c>
    34b2:	e081      	b.n	35b8 <twim_xfer+0x1b4>
    {
    case NRFX_TWIM_XFER_TXTX:
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    34b4:	6933      	ldr	r3, [r6, #16]
    34b6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    34ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    34be:	f040 80e7 	bne.w	3690 <twim_xfer+0x28c>
}

NRF_STATIC_INLINE void nrf_twim_shorts_set(NRF_TWIM_Type * p_reg,
                                           uint32_t mask)
{
    p_reg->SHORTS = mask;
    34c2:	f44f 7380 	mov.w	r3, #256	; 0x100
    34c6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    34ca:	68f2      	ldr	r2, [r6, #12]
    34cc:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    34ce:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    34d2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34d6:	2300      	movs	r3, #0
    34d8:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    34dc:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34e0:	2301      	movs	r3, #1
    34e2:	6223      	str	r3, [r4, #32]
    34e4:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    34e6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STARTTX);
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    34ea:	2b00      	cmp	r3, #0
    34ec:	d0fb      	beq.n	34e6 <twim_xfer+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34ee:	2300      	movs	r3, #0
    34f0:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    34f4:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        {}
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_TXSTARTED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    34f8:	6932      	ldr	r2, [r6, #16]
    34fa:	68b3      	ldr	r3, [r6, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    34fc:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3500:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    3504:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    3508:	60ab      	str	r3, [r5, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    350a:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    350c:	f8df 9194 	ldr.w	r9, [pc, #404]	; 36a4 <twim_xfer+0x2a0>
        break;
    3510:	e032      	b.n	3578 <twim_xfer+0x174>
    case NRFX_TWIM_XFER_TXRX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3512:	68f2      	ldr	r2, [r6, #12]
    3514:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3516:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    351a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    351e:	6933      	ldr	r3, [r6, #16]
    3520:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    3524:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    3528:	f040 80b5 	bne.w	3696 <twim_xfer+0x292>
            NRFX_LOG_WARNING("Function: %s, error code: %s.",
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    352c:	68b2      	ldr	r2, [r6, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    352e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3532:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    3536:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    353a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_STARTRX_MASK |
                                    NRF_TWIM_SHORT_LASTRX_STOP_MASK);
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    353e:	2302      	movs	r3, #2
    3540:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3542:	2301      	movs	r3, #1
    3544:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    3546:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    3548:	f8df 9158 	ldr.w	r9, [pc, #344]	; 36a4 <twim_xfer+0x2a0>
}
    354c:	e014      	b.n	3578 <twim_xfer+0x174>
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        break;
    case NRFX_TWIM_XFER_TX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    354e:	68f2      	ldr	r2, [r6, #12]
    3550:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3552:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3556:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    355a:	f017 0f20 	tst.w	r7, #32
    355e:	d02e      	beq.n	35be <twim_xfer+0x1ba>
    p_reg->SHORTS = mask;
    3560:	f44f 7380 	mov.w	r3, #256	; 0x100
    3564:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        {
            nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    3568:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    356c:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    356e:	2301      	movs	r3, #1
    3570:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    3572:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    3574:	f8df 912c 	ldr.w	r9, [pc, #300]	; 36a4 <twim_xfer+0x2a0>
    default:
        err_code = NRFX_ERROR_INVALID_PARAM;
        break;
    }

    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    3578:	f017 0f08 	tst.w	r7, #8
    357c:	d107      	bne.n	358e <twim_xfer+0x18a>
    357e:	7832      	ldrb	r2, [r6, #0]
    3580:	2a03      	cmp	r2, #3
    3582:	d004      	beq.n	358e <twim_xfer+0x18a>
    3584:	2201      	movs	r2, #1
    3586:	50e2      	str	r2, [r4, r3]
    {
        nrf_twim_task_trigger(p_twim, start_task);
        if (p_xfer_desc->primary_length == 0)
    3588:	6873      	ldr	r3, [r6, #4]
    358a:	b903      	cbnz	r3, 358e <twim_xfer+0x18a>
    358c:	6162      	str	r2, [r4, #20]
        {
            nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
        }
    }

    if (p_cb->handler)
    358e:	682b      	ldr	r3, [r5, #0]
    3590:	b393      	cbz	r3, 35f8 <twim_xfer+0x1f4>
    {
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    3592:	f017 0f04 	tst.w	r7, #4
    3596:	d001      	beq.n	359c <twim_xfer+0x198>
        {
            p_cb->int_mask = 0;
    3598:	2300      	movs	r3, #0
    359a:	60ab      	str	r3, [r5, #8]
        }

        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    359c:	f017 0f40 	tst.w	r7, #64	; 0x40
    35a0:	d103      	bne.n	35aa <twim_xfer+0x1a6>
        {
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    35a2:	68ab      	ldr	r3, [r5, #8]
    35a4:	f043 0302 	orr.w	r3, r3, #2
    35a8:	60ab      	str	r3, [r5, #8]
        }

        // Interrupts for ERROR are implicitly enabled, regardless of driver configuration.
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    35aa:	68ab      	ldr	r3, [r5, #8]
    35ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    35b0:	60ab      	str	r3, [r5, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    35b2:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    35b4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
                err_code = NRFX_ERROR_INTERNAL;
            }
        }
    }
    return err_code;
}
    35b8:	4648      	mov	r0, r9
    35ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_reg->SHORTS = mask;
    35be:	f44f 7300 	mov.w	r3, #512	; 0x200
    35c2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    35c6:	2302      	movs	r3, #2
    35c8:	60ab      	str	r3, [r5, #8]
    35ca:	e7d0      	b.n	356e <twim_xfer+0x16a>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    35cc:	68f2      	ldr	r2, [r6, #12]
    35ce:	6873      	ldr	r3, [r6, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    35d0:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    35d4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    35d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    35dc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    35e0:	2302      	movs	r3, #2
    35e2:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35e4:	2301      	movs	r3, #1
    35e6:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    35e8:	2300      	movs	r3, #0
    nrfx_err_t err_code = NRFX_SUCCESS;
    35ea:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 36a4 <twim_xfer+0x2a0>
}
    35ee:	e7c3      	b.n	3578 <twim_xfer+0x174>
    switch (p_xfer_desc->type)
    35f0:	2308      	movs	r3, #8
    35f2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 36a8 <twim_xfer+0x2a4>
    35f6:	e7bf      	b.n	3578 <twim_xfer+0x174>
        bool transmission_finished = false;
    35f8:	4643      	mov	r3, r8
    35fa:	e000      	b.n	35fe <twim_xfer+0x1fa>
        } while (!transmission_finished);
    35fc:	bb6b      	cbnz	r3, 365a <twim_xfer+0x256>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35fe:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    3602:	b102      	cbz	r2, 3606 <twim_xfer+0x202>
                transmission_finished = true;
    3604:	2301      	movs	r3, #1
    3606:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    360a:	b12a      	cbz	r2, 3618 <twim_xfer+0x214>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    360c:	2300      	movs	r3, #0
    360e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3612:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    3616:	2301      	movs	r3, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3618:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    361c:	2a00      	cmp	r2, #0
    361e:	d0ed      	beq.n	35fc <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3620:	2200      	movs	r2, #0
    3622:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    3626:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    362a:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    362e:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    3632:	b112      	cbz	r2, 363a <twim_xfer+0x236>
    3634:	f411 7f00 	tst.w	r1, #512	; 0x200
    3638:	d103      	bne.n	3642 <twim_xfer+0x23e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    363a:	2301      	movs	r3, #1
    363c:	6223      	str	r3, [r4, #32]
    363e:	6163      	str	r3, [r4, #20]
                    transmission_finished = false;
    3640:	4643      	mov	r3, r8
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    3642:	2a00      	cmp	r2, #0
    3644:	d0da      	beq.n	35fc <twim_xfer+0x1f8>
    3646:	f411 7f80 	tst.w	r1, #256	; 0x100
    364a:	d0d7      	beq.n	35fc <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    364c:	2300      	movs	r3, #0
    364e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    3652:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    3656:	4643      	mov	r3, r8
    3658:	e7d1      	b.n	35fe <twim_xfer+0x1fa>
    uint32_t error_source = p_reg->ERRORSRC;
    365a:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    365e:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        p_cb->busy = false;
    3662:	2300      	movs	r3, #0
    3664:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
        if (errorsrc)
    3668:	b118      	cbz	r0, 3672 <twim_xfer+0x26e>
            err_code = twi_process_error(errorsrc);
    366a:	f7ff feb1 	bl	33d0 <twi_process_error>
    366e:	4681      	mov	r9, r0
    3670:	e7a2      	b.n	35b8 <twim_xfer+0x1b4>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    3672:	f017 0f40 	tst.w	r7, #64	; 0x40
    3676:	d19f      	bne.n	35b8 <twim_xfer+0x1b4>
                !xfer_completeness_check(p_twim, p_cb))
    3678:	4629      	mov	r1, r5
    367a:	4620      	mov	r0, r4
    367c:	f002 fca7 	bl	5fce <xfer_completeness_check>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    3680:	2800      	cmp	r0, #0
    3682:	d199      	bne.n	35b8 <twim_xfer+0x1b4>
                err_code = NRFX_ERROR_INTERNAL;
    3684:	f8df 9024 	ldr.w	r9, [pc, #36]	; 36ac <twim_xfer+0x2a8>
    3688:	e796      	b.n	35b8 <twim_xfer+0x1b4>
        return err_code;
    368a:	f8df 9024 	ldr.w	r9, [pc, #36]	; 36b0 <twim_xfer+0x2ac>
    368e:	e793      	b.n	35b8 <twim_xfer+0x1b4>
            return err_code;
    3690:	f8df 901c 	ldr.w	r9, [pc, #28]	; 36b0 <twim_xfer+0x2ac>
    3694:	e790      	b.n	35b8 <twim_xfer+0x1b4>
            return err_code;
    3696:	f8df 9018 	ldr.w	r9, [pc, #24]	; 36b0 <twim_xfer+0x2ac>
    369a:	e78d      	b.n	35b8 <twim_xfer+0x1b4>
    369c:	019c0202 	.word	0x019c0202
    36a0:	0bad000b 	.word	0x0bad000b
    36a4:	0bad0000 	.word	0x0bad0000
    36a8:	0bad0004 	.word	0x0bad0004
    36ac:	0bad0001 	.word	0x0bad0001
    36b0:	0bad000a 	.word	0x0bad000a

000036b4 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    36b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    36b6:	b087      	sub	sp, #28
    36b8:	4604      	mov	r4, r0
    36ba:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    36bc:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    36c0:	b143      	cbz	r3, 36d4 <twim_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36c2:	2300      	movs	r3, #0
    36c4:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    36c8:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    36cc:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    36d0:	2b00      	cmp	r3, #0
    36d2:	d05c      	beq.n	378e <twim_irq_handler+0xda>
    36d4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        }
    }

    nrfx_twim_evt_t event;

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    36d8:	2b00      	cmp	r3, #0
    36da:	d078      	beq.n	37ce <twim_irq_handler+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36dc:	2300      	movs	r3, #0
    36de:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    36e2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    {
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_STOPPED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);

        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    36e6:	6a2b      	ldr	r3, [r5, #32]
    36e8:	f013 0f40 	tst.w	r3, #64	; 0x40
    36ec:	d103      	bne.n	36f6 <twim_irq_handler+0x42>
    36ee:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    36f2:	2b00      	cmp	r3, #0
    36f4:	d062      	beq.n	37bc <twim_irq_handler+0x108>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
        }

        // Further processing of STOPPED event is valid only if NO_XFER_EVT_HANDLER
        // setting is not used.
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    36f6:	6a2b      	ldr	r3, [r5, #32]
    36f8:	f013 0f04 	tst.w	r3, #4
    36fc:	d12b      	bne.n	3756 <twim_irq_handler+0xa2>
        {
            event.xfer_desc = p_cb->xfer_desc;
    36fe:	ae01      	add	r6, sp, #4
    3700:	f105 070c 	add.w	r7, r5, #12
    3704:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3706:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    3708:	683b      	ldr	r3, [r7, #0]
    370a:	6033      	str	r3, [r6, #0]
    370c:	2300      	movs	r3, #0
    370e:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    3712:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    3716:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
    371a:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTRX);
            if (!p_cb->repeated || p_cb->error)
    371e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    3722:	b113      	cbz	r3, 372a <twim_irq_handler+0x76>
    3724:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    3728:	b1ab      	cbz	r3, 3756 <twim_irq_handler+0xa2>
    p_reg->SHORTS = mask;
    372a:	2300      	movs	r3, #0
    372c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            {
                nrf_twim_shorts_set(p_twim, 0);
                p_cb->int_mask = 0;
    3730:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    3732:	4b50      	ldr	r3, [pc, #320]	; (3874 <twim_irq_handler+0x1c0>)
    3734:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    3738:	0b22      	lsrs	r2, r4, #12
    373a:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    373e:	2b00      	cmp	r3, #0
    3740:	db09      	blt.n	3756 <twim_irq_handler+0xa2>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3742:	f002 021f 	and.w	r2, r2, #31
    3746:	095b      	lsrs	r3, r3, #5
    3748:	2101      	movs	r1, #1
    374a:	fa01 f202 	lsl.w	r2, r1, r2
    374e:	3360      	adds	r3, #96	; 0x60
    3750:	4949      	ldr	r1, [pc, #292]	; (3878 <twim_irq_handler+0x1c4>)
    3752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t error_source = p_reg->ERRORSRC;
    3756:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    375a:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            return;
        }
    }

    uint32_t errorsrc = nrf_twim_errorsrc_get_and_clear(p_twim);
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    375e:	f013 0f02 	tst.w	r3, #2
    3762:	d06e      	beq.n	3842 <twim_irq_handler+0x18e>
    {
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    3764:	2301      	movs	r3, #1
    3766:	f88d 3000 	strb.w	r3, [sp]
    {
        event.type = NRFX_TWIM_EVT_DONE;
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    }

    if (!p_cb->repeated)
    376a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    376e:	b90b      	cbnz	r3, 3774 <twim_irq_handler+0xc0>
    {
        p_cb->busy = false;
    3770:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    3774:	6a2b      	ldr	r3, [r5, #32]
    3776:	f013 0f04 	tst.w	r3, #4
    377a:	d002      	beq.n	3782 <twim_irq_handler+0xce>
    377c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    3780:	b11b      	cbz	r3, 378a <twim_irq_handler+0xd6>
    {
        p_cb->handler(&event, p_cb->p_context);
    3782:	682b      	ldr	r3, [r5, #0]
    3784:	6869      	ldr	r1, [r5, #4]
    3786:	4668      	mov	r0, sp
    3788:	4798      	blx	r3
    }
}
    378a:	b007      	add	sp, #28
    378c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    378e:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
    3790:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3794:	2302      	movs	r3, #2
    3796:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    3798:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
    379a:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    379e:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    37a2:	b123      	cbz	r3, 37ae <twim_irq_handler+0xfa>
    return p_reg->SHORTS;
    37a4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    37a8:	f413 7f00 	tst.w	r3, #512	; 0x200
    37ac:	d102      	bne.n	37b4 <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37ae:	2301      	movs	r3, #1
    37b0:	6223      	str	r3, [r4, #32]
    37b2:	6163      	str	r3, [r4, #20]
            p_cb->error = true;
    37b4:	2301      	movs	r3, #1
    37b6:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
            return;
    37ba:	e7e6      	b.n	378a <twim_irq_handler+0xd6>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    37bc:	4629      	mov	r1, r5
    37be:	4620      	mov	r0, r4
    37c0:	f002 fc05 	bl	5fce <xfer_completeness_check>
    37c4:	f080 0001 	eor.w	r0, r0, #1
    37c8:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    37cc:	e793      	b.n	36f6 <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37ce:	2300      	movs	r3, #0
    37d0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    37d4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    37d8:	7b2b      	ldrb	r3, [r5, #12]
    37da:	bb03      	cbnz	r3, 381e <twim_irq_handler+0x16a>
            event.xfer_desc = p_cb->xfer_desc;
    37dc:	ae01      	add	r6, sp, #4
    37de:	f105 070c 	add.w	r7, r5, #12
    37e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    37e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    37e6:	683b      	ldr	r3, [r7, #0]
    37e8:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    37ea:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    37ee:	2b00      	cmp	r3, #0
    37f0:	d1b1      	bne.n	3756 <twim_irq_handler+0xa2>
    p_reg->SHORTS = mask;
    37f2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    37f6:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    37f8:	4b1e      	ldr	r3, [pc, #120]	; (3874 <twim_irq_handler+0x1c0>)
    37fa:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    37fe:	0b22      	lsrs	r2, r4, #12
    3800:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    3804:	2b00      	cmp	r3, #0
    3806:	dba6      	blt.n	3756 <twim_irq_handler+0xa2>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3808:	f002 021f 	and.w	r2, r2, #31
    380c:	095b      	lsrs	r3, r3, #5
    380e:	2101      	movs	r1, #1
    3810:	fa01 f202 	lsl.w	r2, r1, r2
    3814:	3360      	adds	r3, #96	; 0x60
    3816:	4918      	ldr	r1, [pc, #96]	; (3878 <twim_irq_handler+0x1c4>)
    3818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    381c:	e79b      	b.n	3756 <twim_irq_handler+0xa2>
    p_reg->SHORTS = mask;
    381e:	f44f 7300 	mov.w	r3, #512	; 0x200
    3822:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    3826:	f240 2302 	movw	r3, #514	; 0x202
    382a:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    382c:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    3830:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    3834:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    3836:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    383a:	2301      	movs	r3, #1
    383c:	60a3      	str	r3, [r4, #8]
    383e:	6223      	str	r3, [r4, #32]
            return;
    3840:	e7a3      	b.n	378a <twim_irq_handler+0xd6>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    3842:	f013 0f04 	tst.w	r3, #4
    3846:	d003      	beq.n	3850 <twim_irq_handler+0x19c>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    3848:	2302      	movs	r3, #2
    384a:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DATA_NACK));
    384e:	e78c      	b.n	376a <twim_irq_handler+0xb6>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    3850:	f013 0f01 	tst.w	r3, #1
    3854:	d003      	beq.n	385e <twim_irq_handler+0x1aa>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    3856:	2303      	movs	r3, #3
    3858:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_OVERRUN));
    385c:	e785      	b.n	376a <twim_irq_handler+0xb6>
    else if (p_cb->error)
    385e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    3862:	b11b      	cbz	r3, 386c <twim_irq_handler+0x1b8>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    3864:	2304      	movs	r3, #4
    3866:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_BUS_ERROR));
    386a:	e77e      	b.n	376a <twim_irq_handler+0xb6>
        event.type = NRFX_TWIM_EVT_DONE;
    386c:	2300      	movs	r3, #0
    386e:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    3872:	e77a      	b.n	376a <twim_irq_handler+0xb6>
    3874:	019c0202 	.word	0x019c0202
    3878:	e000e100 	.word	0xe000e100

0000387c <nrfx_twim_init>:
{
    387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    387e:	4604      	mov	r4, r0
    3880:	460d      	mov	r5, r1
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3882:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3884:	481b      	ldr	r0, [pc, #108]	; (38f4 <nrfx_twim_init+0x78>)
    3886:	2134      	movs	r1, #52	; 0x34
    3888:	fb01 0106 	mla	r1, r1, r6, r0
    388c:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    3890:	b109      	cbz	r1, 3896 <nrfx_twim_init+0x1a>
        return err_code;
    3892:	4819      	ldr	r0, [pc, #100]	; (38f8 <nrfx_twim_init+0x7c>)
}
    3894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p_cb->handler         = event_handler;
    3896:	4607      	mov	r7, r0
    3898:	2034      	movs	r0, #52	; 0x34
    389a:	fb00 f006 	mul.w	r0, r0, r6
    389e:	1839      	adds	r1, r7, r0
    38a0:	503a      	str	r2, [r7, r0]
    p_cb->p_context       = p_context;
    38a2:	604b      	str	r3, [r1, #4]
    p_cb->int_mask        = 0;
    38a4:	2300      	movs	r3, #0
    38a6:	608b      	str	r3, [r1, #8]
    p_cb->repeated        = false;
    38a8:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->busy            = false;
    38ac:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    38b0:	7b6b      	ldrb	r3, [r5, #13]
    38b2:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    38b6:	6827      	ldr	r7, [r4, #0]
    if (!twim_pins_configure(p_twim, p_config))
    38b8:	4629      	mov	r1, r5
    38ba:	4638      	mov	r0, r7
    38bc:	f002 fbc8 	bl	6050 <twim_pins_configure>
    38c0:	b1b0      	cbz	r0, 38f0 <nrfx_twim_init+0x74>
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    38c2:	68ab      	ldr	r3, [r5, #8]
    p_reg->FREQUENCY = frequency;
    38c4:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    if (p_cb->handler)
    38c8:	2334      	movs	r3, #52	; 0x34
    38ca:	fb03 f306 	mul.w	r3, r3, r6
    38ce:	4a09      	ldr	r2, [pc, #36]	; (38f4 <nrfx_twim_init+0x78>)
    38d0:	58d3      	ldr	r3, [r2, r3]
    38d2:	b123      	cbz	r3, 38de <nrfx_twim_init+0x62>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    38d4:	6820      	ldr	r0, [r4, #0]
    38d6:	f340 3007 	sbfx	r0, r0, #12, #8
    38da:	f7fd fddf 	bl	149c <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    38de:	4b05      	ldr	r3, [pc, #20]	; (38f4 <nrfx_twim_init+0x78>)
    38e0:	2234      	movs	r2, #52	; 0x34
    38e2:	fb02 3606 	mla	r6, r2, r6, r3
    38e6:	2301      	movs	r3, #1
    38e8:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    return err_code;
    38ec:	4803      	ldr	r0, [pc, #12]	; (38fc <nrfx_twim_init+0x80>)
    38ee:	e7d1      	b.n	3894 <nrfx_twim_init+0x18>
        return NRFX_ERROR_INVALID_PARAM;
    38f0:	4803      	ldr	r0, [pc, #12]	; (3900 <nrfx_twim_init+0x84>)
    38f2:	e7cf      	b.n	3894 <nrfx_twim_init+0x18>
    38f4:	200003a8 	.word	0x200003a8
    38f8:	0bad0005 	.word	0x0bad0005
    38fc:	0bad0000 	.word	0x0bad0000
    3900:	0bad0004 	.word	0x0bad0004

00003904 <nrfx_twim_enable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3904:	7903      	ldrb	r3, [r0, #4]
    nrf_twim_enable(p_instance->p_twim);
    3906:	6802      	ldr	r2, [r0, #0]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    3908:	2106      	movs	r1, #6
    390a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    390e:	4a04      	ldr	r2, [pc, #16]	; (3920 <nrfx_twim_enable+0x1c>)
    3910:	2134      	movs	r1, #52	; 0x34
    3912:	fb01 2303 	mla	r3, r1, r3, r2
    3916:	2202      	movs	r2, #2
    3918:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
    391c:	4770      	bx	lr
    391e:	bf00      	nop
    3920:	200003a8 	.word	0x200003a8

00003924 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3924:	7903      	ldrb	r3, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    3926:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    3928:	490b      	ldr	r1, [pc, #44]	; (3958 <nrfx_twim_disable+0x34>)
    392a:	2034      	movs	r0, #52	; 0x34
    392c:	fb00 1303 	mla	r3, r0, r3, r1
    3930:	2100      	movs	r1, #0
    3932:	6099      	str	r1, [r3, #8]
    p_reg->INTENCLR = mask;
    3934:	4809      	ldr	r0, [pc, #36]	; (395c <nrfx_twim_disable+0x38>)
    3936:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    393a:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    393e:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    3942:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    3946:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    394a:	2201      	movs	r2, #1
    394c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    3950:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
    3954:	4770      	bx	lr
    3956:	bf00      	nop
    3958:	200003a8 	.word	0x200003a8
    395c:	019c0202 	.word	0x019c0202

00003960 <nrfx_twim_xfer>:
{
    3960:	b538      	push	{r3, r4, r5, lr}
    3962:	4613      	mov	r3, r2
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3964:	7905      	ldrb	r5, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    3966:	460a      	mov	r2, r1
    3968:	6801      	ldr	r1, [r0, #0]
    396a:	4c03      	ldr	r4, [pc, #12]	; (3978 <nrfx_twim_xfer+0x18>)
    396c:	2034      	movs	r0, #52	; 0x34
    396e:	fb00 4005 	mla	r0, r0, r5, r4
    3972:	f7ff fd47 	bl	3404 <twim_xfer>
}
    3976:	bd38      	pop	{r3, r4, r5, pc}
    3978:	200003a8 	.word	0x200003a8

0000397c <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    397c:	b508      	push	{r3, lr}
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
    397e:	4902      	ldr	r1, [pc, #8]	; (3988 <nrfx_twim_0_irq_handler+0xc>)
    3980:	4802      	ldr	r0, [pc, #8]	; (398c <nrfx_twim_0_irq_handler+0x10>)
    3982:	f7ff fe97 	bl	36b4 <twim_irq_handler>
}
    3986:	bd08      	pop	{r3, pc}
    3988:	200003a8 	.word	0x200003a8
    398c:	40003000 	.word	0x40003000

00003990 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    3990:	b508      	push	{r3, lr}
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
    3992:	4903      	ldr	r1, [pc, #12]	; (39a0 <nrfx_twim_1_irq_handler+0x10>)
    3994:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    3998:	f7ff fe8c 	bl	36b4 <twim_irq_handler>
}
    399c:	bd08      	pop	{r3, pc}
    399e:	bf00      	nop
    39a0:	200003dc 	.word	0x200003dc

000039a4 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    39a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
    39a8:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    39ac:	f04f 0801 	mov.w	r8, #1
    39b0:	fa08 f600 	lsl.w	r6, r8, r0
    p_reg->OUTSET = set_mask;
    39b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    39b8:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    39bc:	f001 071f 	and.w	r7, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    39c0:	fa08 f807 	lsl.w	r8, r8, r7
    p_reg->OUTSET = set_mask;
    39c4:	f8c3 8508 	str.w	r8, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    39c8:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    39cc:	f240 620d 	movw	r2, #1549	; 0x60d
    39d0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    39d4:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
    39d8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    39dc:	2004      	movs	r0, #4
    39de:	f002 fae1 	bl	5fa4 <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
    39e2:	2400      	movs	r4, #0
    39e4:	2c08      	cmp	r4, #8
    39e6:	d816      	bhi.n	3a16 <nrfx_twi_twim_bus_recover+0x72>
    return p_reg->IN;
    39e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    39ec:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    39f0:	40fb      	lsrs	r3, r7
    {
        if (nrf_gpio_pin_read(sda_pin))
    39f2:	f013 0f01 	tst.w	r3, #1
    39f6:	d10e      	bne.n	3a16 <nrfx_twi_twim_bus_recover+0x72>
    p_reg->OUTCLR = clr_mask;
    39f8:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    39fc:	f8c5 650c 	str.w	r6, [r5, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    3a00:	2004      	movs	r0, #4
    3a02:	f002 facf 	bl	5fa4 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    3a06:	f8c5 6508 	str.w	r6, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    3a0a:	2004      	movs	r0, #4
    3a0c:	f002 faca 	bl	5fa4 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    3a10:	3401      	adds	r4, #1
    3a12:	b2e4      	uxtb	r4, r4
    3a14:	e7e6      	b.n	39e4 <nrfx_twi_twim_bus_recover+0x40>
    p_reg->OUTCLR = clr_mask;
    3a16:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    3a1a:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    3a1e:	2004      	movs	r0, #4
    3a20:	f002 fac0 	bl	5fa4 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    3a24:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    3a28:	2004      	movs	r0, #4
    3a2a:	f002 fabb 	bl	5fa4 <nrfx_busy_wait>
    return p_reg->IN;
    3a2e:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3a32:	fa21 f707 	lsr.w	r7, r1, r7

    if (nrf_gpio_pin_read(sda_pin))
    3a36:	f017 0f01 	tst.w	r7, #1
    3a3a:	d002      	beq.n	3a42 <nrfx_twi_twim_bus_recover+0x9e>
    {
        return NRFX_SUCCESS;
    3a3c:	4802      	ldr	r0, [pc, #8]	; (3a48 <nrfx_twi_twim_bus_recover+0xa4>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    3a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INTERNAL;
    3a42:	4802      	ldr	r0, [pc, #8]	; (3a4c <nrfx_twi_twim_bus_recover+0xa8>)
    3a44:	e7fb      	b.n	3a3e <nrfx_twi_twim_bus_recover+0x9a>
    3a46:	bf00      	nop
    3a48:	0bad0000 	.word	0x0bad0000
    3a4c:	0bad0001 	.word	0x0bad0001

00003a50 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    3a50:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3a52:	4c14      	ldr	r4, [pc, #80]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a54:	2303      	movs	r3, #3
    3a56:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    3a58:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    3a5a:	4a13      	ldr	r2, [pc, #76]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a5c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3a5e:	4b13      	ldr	r3, [pc, #76]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3a60:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    3a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3a66:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    3a68:	2300      	movs	r3, #0
    3a6a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    3a6c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3a6e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    3a70:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    3a72:	4a0f      	ldr	r2, [pc, #60]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a74:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    3a76:	2210      	movs	r2, #16
    3a78:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    3a7a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    3a7c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3a7e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    3a80:	490c      	ldr	r1, [pc, #48]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a82:	1de0      	adds	r0, r4, #7
    3a84:	f001 fc3c 	bl	5300 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3a88:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    3a8c:	490a      	ldr	r1, [pc, #40]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a8e:	4620      	mov	r0, r4
    3a90:	f001 fc36 	bl	5300 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3a94:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    3a98:	2320      	movs	r3, #32
    3a9a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3a9c:	f3bf 8f5f 	dmb	sy
}
    3aa0:	bd10      	pop	{r4, pc}
    3aa2:	bf00      	nop
    3aa4:	20000410 	.word	0x20000410
    3aa8:	00006bcc 	.word	0x00006bcc
    3aac:	200004c8 	.word	0x200004c8
    3ab0:	200004b8 	.word	0x200004b8
    3ab4:	00006bd8 	.word	0x00006bd8
    3ab8:	00006bdc 	.word	0x00006bdc

00003abc <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    3abc:	4b03      	ldr	r3, [pc, #12]	; (3acc <z_device_state_init+0x10>)

	while (dev < __device_end) {
    3abe:	4a04      	ldr	r2, [pc, #16]	; (3ad0 <z_device_state_init+0x14>)
    3ac0:	4293      	cmp	r3, r2
    3ac2:	d201      	bcs.n	3ac8 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    3ac4:	3318      	adds	r3, #24
    3ac6:	e7fa      	b.n	3abe <z_device_state_init+0x2>
	}
}
    3ac8:	4770      	bx	lr
    3aca:	bf00      	nop
    3acc:	000064ec 	.word	0x000064ec
    3ad0:	0000657c 	.word	0x0000657c

00003ad4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    3ad4:	b570      	push	{r4, r5, r6, lr}
    3ad6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3ad8:	4b11      	ldr	r3, [pc, #68]	; (3b20 <z_sys_init_run_level+0x4c>)
    3ada:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3ade:	e009      	b.n	3af4 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3ae0:	4240      	negs	r0, r0
    3ae2:	e017      	b.n	3b14 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    3ae4:	68eb      	ldr	r3, [r5, #12]
    3ae6:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3ae8:	68ea      	ldr	r2, [r5, #12]
    3aea:	7853      	ldrb	r3, [r2, #1]
    3aec:	f043 0301 	orr.w	r3, r3, #1
    3af0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3af2:	3408      	adds	r4, #8
    3af4:	1c73      	adds	r3, r6, #1
    3af6:	4a0a      	ldr	r2, [pc, #40]	; (3b20 <z_sys_init_run_level+0x4c>)
    3af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3afc:	42a3      	cmp	r3, r4
    3afe:	d90d      	bls.n	3b1c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3b00:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    3b02:	6823      	ldr	r3, [r4, #0]
    3b04:	4628      	mov	r0, r5
    3b06:	4798      	blx	r3
		if (dev != NULL) {
    3b08:	2d00      	cmp	r5, #0
    3b0a:	d0f2      	beq.n	3af2 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3b0c:	2800      	cmp	r0, #0
    3b0e:	d0eb      	beq.n	3ae8 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3b10:	2800      	cmp	r0, #0
    3b12:	dbe5      	blt.n	3ae0 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    3b14:	28ff      	cmp	r0, #255	; 0xff
    3b16:	dde5      	ble.n	3ae4 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3b18:	20ff      	movs	r0, #255	; 0xff
    3b1a:	e7e3      	b.n	3ae4 <z_sys_init_run_level+0x10>
		}
	}
}
    3b1c:	bd70      	pop	{r4, r5, r6, pc}
    3b1e:	bf00      	nop
    3b20:	00006be4 	.word	0x00006be4

00003b24 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    3b24:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    3b26:	4605      	mov	r5, r0
    3b28:	b328      	cbz	r0, 3b76 <z_impl_device_get_binding+0x52>
    3b2a:	7803      	ldrb	r3, [r0, #0]
    3b2c:	b32b      	cbz	r3, 3b7a <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    3b2e:	4c14      	ldr	r4, [pc, #80]	; (3b80 <z_impl_device_get_binding+0x5c>)
    3b30:	e000      	b.n	3b34 <z_impl_device_get_binding+0x10>
    3b32:	3418      	adds	r4, #24
    3b34:	4b13      	ldr	r3, [pc, #76]	; (3b84 <z_impl_device_get_binding+0x60>)
    3b36:	429c      	cmp	r4, r3
    3b38:	d008      	beq.n	3b4c <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    3b3a:	4620      	mov	r0, r4
    3b3c:	f002 fac2 	bl	60c4 <z_device_ready>
    3b40:	2800      	cmp	r0, #0
    3b42:	d0f6      	beq.n	3b32 <z_impl_device_get_binding+0xe>
    3b44:	6823      	ldr	r3, [r4, #0]
    3b46:	42ab      	cmp	r3, r5
    3b48:	d1f3      	bne.n	3b32 <z_impl_device_get_binding+0xe>
    3b4a:	e012      	b.n	3b72 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    3b4c:	4c0c      	ldr	r4, [pc, #48]	; (3b80 <z_impl_device_get_binding+0x5c>)
    3b4e:	e000      	b.n	3b52 <z_impl_device_get_binding+0x2e>
    3b50:	3418      	adds	r4, #24
    3b52:	4b0c      	ldr	r3, [pc, #48]	; (3b84 <z_impl_device_get_binding+0x60>)
    3b54:	429c      	cmp	r4, r3
    3b56:	d00b      	beq.n	3b70 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3b58:	4620      	mov	r0, r4
    3b5a:	f002 fab3 	bl	60c4 <z_device_ready>
    3b5e:	2800      	cmp	r0, #0
    3b60:	d0f6      	beq.n	3b50 <z_impl_device_get_binding+0x2c>
    3b62:	6821      	ldr	r1, [r4, #0]
    3b64:	4628      	mov	r0, r5
    3b66:	f001 fc00 	bl	536a <strcmp>
    3b6a:	2800      	cmp	r0, #0
    3b6c:	d1f0      	bne.n	3b50 <z_impl_device_get_binding+0x2c>
    3b6e:	e000      	b.n	3b72 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    3b70:	2400      	movs	r4, #0
}
    3b72:	4620      	mov	r0, r4
    3b74:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    3b76:	4604      	mov	r4, r0
    3b78:	e7fb      	b.n	3b72 <z_impl_device_get_binding+0x4e>
    3b7a:	2400      	movs	r4, #0
    3b7c:	e7f9      	b.n	3b72 <z_impl_device_get_binding+0x4e>
    3b7e:	bf00      	nop
    3b80:	000064ec 	.word	0x000064ec
    3b84:	0000657c 	.word	0x0000657c

00003b88 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b8a:	b089      	sub	sp, #36	; 0x24
    3b8c:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    3b8e:	4b15      	ldr	r3, [pc, #84]	; (3be4 <init_idle_thread+0x5c>)
    3b90:	25b0      	movs	r5, #176	; 0xb0
    3b92:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    3b96:	4b14      	ldr	r3, [pc, #80]	; (3be8 <init_idle_thread+0x60>)
    3b98:	f44f 76b0 	mov.w	r6, #352	; 0x160
    3b9c:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    3ba0:	af06      	add	r7, sp, #24
    3ba2:	4603      	mov	r3, r0
    3ba4:	4a11      	ldr	r2, [pc, #68]	; (3bec <init_idle_thread+0x64>)
    3ba6:	2108      	movs	r1, #8
    3ba8:	4638      	mov	r0, r7
    3baa:	f001 f802 	bl	4bb2 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3bae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3bb2:	480f      	ldr	r0, [pc, #60]	; (3bf0 <init_idle_thread+0x68>)
    3bb4:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    3bb8:	9705      	str	r7, [sp, #20]
    3bba:	2301      	movs	r3, #1
    3bbc:	9304      	str	r3, [sp, #16]
    3bbe:	230f      	movs	r3, #15
    3bc0:	9303      	str	r3, [sp, #12]
    3bc2:	2300      	movs	r3, #0
    3bc4:	9302      	str	r3, [sp, #8]
    3bc6:	9301      	str	r3, [sp, #4]
    3bc8:	9400      	str	r4, [sp, #0]
    3bca:	4b0a      	ldr	r3, [pc, #40]	; (3bf4 <init_idle_thread+0x6c>)
    3bcc:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3bd0:	4631      	mov	r1, r6
    3bd2:	4628      	mov	r0, r5
    3bd4:	f000 f8fe 	bl	3dd4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3bd8:	7b6b      	ldrb	r3, [r5, #13]
    3bda:	f023 0304 	bic.w	r3, r3, #4
    3bde:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3be0:	b009      	add	sp, #36	; 0x24
    3be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3be4:	200000d8 	.word	0x200000d8
    3be8:	20000d40 	.word	0x20000d40
    3bec:	00006bfc 	.word	0x00006bfc
    3bf0:	200008c8 	.word	0x200008c8
    3bf4:	0000616d 	.word	0x0000616d

00003bf8 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    3bf8:	b570      	push	{r4, r5, r6, lr}
    3bfa:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    3bfc:	f000 fc88 	bl	4510 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    3c00:	4d1b      	ldr	r5, [pc, #108]	; (3c70 <prepare_multithreading+0x78>)
    3c02:	4b1c      	ldr	r3, [pc, #112]	; (3c74 <prepare_multithreading+0x7c>)
    3c04:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3c06:	4b1c      	ldr	r3, [pc, #112]	; (3c78 <prepare_multithreading+0x80>)
    3c08:	9305      	str	r3, [sp, #20]
    3c0a:	2301      	movs	r3, #1
    3c0c:	9304      	str	r3, [sp, #16]
    3c0e:	2400      	movs	r4, #0
    3c10:	9403      	str	r4, [sp, #12]
    3c12:	9402      	str	r4, [sp, #8]
    3c14:	9401      	str	r4, [sp, #4]
    3c16:	9400      	str	r4, [sp, #0]
    3c18:	4b18      	ldr	r3, [pc, #96]	; (3c7c <prepare_multithreading+0x84>)
    3c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3c1e:	4918      	ldr	r1, [pc, #96]	; (3c80 <prepare_multithreading+0x88>)
    3c20:	4628      	mov	r0, r5
    3c22:	f000 f8d7 	bl	3dd4 <z_setup_new_thread>
    3c26:	4606      	mov	r6, r0
    3c28:	7b6b      	ldrb	r3, [r5, #13]
    3c2a:	f023 0304 	bic.w	r3, r3, #4
    3c2e:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    3c30:	4628      	mov	r0, r5
    3c32:	f002 fad9 	bl	61e8 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    3c36:	2c00      	cmp	r4, #0
    3c38:	dd02      	ble.n	3c40 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    3c3a:	4630      	mov	r0, r6
    3c3c:	b006      	add	sp, #24
    3c3e:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    3c40:	4620      	mov	r0, r4
    3c42:	f7ff ffa1 	bl	3b88 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3c46:	4b0f      	ldr	r3, [pc, #60]	; (3c84 <prepare_multithreading+0x8c>)
    3c48:	22b0      	movs	r2, #176	; 0xb0
    3c4a:	fb02 3204 	mla	r2, r2, r4, r3
    3c4e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    3c52:	4b08      	ldr	r3, [pc, #32]	; (3c74 <prepare_multithreading+0x7c>)
    3c54:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3c58:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    3c5a:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    3c5c:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    3c60:	4a09      	ldr	r2, [pc, #36]	; (3c88 <prepare_multithreading+0x90>)
    3c62:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    3c66:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    3c6a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    3c6c:	3401      	adds	r4, #1
    3c6e:	e7e2      	b.n	3c36 <prepare_multithreading+0x3e>
    3c70:	20000188 	.word	0x20000188
    3c74:	200008c8 	.word	0x200008c8
    3c78:	00006c08 	.word	0x00006c08
    3c7c:	00003c8d 	.word	0x00003c8d
    3c80:	20000920 	.word	0x20000920
    3c84:	200000d8 	.word	0x200000d8
    3c88:	20000ea0 	.word	0x20000ea0

00003c8c <bg_thread_main>:
{
    3c8c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3c8e:	4b0a      	ldr	r3, [pc, #40]	; (3cb8 <bg_thread_main+0x2c>)
    3c90:	2201      	movs	r2, #1
    3c92:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3c94:	2002      	movs	r0, #2
    3c96:	f7ff ff1d 	bl	3ad4 <z_sys_init_run_level>
	boot_banner();
    3c9a:	f000 fec3 	bl	4a24 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3c9e:	2003      	movs	r0, #3
    3ca0:	f7ff ff18 	bl	3ad4 <z_sys_init_run_level>
	z_init_static_threads();
    3ca4:	f000 f8fa 	bl	3e9c <z_init_static_threads>
	main();
    3ca8:	f7fc fc84 	bl	5b4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3cac:	4a03      	ldr	r2, [pc, #12]	; (3cbc <bg_thread_main+0x30>)
    3cae:	7b13      	ldrb	r3, [r2, #12]
    3cb0:	f023 0301 	bic.w	r3, r3, #1
    3cb4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3cb6:	bd08      	pop	{r3, pc}
    3cb8:	20000907 	.word	0x20000907
    3cbc:	20000188 	.word	0x20000188

00003cc0 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    3cc0:	b508      	push	{r3, lr}
    3cc2:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3cc4:	4a01      	ldr	r2, [pc, #4]	; (3ccc <switch_to_main_thread+0xc>)
    3cc6:	4802      	ldr	r0, [pc, #8]	; (3cd0 <switch_to_main_thread+0x10>)
    3cc8:	f7fd fce4 	bl	1694 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3ccc:	00003c8d 	.word	0x00003c8d
    3cd0:	20000188 	.word	0x20000188

00003cd4 <z_bss_zero>:
{
    3cd4:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3cd6:	4803      	ldr	r0, [pc, #12]	; (3ce4 <z_bss_zero+0x10>)
    3cd8:	4a03      	ldr	r2, [pc, #12]	; (3ce8 <z_bss_zero+0x14>)
    3cda:	1a12      	subs	r2, r2, r0
    3cdc:	2100      	movs	r1, #0
    3cde:	f001 fb72 	bl	53c6 <memset>
}
    3ce2:	bd08      	pop	{r3, pc}
    3ce4:	200000b8 	.word	0x200000b8
    3ce8:	20000908 	.word	0x20000908

00003cec <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3cec:	b500      	push	{lr}
    3cee:	b0ad      	sub	sp, #180	; 0xb4
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3cf0:	4b1c      	ldr	r3, [pc, #112]	; (3d64 <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3cf2:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3cf6:	4c1c      	ldr	r4, [pc, #112]	; (3d68 <z_cstart+0x7c>)
    3cf8:	6963      	ldr	r3, [r4, #20]
    3cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3cfe:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d00:	23e0      	movs	r3, #224	; 0xe0
    3d02:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3d06:	2500      	movs	r5, #0
    3d08:	77e5      	strb	r5, [r4, #31]
    3d0a:	7625      	strb	r5, [r4, #24]
    3d0c:	7665      	strb	r5, [r4, #25]
    3d0e:	76a5      	strb	r5, [r4, #26]
    3d10:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3d16:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3d1a:	6263      	str	r3, [r4, #36]	; 0x24
    3d1c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3d20:	f7fd fe0a 	bl	1938 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3d24:	f7fd fb9c 	bl	1460 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3d28:	f04f 33ff 	mov.w	r3, #4294967295
    3d2c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3d2e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3d30:	f7fd ff0c 	bl	1b4c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3d34:	f7fd fea6 	bl	1a84 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    3d38:	2401      	movs	r4, #1
    3d3a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3d3e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3d42:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    3d44:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3d46:	4b09      	ldr	r3, [pc, #36]	; (3d6c <z_cstart+0x80>)
    3d48:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3d4c:	f7ff feb6 	bl	3abc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3d50:	4628      	mov	r0, r5
    3d52:	f7ff febf 	bl	3ad4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3d56:	4620      	mov	r0, r4
    3d58:	f7ff febc 	bl	3ad4 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3d5c:	f7ff ff4c 	bl	3bf8 <prepare_multithreading>
    3d60:	f7ff ffae 	bl	3cc0 <switch_to_main_thread>
    3d64:	200016c0 	.word	0x200016c0
    3d68:	e000ed00 	.word	0xe000ed00
    3d6c:	200008c8 	.word	0x200008c8

00003d70 <z_thread_monitor_exit>:
    3d70:	f04f 0320 	mov.w	r3, #32
    3d74:	f3ef 8111 	mrs	r1, BASEPRI
    3d78:	f383 8812 	msr	BASEPRI_MAX, r3
    3d7c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    3d80:	4b0a      	ldr	r3, [pc, #40]	; (3dac <z_thread_monitor_exit+0x3c>)
    3d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d84:	4283      	cmp	r3, r0
    3d86:	d104      	bne.n	3d92 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    3d88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3d8a:	4b08      	ldr	r3, [pc, #32]	; (3dac <z_thread_monitor_exit+0x3c>)
    3d8c:	629a      	str	r2, [r3, #40]	; 0x28
    3d8e:	e007      	b.n	3da0 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    3d90:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    3d92:	b113      	cbz	r3, 3d9a <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3d94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    3d96:	4282      	cmp	r2, r0
    3d98:	d1fa      	bne.n	3d90 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    3d9a:	b10b      	cbz	r3, 3da0 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3d9c:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3d9e:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    3da0:	f381 8811 	msr	BASEPRI, r1
    3da4:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    3da8:	4770      	bx	lr
    3daa:	bf00      	nop
    3dac:	200008c8 	.word	0x200008c8

00003db0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    3db0:	b538      	push	{r3, r4, r5, lr}
    3db2:	4614      	mov	r4, r2
    3db4:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3db6:	ea54 0305 	orrs.w	r3, r4, r5
    3dba:	d102      	bne.n	3dc2 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    3dbc:	f002 f9c1 	bl	6142 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3dc0:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3dc2:	462b      	mov	r3, r5
    3dc4:	4902      	ldr	r1, [pc, #8]	; (3dd0 <schedule_new_thread+0x20>)
    3dc6:	3018      	adds	r0, #24
    3dc8:	f000 fd00 	bl	47cc <z_add_timeout>
    3dcc:	e7f8      	b.n	3dc0 <schedule_new_thread+0x10>
    3dce:	bf00      	nop
    3dd0:	00006221 	.word	0x00006221

00003dd4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3dd8:	b085      	sub	sp, #20
    3dda:	4604      	mov	r4, r0
    3ddc:	460f      	mov	r7, r1
    3dde:	4615      	mov	r5, r2
    3de0:	461e      	mov	r6, r3
    3de2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3de6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3dea:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    3dee:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3df2:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3df6:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    3df8:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    3dfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3dfc:	2204      	movs	r2, #4
    3dfe:	9911      	ldr	r1, [sp, #68]	; 0x44
    3e00:	f002 f9a3 	bl	614a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    3e04:	462a      	mov	r2, r5
    3e06:	4639      	mov	r1, r7
    3e08:	4620      	mov	r0, r4
    3e0a:	f002 f982 	bl	6112 <setup_thread_stack>
    3e0e:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3e10:	f8cd 8008 	str.w	r8, [sp, #8]
    3e14:	f8cd 9004 	str.w	r9, [sp, #4]
    3e18:	f8cd a000 	str.w	sl, [sp]
    3e1c:	4633      	mov	r3, r6
    3e1e:	4602      	mov	r2, r0
    3e20:	4639      	mov	r1, r7
    3e22:	4620      	mov	r0, r4
    3e24:	f7fd fbe6 	bl	15f4 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    3e28:	2300      	movs	r3, #0
    3e2a:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    3e2c:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    3e2e:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    3e32:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    3e36:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    3e3a:	f04f 0320 	mov.w	r3, #32
    3e3e:	f3ef 8211 	mrs	r2, BASEPRI
    3e42:	f383 8812 	msr	BASEPRI_MAX, r3
    3e46:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    3e4a:	4b13      	ldr	r3, [pc, #76]	; (3e98 <z_setup_new_thread+0xc4>)
    3e4c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3e4e:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    3e50:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    3e52:	f382 8811 	msr	BASEPRI, r2
    3e56:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    3e5a:	f1bb 0f00 	cmp.w	fp, #0
    3e5e:	d013      	beq.n	3e88 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    3e60:	221f      	movs	r2, #31
    3e62:	4659      	mov	r1, fp
    3e64:	f104 0074 	add.w	r0, r4, #116	; 0x74
    3e68:	f001 fa53 	bl	5312 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    3e6c:	2300      	movs	r3, #0
    3e6e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    3e72:	4b09      	ldr	r3, [pc, #36]	; (3e98 <z_setup_new_thread+0xc4>)
    3e74:	689b      	ldr	r3, [r3, #8]
    3e76:	b15b      	cbz	r3, 3e90 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3e78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3e7c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
    3e80:	4628      	mov	r0, r5
    3e82:	b005      	add	sp, #20
    3e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    3e88:	2300      	movs	r3, #0
    3e8a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    3e8e:	e7f0      	b.n	3e72 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    3e90:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    3e94:	e7f4      	b.n	3e80 <z_setup_new_thread+0xac>
    3e96:	bf00      	nop
    3e98:	200008c8 	.word	0x200008c8

00003e9c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3e9c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    3ea0:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    3ea2:	4c23      	ldr	r4, [pc, #140]	; (3f30 <z_init_static_threads+0x94>)
    3ea4:	4b23      	ldr	r3, [pc, #140]	; (3f34 <z_init_static_threads+0x98>)
    3ea6:	429c      	cmp	r4, r3
    3ea8:	d215      	bcs.n	3ed6 <z_init_static_threads+0x3a>
		z_setup_new_thread(
    3eaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3eac:	9305      	str	r3, [sp, #20]
    3eae:	6a23      	ldr	r3, [r4, #32]
    3eb0:	9304      	str	r3, [sp, #16]
    3eb2:	69e3      	ldr	r3, [r4, #28]
    3eb4:	9303      	str	r3, [sp, #12]
    3eb6:	69a3      	ldr	r3, [r4, #24]
    3eb8:	9302      	str	r3, [sp, #8]
    3eba:	6963      	ldr	r3, [r4, #20]
    3ebc:	9301      	str	r3, [sp, #4]
    3ebe:	6923      	ldr	r3, [r4, #16]
    3ec0:	9300      	str	r3, [sp, #0]
    3ec2:	68e3      	ldr	r3, [r4, #12]
    3ec4:	68a2      	ldr	r2, [r4, #8]
    3ec6:	6861      	ldr	r1, [r4, #4]
    3ec8:	6820      	ldr	r0, [r4, #0]
    3eca:	f7ff ff83 	bl	3dd4 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    3ece:	6823      	ldr	r3, [r4, #0]
    3ed0:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3ed2:	3430      	adds	r4, #48	; 0x30
    3ed4:	e7e6      	b.n	3ea4 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3ed6:	f000 f909 	bl	40ec <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3eda:	4c15      	ldr	r4, [pc, #84]	; (3f30 <z_init_static_threads+0x94>)
    3edc:	e01b      	b.n	3f16 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    3ede:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    3ee0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3ee4:	ea4f 79e3 	mov.w	r9, r3, asr #31
			return (t * to_hz + off) / from_hz;
    3ee8:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    3eec:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    3ef0:	03d8      	lsls	r0, r3, #15
    3ef2:	f240 35e7 	movw	r5, #999	; 0x3e7
    3ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3efa:	2300      	movs	r3, #0
    3efc:	1940      	adds	r0, r0, r5
    3efe:	f04f 0500 	mov.w	r5, #0
    3f02:	eb45 0101 	adc.w	r1, r5, r1
    3f06:	f7fc f8e9 	bl	dc <__aeabi_uldivmod>
    3f0a:	4602      	mov	r2, r0
    3f0c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    3f0e:	4630      	mov	r0, r6
    3f10:	f7ff ff4e 	bl	3db0 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    3f14:	3430      	adds	r4, #48	; 0x30
    3f16:	4b07      	ldr	r3, [pc, #28]	; (3f34 <z_init_static_threads+0x98>)
    3f18:	429c      	cmp	r4, r3
    3f1a:	d204      	bcs.n	3f26 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f22:	d0f7      	beq.n	3f14 <z_init_static_threads+0x78>
    3f24:	e7db      	b.n	3ede <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    3f26:	f000 fa7f 	bl	4428 <k_sched_unlock>
}
    3f2a:	b006      	add	sp, #24
    3f2c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    3f30:	200000b8 	.word	0x200000b8
    3f34:	200000b8 	.word	0x200000b8

00003f38 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
    3f38:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
    3f3a:	f002 fa50 	bl	63de <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    3f3e:	4b04      	ldr	r3, [pc, #16]	; (3f50 <pm_save_idle+0x18>)
    3f40:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    3f42:	f7fd fa29 	bl	1398 <pm_system_suspend>
    3f46:	b100      	cbz	r0, 3f4a <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
    3f48:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
    3f4a:	f7fd fa8f 	bl	146c <arch_cpu_idle>
    3f4e:	e7fb      	b.n	3f48 <pm_save_idle+0x10>
    3f50:	200008c8 	.word	0x200008c8

00003f54 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3f54:	b538      	push	{r3, r4, r5, lr}
    3f56:	4604      	mov	r4, r0
	__asm__ volatile(
    3f58:	f04f 0320 	mov.w	r3, #32
    3f5c:	f3ef 8511 	mrs	r5, BASEPRI
    3f60:	f383 8812 	msr	BASEPRI_MAX, r3
    3f64:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3f68:	f002 f9d9 	bl	631e <z_unpend_first_thread>

	if (thread != NULL) {
    3f6c:	b148      	cbz	r0, 3f82 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3f6e:	2200      	movs	r2, #0
    3f70:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3f74:	f002 f938 	bl	61e8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3f78:	4629      	mov	r1, r5
    3f7a:	4807      	ldr	r0, [pc, #28]	; (3f98 <z_impl_k_sem_give+0x44>)
    3f7c:	f000 f89a 	bl	40b4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3f80:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3f82:	68a3      	ldr	r3, [r4, #8]
    3f84:	68e2      	ldr	r2, [r4, #12]
    3f86:	4293      	cmp	r3, r2
    3f88:	d003      	beq.n	3f92 <z_impl_k_sem_give+0x3e>
    3f8a:	2201      	movs	r2, #1
    3f8c:	4413      	add	r3, r2
    3f8e:	60a3      	str	r3, [r4, #8]
}
    3f90:	e7f2      	b.n	3f78 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3f92:	2200      	movs	r2, #0
    3f94:	e7fa      	b.n	3f8c <z_impl_k_sem_give+0x38>
    3f96:	bf00      	nop
    3f98:	200008f4 	.word	0x200008f4

00003f9c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3f9c:	b530      	push	{r4, r5, lr}
    3f9e:	b083      	sub	sp, #12
    3fa0:	461d      	mov	r5, r3
    3fa2:	f04f 0320 	mov.w	r3, #32
    3fa6:	f3ef 8111 	mrs	r1, BASEPRI
    3faa:	f383 8812 	msr	BASEPRI_MAX, r3
    3fae:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3fb2:	6883      	ldr	r3, [r0, #8]
    3fb4:	b143      	cbz	r3, 3fc8 <z_impl_k_sem_take+0x2c>
		sem->count--;
    3fb6:	3b01      	subs	r3, #1
    3fb8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    3fba:	f381 8811 	msr	BASEPRI, r1
    3fbe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3fc2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3fc4:	b003      	add	sp, #12
    3fc6:	bd30      	pop	{r4, r5, pc}
    3fc8:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3fca:	ea54 0305 	orrs.w	r3, r4, r5
    3fce:	d006      	beq.n	3fde <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3fd0:	e9cd 4500 	strd	r4, r5, [sp]
    3fd4:	4602      	mov	r2, r0
    3fd6:	4805      	ldr	r0, [pc, #20]	; (3fec <z_impl_k_sem_take+0x50>)
    3fd8:	f000 f9d0 	bl	437c <z_pend_curr>
	return ret;
    3fdc:	e7f2      	b.n	3fc4 <z_impl_k_sem_take+0x28>
    3fde:	f381 8811 	msr	BASEPRI, r1
    3fe2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3fe6:	f06f 000f 	mvn.w	r0, #15
    3fea:	e7eb      	b.n	3fc4 <z_impl_k_sem_take+0x28>
    3fec:	200008f4 	.word	0x200008f4

00003ff0 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    3ff0:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ff6:	bf08      	it	eq
    3ff8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    3ffc:	d100      	bne.n	4000 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    3ffe:	bd38      	pop	{r3, r4, r5, pc}
    4000:	4902      	ldr	r1, [pc, #8]	; (400c <add_thread_timeout+0x1c>)
    4002:	3018      	adds	r0, #24
    4004:	f000 fbe2 	bl	47cc <z_add_timeout>
    4008:	e7f9      	b.n	3ffe <add_thread_timeout+0xe>
    400a:	bf00      	nop
    400c:	00006221 	.word	0x00006221

00004010 <z_reset_time_slice>:
{
    4010:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    4012:	4b08      	ldr	r3, [pc, #32]	; (4034 <z_reset_time_slice+0x24>)
    4014:	681b      	ldr	r3, [r3, #0]
    4016:	b903      	cbnz	r3, 401a <z_reset_time_slice+0xa>
}
    4018:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    401a:	f7fe fdb7 	bl	2b8c <sys_clock_elapsed>
    401e:	4603      	mov	r3, r0
    4020:	4a04      	ldr	r2, [pc, #16]	; (4034 <z_reset_time_slice+0x24>)
    4022:	6810      	ldr	r0, [r2, #0]
    4024:	4403      	add	r3, r0
    4026:	4a04      	ldr	r2, [pc, #16]	; (4038 <z_reset_time_slice+0x28>)
    4028:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    402a:	2100      	movs	r1, #0
    402c:	f002 f9ed 	bl	640a <z_set_timeout_expiry>
}
    4030:	e7f2      	b.n	4018 <z_reset_time_slice+0x8>
    4032:	bf00      	nop
    4034:	200008fc 	.word	0x200008fc
    4038:	200008c8 	.word	0x200008c8

0000403c <k_sched_time_slice_set>:
{
    403c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4040:	4606      	mov	r6, r0
    4042:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    4044:	2300      	movs	r3, #0
	__asm__ volatile(
    4046:	f04f 0220 	mov.w	r2, #32
    404a:	f3ef 8711 	mrs	r7, BASEPRI
    404e:	f382 8812 	msr	BASEPRI_MAX, r2
    4052:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4056:	e009      	b.n	406c <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    4058:	4b13      	ldr	r3, [pc, #76]	; (40a8 <k_sched_time_slice_set+0x6c>)
    405a:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    405e:	f7ff ffd7 	bl	4010 <z_reset_time_slice>
	__asm__ volatile(
    4062:	f387 8811 	msr	BASEPRI, r7
    4066:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    406a:	2301      	movs	r3, #1
    406c:	b9cb      	cbnz	r3, 40a2 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    406e:	2300      	movs	r3, #0
    4070:	4a0e      	ldr	r2, [pc, #56]	; (40ac <k_sched_time_slice_set+0x70>)
    4072:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    4074:	0c75      	lsrs	r5, r6, #17
    4076:	03f4      	lsls	r4, r6, #15
    4078:	f240 30e7 	movw	r0, #999	; 0x3e7
    407c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4080:	2300      	movs	r3, #0
    4082:	1820      	adds	r0, r4, r0
    4084:	f04f 0100 	mov.w	r1, #0
    4088:	eb45 0101 	adc.w	r1, r5, r1
    408c:	f7fc f826 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    4090:	4b07      	ldr	r3, [pc, #28]	; (40b0 <k_sched_time_slice_set+0x74>)
    4092:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4094:	2e00      	cmp	r6, #0
    4096:	dddf      	ble.n	4058 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    4098:	2802      	cmp	r0, #2
    409a:	bfb8      	it	lt
    409c:	2002      	movlt	r0, #2
    409e:	6018      	str	r0, [r3, #0]
    40a0:	e7da      	b.n	4058 <k_sched_time_slice_set+0x1c>
}
    40a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40a6:	bf00      	nop
    40a8:	200008f8 	.word	0x200008f8
    40ac:	200008c8 	.word	0x200008c8
    40b0:	200008fc 	.word	0x200008fc

000040b4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    40b4:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    40b6:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    40b8:	b921      	cbnz	r1, 40c4 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    40ba:	f3ef 8305 	mrs	r3, IPSR
    40be:	b913      	cbnz	r3, 40c6 <z_reschedule+0x12>
    40c0:	2101      	movs	r1, #1
    40c2:	e000      	b.n	40c6 <z_reschedule+0x12>
    40c4:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    40c6:	f011 0f01 	tst.w	r1, #1
    40ca:	d007      	beq.n	40dc <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    40cc:	4b06      	ldr	r3, [pc, #24]	; (40e8 <z_reschedule+0x34>)
    40ce:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    40d0:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    40d2:	429a      	cmp	r2, r3
    40d4:	d002      	beq.n	40dc <z_reschedule+0x28>
	ret = arch_swap(key);
    40d6:	f7fd fa35 	bl	1544 <arch_swap>
		z_swap(lock, key);
    40da:	e003      	b.n	40e4 <z_reschedule+0x30>
    40dc:	f380 8811 	msr	BASEPRI, r0
    40e0:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    40e4:	bd08      	pop	{r3, pc}
    40e6:	bf00      	nop
    40e8:	200008c8 	.word	0x200008c8

000040ec <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    40ec:	2300      	movs	r3, #0
	__asm__ volatile(
    40ee:	f04f 0220 	mov.w	r2, #32
    40f2:	f3ef 8111 	mrs	r1, BASEPRI
    40f6:	f382 8812 	msr	BASEPRI_MAX, r2
    40fa:	f3bf 8f6f 	isb	sy
    40fe:	b953      	cbnz	r3, 4116 <k_sched_lock+0x2a>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    4100:	4b05      	ldr	r3, [pc, #20]	; (4118 <k_sched_lock+0x2c>)
    4102:	689a      	ldr	r2, [r3, #8]
    4104:	7bd3      	ldrb	r3, [r2, #15]
    4106:	3b01      	subs	r3, #1
    4108:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    410a:	f381 8811 	msr	BASEPRI, r1
    410e:	f3bf 8f6f 	isb	sy
    4112:	2301      	movs	r3, #1
    4114:	e7f3      	b.n	40fe <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4116:	4770      	bx	lr
    4118:	200008c8 	.word	0x200008c8

0000411c <update_cache>:
{
    411c:	b538      	push	{r3, r4, r5, lr}
    411e:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    4120:	480f      	ldr	r0, [pc, #60]	; (4160 <update_cache+0x44>)
    4122:	f002 f85a 	bl	61da <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4126:	4605      	mov	r5, r0
    4128:	b170      	cbz	r0, 4148 <update_cache+0x2c>
	if (preempt_ok != 0) {
    412a:	b984      	cbnz	r4, 414e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    412c:	4b0d      	ldr	r3, [pc, #52]	; (4164 <update_cache+0x48>)
    412e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4130:	7b5a      	ldrb	r2, [r3, #13]
    4132:	f012 0f1f 	tst.w	r2, #31
    4136:	d10a      	bne.n	414e <update_cache+0x32>
 * @return true if node is linked into a list, false if it is not
 */

static inline bool sys_dnode_is_linked(const sys_dnode_t *node)
{
	return node->next != NULL;
    4138:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    413a:	b942      	cbnz	r2, 414e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    413c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    413e:	2a7f      	cmp	r2, #127	; 0x7f
    4140:	d905      	bls.n	414e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    4142:	4a08      	ldr	r2, [pc, #32]	; (4164 <update_cache+0x48>)
    4144:	61d3      	str	r3, [r2, #28]
    4146:	e00a      	b.n	415e <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4148:	4b06      	ldr	r3, [pc, #24]	; (4164 <update_cache+0x48>)
    414a:	68dd      	ldr	r5, [r3, #12]
    414c:	e7ed      	b.n	412a <update_cache+0xe>
		if (thread != _current) {
    414e:	4b05      	ldr	r3, [pc, #20]	; (4164 <update_cache+0x48>)
    4150:	689b      	ldr	r3, [r3, #8]
    4152:	42ab      	cmp	r3, r5
    4154:	d001      	beq.n	415a <update_cache+0x3e>
			z_reset_time_slice();
    4156:	f7ff ff5b 	bl	4010 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    415a:	4b02      	ldr	r3, [pc, #8]	; (4164 <update_cache+0x48>)
    415c:	61dd      	str	r5, [r3, #28]
}
    415e:	bd38      	pop	{r3, r4, r5, pc}
    4160:	200008e8 	.word	0x200008e8
    4164:	200008c8 	.word	0x200008c8

00004168 <move_thread_to_end_of_prio_q>:
{
    4168:	b538      	push	{r3, r4, r5, lr}
    416a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    416c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    416e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4172:	2b00      	cmp	r3, #0
    4174:	db28      	blt.n	41c8 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    4176:	7b6b      	ldrb	r3, [r5, #13]
    4178:	f063 037f 	orn	r3, r3, #127	; 0x7f
    417c:	736b      	strb	r3, [r5, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    417e:	4b1a      	ldr	r3, [pc, #104]	; (41e8 <move_thread_to_end_of_prio_q+0x80>)
    4180:	f853 4f20 	ldr.w	r4, [r3, #32]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4184:	429c      	cmp	r4, r3
    4186:	d02d      	beq.n	41e4 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4188:	b16c      	cbz	r4, 41a6 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    418a:	4621      	mov	r1, r4
    418c:	4628      	mov	r0, r5
    418e:	f001 fffd 	bl	618c <z_sched_prio_cmp>
    4192:	2800      	cmp	r0, #0
    4194:	dc20      	bgt.n	41d8 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4196:	b134      	cbz	r4, 41a6 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    4198:	4b13      	ldr	r3, [pc, #76]	; (41e8 <move_thread_to_end_of_prio_q+0x80>)
    419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    419c:	429c      	cmp	r4, r3
    419e:	d002      	beq.n	41a6 <move_thread_to_end_of_prio_q+0x3e>
    41a0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    41a2:	2c00      	cmp	r4, #0
    41a4:	d1f0      	bne.n	4188 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    41a6:	4b10      	ldr	r3, [pc, #64]	; (41e8 <move_thread_to_end_of_prio_q+0x80>)
    41a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    41aa:	f103 0120 	add.w	r1, r3, #32
    41ae:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    41b0:	606a      	str	r2, [r5, #4]

	tail->next = node;
    41b2:	6015      	str	r5, [r2, #0]
	list->tail = node;
    41b4:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    41b6:	4b0c      	ldr	r3, [pc, #48]	; (41e8 <move_thread_to_end_of_prio_q+0x80>)
    41b8:	6898      	ldr	r0, [r3, #8]
    41ba:	42a8      	cmp	r0, r5
    41bc:	bf14      	ite	ne
    41be:	2000      	movne	r0, #0
    41c0:	2001      	moveq	r0, #1
    41c2:	f7ff ffab 	bl	411c <update_cache>
}
    41c6:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    41c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    41cc:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    41ce:	4601      	mov	r1, r0
    41d0:	4806      	ldr	r0, [pc, #24]	; (41ec <move_thread_to_end_of_prio_q+0x84>)
    41d2:	f001 fffa 	bl	61ca <z_priq_dumb_remove>
}
    41d6:	e7ce      	b.n	4176 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    41d8:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    41da:	606b      	str	r3, [r5, #4]
	node->next = successor;
    41dc:	602c      	str	r4, [r5, #0]
	prev->next = node;
    41de:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    41e0:	6065      	str	r5, [r4, #4]
}
    41e2:	e7e8      	b.n	41b6 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    41e4:	2400      	movs	r4, #0
    41e6:	e7cf      	b.n	4188 <move_thread_to_end_of_prio_q+0x20>
    41e8:	200008c8 	.word	0x200008c8
    41ec:	200008e8 	.word	0x200008e8

000041f0 <z_time_slice>:
{
    41f0:	b510      	push	{r4, lr}
	__asm__ volatile(
    41f2:	f04f 0320 	mov.w	r3, #32
    41f6:	f3ef 8411 	mrs	r4, BASEPRI
    41fa:	f383 8812 	msr	BASEPRI_MAX, r3
    41fe:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4202:	4b1c      	ldr	r3, [pc, #112]	; (4274 <z_time_slice+0x84>)
    4204:	689b      	ldr	r3, [r3, #8]
    4206:	4a1c      	ldr	r2, [pc, #112]	; (4278 <z_time_slice+0x88>)
    4208:	6812      	ldr	r2, [r2, #0]
    420a:	4293      	cmp	r3, r2
    420c:	d01d      	beq.n	424a <z_time_slice+0x5a>
	pending_current = NULL;
    420e:	4a1a      	ldr	r2, [pc, #104]	; (4278 <z_time_slice+0x88>)
    4210:	2100      	movs	r1, #0
    4212:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4214:	4a19      	ldr	r2, [pc, #100]	; (427c <z_time_slice+0x8c>)
    4216:	6812      	ldr	r2, [r2, #0]
    4218:	b322      	cbz	r2, 4264 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    421a:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    421c:	2a7f      	cmp	r2, #127	; 0x7f
    421e:	d821      	bhi.n	4264 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    4220:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    4222:	f012 0f1f 	tst.w	r2, #31
    4226:	d11d      	bne.n	4264 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4228:	f993 100e 	ldrsb.w	r1, [r3, #14]
    422c:	4a14      	ldr	r2, [pc, #80]	; (4280 <z_time_slice+0x90>)
    422e:	6812      	ldr	r2, [r2, #0]
    4230:	4291      	cmp	r1, r2
    4232:	db17      	blt.n	4264 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    4234:	4a13      	ldr	r2, [pc, #76]	; (4284 <z_time_slice+0x94>)
    4236:	4293      	cmp	r3, r2
    4238:	d014      	beq.n	4264 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    423a:	4a0e      	ldr	r2, [pc, #56]	; (4274 <z_time_slice+0x84>)
    423c:	6912      	ldr	r2, [r2, #16]
    423e:	4282      	cmp	r2, r0
    4240:	dd0a      	ble.n	4258 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    4242:	1a10      	subs	r0, r2, r0
    4244:	4b0b      	ldr	r3, [pc, #44]	; (4274 <z_time_slice+0x84>)
    4246:	6118      	str	r0, [r3, #16]
    4248:	e00f      	b.n	426a <z_time_slice+0x7a>
		z_reset_time_slice();
    424a:	f7ff fee1 	bl	4010 <z_reset_time_slice>
	__asm__ volatile(
    424e:	f384 8811 	msr	BASEPRI, r4
    4252:	f3bf 8f6f 	isb	sy
		return;
    4256:	e00c      	b.n	4272 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    4258:	4618      	mov	r0, r3
    425a:	f7ff ff85 	bl	4168 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    425e:	f7ff fed7 	bl	4010 <z_reset_time_slice>
    4262:	e002      	b.n	426a <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    4264:	4b03      	ldr	r3, [pc, #12]	; (4274 <z_time_slice+0x84>)
    4266:	2200      	movs	r2, #0
    4268:	611a      	str	r2, [r3, #16]
    426a:	f384 8811 	msr	BASEPRI, r4
    426e:	f3bf 8f6f 	isb	sy
}
    4272:	bd10      	pop	{r4, pc}
    4274:	200008c8 	.word	0x200008c8
    4278:	200008f4 	.word	0x200008f4
    427c:	200008fc 	.word	0x200008fc
    4280:	200008f8 	.word	0x200008f8
    4284:	200000d8 	.word	0x200000d8

00004288 <ready_thread>:
{
    4288:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    428a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    428c:	f990 200d 	ldrsb.w	r2, [r0, #13]
    4290:	2a00      	cmp	r2, #0
    4292:	db2d      	blt.n	42f0 <ready_thread+0x68>
    4294:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4296:	f013 0f1f 	tst.w	r3, #31
    429a:	d105      	bne.n	42a8 <ready_thread+0x20>
	return node->next != NULL;
    429c:	6982      	ldr	r2, [r0, #24]
    429e:	b10a      	cbz	r2, 42a4 <ready_thread+0x1c>
    42a0:	2200      	movs	r2, #0
    42a2:	e002      	b.n	42aa <ready_thread+0x22>
    42a4:	2201      	movs	r2, #1
    42a6:	e000      	b.n	42aa <ready_thread+0x22>
    42a8:	2200      	movs	r2, #0
    42aa:	b30a      	cbz	r2, 42f0 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    42ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    42b0:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    42b2:	4b14      	ldr	r3, [pc, #80]	; (4304 <ready_thread+0x7c>)
    42b4:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    42b8:	429d      	cmp	r5, r3
    42ba:	d020      	beq.n	42fe <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    42bc:	b16d      	cbz	r5, 42da <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    42be:	4629      	mov	r1, r5
    42c0:	4620      	mov	r0, r4
    42c2:	f001 ff63 	bl	618c <z_sched_prio_cmp>
    42c6:	2800      	cmp	r0, #0
    42c8:	dc13      	bgt.n	42f2 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    42ca:	b135      	cbz	r5, 42da <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    42cc:	4b0d      	ldr	r3, [pc, #52]	; (4304 <ready_thread+0x7c>)
    42ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42d0:	429d      	cmp	r5, r3
    42d2:	d002      	beq.n	42da <ready_thread+0x52>
    42d4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    42d6:	2d00      	cmp	r5, #0
    42d8:	d1f0      	bne.n	42bc <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    42da:	4b0a      	ldr	r3, [pc, #40]	; (4304 <ready_thread+0x7c>)
    42dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    42de:	f103 0120 	add.w	r1, r3, #32
    42e2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    42e4:	6062      	str	r2, [r4, #4]
	tail->next = node;
    42e6:	6014      	str	r4, [r2, #0]
	list->tail = node;
    42e8:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    42ea:	2000      	movs	r0, #0
    42ec:	f7ff ff16 	bl	411c <update_cache>
}
    42f0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    42f2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    42f4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    42f6:	6025      	str	r5, [r4, #0]
	prev->next = node;
    42f8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    42fa:	606c      	str	r4, [r5, #4]
}
    42fc:	e7f5      	b.n	42ea <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    42fe:	2500      	movs	r5, #0
    4300:	e7dc      	b.n	42bc <ready_thread+0x34>
    4302:	bf00      	nop
    4304:	200008c8 	.word	0x200008c8

00004308 <z_sched_start>:
{
    4308:	b510      	push	{r4, lr}
	__asm__ volatile(
    430a:	f04f 0320 	mov.w	r3, #32
    430e:	f3ef 8411 	mrs	r4, BASEPRI
    4312:	f383 8812 	msr	BASEPRI_MAX, r3
    4316:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    431a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    431c:	f013 0f04 	tst.w	r3, #4
    4320:	d104      	bne.n	432c <z_sched_start+0x24>
	__asm__ volatile(
    4322:	f384 8811 	msr	BASEPRI, r4
    4326:	f3bf 8f6f 	isb	sy
}
    432a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    432c:	f023 0304 	bic.w	r3, r3, #4
    4330:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    4332:	f7ff ffa9 	bl	4288 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4336:	4621      	mov	r1, r4
    4338:	4801      	ldr	r0, [pc, #4]	; (4340 <z_sched_start+0x38>)
    433a:	f7ff febb 	bl	40b4 <z_reschedule>
    433e:	e7f4      	b.n	432a <z_sched_start+0x22>
    4340:	200008f8 	.word	0x200008f8

00004344 <unready_thread>:
{
    4344:	b510      	push	{r4, lr}
    4346:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    4348:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    434a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    434e:	2b00      	cmp	r3, #0
    4350:	db08      	blt.n	4364 <unready_thread+0x20>
	update_cache(thread == _current);
    4352:	4b08      	ldr	r3, [pc, #32]	; (4374 <unready_thread+0x30>)
    4354:	6898      	ldr	r0, [r3, #8]
    4356:	42a0      	cmp	r0, r4
    4358:	bf14      	ite	ne
    435a:	2000      	movne	r0, #0
    435c:	2001      	moveq	r0, #1
    435e:	f7ff fedd 	bl	411c <update_cache>
}
    4362:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4364:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4368:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    436a:	4601      	mov	r1, r0
    436c:	4802      	ldr	r0, [pc, #8]	; (4378 <unready_thread+0x34>)
    436e:	f001 ff2c 	bl	61ca <z_priq_dumb_remove>
}
    4372:	e7ee      	b.n	4352 <unready_thread+0xe>
    4374:	200008c8 	.word	0x200008c8
    4378:	200008e8 	.word	0x200008e8

0000437c <z_pend_curr>:
{
    437c:	b510      	push	{r4, lr}
    437e:	460c      	mov	r4, r1
    4380:	4611      	mov	r1, r2
	pending_current = _current;
    4382:	4b06      	ldr	r3, [pc, #24]	; (439c <z_pend_curr+0x20>)
    4384:	6898      	ldr	r0, [r3, #8]
    4386:	4b06      	ldr	r3, [pc, #24]	; (43a0 <z_pend_curr+0x24>)
    4388:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    438a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    438e:	f001 ffa5 	bl	62dc <pend>
    4392:	4620      	mov	r0, r4
    4394:	f7fd f8d6 	bl	1544 <arch_swap>
}
    4398:	bd10      	pop	{r4, pc}
    439a:	bf00      	nop
    439c:	200008c8 	.word	0x200008c8
    43a0:	200008f4 	.word	0x200008f4

000043a4 <z_impl_k_thread_suspend>:
{
    43a4:	b538      	push	{r3, r4, r5, lr}
    43a6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    43a8:	3018      	adds	r0, #24
    43aa:	f001 fffa 	bl	63a2 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    43ae:	2300      	movs	r3, #0
	__asm__ volatile(
    43b0:	f04f 0220 	mov.w	r2, #32
    43b4:	f3ef 8511 	mrs	r5, BASEPRI
    43b8:	f382 8812 	msr	BASEPRI_MAX, r2
    43bc:	f3bf 8f6f 	isb	sy
    43c0:	e010      	b.n	43e4 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    43c2:	7b63      	ldrb	r3, [r4, #13]
    43c4:	f043 0310 	orr.w	r3, r3, #16
    43c8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    43ca:	4b15      	ldr	r3, [pc, #84]	; (4420 <z_impl_k_thread_suspend+0x7c>)
    43cc:	6898      	ldr	r0, [r3, #8]
    43ce:	42a0      	cmp	r0, r4
    43d0:	bf14      	ite	ne
    43d2:	2000      	movne	r0, #0
    43d4:	2001      	moveq	r0, #1
    43d6:	f7ff fea1 	bl	411c <update_cache>
	__asm__ volatile(
    43da:	f385 8811 	msr	BASEPRI, r5
    43de:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    43e2:	2301      	movs	r3, #1
    43e4:	b963      	cbnz	r3, 4400 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    43e6:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    43e8:	f994 300d 	ldrsb.w	r3, [r4, #13]
    43ec:	2b00      	cmp	r3, #0
    43ee:	dae8      	bge.n	43c2 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    43f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    43f4:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
    43f6:	4621      	mov	r1, r4
    43f8:	480a      	ldr	r0, [pc, #40]	; (4424 <z_impl_k_thread_suspend+0x80>)
    43fa:	f001 fee6 	bl	61ca <z_priq_dumb_remove>
}
    43fe:	e7e0      	b.n	43c2 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    4400:	4b07      	ldr	r3, [pc, #28]	; (4420 <z_impl_k_thread_suspend+0x7c>)
    4402:	689b      	ldr	r3, [r3, #8]
    4404:	42a3      	cmp	r3, r4
    4406:	d000      	beq.n	440a <z_impl_k_thread_suspend+0x66>
}
    4408:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    440a:	f04f 0320 	mov.w	r3, #32
    440e:	f3ef 8011 	mrs	r0, BASEPRI
    4412:	f383 8812 	msr	BASEPRI_MAX, r3
    4416:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    441a:	f001 fec1 	bl	61a0 <z_reschedule_irqlock>
    441e:	e7f3      	b.n	4408 <z_impl_k_thread_suspend+0x64>
    4420:	200008c8 	.word	0x200008c8
    4424:	200008e8 	.word	0x200008e8

00004428 <k_sched_unlock>:

void k_sched_unlock(void)
{
    4428:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    442a:	2300      	movs	r3, #0
    442c:	f04f 0220 	mov.w	r2, #32
    4430:	f3ef 8411 	mrs	r4, BASEPRI
    4434:	f382 8812 	msr	BASEPRI_MAX, r2
    4438:	f3bf 8f6f 	isb	sy
    443c:	b96b      	cbnz	r3, 445a <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    443e:	4b0c      	ldr	r3, [pc, #48]	; (4470 <k_sched_unlock+0x48>)
    4440:	689a      	ldr	r2, [r3, #8]
    4442:	7bd3      	ldrb	r3, [r2, #15]
    4444:	3301      	adds	r3, #1
    4446:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4448:	2000      	movs	r0, #0
    444a:	f7ff fe67 	bl	411c <update_cache>
	__asm__ volatile(
    444e:	f384 8811 	msr	BASEPRI, r4
    4452:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4456:	2301      	movs	r3, #1
    4458:	e7f0      	b.n	443c <k_sched_unlock+0x14>
	__asm__ volatile(
    445a:	f04f 0320 	mov.w	r3, #32
    445e:	f3ef 8011 	mrs	r0, BASEPRI
    4462:	f383 8812 	msr	BASEPRI_MAX, r3
    4466:	f3bf 8f6f 	isb	sy
    446a:	f001 fe99 	bl	61a0 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    446e:	bd10      	pop	{r4, pc}
    4470:	200008c8 	.word	0x200008c8

00004474 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    4474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    4476:	7b43      	ldrb	r3, [r0, #13]
    4478:	f013 0f08 	tst.w	r3, #8
    447c:	d145      	bne.n	450a <end_thread+0x96>
    447e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    4480:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4484:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    4488:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    448a:	f013 0f80 	tst.w	r3, #128	; 0x80
    448e:	d114      	bne.n	44ba <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
    4490:	68ab      	ldr	r3, [r5, #8]
    4492:	b15b      	cbz	r3, 44ac <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    4494:	4628      	mov	r0, r5
    4496:	f001 fe77 	bl	6188 <pended_on_thread>
    449a:	4629      	mov	r1, r5
    449c:	f001 fe95 	bl	61ca <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    44a0:	7b6b      	ldrb	r3, [r5, #13]
    44a2:	f023 0302 	bic.w	r3, r3, #2
    44a6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    44a8:	2300      	movs	r3, #0
    44aa:	60ab      	str	r3, [r5, #8]
    44ac:	f105 0018 	add.w	r0, r5, #24
    44b0:	f001 ff77 	bl	63a2 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    44b4:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    44b8:	e01c      	b.n	44f4 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    44ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    44be:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    44c0:	4601      	mov	r1, r0
    44c2:	4812      	ldr	r0, [pc, #72]	; (450c <end_thread+0x98>)
    44c4:	f001 fe81 	bl	61ca <z_priq_dumb_remove>
}
    44c8:	e7e2      	b.n	4490 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    44ca:	4620      	mov	r0, r4
    44cc:	f001 fe5c 	bl	6188 <pended_on_thread>
    44d0:	4621      	mov	r1, r4
    44d2:	f001 fe7a 	bl	61ca <z_priq_dumb_remove>
    44d6:	7b63      	ldrb	r3, [r4, #13]
    44d8:	f023 0302 	bic.w	r3, r3, #2
    44dc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    44de:	2600      	movs	r6, #0
    44e0:	60a6      	str	r6, [r4, #8]
    44e2:	f104 0018 	add.w	r0, r4, #24
    44e6:	f001 ff5c 	bl	63a2 <z_abort_timeout>
    44ea:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    44ee:	4620      	mov	r0, r4
    44f0:	f7ff feca 	bl	4288 <ready_thread>
	return list->head == list;
    44f4:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    44f6:	42bc      	cmp	r4, r7
    44f8:	d001      	beq.n	44fe <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    44fa:	2c00      	cmp	r4, #0
    44fc:	d1e5      	bne.n	44ca <end_thread+0x56>
		update_cache(1);
    44fe:	2001      	movs	r0, #1
    4500:	f7ff fe0c 	bl	411c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    4504:	4628      	mov	r0, r5
    4506:	f7ff fc33 	bl	3d70 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    450c:	200008e8 	.word	0x200008e8

00004510 <z_sched_init>:
{
    4510:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
    4512:	4b05      	ldr	r3, [pc, #20]	; (4528 <z_sched_init+0x18>)
    4514:	f103 0220 	add.w	r2, r3, #32
    4518:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
    451a:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    451c:	2100      	movs	r1, #0
    451e:	4608      	mov	r0, r1
    4520:	f7ff fd8c 	bl	403c <k_sched_time_slice_set>
}
    4524:	bd08      	pop	{r3, pc}
    4526:	bf00      	nop
    4528:	200008c8 	.word	0x200008c8

0000452c <z_impl_k_yield>:
{
    452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    452e:	f04f 0320 	mov.w	r3, #32
    4532:	f3ef 8611 	mrs	r6, BASEPRI
    4536:	f383 8812 	msr	BASEPRI_MAX, r3
    453a:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
    453e:	4c1c      	ldr	r4, [pc, #112]	; (45b0 <z_impl_k_yield+0x84>)
    4540:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4542:	7b4b      	ldrb	r3, [r1, #13]
    4544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4548:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    454a:	f104 0720 	add.w	r7, r4, #32
    454e:	4638      	mov	r0, r7
    4550:	f001 fe3b 	bl	61ca <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
    4554:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4556:	7b6b      	ldrb	r3, [r5, #13]
    4558:	f063 037f 	orn	r3, r3, #127	; 0x7f
    455c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    455e:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4560:	42bc      	cmp	r4, r7
    4562:	d023      	beq.n	45ac <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4564:	b16c      	cbz	r4, 4582 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4566:	4621      	mov	r1, r4
    4568:	4628      	mov	r0, r5
    456a:	f001 fe0f 	bl	618c <z_sched_prio_cmp>
    456e:	2800      	cmp	r0, #0
    4570:	dc16      	bgt.n	45a0 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4572:	b134      	cbz	r4, 4582 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    4574:	4b0e      	ldr	r3, [pc, #56]	; (45b0 <z_impl_k_yield+0x84>)
    4576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4578:	429c      	cmp	r4, r3
    457a:	d002      	beq.n	4582 <z_impl_k_yield+0x56>
    457c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    457e:	2c00      	cmp	r4, #0
    4580:	d1f0      	bne.n	4564 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    4582:	4b0b      	ldr	r3, [pc, #44]	; (45b0 <z_impl_k_yield+0x84>)
    4584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4586:	f103 0120 	add.w	r1, r3, #32
    458a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    458c:	606a      	str	r2, [r5, #4]
	tail->next = node;
    458e:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4590:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    4592:	2001      	movs	r0, #1
    4594:	f7ff fdc2 	bl	411c <update_cache>
    4598:	4630      	mov	r0, r6
    459a:	f7fc ffd3 	bl	1544 <arch_swap>
}
    459e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    45a0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    45a2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    45a4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    45a6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    45a8:	6065      	str	r5, [r4, #4]
}
    45aa:	e7f2      	b.n	4592 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    45ac:	2400      	movs	r4, #0
    45ae:	e7d9      	b.n	4564 <z_impl_k_yield+0x38>
    45b0:	200008c8 	.word	0x200008c8

000045b4 <z_tick_sleep>:
{
    45b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45b8:	4604      	mov	r4, r0
    45ba:	460d      	mov	r5, r1
	if (ticks == 0) {
    45bc:	ea54 0105 	orrs.w	r1, r4, r5
    45c0:	d037      	beq.n	4632 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    45c2:	f06f 0101 	mvn.w	r1, #1
    45c6:	1a0a      	subs	r2, r1, r0
    45c8:	f04f 31ff 	mov.w	r1, #4294967295
    45cc:	eb61 0305 	sbc.w	r3, r1, r5
    45d0:	2a01      	cmp	r2, #1
    45d2:	f173 0300 	sbcs.w	r3, r3, #0
    45d6:	db30      	blt.n	463a <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    45d8:	f06f 0601 	mvn.w	r6, #1
    45dc:	1a36      	subs	r6, r6, r0
    45de:	f04f 0320 	mov.w	r3, #32
    45e2:	f3ef 8811 	mrs	r8, BASEPRI
    45e6:	f383 8812 	msr	BASEPRI_MAX, r3
    45ea:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    45ee:	4f16      	ldr	r7, [pc, #88]	; (4648 <z_tick_sleep+0x94>)
    45f0:	68b8      	ldr	r0, [r7, #8]
    45f2:	4b16      	ldr	r3, [pc, #88]	; (464c <z_tick_sleep+0x98>)
    45f4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    45f6:	f7ff fea5 	bl	4344 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    45fa:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    45fc:	4622      	mov	r2, r4
    45fe:	462b      	mov	r3, r5
    4600:	4913      	ldr	r1, [pc, #76]	; (4650 <z_tick_sleep+0x9c>)
    4602:	3018      	adds	r0, #24
    4604:	f000 f8e2 	bl	47cc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4608:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    460a:	7b53      	ldrb	r3, [r2, #13]
    460c:	f043 0310 	orr.w	r3, r3, #16
    4610:	7353      	strb	r3, [r2, #13]
    4612:	4640      	mov	r0, r8
    4614:	f7fc ff96 	bl	1544 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4618:	2500      	movs	r5, #0
    461a:	f001 ff21 	bl	6460 <sys_clock_tick_get_32>
    461e:	1a34      	subs	r4, r6, r0
    4620:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    4624:	2c01      	cmp	r4, #1
    4626:	f175 0300 	sbcs.w	r3, r5, #0
    462a:	da0a      	bge.n	4642 <z_tick_sleep+0x8e>
	return 0;
    462c:	2000      	movs	r0, #0
}
    462e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    4632:	f7ff ff7b 	bl	452c <z_impl_k_yield>
		return 0;
    4636:	2000      	movs	r0, #0
    4638:	e7f9      	b.n	462e <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    463a:	f001 ff11 	bl	6460 <sys_clock_tick_get_32>
    463e:	1906      	adds	r6, r0, r4
    4640:	e7cd      	b.n	45de <z_tick_sleep+0x2a>
		return ticks;
    4642:	4620      	mov	r0, r4
    4644:	e7f3      	b.n	462e <z_tick_sleep+0x7a>
    4646:	bf00      	nop
    4648:	200008c8 	.word	0x200008c8
    464c:	200008f4 	.word	0x200008f4
    4650:	00006221 	.word	0x00006221

00004654 <z_impl_k_sleep>:
{
    4654:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4656:	f1b1 3fff 	cmp.w	r1, #4294967295
    465a:	bf08      	it	eq
    465c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    4660:	d01a      	beq.n	4698 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    4662:	f7ff ffa7 	bl	45b4 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    4666:	4604      	mov	r4, r0
    4668:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    466a:	0169      	lsls	r1, r5, #5
    466c:	0143      	lsls	r3, r0, #5
    466e:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    4672:	1a18      	subs	r0, r3, r0
    4674:	eb62 0305 	sbc.w	r3, r2, r5
    4678:	009a      	lsls	r2, r3, #2
    467a:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    467e:	0081      	lsls	r1, r0, #2
    4680:	4613      	mov	r3, r2
    4682:	1908      	adds	r0, r1, r4
    4684:	eb45 0303 	adc.w	r3, r5, r3
    4688:	00da      	lsls	r2, r3, #3
    468a:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    468e:	00c1      	lsls	r1, r0, #3
    4690:	0bc8      	lsrs	r0, r1, #15
    4692:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    4696:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    4698:	4b03      	ldr	r3, [pc, #12]	; (46a8 <z_impl_k_sleep+0x54>)
    469a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    469c:	f7ff fe82 	bl	43a4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    46a0:	f04f 30ff 	mov.w	r0, #4294967295
    46a4:	e7f7      	b.n	4696 <z_impl_k_sleep+0x42>
    46a6:	bf00      	nop
    46a8:	200008c8 	.word	0x200008c8

000046ac <z_impl_z_current_get>:
}
    46ac:	4b01      	ldr	r3, [pc, #4]	; (46b4 <z_impl_z_current_get+0x8>)
    46ae:	6898      	ldr	r0, [r3, #8]
    46b0:	4770      	bx	lr
    46b2:	bf00      	nop
    46b4:	200008c8 	.word	0x200008c8

000046b8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    46b8:	b538      	push	{r3, r4, r5, lr}
    46ba:	f04f 0320 	mov.w	r3, #32
    46be:	f3ef 8511 	mrs	r5, BASEPRI
    46c2:	f383 8812 	msr	BASEPRI_MAX, r3
    46c6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    46ca:	7b43      	ldrb	r3, [r0, #13]
    46cc:	f013 0f08 	tst.w	r3, #8
    46d0:	d004      	beq.n	46dc <z_thread_abort+0x24>
	__asm__ volatile(
    46d2:	f385 8811 	msr	BASEPRI, r5
    46d6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    46da:	bd38      	pop	{r3, r4, r5, pc}
    46dc:	4604      	mov	r4, r0
	end_thread(thread);
    46de:	f7ff fec9 	bl	4474 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    46e2:	4b08      	ldr	r3, [pc, #32]	; (4704 <z_thread_abort+0x4c>)
    46e4:	689b      	ldr	r3, [r3, #8]
    46e6:	42a3      	cmp	r3, r4
    46e8:	d004      	beq.n	46f4 <z_thread_abort+0x3c>
    46ea:	f385 8811 	msr	BASEPRI, r5
    46ee:	f3bf 8f6f 	isb	sy
    46f2:	e7f2      	b.n	46da <z_thread_abort+0x22>
    46f4:	f3ef 8305 	mrs	r3, IPSR
    46f8:	2b00      	cmp	r3, #0
    46fa:	d1f6      	bne.n	46ea <z_thread_abort+0x32>
    46fc:	4628      	mov	r0, r5
    46fe:	f7fc ff21 	bl	1544 <arch_swap>
	return ret;
    4702:	e7f2      	b.n	46ea <z_thread_abort+0x32>
    4704:	200008c8 	.word	0x200008c8

00004708 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    4708:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    470a:	4806      	ldr	r0, [pc, #24]	; (4724 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    470c:	4a06      	ldr	r2, [pc, #24]	; (4728 <z_data_copy+0x20>)
    470e:	1a12      	subs	r2, r2, r0
    4710:	4906      	ldr	r1, [pc, #24]	; (472c <z_data_copy+0x24>)
    4712:	f000 fe34 	bl	537e <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4716:	4a06      	ldr	r2, [pc, #24]	; (4730 <z_data_copy+0x28>)
    4718:	4906      	ldr	r1, [pc, #24]	; (4734 <z_data_copy+0x2c>)
    471a:	4807      	ldr	r0, [pc, #28]	; (4738 <z_data_copy+0x30>)
    471c:	f000 fe2f 	bl	537e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4720:	bd08      	pop	{r3, pc}
    4722:	bf00      	nop
    4724:	20000000 	.word	0x20000000
    4728:	200000b8 	.word	0x200000b8
    472c:	00006c44 	.word	0x00006c44
    4730:	00000000 	.word	0x00000000
    4734:	00006c44 	.word	0x00006c44
    4738:	20000000 	.word	0x20000000

0000473c <first>:
	return list->head == list;
    473c:	4b03      	ldr	r3, [pc, #12]	; (474c <first+0x10>)
    473e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4740:	4298      	cmp	r0, r3
    4742:	d000      	beq.n	4746 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    4744:	4770      	bx	lr
    4746:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    4748:	e7fc      	b.n	4744 <first+0x8>
    474a:	bf00      	nop
    474c:	20000098 	.word	0x20000098

00004750 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4750:	b130      	cbz	r0, 4760 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    4752:	4a04      	ldr	r2, [pc, #16]	; (4764 <next+0x14>)
    4754:	6852      	ldr	r2, [r2, #4]
    4756:	4290      	cmp	r0, r2
    4758:	d001      	beq.n	475e <next+0xe>
    475a:	6800      	ldr	r0, [r0, #0]
    475c:	4770      	bx	lr
    475e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4760:	4770      	bx	lr
    4762:	bf00      	nop
    4764:	20000098 	.word	0x20000098

00004768 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    4768:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    476a:	4b04      	ldr	r3, [pc, #16]	; (477c <elapsed+0x14>)
    476c:	681b      	ldr	r3, [r3, #0]
    476e:	b10b      	cbz	r3, 4774 <elapsed+0xc>
    4770:	2000      	movs	r0, #0
}
    4772:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4774:	f7fe fa0a 	bl	2b8c <sys_clock_elapsed>
    4778:	e7fb      	b.n	4772 <elapsed+0xa>
    477a:	bf00      	nop
    477c:	20000900 	.word	0x20000900

00004780 <next_timeout>:

static int32_t next_timeout(void)
{
    4780:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    4782:	f7ff ffdb 	bl	473c <first>
    4786:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    4788:	f7ff ffee 	bl	4768 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    478c:	b18c      	cbz	r4, 47b2 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    478e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    4792:	1a12      	subs	r2, r2, r0
    4794:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    4798:	2a01      	cmp	r2, #1
    479a:	f173 0100 	sbcs.w	r1, r3, #0
    479e:	db11      	blt.n	47c4 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    47a0:	4610      	mov	r0, r2
    47a2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    47a6:	f173 0300 	sbcs.w	r3, r3, #0
    47aa:	db04      	blt.n	47b6 <next_timeout+0x36>
    47ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    47b0:	e001      	b.n	47b6 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    47b2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    47b6:	4b04      	ldr	r3, [pc, #16]	; (47c8 <next_timeout+0x48>)
    47b8:	691b      	ldr	r3, [r3, #16]
    47ba:	b113      	cbz	r3, 47c2 <next_timeout+0x42>
    47bc:	4283      	cmp	r3, r0
    47be:	da00      	bge.n	47c2 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    47c0:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    47c2:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    47c4:	2000      	movs	r0, #0
    47c6:	e7f6      	b.n	47b6 <next_timeout+0x36>
    47c8:	200008c8 	.word	0x200008c8

000047cc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    47cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47d0:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    47d2:	f1b3 3fff 	cmp.w	r3, #4294967295
    47d6:	bf08      	it	eq
    47d8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    47dc:	f000 8096 	beq.w	490c <z_add_timeout+0x140>
    47e0:	4682      	mov	sl, r0
    47e2:	4614      	mov	r4, r2
    47e4:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    47e6:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    47e8:	2300      	movs	r3, #0
	__asm__ volatile(
    47ea:	f04f 0220 	mov.w	r2, #32
    47ee:	f3ef 8b11 	mrs	fp, BASEPRI
    47f2:	f382 8812 	msr	BASEPRI_MAX, r2
    47f6:	f3bf 8f6f 	isb	sy
    47fa:	e02e      	b.n	485a <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    47fc:	2201      	movs	r2, #1
    47fe:	2300      	movs	r3, #0
    4800:	e04b      	b.n	489a <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4802:	f7ff ffb1 	bl	4768 <elapsed>
    4806:	1822      	adds	r2, r4, r0
    4808:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    480c:	3201      	adds	r2, #1
    480e:	f143 0300 	adc.w	r3, r3, #0
    4812:	f8ca 2010 	str.w	r2, [sl, #16]
    4816:	f8ca 3014 	str.w	r3, [sl, #20]
    481a:	e042      	b.n	48a2 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    481c:	9b00      	ldr	r3, [sp, #0]
    481e:	1ac2      	subs	r2, r0, r3
    4820:	9b01      	ldr	r3, [sp, #4]
    4822:	eb61 0303 	sbc.w	r3, r1, r3
    4826:	f8cc 2010 	str.w	r2, [ip, #16]
    482a:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    482e:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    4832:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    4836:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    483a:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    483e:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    4842:	f1bc 0f00 	cmp.w	ip, #0
    4846:	d049      	beq.n	48dc <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4848:	f7ff ff78 	bl	473c <first>
    484c:	4582      	cmp	sl, r0
    484e:	d050      	beq.n	48f2 <z_add_timeout+0x126>
	__asm__ volatile(
    4850:	f38b 8811 	msr	BASEPRI, fp
    4854:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4858:	2301      	movs	r3, #1
    485a:	2b00      	cmp	r3, #0
    485c:	d156      	bne.n	490c <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    485e:	f06f 0301 	mvn.w	r3, #1
    4862:	ebb3 0804 	subs.w	r8, r3, r4
    4866:	f04f 30ff 	mov.w	r0, #4294967295
    486a:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    486e:	f1b8 0f00 	cmp.w	r8, #0
    4872:	f179 0300 	sbcs.w	r3, r9, #0
    4876:	dbc4      	blt.n	4802 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4878:	4a26      	ldr	r2, [pc, #152]	; (4914 <z_add_timeout+0x148>)
    487a:	6813      	ldr	r3, [r2, #0]
    487c:	6852      	ldr	r2, [r2, #4]
    487e:	18e3      	adds	r3, r4, r3
    4880:	eb45 0202 	adc.w	r2, r5, r2
    4884:	f06f 0101 	mvn.w	r1, #1
    4888:	1ace      	subs	r6, r1, r3
    488a:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    488e:	4632      	mov	r2, r6
    4890:	463b      	mov	r3, r7
    4892:	2e01      	cmp	r6, #1
    4894:	f177 0100 	sbcs.w	r1, r7, #0
    4898:	dbb0      	blt.n	47fc <z_add_timeout+0x30>
    489a:	f8ca 2010 	str.w	r2, [sl, #16]
    489e:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    48a2:	f7ff ff4b 	bl	473c <first>
    48a6:	4684      	mov	ip, r0
    48a8:	f1bc 0f00 	cmp.w	ip, #0
    48ac:	d0c9      	beq.n	4842 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    48ae:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    48b2:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    48b6:	e9cd 2300 	strd	r2, r3, [sp]
    48ba:	4282      	cmp	r2, r0
    48bc:	418b      	sbcs	r3, r1
    48be:	dbad      	blt.n	481c <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    48c0:	9b00      	ldr	r3, [sp, #0]
    48c2:	1a1a      	subs	r2, r3, r0
    48c4:	9b01      	ldr	r3, [sp, #4]
    48c6:	eb63 0301 	sbc.w	r3, r3, r1
    48ca:	f8ca 2010 	str.w	r2, [sl, #16]
    48ce:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    48d2:	4660      	mov	r0, ip
    48d4:	f7ff ff3c 	bl	4750 <next>
    48d8:	4684      	mov	ip, r0
    48da:	e7e5      	b.n	48a8 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    48dc:	4b0e      	ldr	r3, [pc, #56]	; (4918 <z_add_timeout+0x14c>)
    48de:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    48e0:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    48e4:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    48e8:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    48ec:	f8c3 a004 	str.w	sl, [r3, #4]
}
    48f0:	e7aa      	b.n	4848 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    48f2:	f7ff ff45 	bl	4780 <next_timeout>

			if (next_time == 0 ||
    48f6:	4603      	mov	r3, r0
    48f8:	b118      	cbz	r0, 4902 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    48fa:	4a08      	ldr	r2, [pc, #32]	; (491c <z_add_timeout+0x150>)
    48fc:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    48fe:	4282      	cmp	r2, r0
    4900:	d0a6      	beq.n	4850 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    4902:	2100      	movs	r1, #0
    4904:	4618      	mov	r0, r3
    4906:	f7fe f90d 	bl	2b24 <sys_clock_set_timeout>
    490a:	e7a1      	b.n	4850 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    490c:	b003      	add	sp, #12
    490e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4912:	bf00      	nop
    4914:	20000238 	.word	0x20000238
    4918:	20000098 	.word	0x20000098
    491c:	200008c8 	.word	0x200008c8

00004920 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4922:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4924:	f7ff fc64 	bl	41f0 <z_time_slice>
	__asm__ volatile(
    4928:	f04f 0320 	mov.w	r3, #32
    492c:	f3ef 8511 	mrs	r5, BASEPRI
    4930:	f383 8812 	msr	BASEPRI_MAX, r3
    4934:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4938:	4b28      	ldr	r3, [pc, #160]	; (49dc <sys_clock_announce+0xbc>)
    493a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    493c:	f7ff fefe 	bl	473c <first>
    4940:	4604      	mov	r4, r0
    4942:	b350      	cbz	r0, 499a <sys_clock_announce+0x7a>
    4944:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    4948:	4b24      	ldr	r3, [pc, #144]	; (49dc <sys_clock_announce+0xbc>)
    494a:	681b      	ldr	r3, [r3, #0]
    494c:	17d9      	asrs	r1, r3, #31
    494e:	42b3      	cmp	r3, r6
    4950:	eb71 0207 	sbcs.w	r2, r1, r7
    4954:	db21      	blt.n	499a <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4956:	4a22      	ldr	r2, [pc, #136]	; (49e0 <sys_clock_announce+0xc0>)
    4958:	e9d2 0100 	ldrd	r0, r1, [r2]
    495c:	1980      	adds	r0, r0, r6
    495e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    4962:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    4966:	1b9b      	subs	r3, r3, r6
    4968:	4a1c      	ldr	r2, [pc, #112]	; (49dc <sys_clock_announce+0xbc>)
    496a:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    496c:	2200      	movs	r2, #0
    496e:	2300      	movs	r3, #0
    4970:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    4974:	4620      	mov	r0, r4
    4976:	f001 fcfd 	bl	6374 <remove_timeout>
	__asm__ volatile(
    497a:	f385 8811 	msr	BASEPRI, r5
    497e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4982:	68a3      	ldr	r3, [r4, #8]
    4984:	4620      	mov	r0, r4
    4986:	4798      	blx	r3
	__asm__ volatile(
    4988:	f04f 0320 	mov.w	r3, #32
    498c:	f3ef 8511 	mrs	r5, BASEPRI
    4990:	f383 8812 	msr	BASEPRI_MAX, r3
    4994:	f3bf 8f6f 	isb	sy
    4998:	e7d0      	b.n	493c <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    499a:	b144      	cbz	r4, 49ae <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    499c:	4b0f      	ldr	r3, [pc, #60]	; (49dc <sys_clock_announce+0xbc>)
    499e:	6819      	ldr	r1, [r3, #0]
    49a0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    49a4:	1a52      	subs	r2, r2, r1
    49a6:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    49aa:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    49ae:	480c      	ldr	r0, [pc, #48]	; (49e0 <sys_clock_announce+0xc0>)
    49b0:	490a      	ldr	r1, [pc, #40]	; (49dc <sys_clock_announce+0xbc>)
    49b2:	680c      	ldr	r4, [r1, #0]
    49b4:	e9d0 2300 	ldrd	r2, r3, [r0]
    49b8:	1912      	adds	r2, r2, r4
    49ba:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    49be:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    49c2:	2400      	movs	r4, #0
    49c4:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    49c6:	f7ff fedb 	bl	4780 <next_timeout>
    49ca:	4621      	mov	r1, r4
    49cc:	f7fe f8aa 	bl	2b24 <sys_clock_set_timeout>
	__asm__ volatile(
    49d0:	f385 8811 	msr	BASEPRI, r5
    49d4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    49d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49da:	bf00      	nop
    49dc:	20000900 	.word	0x20000900
    49e0:	20000238 	.word	0x20000238

000049e4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    49e4:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    49e6:	2100      	movs	r1, #0
	__asm__ volatile(
    49e8:	f04f 0320 	mov.w	r3, #32
    49ec:	f3ef 8411 	mrs	r4, BASEPRI
    49f0:	f383 8812 	msr	BASEPRI_MAX, r3
    49f4:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    49f8:	2200      	movs	r2, #0
    49fa:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    49fc:	b969      	cbnz	r1, 4a1a <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    49fe:	f7fe f8c5 	bl	2b8c <sys_clock_elapsed>
    4a02:	4b07      	ldr	r3, [pc, #28]	; (4a20 <sys_clock_tick_get+0x3c>)
    4a04:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a08:	1812      	adds	r2, r2, r0
    4a0a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    4a0e:	f384 8811 	msr	BASEPRI, r4
    4a12:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4a16:	2101      	movs	r1, #1
    4a18:	e7f0      	b.n	49fc <sys_clock_tick_get+0x18>
	}
	return t;
}
    4a1a:	4610      	mov	r0, r2
    4a1c:	4619      	mov	r1, r3
    4a1e:	bd10      	pop	{r4, pc}
    4a20:	20000238 	.word	0x20000238

00004a24 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    4a24:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4a26:	4a03      	ldr	r2, [pc, #12]	; (4a34 <boot_banner+0x10>)
    4a28:	4903      	ldr	r1, [pc, #12]	; (4a38 <boot_banner+0x14>)
    4a2a:	4804      	ldr	r0, [pc, #16]	; (4a3c <boot_banner+0x18>)
    4a2c:	f000 f8b3 	bl	4b96 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    4a30:	bd08      	pop	{r3, pc}
    4a32:	bf00      	nop
    4a34:	00006988 	.word	0x00006988
    4a38:	00006c10 	.word	0x00006c10
    4a3c:	00006c1c 	.word	0x00006c1c

00004a40 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    4a40:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    4a42:	4c06      	ldr	r4, [pc, #24]	; (4a5c <statics_init+0x1c>)
    4a44:	4b06      	ldr	r3, [pc, #24]	; (4a60 <statics_init+0x20>)
    4a46:	429c      	cmp	r4, r3
    4a48:	d206      	bcs.n	4a58 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    4a4a:	68a2      	ldr	r2, [r4, #8]
    4a4c:	6861      	ldr	r1, [r4, #4]
    4a4e:	4620      	mov	r0, r4
    4a50:	f001 fd14 	bl	647c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    4a54:	3414      	adds	r4, #20
    4a56:	e7f5      	b.n	4a44 <statics_init+0x4>
		}
	}
	return 0;
}
    4a58:	2000      	movs	r0, #0
    4a5a:	bd10      	pop	{r4, pc}
    4a5c:	200000b8 	.word	0x200000b8
    4a60:	200000b8 	.word	0x200000b8

00004a64 <z_impl_gpio_pin_configure>:
{
    4a64:	b570      	push	{r4, r5, r6, lr}
    4a66:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    4a68:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    4a6a:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    4a6c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
    4a70:	d007      	beq.n	4a82 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    4a72:	f412 6f40 	tst.w	r2, #3072	; 0xc00
    4a76:	d004      	beq.n	4a82 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4a78:	f012 0f01 	tst.w	r2, #1
    4a7c:	d001      	beq.n	4a82 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    4a7e:	f482 6340 	eor.w	r3, r2, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    4a82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4a86:	f013 0f01 	tst.w	r3, #1
    4a8a:	d008      	beq.n	4a9e <z_impl_gpio_pin_configure+0x3a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4a8c:	2301      	movs	r3, #1
    4a8e:	fa03 f601 	lsl.w	r6, r3, r1
    4a92:	6823      	ldr	r3, [r4, #0]
    4a94:	4333      	orrs	r3, r6
    4a96:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    4a98:	682b      	ldr	r3, [r5, #0]
    4a9a:	4798      	blx	r3
}
    4a9c:	bd70      	pop	{r4, r5, r6, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4a9e:	2301      	movs	r3, #1
    4aa0:	fa03 f601 	lsl.w	r6, r3, r1
    4aa4:	6823      	ldr	r3, [r4, #0]
    4aa6:	ea23 0306 	bic.w	r3, r3, r6
    4aaa:	6023      	str	r3, [r4, #0]
    4aac:	e7f4      	b.n	4a98 <z_impl_gpio_pin_configure+0x34>

00004aae <StateMachine_Handler>:
event_t StateMachine_Handler(KitchenTimer_t * MainObject, GenericEvent_t * Event){
    4aae:	b508      	push	{r3, lr}
switch (MainObject->CurrentState){
    4ab0:	7903      	ldrb	r3, [r0, #4]
    4ab2:	2b04      	cmp	r3, #4
    4ab4:	d813      	bhi.n	4ade <StateMachine_Handler+0x30>
    4ab6:	e8df f003 	tbb	[pc, r3]
    4aba:	0f03      	.short	0x0f03
    4abc:	0c06      	.short	0x0c06
    4abe:	09          	.byte	0x09
    4abf:	00          	.byte	0x00
	return IDLE_Handler(MainObject,Event);
    4ac0:	f7fb fd16 	bl	4f0 <IDLE_Handler>
}
    4ac4:	bd08      	pop	{r3, pc}
	return COUNTDOWN_Handler(MainObject,Event);
    4ac6:	f7fb fcaf 	bl	428 <COUNTDOWN_Handler>
    4aca:	e7fb      	b.n	4ac4 <StateMachine_Handler+0x16>
	return ALARM_Handler(MainObject,Event);
    4acc:	f7fb fc80 	bl	3d0 <ALARM_Handler>
    4ad0:	e7f8      	b.n	4ac4 <StateMachine_Handler+0x16>
	return PAUSE_Handler(MainObject,Event);
    4ad2:	f7fb fcd9 	bl	488 <PAUSE_Handler>
    4ad6:	e7f5      	b.n	4ac4 <StateMachine_Handler+0x16>
	return SET_TIME_Handler(MainObject,Event);
    4ad8:	f7fb fd26 	bl	528 <SET_TIME_Handler>
    4adc:	e7f2      	b.n	4ac4 <StateMachine_Handler+0x16>
switch (MainObject->CurrentState){
    4ade:	2001      	movs	r0, #1
    4ae0:	e7f0      	b.n	4ac4 <StateMachine_Handler+0x16>

00004ae2 <Event_dispatcher>:
void Event_dispatcher(KitchenTimer_t * MainObject,GenericEvent_t  * DispatchEvent){
    4ae2:	b570      	push	{r4, r5, r6, lr}
    4ae4:	b082      	sub	sp, #8
    4ae6:	4604      	mov	r4, r0
  PreTransitionState = MainObject->CurrentState;
    4ae8:	7905      	ldrb	r5, [r0, #4]
  HandledStatus = StateMachine_Handler(MainObject,DispatchEvent);
    4aea:	f7ff ffe0 	bl	4aae <StateMachine_Handler>
  if(HandledStatus == EVENT_TRANISITON){
    4aee:	2806      	cmp	r0, #6
    4af0:	d001      	beq.n	4af6 <Event_dispatcher+0x14>
} 
    4af2:	b002      	add	sp, #8
    4af4:	bd70      	pop	{r4, r5, r6, pc}
    PostTransitionState = MainObject->CurrentState;
    4af6:	7926      	ldrb	r6, [r4, #4]
    TransitionEvent.Signal = Exit;
    4af8:	2301      	movs	r3, #1
    4afa:	f88d 3004 	strb.w	r3, [sp, #4]
    MainObject->CurrentState = PreTransitionState;
    4afe:	7125      	strb	r5, [r4, #4]
    StateMachine_Handler(MainObject,&TransitionEvent);
    4b00:	a901      	add	r1, sp, #4
    4b02:	4620      	mov	r0, r4
    4b04:	f7ff ffd3 	bl	4aae <StateMachine_Handler>
    TransitionEvent.Signal = Entry;
    4b08:	2300      	movs	r3, #0
    4b0a:	f88d 3004 	strb.w	r3, [sp, #4]
    MainObject->CurrentState = PostTransitionState;
    4b0e:	7126      	strb	r6, [r4, #4]
    StateMachine_Handler(MainObject,&TransitionEvent);
    4b10:	a901      	add	r1, sp, #4
    4b12:	4620      	mov	r0, r4
    4b14:	f7ff ffcb 	bl	4aae <StateMachine_Handler>
} 
    4b18:	e7eb      	b.n	4af2 <Event_dispatcher+0x10>

00004b1a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4b1a:	4602      	mov	r2, r0
    4b1c:	b158      	cbz	r0, 4b36 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4b1e:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4b20:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4b24:	2b01      	cmp	r3, #1
    4b26:	d003      	beq.n	4b30 <sys_notify_validate+0x16>
    4b28:	2b03      	cmp	r3, #3
    4b2a:	d107      	bne.n	4b3c <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4b2c:	6803      	ldr	r3, [r0, #0]
    4b2e:	b143      	cbz	r3, 4b42 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4b30:	2000      	movs	r0, #0
    4b32:	6090      	str	r0, [r2, #8]
    4b34:	4770      	bx	lr
		return -EINVAL;
    4b36:	f06f 0015 	mvn.w	r0, #21
    4b3a:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    4b3c:	f06f 0015 	mvn.w	r0, #21
    4b40:	4770      	bx	lr
			rv = -EINVAL;
    4b42:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4b46:	4770      	bx	lr

00004b48 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    4b48:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4b4a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4b4c:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4b50:	6081      	str	r1, [r0, #8]
	switch (method) {
    4b52:	2a03      	cmp	r2, #3
    4b54:	d103      	bne.n	4b5e <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4b56:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4b58:	2200      	movs	r2, #0
    4b5a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4b5c:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    4b5e:	2000      	movs	r0, #0
    4b60:	e7fa      	b.n	4b58 <sys_notify_finalize+0x10>

00004b62 <arch_printk_char_out>:
}
    4b62:	2000      	movs	r0, #0
    4b64:	4770      	bx	lr

00004b66 <str_out>:
{
    4b66:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    4b68:	680c      	ldr	r4, [r1, #0]
    4b6a:	b154      	cbz	r4, 4b82 <str_out+0x1c>
    4b6c:	688a      	ldr	r2, [r1, #8]
    4b6e:	684b      	ldr	r3, [r1, #4]
    4b70:	429a      	cmp	r2, r3
    4b72:	da06      	bge.n	4b82 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    4b74:	3b01      	subs	r3, #1
    4b76:	429a      	cmp	r2, r3
    4b78:	d008      	beq.n	4b8c <str_out+0x26>
		ctx->str[ctx->count++] = c;
    4b7a:	1c53      	adds	r3, r2, #1
    4b7c:	608b      	str	r3, [r1, #8]
    4b7e:	54a0      	strb	r0, [r4, r2]
    4b80:	e002      	b.n	4b88 <str_out+0x22>
		ctx->count++;
    4b82:	688b      	ldr	r3, [r1, #8]
    4b84:	3301      	adds	r3, #1
    4b86:	608b      	str	r3, [r1, #8]
}
    4b88:	bc10      	pop	{r4}
    4b8a:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    4b8c:	1c53      	adds	r3, r2, #1
    4b8e:	608b      	str	r3, [r1, #8]
    4b90:	2300      	movs	r3, #0
    4b92:	54a3      	strb	r3, [r4, r2]
    4b94:	e7f8      	b.n	4b88 <str_out+0x22>

00004b96 <printk>:
{
    4b96:	b40f      	push	{r0, r1, r2, r3}
    4b98:	b500      	push	{lr}
    4b9a:	b083      	sub	sp, #12
    4b9c:	a904      	add	r1, sp, #16
    4b9e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    4ba2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    4ba4:	f7fb fdfc 	bl	7a0 <vprintk>
}
    4ba8:	b003      	add	sp, #12
    4baa:	f85d eb04 	ldr.w	lr, [sp], #4
    4bae:	b004      	add	sp, #16
    4bb0:	4770      	bx	lr

00004bb2 <snprintk>:
{
    4bb2:	b40c      	push	{r2, r3}
    4bb4:	b500      	push	{lr}
    4bb6:	b083      	sub	sp, #12
    4bb8:	ab04      	add	r3, sp, #16
    4bba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    4bbe:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    4bc0:	f7fb fdfe 	bl	7c0 <vsnprintk>
}
    4bc4:	b003      	add	sp, #12
    4bc6:	f85d eb04 	ldr.w	lr, [sp], #4
    4bca:	b002      	add	sp, #8
    4bcc:	4770      	bx	lr

00004bce <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    4bce:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4bd2:	8b01      	ldrh	r1, [r0, #24]
    4bd4:	f021 0107 	bic.w	r1, r1, #7
    4bd8:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    4bda:	8301      	strh	r1, [r0, #24]
}
    4bdc:	4770      	bx	lr

00004bde <notify_monitors>:
{
    4bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4be2:	4606      	mov	r6, r0
    4be4:	460f      	mov	r7, r1
    4be6:	4690      	mov	r8, r2
	return list->head;
    4be8:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4bea:	b119      	cbz	r1, 4bf4 <notify_monitors+0x16>
    4bec:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    4bee:	b131      	cbz	r1, 4bfe <notify_monitors+0x20>
	return node->next;
    4bf0:	680c      	ldr	r4, [r1, #0]
    4bf2:	e004      	b.n	4bfe <notify_monitors+0x20>
    4bf4:	460c      	mov	r4, r1
    4bf6:	e002      	b.n	4bfe <notify_monitors+0x20>
    4bf8:	4623      	mov	r3, r4
    4bfa:	4621      	mov	r1, r4
    4bfc:	461c      	mov	r4, r3
    4bfe:	b159      	cbz	r1, 4c18 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    4c00:	684d      	ldr	r5, [r1, #4]
    4c02:	4643      	mov	r3, r8
    4c04:	463a      	mov	r2, r7
    4c06:	4630      	mov	r0, r6
    4c08:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4c0a:	2c00      	cmp	r4, #0
    4c0c:	d0f4      	beq.n	4bf8 <notify_monitors+0x1a>
    4c0e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    4c10:	2c00      	cmp	r4, #0
    4c12:	d0f2      	beq.n	4bfa <notify_monitors+0x1c>
	return node->next;
    4c14:	6823      	ldr	r3, [r4, #0]
    4c16:	e7f0      	b.n	4bfa <notify_monitors+0x1c>
}
    4c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004c1c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4c1c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4c1e:	f013 0307 	ands.w	r3, r3, #7
    4c22:	d103      	bne.n	4c2c <process_recheck+0x10>
	return list->head;
    4c24:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    4c26:	b10a      	cbz	r2, 4c2c <process_recheck+0x10>
		evt = EVT_START;
    4c28:	2003      	movs	r0, #3
    4c2a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4c2c:	2b02      	cmp	r3, #2
    4c2e:	d003      	beq.n	4c38 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    4c30:	2b01      	cmp	r3, #1
    4c32:	d006      	beq.n	4c42 <process_recheck+0x26>
	int evt = EVT_NOP;
    4c34:	2000      	movs	r0, #0
    4c36:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    4c38:	8b42      	ldrh	r2, [r0, #26]
    4c3a:	2a00      	cmp	r2, #0
    4c3c:	d1f8      	bne.n	4c30 <process_recheck+0x14>
		evt = EVT_STOP;
    4c3e:	2004      	movs	r0, #4
    4c40:	4770      	bx	lr
    4c42:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    4c44:	b10b      	cbz	r3, 4c4a <process_recheck+0x2e>
		evt = EVT_RESET;
    4c46:	2005      	movs	r0, #5
}
    4c48:	4770      	bx	lr
	int evt = EVT_NOP;
    4c4a:	2000      	movs	r0, #0
    4c4c:	4770      	bx	lr

00004c4e <process_complete>:
{
    4c4e:	b538      	push	{r3, r4, r5, lr}
    4c50:	4604      	mov	r4, r0
    4c52:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4c54:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    4c56:	2a00      	cmp	r2, #0
    4c58:	db07      	blt.n	4c6a <process_complete+0x1c>
    4c5a:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4c5e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4c60:	2a01      	cmp	r2, #1
    4c62:	d90e      	bls.n	4c82 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4c64:	2b04      	cmp	r3, #4
    4c66:	d032      	beq.n	4cce <process_complete+0x80>
}
    4c68:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    4c6a:	e9d0 0100 	ldrd	r0, r1, [r0]
    4c6e:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    4c72:	2300      	movs	r3, #0
    4c74:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    4c76:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    4c78:	2101      	movs	r1, #1
    4c7a:	4620      	mov	r0, r4
    4c7c:	f7ff ffa7 	bl	4bce <set_state>
    4c80:	e7f2      	b.n	4c68 <process_complete+0x1a>
		*clients = mgr->clients;
    4c82:	e9d0 0100 	ldrd	r0, r1, [r0]
    4c86:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    4c8a:	2200      	movs	r2, #0
    4c8c:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    4c8e:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    4c90:	2b06      	cmp	r3, #6
    4c92:	d117      	bne.n	4cc4 <process_complete+0x76>
	return list->head;
    4c94:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4c96:	b13b      	cbz	r3, 4ca8 <process_complete+0x5a>
				mgr->refs += 1U;
    4c98:	8b62      	ldrh	r2, [r4, #26]
    4c9a:	3201      	adds	r2, #1
    4c9c:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d0f9      	beq.n	4c96 <process_complete+0x48>
	return node->next;
    4ca2:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	d1f6      	bne.n	4c96 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    4ca8:	2102      	movs	r1, #2
    4caa:	4620      	mov	r0, r4
    4cac:	f7ff ff8f 	bl	4bce <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    4cb0:	4620      	mov	r0, r4
    4cb2:	f7ff ffb3 	bl	4c1c <process_recheck>
    4cb6:	2800      	cmp	r0, #0
    4cb8:	d0d6      	beq.n	4c68 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4cba:	8b23      	ldrh	r3, [r4, #24]
    4cbc:	f043 0320 	orr.w	r3, r3, #32
    4cc0:	8323      	strh	r3, [r4, #24]
    4cc2:	e7d1      	b.n	4c68 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    4cc4:	2100      	movs	r1, #0
    4cc6:	4620      	mov	r0, r4
    4cc8:	f7ff ff81 	bl	4bce <set_state>
    4ccc:	e7f0      	b.n	4cb0 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    4cce:	2100      	movs	r1, #0
    4cd0:	f7ff ff7d 	bl	4bce <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    4cd4:	4620      	mov	r0, r4
    4cd6:	f7ff ffa1 	bl	4c1c <process_recheck>
    4cda:	2800      	cmp	r0, #0
    4cdc:	d0c4      	beq.n	4c68 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4cde:	8b23      	ldrh	r3, [r4, #24]
    4ce0:	f043 0320 	orr.w	r3, r3, #32
    4ce4:	8323      	strh	r3, [r4, #24]
}
    4ce6:	e7bf      	b.n	4c68 <process_complete+0x1a>

00004ce8 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    4ce8:	b158      	cbz	r0, 4d02 <validate_args+0x1a>
{
    4cea:	b510      	push	{r4, lr}
    4cec:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4cee:	b159      	cbz	r1, 4d08 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    4cf0:	1d08      	adds	r0, r1, #4
    4cf2:	f7ff ff12 	bl	4b1a <sys_notify_validate>
	if ((rv == 0)
    4cf6:	b918      	cbnz	r0, 4d00 <validate_args+0x18>
	    && ((cli->notify.flags
    4cf8:	68a3      	ldr	r3, [r4, #8]
    4cfa:	f033 0303 	bics.w	r3, r3, #3
    4cfe:	d106      	bne.n	4d0e <validate_args+0x26>
}
    4d00:	bd10      	pop	{r4, pc}
		return -EINVAL;
    4d02:	f06f 0015 	mvn.w	r0, #21
}
    4d06:	4770      	bx	lr
		return -EINVAL;
    4d08:	f06f 0015 	mvn.w	r0, #21
    4d0c:	e7f8      	b.n	4d00 <validate_args+0x18>
		rv = -EINVAL;
    4d0e:	f06f 0015 	mvn.w	r0, #21
    4d12:	e7f5      	b.n	4d00 <validate_args+0x18>

00004d14 <notify_one>:
{
    4d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d18:	4607      	mov	r7, r0
    4d1a:	460c      	mov	r4, r1
    4d1c:	4616      	mov	r6, r2
    4d1e:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4d20:	4619      	mov	r1, r3
    4d22:	1d20      	adds	r0, r4, #4
    4d24:	f7ff ff10 	bl	4b48 <sys_notify_finalize>
	if (cb) {
    4d28:	b128      	cbz	r0, 4d36 <notify_one+0x22>
    4d2a:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    4d2c:	462b      	mov	r3, r5
    4d2e:	4632      	mov	r2, r6
    4d30:	4621      	mov	r1, r4
    4d32:	4638      	mov	r0, r7
    4d34:	47c0      	blx	r8
}
    4d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004d3a <notify_all>:
{
    4d3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d3e:	4681      	mov	r9, r0
    4d40:	460c      	mov	r4, r1
    4d42:	4690      	mov	r8, r2
    4d44:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    4d46:	e005      	b.n	4d54 <notify_all+0x1a>
	list->tail = node;
    4d48:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    4d4a:	463b      	mov	r3, r7
    4d4c:	4642      	mov	r2, r8
    4d4e:	4648      	mov	r0, r9
    4d50:	f7ff ffe0 	bl	4d14 <notify_one>
	return list->head;
    4d54:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    4d56:	b129      	cbz	r1, 4d64 <notify_all+0x2a>
	return node->next;
    4d58:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    4d5a:	6025      	str	r5, [r4, #0]
	return list->tail;
    4d5c:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4d5e:	428e      	cmp	r6, r1
    4d60:	d1f3      	bne.n	4d4a <notify_all+0x10>
    4d62:	e7f1      	b.n	4d48 <notify_all+0xe>
}
    4d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004d68 <transition_complete>:
{
    4d68:	b510      	push	{r4, lr}
	__asm__ volatile(
    4d6a:	f04f 0420 	mov.w	r4, #32
    4d6e:	f3ef 8211 	mrs	r2, BASEPRI
    4d72:	f384 8812 	msr	BASEPRI_MAX, r4
    4d76:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4d7a:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    4d7c:	2101      	movs	r1, #1
    4d7e:	f7fb fd35 	bl	7ec <process_event>
}
    4d82:	bd10      	pop	{r4, pc}

00004d84 <onoff_manager_init>:
	if ((mgr == NULL)
    4d84:	4603      	mov	r3, r0
    4d86:	b168      	cbz	r0, 4da4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4d88:	b179      	cbz	r1, 4daa <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    4d8a:	680a      	ldr	r2, [r1, #0]
    4d8c:	b182      	cbz	r2, 4db0 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    4d8e:	684a      	ldr	r2, [r1, #4]
    4d90:	b18a      	cbz	r2, 4db6 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4d92:	2000      	movs	r0, #0
    4d94:	6018      	str	r0, [r3, #0]
    4d96:	6058      	str	r0, [r3, #4]
    4d98:	6098      	str	r0, [r3, #8]
    4d9a:	60d8      	str	r0, [r3, #12]
    4d9c:	6158      	str	r0, [r3, #20]
    4d9e:	6198      	str	r0, [r3, #24]
    4da0:	6119      	str	r1, [r3, #16]
	return 0;
    4da2:	4770      	bx	lr
		return -EINVAL;
    4da4:	f06f 0015 	mvn.w	r0, #21
    4da8:	4770      	bx	lr
    4daa:	f06f 0015 	mvn.w	r0, #21
    4dae:	4770      	bx	lr
    4db0:	f06f 0015 	mvn.w	r0, #21
    4db4:	4770      	bx	lr
    4db6:	f06f 0015 	mvn.w	r0, #21
}
    4dba:	4770      	bx	lr

00004dbc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dbe:	4604      	mov	r4, r0
    4dc0:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4dc2:	f7ff ff91 	bl	4ce8 <validate_args>

	if (rv < 0) {
    4dc6:	1e06      	subs	r6, r0, #0
    4dc8:	db37      	blt.n	4e3a <onoff_request+0x7e>
    4dca:	f04f 0320 	mov.w	r3, #32
    4dce:	f3ef 8211 	mrs	r2, BASEPRI
    4dd2:	f383 8812 	msr	BASEPRI_MAX, r3
    4dd6:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4dda:	8b25      	ldrh	r5, [r4, #24]
    4ddc:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4de0:	8b63      	ldrh	r3, [r4, #26]
    4de2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4de6:	428b      	cmp	r3, r1
    4de8:	d02f      	beq.n	4e4a <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    4dea:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    4dec:	2d02      	cmp	r5, #2
    4dee:	d00c      	beq.n	4e0a <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    4df0:	b18d      	cbz	r5, 4e16 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    4df2:	2d04      	cmp	r5, #4
    4df4:	d00f      	beq.n	4e16 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    4df6:	2d06      	cmp	r5, #6
    4df8:	d00d      	beq.n	4e16 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    4dfa:	2d05      	cmp	r5, #5
    4dfc:	d01f      	beq.n	4e3e <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    4dfe:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    4e02:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    4e04:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    4e06:	4608      	mov	r0, r1
    4e08:	e00a      	b.n	4e20 <onoff_request+0x64>
		mgr->refs += 1U;
    4e0a:	3301      	adds	r3, #1
    4e0c:	8363      	strh	r3, [r4, #26]
		notify = true;
    4e0e:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    4e10:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    4e12:	4618      	mov	r0, r3
    4e14:	e004      	b.n	4e20 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    4e16:	fab5 f385 	clz	r3, r5
    4e1a:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    4e1c:	2100      	movs	r1, #0
		add_client = true;
    4e1e:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    4e20:	b128      	cbz	r0, 4e2e <onoff_request+0x72>
	parent->next = child;
    4e22:	2000      	movs	r0, #0
    4e24:	6038      	str	r0, [r7, #0]
	return list->tail;
    4e26:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    4e28:	b1a8      	cbz	r0, 4e56 <onoff_request+0x9a>
	parent->next = child;
    4e2a:	6007      	str	r7, [r0, #0]
	list->tail = node;
    4e2c:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    4e2e:	b9ab      	cbnz	r3, 4e5c <onoff_request+0xa0>
	__asm__ volatile(
    4e30:	f382 8811 	msr	BASEPRI, r2
    4e34:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4e38:	b9a9      	cbnz	r1, 4e66 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    4e3a:	4630      	mov	r0, r6
    4e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    4e3e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    4e42:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    4e44:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    4e46:	4608      	mov	r0, r1
    4e48:	e7ea      	b.n	4e20 <onoff_request+0x64>
		rv = -EAGAIN;
    4e4a:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    4e4e:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    4e50:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    4e52:	4608      	mov	r0, r1
    4e54:	e7e4      	b.n	4e20 <onoff_request+0x64>
    4e56:	6067      	str	r7, [r4, #4]
	list->head = node;
    4e58:	6027      	str	r7, [r4, #0]
}
    4e5a:	e7e8      	b.n	4e2e <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    4e5c:	2102      	movs	r1, #2
    4e5e:	4620      	mov	r0, r4
    4e60:	f7fb fcc4 	bl	7ec <process_event>
    4e64:	e7e9      	b.n	4e3a <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    4e66:	2300      	movs	r3, #0
    4e68:	462a      	mov	r2, r5
    4e6a:	4639      	mov	r1, r7
    4e6c:	4620      	mov	r0, r4
    4e6e:	f7ff ff51 	bl	4d14 <notify_one>
    4e72:	e7e2      	b.n	4e3a <onoff_request+0x7e>

00004e74 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4e74:	b508      	push	{r3, lr}
    4e76:	4604      	mov	r4, r0
    4e78:	4608      	mov	r0, r1
    4e7a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4e7c:	461a      	mov	r2, r3
    4e7e:	47a0      	blx	r4
	return z_impl_z_current_get();
    4e80:	f7ff fc14 	bl	46ac <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    4e84:	f7fc fde8 	bl	1a58 <z_impl_k_thread_abort>

00004e88 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    4e88:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    4e8a:	1d13      	adds	r3, r2, #4
    4e8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4e90:	b9d3      	cbnz	r3, 4ec8 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
    4e92:	2301      	movs	r3, #1
    4e94:	fa03 f402 	lsl.w	r4, r3, r2
    4e98:	68c3      	ldr	r3, [r0, #12]
    4e9a:	4323      	orrs	r3, r4
    4e9c:	60c3      	str	r3, [r0, #12]
		b->next = c;
    4e9e:	3204      	adds	r2, #4
    4ea0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    4ea4:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    4ea8:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
    4eaa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    4eae:	d307      	bcc.n	4ec0 <free_list_add_bidx+0x38>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    4eb0:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
    4eb2:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    4eb4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    4eb8:	d304      	bcc.n	4ec4 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
    4eba:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
    4ebc:	bc70      	pop	{r4, r5, r6}
    4ebe:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    4ec0:	8099      	strh	r1, [r3, #4]
    4ec2:	e7f6      	b.n	4eb2 <free_list_add_bidx+0x2a>
    4ec4:	80d9      	strh	r1, [r3, #6]
    4ec6:	e7f9      	b.n	4ebc <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
    4ec8:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    4ecc:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    4ece:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    4ed2:	d318      	bcc.n	4f06 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
    4ed4:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
    4ed6:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
    4eda:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    4ede:	d314      	bcc.n	4f0a <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
    4ee0:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
    4ee2:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    4ee4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    4ee8:	d311      	bcc.n	4f0e <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
    4eea:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
    4eec:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    4ef0:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    4ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4ef6:	d30c      	bcc.n	4f12 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
    4ef8:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
    4efa:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    4efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4f00:	d309      	bcc.n	4f16 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
    4f02:	60a1      	str	r1, [r4, #8]
    4f04:	e7da      	b.n	4ebc <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
    4f06:	88a2      	ldrh	r2, [r4, #4]
    4f08:	e7e5      	b.n	4ed6 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
    4f0a:	80aa      	strh	r2, [r5, #4]
    4f0c:	e7e9      	b.n	4ee2 <free_list_add_bidx+0x5a>
    4f0e:	80eb      	strh	r3, [r5, #6]
    4f10:	e7ec      	b.n	4eec <free_list_add_bidx+0x64>
    4f12:	80d1      	strh	r1, [r2, #6]
    4f14:	e7f1      	b.n	4efa <free_list_add_bidx+0x72>
    4f16:	80a1      	strh	r1, [r4, #4]
    4f18:	e7d0      	b.n	4ebc <free_list_add_bidx+0x34>

00004f1a <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    4f1a:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    4f1c:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
    4f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4f22:	d307      	bcc.n	4f34 <free_list_add+0x1a>
	void *cmem = &buf[c];
    4f24:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    4f28:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    4f2a:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    4f2c:	2a01      	cmp	r2, #1
    4f2e:	d002      	beq.n	4f36 <free_list_add+0x1c>
    4f30:	2200      	movs	r2, #0
    4f32:	e000      	b.n	4f36 <free_list_add+0x1c>
    4f34:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    4f36:	b9a2      	cbnz	r2, 4f62 <free_list_add+0x48>
	void *cmem = &buf[c];
    4f38:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    4f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4f40:	d310      	bcc.n	4f64 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
    4f42:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    4f44:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    4f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4f4a:	d30d      	bcc.n	4f68 <free_list_add+0x4e>
    4f4c:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4f4e:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    4f50:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    4f54:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    4f56:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
    4f5a:	f1c2 021f 	rsb	r2, r2, #31
    4f5e:	f7ff ff93 	bl	4e88 <free_list_add_bidx>
	}
}
    4f62:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    4f64:	8852      	ldrh	r2, [r2, #2]
    4f66:	e7ed      	b.n	4f44 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
    4f68:	2304      	movs	r3, #4
    4f6a:	e7f0      	b.n	4f4e <free_list_add+0x34>

00004f6c <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    4f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f6e:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
    4f70:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    4f74:	d32a      	bcc.n	4fcc <sys_heap_init+0x60>
    4f76:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    4f78:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    4f7a:	1dc8      	adds	r0, r1, #7
    4f7c:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4f80:	440d      	add	r5, r1
    4f82:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    4f86:	1a2d      	subs	r5, r5, r0
    4f88:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
    4f8a:	4606      	mov	r6, r0
	heap->heap = h;
    4f8c:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
    4f8e:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
    4f90:	2300      	movs	r3, #0
    4f92:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
    4f94:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    4f98:	d31a      	bcc.n	4fd0 <sys_heap_init+0x64>
    4f9a:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4f9c:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    4f9e:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
    4fa2:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    4fa4:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    4fa8:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    4fac:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
    4fb0:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4fb2:	f103 0e07 	add.w	lr, r3, #7
    4fb6:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    4fba:	2300      	movs	r3, #0
    4fbc:	4563      	cmp	r3, ip
    4fbe:	da09      	bge.n	4fd4 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
    4fc0:	1d1a      	adds	r2, r3, #4
    4fc2:	2400      	movs	r4, #0
    4fc4:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    4fc8:	3301      	adds	r3, #1
    4fca:	e7f7      	b.n	4fbc <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
    4fcc:	2504      	movs	r5, #4
    4fce:	e7d3      	b.n	4f78 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
    4fd0:	2304      	movs	r3, #4
    4fd2:	e7e3      	b.n	4f9c <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    4fd4:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
    4fd6:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    4fda:	d333      	bcc.n	5044 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
    4fdc:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
    4fde:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    4fe2:	d331      	bcc.n	5048 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
    4fe4:	2300      	movs	r3, #0
    4fe6:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
    4fe8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    4fec:	d32f      	bcc.n	504e <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    4fee:	6843      	ldr	r3, [r0, #4]
    4ff0:	f043 0301 	orr.w	r3, r3, #1
    4ff4:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    4ff6:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    4ff8:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
    4ffa:	f02e 0307 	bic.w	r3, lr, #7
    4ffe:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
    5000:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    5004:	d328      	bcc.n	5058 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
    5006:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
    5008:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    500a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    500e:	d325      	bcc.n	505c <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
    5010:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
    5012:	f025 0307 	bic.w	r3, r5, #7
    5016:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
    5018:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    501a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    501e:	d31f      	bcc.n	5060 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
    5020:	2400      	movs	r4, #0
    5022:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
    5024:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    5026:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    502a:	d31c      	bcc.n	5066 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
    502c:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
    502e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    5030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5034:	d319      	bcc.n	506a <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    5036:	686b      	ldr	r3, [r5, #4]
    5038:	f043 0301 	orr.w	r3, r3, #1
    503c:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    503e:	f7ff ff6c 	bl	4f1a <free_list_add>
}
    5042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
    5044:	8043      	strh	r3, [r0, #2]
    5046:	e7ca      	b.n	4fde <sys_heap_init+0x72>
    5048:	2300      	movs	r3, #0
    504a:	8003      	strh	r3, [r0, #0]
    504c:	e7cc      	b.n	4fe8 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    504e:	8843      	ldrh	r3, [r0, #2]
    5050:	f043 0301 	orr.w	r3, r3, #1
    5054:	8043      	strh	r3, [r0, #2]
    5056:	e7ce      	b.n	4ff6 <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
    5058:	8066      	strh	r6, [r4, #2]
    505a:	e7d5      	b.n	5008 <sys_heap_init+0x9c>
    505c:	52c1      	strh	r1, [r0, r3]
    505e:	e7d8      	b.n	5012 <sys_heap_init+0xa6>
    5060:	2400      	movs	r4, #0
    5062:	806c      	strh	r4, [r5, #2]
    5064:	e7de      	b.n	5024 <sys_heap_init+0xb8>
    5066:	52c2      	strh	r2, [r0, r3]
    5068:	e7e1      	b.n	502e <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    506a:	886b      	ldrh	r3, [r5, #2]
    506c:	f043 0301 	orr.w	r3, r3, #1
    5070:	806b      	strh	r3, [r5, #2]
    5072:	e7e4      	b.n	503e <sys_heap_init+0xd2>

00005074 <extract_decimal>:
{
    5074:	b410      	push	{r4}
    5076:	4604      	mov	r4, r0
	const char *sp = *str;
    5078:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    507a:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    507c:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    507e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    5082:	2909      	cmp	r1, #9
    5084:	d806      	bhi.n	5094 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    5086:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    508a:	3201      	adds	r2, #1
    508c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5090:	3830      	subs	r0, #48	; 0x30
    5092:	e7f3      	b.n	507c <extract_decimal+0x8>
	*str = sp;
    5094:	6022      	str	r2, [r4, #0]
}
    5096:	bc10      	pop	{r4}
    5098:	4770      	bx	lr

0000509a <encode_uint>:
{
    509a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    509e:	b083      	sub	sp, #12
    50a0:	4604      	mov	r4, r0
    50a2:	460d      	mov	r5, r1
    50a4:	9201      	str	r2, [sp, #4]
    50a6:	469a      	mov	sl, r3
    50a8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    50ac:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    50ae:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    50b2:	2b6f      	cmp	r3, #111	; 0x6f
    50b4:	d00f      	beq.n	50d6 <encode_uint+0x3c>
    50b6:	d906      	bls.n	50c6 <encode_uint+0x2c>
    50b8:	2b70      	cmp	r3, #112	; 0x70
    50ba:	d00f      	beq.n	50dc <encode_uint+0x42>
    50bc:	2b78      	cmp	r3, #120	; 0x78
    50be:	d110      	bne.n	50e2 <encode_uint+0x48>
		return 16;
    50c0:	f04f 0910 	mov.w	r9, #16
    50c4:	e026      	b.n	5114 <encode_uint+0x7a>
	switch (specifier) {
    50c6:	2b58      	cmp	r3, #88	; 0x58
    50c8:	d002      	beq.n	50d0 <encode_uint+0x36>
    50ca:	f04f 090a 	mov.w	r9, #10
    50ce:	e021      	b.n	5114 <encode_uint+0x7a>
		return 16;
    50d0:	f04f 0910 	mov.w	r9, #16
    50d4:	e01e      	b.n	5114 <encode_uint+0x7a>
		return 8;
    50d6:	f04f 0908 	mov.w	r9, #8
    50da:	e01b      	b.n	5114 <encode_uint+0x7a>
		return 16;
    50dc:	f04f 0910 	mov.w	r9, #16
    50e0:	e018      	b.n	5114 <encode_uint+0x7a>
	switch (specifier) {
    50e2:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    50e6:	e015      	b.n	5114 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    50e8:	f1bb 0f19 	cmp.w	fp, #25
    50ec:	d820      	bhi.n	5130 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    50ee:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    50f0:	3237      	adds	r2, #55	; 0x37
    50f2:	b2d2      	uxtb	r2, r2
    50f4:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    50f8:	4632      	mov	r2, r6
    50fa:	463b      	mov	r3, r7
    50fc:	4620      	mov	r0, r4
    50fe:	4629      	mov	r1, r5
    5100:	f7fa ffec 	bl	dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    5104:	42bd      	cmp	r5, r7
    5106:	bf08      	it	eq
    5108:	42b4      	cmpeq	r4, r6
    510a:	d315      	bcc.n	5138 <encode_uint+0x9e>
    510c:	45d0      	cmp	r8, sl
    510e:	d913      	bls.n	5138 <encode_uint+0x9e>
		value /= radix;
    5110:	4604      	mov	r4, r0
    5112:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    5114:	464e      	mov	r6, r9
    5116:	2700      	movs	r7, #0
    5118:	464a      	mov	r2, r9
    511a:	463b      	mov	r3, r7
    511c:	4620      	mov	r0, r4
    511e:	4629      	mov	r1, r5
    5120:	f7fa ffdc 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5124:	2a09      	cmp	r2, #9
    5126:	d8df      	bhi.n	50e8 <encode_uint+0x4e>
    5128:	b2d2      	uxtb	r2, r2
    512a:	3230      	adds	r2, #48	; 0x30
    512c:	b2d2      	uxtb	r2, r2
    512e:	e7e1      	b.n	50f4 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5130:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5132:	3257      	adds	r2, #87	; 0x57
    5134:	b2d2      	uxtb	r2, r2
    5136:	e7dd      	b.n	50f4 <encode_uint+0x5a>
	if (conv->flag_hash) {
    5138:	9b01      	ldr	r3, [sp, #4]
    513a:	781b      	ldrb	r3, [r3, #0]
    513c:	f013 0f20 	tst.w	r3, #32
    5140:	d005      	beq.n	514e <encode_uint+0xb4>
		if (radix == 8) {
    5142:	f1b9 0f08 	cmp.w	r9, #8
    5146:	d006      	beq.n	5156 <encode_uint+0xbc>
		} else if (radix == 16) {
    5148:	f1b9 0f10 	cmp.w	r9, #16
    514c:	d009      	beq.n	5162 <encode_uint+0xc8>
}
    514e:	4640      	mov	r0, r8
    5150:	b003      	add	sp, #12
    5152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    5156:	9a01      	ldr	r2, [sp, #4]
    5158:	7893      	ldrb	r3, [r2, #2]
    515a:	f043 0308 	orr.w	r3, r3, #8
    515e:	7093      	strb	r3, [r2, #2]
    5160:	e7f5      	b.n	514e <encode_uint+0xb4>
			conv->altform_0c = true;
    5162:	9a01      	ldr	r2, [sp, #4]
    5164:	7893      	ldrb	r3, [r2, #2]
    5166:	f043 0310 	orr.w	r3, r3, #16
    516a:	7093      	strb	r3, [r2, #2]
    516c:	e7ef      	b.n	514e <encode_uint+0xb4>

0000516e <outs>:
{
    516e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5172:	4607      	mov	r7, r0
    5174:	460e      	mov	r6, r1
    5176:	4614      	mov	r4, r2
    5178:	4698      	mov	r8, r3
	size_t count = 0;
    517a:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    517c:	e006      	b.n	518c <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    517e:	4631      	mov	r1, r6
    5180:	f814 0b01 	ldrb.w	r0, [r4], #1
    5184:	47b8      	blx	r7
		if (rc < 0) {
    5186:	2800      	cmp	r0, #0
    5188:	db09      	blt.n	519e <outs+0x30>
		++count;
    518a:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    518c:	4544      	cmp	r4, r8
    518e:	d3f6      	bcc.n	517e <outs+0x10>
    5190:	f1b8 0f00 	cmp.w	r8, #0
    5194:	d102      	bne.n	519c <outs+0x2e>
    5196:	7823      	ldrb	r3, [r4, #0]
    5198:	2b00      	cmp	r3, #0
    519a:	d1f0      	bne.n	517e <outs+0x10>
	return (int)count;
    519c:	4628      	mov	r0, r5
}
    519e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000051a2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    51a2:	4770      	bx	lr

000051a4 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    51a4:	2200      	movs	r2, #0
    51a6:	6002      	str	r2, [r0, #0]
    51a8:	6042      	str	r2, [r0, #4]
    51aa:	6082      	str	r2, [r0, #8]
}
    51ac:	4770      	bx	lr

000051ae <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    51ae:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    51b0:	f000 ff95 	bl	60de <z_fatal_error>
}
    51b4:	bd08      	pop	{r3, pc}

000051b6 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    51b6:	b508      	push	{r3, lr}
    51b8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    51ba:	6800      	ldr	r0, [r0, #0]
    51bc:	f7ff fff7 	bl	51ae <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    51c0:	bd08      	pop	{r3, pc}

000051c2 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    51c2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    51c4:	2100      	movs	r1, #0
    51c6:	2001      	movs	r0, #1
    51c8:	f7ff fff1 	bl	51ae <z_arm_fatal_error>
}
    51cc:	bd08      	pop	{r3, pc}

000051ce <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    51ce:	b508      	push	{r3, lr}
	handler();
    51d0:	f7fc f998 	bl	1504 <z_SysNmiOnReset>
	z_arm_int_exit();
    51d4:	f7fc fa94 	bl	1700 <z_arm_exc_exit>
}
    51d8:	bd08      	pop	{r3, pc}

000051da <memory_fault_recoverable>:
}
    51da:	2000      	movs	r0, #0
    51dc:	4770      	bx	lr

000051de <debug_monitor>:
	*recoverable = false;
    51de:	2300      	movs	r3, #0
    51e0:	700b      	strb	r3, [r1, #0]
}
    51e2:	4770      	bx	lr

000051e4 <fault_handle>:
{
    51e4:	b508      	push	{r3, lr}
	*recoverable = false;
    51e6:	2300      	movs	r3, #0
    51e8:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    51ea:	1ecb      	subs	r3, r1, #3
    51ec:	2b09      	cmp	r3, #9
    51ee:	d81a      	bhi.n	5226 <fault_handle+0x42>
    51f0:	e8df f003 	tbb	[pc, r3]
    51f4:	110d0905 	.word	0x110d0905
    51f8:	19191919 	.word	0x19191919
    51fc:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    51fe:	4611      	mov	r1, r2
    5200:	f7fc fb0e 	bl	1820 <hard_fault>
		break;
    5204:	e010      	b.n	5228 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    5206:	2100      	movs	r1, #0
    5208:	f7fc fac4 	bl	1794 <mem_manage_fault>
		break;
    520c:	e00c      	b.n	5228 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    520e:	2100      	movs	r1, #0
    5210:	f7fc fa84 	bl	171c <bus_fault>
		break;
    5214:	e008      	b.n	5228 <fault_handle+0x44>
		reason = usage_fault(esf);
    5216:	f7fc faab 	bl	1770 <usage_fault>
		break;
    521a:	e005      	b.n	5228 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    521c:	4611      	mov	r1, r2
    521e:	f7ff ffde 	bl	51de <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5222:	2000      	movs	r0, #0
		break;
    5224:	e000      	b.n	5228 <fault_handle+0x44>
	*recoverable = false;
    5226:	2000      	movs	r0, #0
}
    5228:	bd08      	pop	{r3, pc}

0000522a <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    522a:	6843      	ldr	r3, [r0, #4]
    522c:	1e5a      	subs	r2, r3, #1
		&&
    522e:	4213      	tst	r3, r2
    5230:	d106      	bne.n	5240 <mpu_partition_is_valid+0x16>
		&&
    5232:	2b1f      	cmp	r3, #31
    5234:	d906      	bls.n	5244 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    5236:	6803      	ldr	r3, [r0, #0]
		&&
    5238:	421a      	tst	r2, r3
    523a:	d005      	beq.n	5248 <mpu_partition_is_valid+0x1e>
    523c:	2000      	movs	r0, #0
    523e:	4770      	bx	lr
    5240:	2000      	movs	r0, #0
    5242:	4770      	bx	lr
    5244:	2000      	movs	r0, #0
    5246:	4770      	bx	lr
    5248:	2001      	movs	r0, #1
}
    524a:	4770      	bx	lr

0000524c <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    524c:	2807      	cmp	r0, #7
    524e:	d805      	bhi.n	525c <region_allocate_and_init+0x10>
{
    5250:	b510      	push	{r4, lr}
    5252:	4604      	mov	r4, r0
	region_init(index, region_conf);
    5254:	f7fc fc36 	bl	1ac4 <region_init>
	return index;
    5258:	4620      	mov	r0, r4
}
    525a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    525c:	f06f 0015 	mvn.w	r0, #21
}
    5260:	4770      	bx	lr

00005262 <mpu_configure_region>:
{
    5262:	b500      	push	{lr}
    5264:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    5266:	680b      	ldr	r3, [r1, #0]
    5268:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    526a:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    526c:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    526e:	2b20      	cmp	r3, #32
    5270:	d912      	bls.n	5298 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    5272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5276:	d811      	bhi.n	529c <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    5278:	3b01      	subs	r3, #1
    527a:	fab3 f383 	clz	r3, r3
    527e:	f1c3 031f 	rsb	r3, r3, #31
    5282:	005b      	lsls	r3, r3, #1
    5284:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5288:	4313      	orrs	r3, r2
    528a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    528c:	a901      	add	r1, sp, #4
    528e:	f7ff ffdd 	bl	524c <region_allocate_and_init>
}
    5292:	b005      	add	sp, #20
    5294:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    5298:	2308      	movs	r3, #8
    529a:	e7f5      	b.n	5288 <mpu_configure_region+0x26>
		return REGION_4G;
    529c:	233e      	movs	r3, #62	; 0x3e
    529e:	e7f3      	b.n	5288 <mpu_configure_region+0x26>

000052a0 <mpu_configure_regions>:
{
    52a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    52a4:	4680      	mov	r8, r0
    52a6:	460f      	mov	r7, r1
    52a8:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    52aa:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    52ac:	2500      	movs	r5, #0
    52ae:	e009      	b.n	52c4 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    52b0:	4621      	mov	r1, r4
    52b2:	b2f0      	uxtb	r0, r6
    52b4:	f7ff ffd5 	bl	5262 <mpu_configure_region>
    52b8:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    52ba:	f110 0f16 	cmn.w	r0, #22
    52be:	d014      	beq.n	52ea <mpu_configure_regions+0x4a>
		reg_index++;
    52c0:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    52c2:	3501      	adds	r5, #1
    52c4:	42bd      	cmp	r5, r7
    52c6:	da10      	bge.n	52ea <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    52c8:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    52cc:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    52d0:	6862      	ldr	r2, [r4, #4]
    52d2:	2a00      	cmp	r2, #0
    52d4:	d0f5      	beq.n	52c2 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    52d6:	f1b9 0f00 	cmp.w	r9, #0
    52da:	d0e9      	beq.n	52b0 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    52dc:	4620      	mov	r0, r4
    52de:	f7ff ffa4 	bl	522a <mpu_partition_is_valid>
		if (do_sanity_check &&
    52e2:	2800      	cmp	r0, #0
    52e4:	d1e4      	bne.n	52b0 <mpu_configure_regions+0x10>
			return -EINVAL;
    52e6:	f06f 0615 	mvn.w	r6, #21
}
    52ea:	4630      	mov	r0, r6
    52ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000052f0 <arm_core_mpu_configure_static_mpu_regions>:
{
    52f0:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    52f2:	f7fc fbf7 	bl	1ae4 <mpu_configure_static_mpu_regions>
}
    52f6:	bd08      	pop	{r3, pc}

000052f8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    52f8:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    52fa:	f7fc fbfd 	bl	1af8 <mpu_configure_dynamic_mpu_regions>
}
    52fe:	bd08      	pop	{r3, pc}

00005300 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    5300:	4602      	mov	r2, r0
    5302:	780b      	ldrb	r3, [r1, #0]
    5304:	b11b      	cbz	r3, 530e <strcpy+0xe>
		*d = *s;
    5306:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    530a:	3101      	adds	r1, #1
    530c:	e7f9      	b.n	5302 <strcpy+0x2>
	}

	*d = '\0';
    530e:	7013      	strb	r3, [r2, #0]

	return dest;
}
    5310:	4770      	bx	lr

00005312 <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    5312:	4603      	mov	r3, r0
    5314:	b1a2      	cbz	r2, 5340 <strncpy+0x2e>
{
    5316:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    5318:	780c      	ldrb	r4, [r1, #0]
    531a:	b12c      	cbz	r4, 5328 <strncpy+0x16>
		*d = *s;
    531c:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    5320:	3101      	adds	r1, #1
		d++;
		n--;
    5322:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    5324:	2a00      	cmp	r2, #0
    5326:	d1f7      	bne.n	5318 <strncpy+0x6>
	}

	while (n > 0) {
    5328:	b122      	cbz	r2, 5334 <strncpy+0x22>
		*d = '\0';
    532a:	2100      	movs	r1, #0
    532c:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    5330:	3a01      	subs	r2, #1
    5332:	e7f9      	b.n	5328 <strncpy+0x16>
	}

	return dest;
}
    5334:	bc10      	pop	{r4}
    5336:	4770      	bx	lr
		*d = '\0';
    5338:	2100      	movs	r1, #0
    533a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    533e:	3a01      	subs	r2, #1
	while (n > 0) {
    5340:	2a00      	cmp	r2, #0
    5342:	d1f9      	bne.n	5338 <strncpy+0x26>
    5344:	4770      	bx	lr

00005346 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5346:	4603      	mov	r3, r0
	size_t n = 0;
    5348:	2000      	movs	r0, #0

	while (*s != '\0') {
    534a:	781a      	ldrb	r2, [r3, #0]
    534c:	b112      	cbz	r2, 5354 <strlen+0xe>
		s++;
    534e:	3301      	adds	r3, #1
		n++;
    5350:	3001      	adds	r0, #1
    5352:	e7fa      	b.n	534a <strlen+0x4>
	}

	return n;
}
    5354:	4770      	bx	lr

00005356 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5356:	4603      	mov	r3, r0
	size_t n = 0;
    5358:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    535a:	781a      	ldrb	r2, [r3, #0]
    535c:	b122      	cbz	r2, 5368 <strnlen+0x12>
    535e:	4288      	cmp	r0, r1
    5360:	d202      	bcs.n	5368 <strnlen+0x12>
		s++;
    5362:	3301      	adds	r3, #1
		n++;
    5364:	3001      	adds	r0, #1
    5366:	e7f8      	b.n	535a <strnlen+0x4>
	}

	return n;
}
    5368:	4770      	bx	lr

0000536a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    536a:	7803      	ldrb	r3, [r0, #0]
    536c:	780a      	ldrb	r2, [r1, #0]
    536e:	4293      	cmp	r3, r2
    5370:	d103      	bne.n	537a <strcmp+0x10>
    5372:	b113      	cbz	r3, 537a <strcmp+0x10>
		s1++;
    5374:	3001      	adds	r0, #1
		s2++;
    5376:	3101      	adds	r1, #1
    5378:	e7f7      	b.n	536a <strcmp>
	}

	return *s1 - *s2;
}
    537a:	1a98      	subs	r0, r3, r2
    537c:	4770      	bx	lr

0000537e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    537e:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    5380:	ea80 0301 	eor.w	r3, r0, r1
    5384:	f013 0f03 	tst.w	r3, #3
    5388:	d001      	beq.n	538e <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    538a:	4603      	mov	r3, r0
    538c:	e017      	b.n	53be <memcpy+0x40>
    538e:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    5390:	f013 0f03 	tst.w	r3, #3
    5394:	d00b      	beq.n	53ae <memcpy+0x30>
			if (n == 0) {
    5396:	b1a2      	cbz	r2, 53c2 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    5398:	f811 4b01 	ldrb.w	r4, [r1], #1
    539c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    53a0:	3a01      	subs	r2, #1
    53a2:	e7f5      	b.n	5390 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    53a4:	f851 4b04 	ldr.w	r4, [r1], #4
    53a8:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    53ac:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    53ae:	2a03      	cmp	r2, #3
    53b0:	d8f8      	bhi.n	53a4 <memcpy+0x26>
    53b2:	e004      	b.n	53be <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    53b4:	f811 4b01 	ldrb.w	r4, [r1], #1
    53b8:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    53bc:	3a01      	subs	r2, #1
	while (n > 0) {
    53be:	2a00      	cmp	r2, #0
    53c0:	d1f8      	bne.n	53b4 <memcpy+0x36>
	}

	return d;
}
    53c2:	bc10      	pop	{r4}
    53c4:	4770      	bx	lr

000053c6 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    53c6:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    53c8:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    53ca:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    53cc:	f013 0f03 	tst.w	r3, #3
    53d0:	d004      	beq.n	53dc <memset+0x16>
		if (n == 0) {
    53d2:	b19a      	cbz	r2, 53fc <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    53d4:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    53d8:	3a01      	subs	r2, #1
    53da:	e7f7      	b.n	53cc <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    53dc:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    53de:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    53e2:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    53e6:	2a03      	cmp	r2, #3
    53e8:	d906      	bls.n	53f8 <memset+0x32>
		*(d_word++) = c_word;
    53ea:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    53ee:	3a04      	subs	r2, #4
    53f0:	e7f9      	b.n	53e6 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    53f2:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    53f6:	3a01      	subs	r2, #1
	while (n > 0) {
    53f8:	2a00      	cmp	r2, #0
    53fa:	d1fa      	bne.n	53f2 <memset+0x2c>
	}

	return buf;
}
    53fc:	bc10      	pop	{r4}
    53fe:	4770      	bx	lr

00005400 <_stdout_hook_default>:
}
    5400:	f04f 30ff 	mov.w	r0, #4294967295
    5404:	4770      	bx	lr

00005406 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    5406:	b084      	sub	sp, #16
    5408:	ab04      	add	r3, sp, #16
    540a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    540e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5412:	2b06      	cmp	r3, #6
    5414:	d001      	beq.n	541a <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    5416:	b004      	add	sp, #16
    5418:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    541a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    541e:	2201      	movs	r2, #1
    5420:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5424:	f3bf 8f4f 	dsb	sy
        __WFE();
    5428:	bf20      	wfe
    while (true)
    542a:	e7fd      	b.n	5428 <pm_power_state_set+0x22>

0000542c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    542c:	b084      	sub	sp, #16
    542e:	ab04      	add	r3, sp, #16
    5430:	e903 0007 	stmdb	r3, {r0, r1, r2}
    5434:	2300      	movs	r3, #0
    5436:	f383 8811 	msr	BASEPRI, r3
    543a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    543e:	b004      	add	sp, #16
    5440:	4770      	bx	lr

00005442 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    5442:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    5444:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5448:	0089      	lsls	r1, r1, #2
    544a:	3138      	adds	r1, #56	; 0x38
}
    544c:	4408      	add	r0, r1
    544e:	4770      	bx	lr

00005450 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    5450:	6840      	ldr	r0, [r0, #4]
}
    5452:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    5456:	4770      	bx	lr

00005458 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    5458:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    545a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    545e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5462:	4770      	bx	lr

00005464 <get_status>:
{
    5464:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5466:	b2c9      	uxtb	r1, r1
    5468:	f7ff ffeb 	bl	5442 <get_sub_data>
    546c:	6880      	ldr	r0, [r0, #8]
}
    546e:	f000 0007 	and.w	r0, r0, #7
    5472:	bd08      	pop	{r3, pc}

00005474 <set_off_state>:
	__asm__ volatile(
    5474:	f04f 0320 	mov.w	r3, #32
    5478:	f3ef 8211 	mrs	r2, BASEPRI
    547c:	f383 8812 	msr	BASEPRI_MAX, r3
    5480:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5484:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5486:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    548a:	d001      	beq.n	5490 <set_off_state+0x1c>
    548c:	428b      	cmp	r3, r1
    548e:	d107      	bne.n	54a0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5490:	2301      	movs	r3, #1
    5492:	6003      	str	r3, [r0, #0]
	int err = 0;
    5494:	2000      	movs	r0, #0
	__asm__ volatile(
    5496:	f382 8811 	msr	BASEPRI, r2
    549a:	f3bf 8f6f 	isb	sy
}
    549e:	4770      	bx	lr
		err = -EPERM;
    54a0:	f04f 30ff 	mov.w	r0, #4294967295
    54a4:	e7f7      	b.n	5496 <set_off_state+0x22>

000054a6 <set_starting_state>:
{
    54a6:	b410      	push	{r4}
	__asm__ volatile(
    54a8:	f04f 0320 	mov.w	r3, #32
    54ac:	f3ef 8211 	mrs	r2, BASEPRI
    54b0:	f383 8812 	msr	BASEPRI_MAX, r3
    54b4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    54b8:	6803      	ldr	r3, [r0, #0]
    54ba:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    54be:	f003 0307 	and.w	r3, r3, #7
    54c2:	2b01      	cmp	r3, #1
    54c4:	d009      	beq.n	54da <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    54c6:	428c      	cmp	r4, r1
    54c8:	d00a      	beq.n	54e0 <set_starting_state+0x3a>
		err = -EPERM;
    54ca:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    54ce:	f382 8811 	msr	BASEPRI, r2
    54d2:	f3bf 8f6f 	isb	sy
}
    54d6:	bc10      	pop	{r4}
    54d8:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    54da:	6001      	str	r1, [r0, #0]
	int err = 0;
    54dc:	2000      	movs	r0, #0
    54de:	e7f6      	b.n	54ce <set_starting_state+0x28>
		err = -EALREADY;
    54e0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    54e4:	e7f3      	b.n	54ce <set_starting_state+0x28>

000054e6 <set_on_state>:
	__asm__ volatile(
    54e6:	f04f 0320 	mov.w	r3, #32
    54ea:	f3ef 8211 	mrs	r2, BASEPRI
    54ee:	f383 8812 	msr	BASEPRI_MAX, r3
    54f2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    54f6:	6803      	ldr	r3, [r0, #0]
    54f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    54fc:	f043 0302 	orr.w	r3, r3, #2
    5500:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5502:	f382 8811 	msr	BASEPRI, r2
    5506:	f3bf 8f6f 	isb	sy
}
    550a:	4770      	bx	lr

0000550c <clkstarted_handle>:
{
    550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    550e:	4606      	mov	r6, r0
    5510:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    5512:	f7ff ff96 	bl	5442 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    5516:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    5518:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    551a:	2300      	movs	r3, #0
    551c:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    5520:	f7ff ffe1 	bl	54e6 <set_on_state>
	if (callback) {
    5524:	b11d      	cbz	r5, 552e <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5526:	463a      	mov	r2, r7
    5528:	4621      	mov	r1, r4
    552a:	4630      	mov	r0, r6
    552c:	47a8      	blx	r5
}
    552e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005530 <stop>:
{
    5530:	b570      	push	{r4, r5, r6, lr}
    5532:	4606      	mov	r6, r0
    5534:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5536:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5538:	4621      	mov	r1, r4
    553a:	f7ff ff82 	bl	5442 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    553e:	4629      	mov	r1, r5
    5540:	3008      	adds	r0, #8
    5542:	f7ff ff97 	bl	5474 <set_off_state>
	if (err < 0) {
    5546:	2800      	cmp	r0, #0
    5548:	db06      	blt.n	5558 <stop+0x28>
	get_sub_config(dev, type)->stop();
    554a:	4621      	mov	r1, r4
    554c:	4630      	mov	r0, r6
    554e:	f7ff ff7f 	bl	5450 <get_sub_config>
    5552:	6843      	ldr	r3, [r0, #4]
    5554:	4798      	blx	r3
	return 0;
    5556:	2000      	movs	r0, #0
}
    5558:	bd70      	pop	{r4, r5, r6, pc}

0000555a <api_stop>:
{
    555a:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    555c:	2280      	movs	r2, #128	; 0x80
    555e:	f7ff ffe7 	bl	5530 <stop>
}
    5562:	bd08      	pop	{r3, pc}

00005564 <async_start>:
{
    5564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5568:	4606      	mov	r6, r0
    556a:	4690      	mov	r8, r2
    556c:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    556e:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5570:	4629      	mov	r1, r5
    5572:	f7ff ff66 	bl	5442 <get_sub_data>
    5576:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    5578:	9906      	ldr	r1, [sp, #24]
    557a:	3008      	adds	r0, #8
    557c:	f7ff ff93 	bl	54a6 <set_starting_state>
	if (err < 0) {
    5580:	2800      	cmp	r0, #0
    5582:	db09      	blt.n	5598 <async_start+0x34>
	subdata->cb = cb;
    5584:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    5588:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    558a:	4629      	mov	r1, r5
    558c:	4630      	mov	r0, r6
    558e:	f7ff ff5f 	bl	5450 <get_sub_config>
    5592:	6803      	ldr	r3, [r0, #0]
    5594:	4798      	blx	r3
	return 0;
    5596:	2000      	movs	r0, #0
}
    5598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000559c <api_start>:
{
    559c:	b510      	push	{r4, lr}
    559e:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    55a0:	2480      	movs	r4, #128	; 0x80
    55a2:	9400      	str	r4, [sp, #0]
    55a4:	f7ff ffde 	bl	5564 <async_start>
}
    55a8:	b002      	add	sp, #8
    55aa:	bd10      	pop	{r4, pc}

000055ac <onoff_started_callback>:
{
    55ac:	b510      	push	{r4, lr}
    55ae:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    55b0:	b2c9      	uxtb	r1, r1
    55b2:	f7ff ff51 	bl	5458 <get_onoff_manager>
	notify(mgr, 0);
    55b6:	2100      	movs	r1, #0
    55b8:	47a0      	blx	r4
}
    55ba:	bd10      	pop	{r4, pc}

000055bc <hfclk_start>:
{
    55bc:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    55be:	2001      	movs	r0, #1
    55c0:	f7fd fd3c 	bl	303c <nrfx_clock_start>
}
    55c4:	bd08      	pop	{r3, pc}

000055c6 <hfclk_stop>:
{
    55c6:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    55c8:	2001      	movs	r0, #1
    55ca:	f7fd fd75 	bl	30b8 <nrfx_clock_stop>
}
    55ce:	bd08      	pop	{r3, pc}

000055d0 <lfclk_stop>:
{
    55d0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    55d2:	2000      	movs	r0, #0
    55d4:	f7fd fd70 	bl	30b8 <nrfx_clock_stop>
}
    55d8:	bd08      	pop	{r3, pc}

000055da <blocking_start_callback>:
{
    55da:	b508      	push	{r3, lr}
    55dc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    55de:	f7fe fcb9 	bl	3f54 <z_impl_k_sem_give>
}
    55e2:	bd08      	pop	{r3, pc}

000055e4 <debug_hook_out_nop>:
}
    55e4:	2000      	movs	r0, #0
    55e6:	4770      	bx	lr

000055e8 <gpio_nrfx_port_get_raw>:
	return port->config;
    55e8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    55ea:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    55ec:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    55f0:	600b      	str	r3, [r1, #0]
}
    55f2:	2000      	movs	r0, #0
    55f4:	4770      	bx	lr

000055f6 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    55f6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    55f8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    55fa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    55fe:	4042      	eors	r2, r0
    5600:	400a      	ands	r2, r1
    5602:	4042      	eors	r2, r0
    p_reg->OUT = value;
    5604:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    5608:	2000      	movs	r0, #0
    560a:	4770      	bx	lr

0000560c <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    560c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    560e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    5610:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    5614:	2000      	movs	r0, #0
    5616:	4770      	bx	lr

00005618 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    5618:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    561a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    561c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    5620:	2000      	movs	r0, #0
    5622:	4770      	bx	lr

00005624 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    5624:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5626:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5628:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    562c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    562e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    5632:	2000      	movs	r0, #0
    5634:	4770      	bx	lr

00005636 <gpio_nrfx_manage_callback>:
{
    5636:	b470      	push	{r4, r5, r6}
	return port->data;
    5638:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    563a:	1d05      	adds	r5, r0, #4
	return list->head;
    563c:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
    563e:	b1db      	cbz	r3, 5678 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    5640:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5642:	2400      	movs	r4, #0
    5644:	e00a      	b.n	565c <gpio_nrfx_manage_callback+0x26>
	return node->next;
    5646:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5648:	6043      	str	r3, [r0, #4]
	return list->tail;
    564a:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    564c:	42a1      	cmp	r1, r4
    564e:	d10f      	bne.n	5670 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    5650:	606b      	str	r3, [r5, #4]
}
    5652:	e00d      	b.n	5670 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    5654:	606c      	str	r4, [r5, #4]
}
    5656:	e00b      	b.n	5670 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5658:	461c      	mov	r4, r3
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	b15b      	cbz	r3, 5676 <gpio_nrfx_manage_callback+0x40>
    565e:	429e      	cmp	r6, r3
    5660:	d1fa      	bne.n	5658 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    5662:	2c00      	cmp	r4, #0
    5664:	d0ef      	beq.n	5646 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    5666:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    5668:	6023      	str	r3, [r4, #0]
	return list->tail;
    566a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    566c:	4299      	cmp	r1, r3
    566e:	d0f1      	beq.n	5654 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    5670:	2300      	movs	r3, #0
    5672:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5674:	e000      	b.n	5678 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    5676:	b152      	cbz	r2, 568e <gpio_nrfx_manage_callback+0x58>
	if (set) {
    5678:	b162      	cbz	r2, 5694 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    567a:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    567c:	600b      	str	r3, [r1, #0]
	list->head = node;
    567e:	6041      	str	r1, [r0, #4]
	return list->tail;
    5680:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    5682:	b10b      	cbz	r3, 5688 <gpio_nrfx_manage_callback+0x52>
	return 0;
    5684:	2000      	movs	r0, #0
    5686:	e006      	b.n	5696 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    5688:	6069      	str	r1, [r5, #4]
    568a:	2000      	movs	r0, #0
}
    568c:	e003      	b.n	5696 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    568e:	f06f 0015 	mvn.w	r0, #21
    5692:	e000      	b.n	5696 <gpio_nrfx_manage_callback+0x60>
	return 0;
    5694:	2000      	movs	r0, #0
}
    5696:	bc70      	pop	{r4, r5, r6}
    5698:	4770      	bx	lr

0000569a <cfg_level_pins>:
{
    569a:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    569c:	6905      	ldr	r5, [r0, #16]
	return port->config;
    569e:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    56a0:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    56a2:	696a      	ldr	r2, [r5, #20]
    56a4:	69ab      	ldr	r3, [r5, #24]
    56a6:	4313      	orrs	r3, r2
    56a8:	ea21 0103 	bic.w	r1, r1, r3
	uint32_t bit = 1U << pin;
    56ac:	2201      	movs	r2, #1
	uint32_t pin = 0U;
    56ae:	2000      	movs	r0, #0
	while (level_pins) {
    56b0:	e013      	b.n	56da <cfg_level_pins+0x40>
		return NRF_GPIO_PIN_SENSE_HIGH;
    56b2:	f04f 0c02 	mov.w	ip, #2
    *p_pin = pin_number & 0x1F;
    56b6:	f003 031f 	and.w	r3, r3, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    56ba:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    56be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    56c2:	f857 4023 	ldr.w	r4, [r7, r3, lsl #2]
    56c6:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    56ca:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
    56ce:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
			level_pins &= ~bit;
    56d2:	ea21 0102 	bic.w	r1, r1, r2
		++pin;
    56d6:	3001      	adds	r0, #1
		bit <<= 1;
    56d8:	0052      	lsls	r2, r2, #1
	while (level_pins) {
    56da:	b171      	cbz	r1, 56fa <cfg_level_pins+0x60>
		if (level_pins & bit) {
    56dc:	420a      	tst	r2, r1
    56de:	d0fa      	beq.n	56d6 <cfg_level_pins+0x3c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    56e0:	7a34      	ldrb	r4, [r6, #8]
    56e2:	f000 031f 	and.w	r3, r0, #31
    56e6:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    56ea:	692c      	ldr	r4, [r5, #16]
    56ec:	40c4      	lsrs	r4, r0
    56ee:	f014 0f01 	tst.w	r4, #1
    56f2:	d1de      	bne.n	56b2 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    56f4:	f04f 0c03 	mov.w	ip, #3
    56f8:	e7dd      	b.n	56b6 <cfg_level_pins+0x1c>
}
    56fa:	bcf0      	pop	{r4, r5, r6, r7}
    56fc:	4770      	bx	lr

000056fe <check_level_trigger_pins>:
{
    56fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    5700:	468e      	mov	lr, r1
	return port->data;
    5702:	6903      	ldr	r3, [r0, #16]
	return port->config;
    5704:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    5706:	68d8      	ldr	r0, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    5708:	695a      	ldr	r2, [r3, #20]
    570a:	699c      	ldr	r4, [r3, #24]
    570c:	4322      	orrs	r2, r4
    570e:	ea20 0c02 	bic.w	ip, r0, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    5712:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    5714:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    5718:	6918      	ldr	r0, [r3, #16]
    571a:	4050      	eors	r0, r2
	uint32_t out = pin_states & level_pins;
    571c:	ea2c 0000 	bic.w	r0, ip, r0
	uint32_t check_pins = level_pins;
    5720:	4664      	mov	r4, ip
	uint32_t bit = 1U << pin;
    5722:	2201      	movs	r2, #1
	uint32_t pin = 0U;
    5724:	2500      	movs	r5, #0
	while (check_pins) {
    5726:	e00f      	b.n	5748 <check_level_trigger_pins+0x4a>
    *p_pin = pin_number & 0x1F;
    5728:	f003 031f 	and.w	r3, r3, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    572c:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    5730:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5734:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
    5738:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    573c:	f847 6023 	str.w	r6, [r7, r3, lsl #2]
			check_pins &= ~bit;
    5740:	ea24 0402 	bic.w	r4, r4, r2
		++pin;
    5744:	3501      	adds	r5, #1
		bit <<= 1;
    5746:	0052      	lsls	r2, r2, #1
	while (check_pins) {
    5748:	b1dc      	cbz	r4, 5782 <check_level_trigger_pins+0x84>
		if (check_pins & bit) {
    574a:	4222      	tst	r2, r4
    574c:	d0fa      	beq.n	5744 <check_level_trigger_pins+0x46>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    574e:	7a0e      	ldrb	r6, [r1, #8]
    5750:	f005 031f 	and.w	r3, r5, #31
    5754:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
			if (!(level_pins & bit)) {
    5758:	ea12 0f0c 	tst.w	r2, ip
    575c:	d1e4      	bne.n	5728 <check_level_trigger_pins+0x2a>
    *p_pin = pin_number & 0x1F;
    575e:	f003 061f 	and.w	r6, r3, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5762:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    5766:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    576a:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    576e:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    5772:	2e02      	cmp	r6, #2
    5774:	d1d8      	bne.n	5728 <check_level_trigger_pins+0x2a>
					*sense_levels |= bit;
    5776:	f8de 6000 	ldr.w	r6, [lr]
    577a:	4316      	orrs	r6, r2
    577c:	f8ce 6000 	str.w	r6, [lr]
    5780:	e7d2      	b.n	5728 <check_level_trigger_pins+0x2a>
}
    5782:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005784 <gpiote_pin_int_cfg>:
{
    5784:	b570      	push	{r4, r5, r6, lr}
    5786:	460c      	mov	r4, r1
	return port->data;
    5788:	6906      	ldr	r6, [r0, #16]
	return port->config;
    578a:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    578c:	7a1b      	ldrb	r3, [r3, #8]
    578e:	f001 051f 	and.w	r5, r1, #31
    5792:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    5796:	4628      	mov	r0, r5
    5798:	f7fc fcea 	bl	2170 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    579c:	f005 021f 	and.w	r2, r5, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    57a0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    57a4:	f502 70e0 	add.w	r0, r2, #448	; 0x1c0
    57a8:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    57ac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    57b0:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    57b4:	68f3      	ldr	r3, [r6, #12]
    57b6:	40e3      	lsrs	r3, r4
    57b8:	f013 0f01 	tst.w	r3, #1
    57bc:	d02f      	beq.n	581e <gpiote_pin_int_cfg+0x9a>
		if (data->trig_edge & BIT(pin)) {
    57be:	6973      	ldr	r3, [r6, #20]
    57c0:	40e3      	lsrs	r3, r4
    57c2:	f013 0f01 	tst.w	r3, #1
    57c6:	d013      	beq.n	57f0 <gpiote_pin_int_cfg+0x6c>
				if (data->double_edge & BIT(pin)) {
    57c8:	69b3      	ldr	r3, [r6, #24]
    57ca:	40e3      	lsrs	r3, r4
    57cc:	f013 0f01 	tst.w	r3, #1
    57d0:	d107      	bne.n	57e2 <gpiote_pin_int_cfg+0x5e>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    57d2:	6931      	ldr	r1, [r6, #16]
    57d4:	fa21 f404 	lsr.w	r4, r1, r4
    57d8:	f014 0f01 	tst.w	r4, #1
    57dc:	d006      	beq.n	57ec <gpiote_pin_int_cfg+0x68>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    57de:	2101      	movs	r1, #1
    57e0:	e000      	b.n	57e4 <gpiote_pin_int_cfg+0x60>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    57e2:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    57e4:	4628      	mov	r0, r5
    57e6:	f7fc fcef 	bl	21c8 <gpiote_channel_alloc>
    57ea:	e019      	b.n	5820 <gpiote_pin_int_cfg+0x9c>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    57ec:	2102      	movs	r1, #2
    57ee:	e7f9      	b.n	57e4 <gpiote_pin_int_cfg+0x60>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    57f0:	6931      	ldr	r1, [r6, #16]
    57f2:	fa21 f404 	lsr.w	r4, r1, r4
    57f6:	f014 0f01 	tst.w	r4, #1
    57fa:	d10e      	bne.n	581a <gpiote_pin_int_cfg+0x96>
	return NRF_GPIO_PIN_SENSE_LOW;
    57fc:	2003      	movs	r0, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    57fe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5802:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    5806:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    580a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    580e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    5812:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	int res = 0;
    5816:	2000      	movs	r0, #0
}
    5818:	e002      	b.n	5820 <gpiote_pin_int_cfg+0x9c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    581a:	2002      	movs	r0, #2
    581c:	e7ef      	b.n	57fe <gpiote_pin_int_cfg+0x7a>
	int res = 0;
    581e:	2000      	movs	r0, #0
}
    5820:	bd70      	pop	{r4, r5, r6, pc}

00005822 <gpio_nrfx_pin_interrupt_configure>:
{
    5822:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    5824:	6904      	ldr	r4, [r0, #16]
	return port->config;
    5826:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5828:	7a2e      	ldrb	r6, [r5, #8]
    582a:	f001 051f 	and.w	r5, r1, #31
    582e:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    5832:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    5836:	d025      	beq.n	5884 <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    5838:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    583c:	d030      	beq.n	58a0 <gpio_nrfx_pin_interrupt_configure+0x7e>
    583e:	68e5      	ldr	r5, [r4, #12]
    5840:	2601      	movs	r6, #1
    5842:	408e      	lsls	r6, r1
    5844:	4335      	orrs	r5, r6
    5846:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    5848:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    584c:	d02e      	beq.n	58ac <gpio_nrfx_pin_interrupt_configure+0x8a>
    584e:	6962      	ldr	r2, [r4, #20]
    5850:	2501      	movs	r5, #1
    5852:	408d      	lsls	r5, r1
    5854:	ea22 0205 	bic.w	r2, r2, r5
    5858:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    585a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    585e:	d02a      	beq.n	58b6 <gpio_nrfx_pin_interrupt_configure+0x94>
    5860:	69a2      	ldr	r2, [r4, #24]
    5862:	2501      	movs	r5, #1
    5864:	408d      	lsls	r5, r1
    5866:	ea22 0205 	bic.w	r2, r2, r5
    586a:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    586c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    5870:	d026      	beq.n	58c0 <gpio_nrfx_pin_interrupt_configure+0x9e>
    5872:	6923      	ldr	r3, [r4, #16]
    5874:	2201      	movs	r2, #1
    5876:	408a      	lsls	r2, r1
    5878:	ea23 0302 	bic.w	r3, r3, r2
    587c:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    587e:	f7ff ff81 	bl	5784 <gpiote_pin_int_cfg>
}
    5882:	bd70      	pop	{r4, r5, r6, pc}
    *p_pin = pin_number & 0x1F;
    5884:	f005 051f 	and.w	r5, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5888:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    588c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    5890:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    5894:	f015 0f01 	tst.w	r5, #1
    5898:	d0ce      	beq.n	5838 <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    589a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    589e:	e7f0      	b.n	5882 <gpio_nrfx_pin_interrupt_configure+0x60>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    58a0:	68e5      	ldr	r5, [r4, #12]
    58a2:	2601      	movs	r6, #1
    58a4:	408e      	lsls	r6, r1
    58a6:	ea25 0506 	bic.w	r5, r5, r6
    58aa:	e7cc      	b.n	5846 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    58ac:	6962      	ldr	r2, [r4, #20]
    58ae:	2501      	movs	r5, #1
    58b0:	408d      	lsls	r5, r1
    58b2:	432a      	orrs	r2, r5
    58b4:	e7d0      	b.n	5858 <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    58b6:	69a2      	ldr	r2, [r4, #24]
    58b8:	2501      	movs	r5, #1
    58ba:	408d      	lsls	r5, r1
    58bc:	432a      	orrs	r2, r5
    58be:	e7d4      	b.n	586a <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    58c0:	6923      	ldr	r3, [r4, #16]
    58c2:	2201      	movs	r2, #1
    58c4:	408a      	lsls	r2, r1
    58c6:	4313      	orrs	r3, r2
    58c8:	e7d8      	b.n	587c <gpio_nrfx_pin_interrupt_configure+0x5a>

000058ca <i2c_nrfx_twim_configure>:
	return dev->config;
    58ca:	6842      	ldr	r2, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    58cc:	f011 0f01 	tst.w	r1, #1
    58d0:	d117      	bne.n	5902 <i2c_nrfx_twim_configure+0x38>
	switch (I2C_SPEED_GET(dev_config)) {
    58d2:	f3c1 0342 	ubfx	r3, r1, #1, #3
    58d6:	2b01      	cmp	r3, #1
    58d8:	d004      	beq.n	58e4 <i2c_nrfx_twim_configure+0x1a>
    58da:	2b02      	cmp	r3, #2
    58dc:	d00b      	beq.n	58f6 <i2c_nrfx_twim_configure+0x2c>
    58de:	f06f 0015 	mvn.w	r0, #21
    58e2:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
    58e4:	6813      	ldr	r3, [r2, #0]
    p_reg->FREQUENCY = frequency;
    58e6:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    58ea:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return dev->data;
    58ee:	6903      	ldr	r3, [r0, #16]
	get_dev_data(dev)->dev_config = dev_config;
    58f0:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
    58f2:	2000      	movs	r0, #0
    58f4:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
    58f6:	6813      	ldr	r3, [r2, #0]
    58f8:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    58fc:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
    5900:	e7f5      	b.n	58ee <i2c_nrfx_twim_configure+0x24>
		return -EINVAL;
    5902:	f06f 0015 	mvn.w	r0, #21
}
    5906:	4770      	bx	lr

00005908 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    5908:	b510      	push	{r4, lr}
    590a:	4604      	mov	r4, r0
    590c:	2200      	movs	r2, #0
    590e:	2101      	movs	r1, #1
    5910:	2003      	movs	r0, #3
    5912:	f7fb fde1 	bl	14d8 <z_arm_irq_priority_set>
    5916:	4620      	mov	r0, r4
    5918:	f7fc fdd2 	bl	24c0 <init_twim>
    591c:	bd10      	pop	{r4, pc}

0000591e <twim_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
    591e:	b510      	push	{r4, lr}
    5920:	4604      	mov	r4, r0
    5922:	2200      	movs	r2, #0
    5924:	2101      	movs	r1, #1
    5926:	2004      	movs	r0, #4
    5928:	f7fb fdd6 	bl	14d8 <z_arm_irq_priority_set>
    592c:	4620      	mov	r0, r4
    592e:	f7fc fdc7 	bl	24c0 <init_twim>
    5932:	bd10      	pop	{r4, pc}

00005934 <endtx_isr>:
	return dev->config;
    5934:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5936:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    5938:	f04f 0120 	mov.w	r1, #32
    593c:	f3ef 8211 	mrs	r2, BASEPRI
    5940:	f381 8812 	msr	BASEPRI_MAX, r1
    5944:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5948:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    594c:	b131      	cbz	r1, 595c <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    594e:	2100      	movs	r1, #0
    5950:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5954:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5958:	2101      	movs	r1, #1
    595a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    595c:	f382 8811 	msr	BASEPRI, r2
    5960:	f3bf 8f6f 	isb	sy
}
    5964:	4770      	bx	lr

00005966 <uarte_nrfx_isr_int>:
{
    5966:	b538      	push	{r3, r4, r5, lr}
    5968:	4604      	mov	r4, r0
	return dev->config;
    596a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    596c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    596e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5972:	f413 7f80 	tst.w	r3, #256	; 0x100
    5976:	d003      	beq.n	5980 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5978:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    597c:	2b00      	cmp	r3, #0
    597e:	d139      	bne.n	59f4 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
    5980:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5982:	685b      	ldr	r3, [r3, #4]
    5984:	f013 0f10 	tst.w	r3, #16
    5988:	d01a      	beq.n	59c0 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
    598a:	f04f 0320 	mov.w	r3, #32
    598e:	f3ef 8211 	mrs	r2, BASEPRI
    5992:	f383 8812 	msr	BASEPRI_MAX, r3
    5996:	f3bf 8f6f 	isb	sy
    599a:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    599e:	b113      	cbz	r3, 59a6 <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    59a0:	2300      	movs	r3, #0
    59a2:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
    59a6:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    59a8:	68db      	ldr	r3, [r3, #12]
    59aa:	b10b      	cbz	r3, 59b0 <uarte_nrfx_isr_int+0x4a>
    59ac:	691b      	ldr	r3, [r3, #16]
    59ae:	b91b      	cbnz	r3, 59b8 <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
    59b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    59b4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
    59b8:	f382 8811 	msr	BASEPRI, r2
    59bc:	f3bf 8f6f 	isb	sy
	return dev->data;
    59c0:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
    59c2:	68da      	ldr	r2, [r3, #12]
    59c4:	b1aa      	cbz	r2, 59f2 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    59c6:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    59ca:	b121      	cbz	r1, 59d6 <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
    59cc:	2100      	movs	r1, #0
    59ce:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    59d0:	68da      	ldr	r2, [r3, #12]
    59d2:	7b92      	ldrb	r2, [r2, #14]
    59d4:	b98a      	cbnz	r2, 59fa <uarte_nrfx_isr_int+0x94>
    59d6:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    59da:	b122      	cbz	r2, 59e6 <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59dc:	2200      	movs	r2, #0
    59de:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
    59e2:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
    59e6:	68da      	ldr	r2, [r3, #12]
    59e8:	6813      	ldr	r3, [r2, #0]
    59ea:	b113      	cbz	r3, 59f2 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    59ec:	6851      	ldr	r1, [r2, #4]
    59ee:	4620      	mov	r0, r4
    59f0:	4798      	blx	r3
}
    59f2:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    59f4:	f7ff ff9e 	bl	5934 <endtx_isr>
    59f8:	e7c2      	b.n	5980 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
    59fa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    59fe:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    5a02:	68db      	ldr	r3, [r3, #12]
    5a04:	7399      	strb	r1, [r3, #14]
			return;
    5a06:	e7f4      	b.n	59f2 <uarte_nrfx_isr_int+0x8c>

00005a08 <uarte_nrfx_configure>:
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    5a08:	794b      	ldrb	r3, [r1, #5]
    5a0a:	2b01      	cmp	r3, #1
    5a0c:	d142      	bne.n	5a94 <uarte_nrfx_configure+0x8c>
{
    5a0e:	b530      	push	{r4, r5, lr}
    5a10:	b083      	sub	sp, #12
    5a12:	4605      	mov	r5, r0
    5a14:	460c      	mov	r4, r1
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5a16:	798b      	ldrb	r3, [r1, #6]
    5a18:	2b03      	cmp	r3, #3
    5a1a:	d13f      	bne.n	5a9c <uarte_nrfx_configure+0x94>
	switch (cfg->flow_ctrl) {
    5a1c:	79cb      	ldrb	r3, [r1, #7]
    5a1e:	b133      	cbz	r3, 5a2e <uarte_nrfx_configure+0x26>
    5a20:	2b01      	cmp	r3, #1
    5a22:	d00e      	beq.n	5a42 <uarte_nrfx_configure+0x3a>
    5a24:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    5a28:	4618      	mov	r0, r3
    5a2a:	b003      	add	sp, #12
    5a2c:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    5a2e:	2300      	movs	r3, #0
    5a30:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    5a34:	7923      	ldrb	r3, [r4, #4]
    5a36:	b183      	cbz	r3, 5a5a <uarte_nrfx_configure+0x52>
    5a38:	2b02      	cmp	r3, #2
    5a3a:	d027      	beq.n	5a8c <uarte_nrfx_configure+0x84>
    5a3c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5a40:	e7f2      	b.n	5a28 <uarte_nrfx_configure+0x20>
	return dev->config;
    5a42:	6843      	ldr	r3, [r0, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    5a44:	685b      	ldr	r3, [r3, #4]
    5a46:	f003 0201 	and.w	r2, r3, #1
    5a4a:	f003 0302 	and.w	r3, r3, #2
    5a4e:	4313      	orrs	r3, r2
    5a50:	d027      	beq.n	5aa2 <uarte_nrfx_configure+0x9a>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    5a52:	2301      	movs	r3, #1
    5a54:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    5a58:	e7ec      	b.n	5a34 <uarte_nrfx_configure+0x2c>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    5a5a:	2300      	movs	r3, #0
    5a5c:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5a60:	6821      	ldr	r1, [r4, #0]
    5a62:	4628      	mov	r0, r5
    5a64:	f7fc fd42 	bl	24ec <baudrate_set>
    5a68:	4603      	mov	r3, r0
    5a6a:	b9e8      	cbnz	r0, 5aa8 <uarte_nrfx_configure+0xa0>
	return dev->config;
    5a6c:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    5a6e:	6811      	ldr	r1, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5a70:	f89d 2005 	ldrb.w	r2, [sp, #5]
                    | (uint32_t)p_cfg->hwfc;
    5a74:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5a78:	4302      	orrs	r2, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5a7a:	f8c1 256c 	str.w	r2, [r1, #1388]	; 0x56c
	return dev->data;
    5a7e:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    5a80:	3204      	adds	r2, #4
    5a82:	e894 0003 	ldmia.w	r4, {r0, r1}
    5a86:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    5a8a:	e7cd      	b.n	5a28 <uarte_nrfx_configure+0x20>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5a8c:	230e      	movs	r3, #14
    5a8e:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    5a92:	e7e5      	b.n	5a60 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
    5a94:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    5a98:	4618      	mov	r0, r3
    5a9a:	4770      	bx	lr
		return -ENOTSUP;
    5a9c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5aa0:	e7c2      	b.n	5a28 <uarte_nrfx_configure+0x20>
			return -ENOTSUP;
    5aa2:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5aa6:	e7bf      	b.n	5a28 <uarte_nrfx_configure+0x20>
		return -ENOTSUP;
    5aa8:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5aac:	e7bc      	b.n	5a28 <uarte_nrfx_configure+0x20>

00005aae <uarte_nrfx_config_get>:
{
    5aae:	460b      	mov	r3, r1
	return dev->data;
    5ab0:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    5ab2:	6891      	ldr	r1, [r2, #8]
    5ab4:	6850      	ldr	r0, [r2, #4]
    5ab6:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5aba:	2000      	movs	r0, #0
    5abc:	4770      	bx	lr

00005abe <uarte_nrfx_err_check>:
	return dev->config;
    5abe:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5ac0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5ac2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5ac6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5aca:	4770      	bx	lr

00005acc <is_tx_ready>:
	return dev->config;
    5acc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5ace:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5ad0:	685b      	ldr	r3, [r3, #4]
    5ad2:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ad6:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5ada:	b929      	cbnz	r1, 5ae8 <is_tx_ready+0x1c>
    5adc:	b933      	cbnz	r3, 5aec <is_tx_ready+0x20>
    5ade:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    5ae2:	b92b      	cbnz	r3, 5af0 <is_tx_ready+0x24>
    5ae4:	2000      	movs	r0, #0
    5ae6:	4770      	bx	lr
    5ae8:	2001      	movs	r0, #1
    5aea:	4770      	bx	lr
    5aec:	2000      	movs	r0, #0
    5aee:	4770      	bx	lr
    5af0:	2001      	movs	r0, #1
}
    5af2:	4770      	bx	lr

00005af4 <uarte_enable>:
	return dev->config;
    5af4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5af6:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5af8:	2208      	movs	r2, #8
    5afa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    5afe:	4770      	bx	lr

00005b00 <tx_start>:
{
    5b00:	b510      	push	{r4, lr}
	return dev->config;
    5b02:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5b04:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5b06:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5b0a:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b0e:	2300      	movs	r3, #0
    5b10:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    5b14:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    5b18:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    5b1c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    5b20:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5b22:	685b      	ldr	r3, [r3, #4]
    5b24:	f013 0f10 	tst.w	r3, #16
    5b28:	d102      	bne.n	5b30 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b2a:	2301      	movs	r3, #1
    5b2c:	60a3      	str	r3, [r4, #8]
}
    5b2e:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    5b30:	2101      	movs	r1, #1
    5b32:	f7ff ffdf 	bl	5af4 <uarte_enable>
    p_reg->INTENSET = mask;
    5b36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5b3a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    5b3e:	e7f4      	b.n	5b2a <tx_start+0x2a>

00005b40 <uarte_nrfx_poll_in>:
{
    5b40:	b410      	push	{r4}
	return dev->data;
    5b42:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    5b44:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5b46:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b48:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5b4c:	b152      	cbz	r2, 5b64 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    5b4e:	7d62      	ldrb	r2, [r4, #21]
    5b50:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b52:	2000      	movs	r0, #0
    5b54:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5b58:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b5c:	2201      	movs	r2, #1
    5b5e:	601a      	str	r2, [r3, #0]
}
    5b60:	bc10      	pop	{r4}
    5b62:	4770      	bx	lr
		return -1;
    5b64:	f04f 30ff 	mov.w	r0, #4294967295
    5b68:	e7fa      	b.n	5b60 <uarte_nrfx_poll_in+0x20>

00005b6a <uarte_nrfx_fifo_fill>:
{
    5b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b6e:	4680      	mov	r8, r0
	return dev->data;
    5b70:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    5b72:	68fb      	ldr	r3, [r7, #12]
    5b74:	899e      	ldrh	r6, [r3, #12]
    5b76:	4296      	cmp	r6, r2
    5b78:	bfa8      	it	ge
    5b7a:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    5b7c:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5b7e:	2201      	movs	r2, #1
    5b80:	f3bf 8f5b 	dmb	ish
    5b84:	e853 0f00 	ldrex	r0, [r3]
    5b88:	2800      	cmp	r0, #0
    5b8a:	d103      	bne.n	5b94 <uarte_nrfx_fifo_fill+0x2a>
    5b8c:	e843 2400 	strex	r4, r2, [r3]
    5b90:	2c00      	cmp	r4, #0
    5b92:	d1f7      	bne.n	5b84 <uarte_nrfx_fifo_fill+0x1a>
    5b94:	f3bf 8f5b 	dmb	ish
    5b98:	d101      	bne.n	5b9e <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
    5b9a:	2300      	movs	r3, #0
    5b9c:	e006      	b.n	5bac <uarte_nrfx_fifo_fill+0x42>
		return 0;
    5b9e:	2600      	movs	r6, #0
    5ba0:	e019      	b.n	5bd6 <uarte_nrfx_fifo_fill+0x6c>
		data->int_driven->tx_buffer[i] = tx_data[i];
    5ba2:	68fc      	ldr	r4, [r7, #12]
    5ba4:	68a4      	ldr	r4, [r4, #8]
    5ba6:	5ccd      	ldrb	r5, [r1, r3]
    5ba8:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
    5baa:	3301      	adds	r3, #1
    5bac:	42b3      	cmp	r3, r6
    5bae:	dbf8      	blt.n	5ba2 <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
    5bb0:	f04f 0320 	mov.w	r3, #32
    5bb4:	f3ef 8411 	mrs	r4, BASEPRI
    5bb8:	f383 8812 	msr	BASEPRI_MAX, r3
    5bbc:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    5bc0:	4640      	mov	r0, r8
    5bc2:	f7ff ff83 	bl	5acc <is_tx_ready>
    5bc6:	b948      	cbnz	r0, 5bdc <uarte_nrfx_fifo_fill+0x72>
		data->int_driven->fifo_fill_lock = 0;
    5bc8:	68fb      	ldr	r3, [r7, #12]
    5bca:	2600      	movs	r6, #0
    5bcc:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
    5bce:	f384 8811 	msr	BASEPRI, r4
    5bd2:	f3bf 8f6f 	isb	sy
}
    5bd6:	4630      	mov	r0, r6
    5bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    5bdc:	68fb      	ldr	r3, [r7, #12]
    5bde:	4632      	mov	r2, r6
    5be0:	6899      	ldr	r1, [r3, #8]
    5be2:	4640      	mov	r0, r8
    5be4:	f7ff ff8c 	bl	5b00 <tx_start>
    5be8:	e7f1      	b.n	5bce <uarte_nrfx_fifo_fill+0x64>

00005bea <uarte_nrfx_fifo_read>:
	return dev->config;
    5bea:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5bec:	681b      	ldr	r3, [r3, #0]
	return dev->data;
    5bee:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5bf0:	2a00      	cmp	r2, #0
    5bf2:	dd0c      	ble.n	5c0e <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5bf4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    5bf8:	b15a      	cbz	r2, 5c12 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bfa:	2200      	movs	r2, #0
    5bfc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    5c00:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    5c04:	7d42      	ldrb	r2, [r0, #21]
    5c06:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c08:	2001      	movs	r0, #1
    5c0a:	6018      	str	r0, [r3, #0]
}
    5c0c:	4770      	bx	lr
	int num_rx = 0;
    5c0e:	2000      	movs	r0, #0
    5c10:	4770      	bx	lr
    5c12:	2000      	movs	r0, #0
}
    5c14:	4770      	bx	lr

00005c16 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
    5c16:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c18:	681a      	ldr	r2, [r3, #0]
	return dev->data;
    5c1a:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
    5c1c:	f04f 0020 	mov.w	r0, #32
    5c20:	f3ef 8311 	mrs	r3, BASEPRI
    5c24:	f380 8812 	msr	BASEPRI_MAX, r0
    5c28:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    5c2c:	68c9      	ldr	r1, [r1, #12]
    5c2e:	2000      	movs	r0, #0
    5c30:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    5c32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    5c36:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    5c3a:	f383 8811 	msr	BASEPRI, r3
    5c3e:	f3bf 8f6f 	isb	sy
}
    5c42:	4770      	bx	lr

00005c44 <uarte_nrfx_irq_tx_disable>:
	return dev->data;
    5c44:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
    5c46:	68db      	ldr	r3, [r3, #12]
    5c48:	2201      	movs	r2, #1
    5c4a:	739a      	strb	r2, [r3, #14]
}
    5c4c:	4770      	bx	lr

00005c4e <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
    5c4e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c50:	6819      	ldr	r1, [r3, #0]
	return dev->data;
    5c52:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
    5c54:	68db      	ldr	r3, [r3, #12]
    5c56:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    5c58:	b94a      	cbnz	r2, 5c6e <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c5a:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    5c5e:	b15a      	cbz	r2, 5c78 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
    5c60:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    5c64:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    5c68:	d008      	beq.n	5c7c <uarte_nrfx_irq_tx_ready_complete+0x2e>
    5c6a:	2001      	movs	r0, #1
    5c6c:	e000      	b.n	5c70 <uarte_nrfx_irq_tx_ready_complete+0x22>
    5c6e:	2000      	movs	r0, #0
	if (ready) {
    5c70:	b108      	cbz	r0, 5c76 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    5c72:	2200      	movs	r2, #0
    5c74:	611a      	str	r2, [r3, #16]
}
    5c76:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    5c78:	2000      	movs	r0, #0
    5c7a:	e7f9      	b.n	5c70 <uarte_nrfx_irq_tx_ready_complete+0x22>
    5c7c:	2000      	movs	r0, #0
    5c7e:	e7f7      	b.n	5c70 <uarte_nrfx_irq_tx_ready_complete+0x22>

00005c80 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
    5c80:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c82:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c84:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    5c88:	3800      	subs	r0, #0
    5c8a:	bf18      	it	ne
    5c8c:	2001      	movne	r0, #1
    5c8e:	4770      	bx	lr

00005c90 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
    5c90:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c92:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5c94:	2210      	movs	r2, #16
    5c96:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5c9a:	4770      	bx	lr

00005c9c <uarte_nrfx_irq_rx_disable>:
	return dev->config;
    5c9c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c9e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5ca0:	2210      	movs	r2, #16
    5ca2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    5ca6:	4770      	bx	lr

00005ca8 <uarte_nrfx_irq_err_enable>:
	return dev->config;
    5ca8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5caa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5cac:	f44f 7200 	mov.w	r2, #512	; 0x200
    5cb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5cb4:	4770      	bx	lr

00005cb6 <uarte_nrfx_irq_err_disable>:
	return dev->config;
    5cb6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5cb8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5cba:	f44f 7200 	mov.w	r2, #512	; 0x200
    5cbe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    5cc2:	4770      	bx	lr

00005cc4 <uarte_nrfx_irq_is_pending>:
{
    5cc4:	b538      	push	{r3, r4, r5, lr}
    5cc6:	4604      	mov	r4, r0
	return dev->config;
    5cc8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5cca:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    5ccc:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    5cd0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    5cd4:	d106      	bne.n	5ce4 <uarte_nrfx_irq_is_pending+0x20>
    5cd6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    5cda:	f013 0f10 	tst.w	r3, #16
    5cde:	d107      	bne.n	5cf0 <uarte_nrfx_irq_is_pending+0x2c>
    5ce0:	2000      	movs	r0, #0
}
    5ce2:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    5ce4:	f7ff ffb3 	bl	5c4e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    5ce8:	2800      	cmp	r0, #0
    5cea:	d0f4      	beq.n	5cd6 <uarte_nrfx_irq_is_pending+0x12>
		||
    5cec:	2001      	movs	r0, #1
    5cee:	e7f8      	b.n	5ce2 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
    5cf0:	4620      	mov	r0, r4
    5cf2:	f7ff ffc5 	bl	5c80 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    5cf6:	2800      	cmp	r0, #0
    5cf8:	d0f3      	beq.n	5ce2 <uarte_nrfx_irq_is_pending+0x1e>
		||
    5cfa:	2001      	movs	r0, #1
    5cfc:	e7f1      	b.n	5ce2 <uarte_nrfx_irq_is_pending+0x1e>

00005cfe <uarte_nrfx_irq_update>:
}
    5cfe:	2001      	movs	r0, #1
    5d00:	4770      	bx	lr

00005d02 <uarte_nrfx_irq_callback_set>:
	return dev->data;
    5d02:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    5d04:	68d8      	ldr	r0, [r3, #12]
    5d06:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    5d08:	68db      	ldr	r3, [r3, #12]
    5d0a:	605a      	str	r2, [r3, #4]
}
    5d0c:	4770      	bx	lr

00005d0e <wait_tx_ready>:
{
    5d0e:	b570      	push	{r4, r5, r6, lr}
    5d10:	4606      	mov	r6, r0
    5d12:	e014      	b.n	5d3e <wait_tx_ready+0x30>
		if (res) {
    5d14:	b17d      	cbz	r5, 5d36 <wait_tx_ready+0x28>
	__asm__ volatile(
    5d16:	f04f 0320 	mov.w	r3, #32
    5d1a:	f3ef 8411 	mrs	r4, BASEPRI
    5d1e:	f383 8812 	msr	BASEPRI_MAX, r3
    5d22:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5d26:	4630      	mov	r0, r6
    5d28:	f7ff fed0 	bl	5acc <is_tx_ready>
    5d2c:	b9a0      	cbnz	r0, 5d58 <wait_tx_ready+0x4a>
	__asm__ volatile(
    5d2e:	f384 8811 	msr	BASEPRI, r4
    5d32:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    5d36:	2021      	movs	r0, #33	; 0x21
    5d38:	2100      	movs	r1, #0
    5d3a:	f7fe fc8b 	bl	4654 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5d3e:	2464      	movs	r4, #100	; 0x64
    5d40:	4630      	mov	r0, r6
    5d42:	f7ff fec3 	bl	5acc <is_tx_ready>
    5d46:	4605      	mov	r5, r0
    5d48:	2800      	cmp	r0, #0
    5d4a:	d1e3      	bne.n	5d14 <wait_tx_ready+0x6>
    5d4c:	2001      	movs	r0, #1
    5d4e:	f000 f929 	bl	5fa4 <nrfx_busy_wait>
    5d52:	3c01      	subs	r4, #1
    5d54:	d1f4      	bne.n	5d40 <wait_tx_ready+0x32>
    5d56:	e7dd      	b.n	5d14 <wait_tx_ready+0x6>
}
    5d58:	4620      	mov	r0, r4
    5d5a:	bd70      	pop	{r4, r5, r6, pc}

00005d5c <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    5d5e:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    5d60:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    5d62:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5d64:	2300      	movs	r3, #0
    5d66:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5d6a:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    5d6c:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    5d6e:	f003 021f 	and.w	r2, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5d72:	2301      	movs	r3, #1
    5d74:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    5d76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5d7a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
    5d7e:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    5d80:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    5d84:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5d88:	2103      	movs	r1, #3
    5d8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    5d8e:	68e3      	ldr	r3, [r4, #12]
    5d90:	f1b3 3fff 	cmp.w	r3, #4294967295
    5d94:	d009      	beq.n	5daa <uarte_instance_init+0x4e>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    5d96:	7e22      	ldrb	r2, [r4, #24]
    *p_pin = pin_number & 0x1F;
    5d98:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5d9c:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    5d9e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5da2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    5daa:	68a2      	ldr	r2, [r4, #8]
    5dac:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    5dae:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    5db2:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    5db6:	6923      	ldr	r3, [r4, #16]
    5db8:	f1b3 3fff 	cmp.w	r3, #4294967295
    5dbc:	d009      	beq.n	5dd2 <uarte_instance_init+0x76>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    5dbe:	7e62      	ldrb	r2, [r4, #25]
    *p_pin = pin_number & 0x1F;
    5dc0:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5dc4:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    5dc6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5dca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    5dd2:	6963      	ldr	r3, [r4, #20]
    5dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
    5dd8:	d010      	beq.n	5dfc <uarte_instance_init+0xa0>
    *p_pin = pin_number & 0x1F;
    5dda:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5dde:	2201      	movs	r2, #1
    5de0:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    5de4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5de8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    5dec:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    5dee:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    5df2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5df6:	2103      	movs	r1, #3
    5df8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    5dfc:	6962      	ldr	r2, [r4, #20]
    5dfe:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    5e00:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    5e04:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    5e08:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    5e0a:	3104      	adds	r1, #4
    5e0c:	f7ff fdfc 	bl	5a08 <uarte_nrfx_configure>
	if (err) {
    5e10:	4607      	mov	r7, r0
    5e12:	bb80      	cbnz	r0, 5e76 <uarte_instance_init+0x11a>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5e14:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5e16:	f013 0f08 	tst.w	r3, #8
    5e1a:	d12e      	bne.n	5e7a <uarte_instance_init+0x11e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5e1c:	2308      	movs	r3, #8
    5e1e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    5e22:	68e3      	ldr	r3, [r4, #12]
    5e24:	f1b3 3fff 	cmp.w	r3, #4294967295
    5e28:	d00c      	beq.n	5e44 <uarte_instance_init+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e2a:	2300      	movs	r3, #0
    5e2c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    5e30:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    5e34:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5e38:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5e3c:	2301      	movs	r3, #1
    5e3e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e42:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5e44:	6863      	ldr	r3, [r4, #4]
    5e46:	f013 0f08 	tst.w	r3, #8
    5e4a:	d103      	bne.n	5e54 <uarte_instance_init+0xf8>
    p_reg->INTENSET = mask;
    5e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
    5e50:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5e54:	6863      	ldr	r3, [r4, #4]
    5e56:	f013 0f10 	tst.w	r3, #16
    5e5a:	d003      	beq.n	5e64 <uarte_instance_init+0x108>
    5e5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5e60:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    5e64:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5e66:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5e6a:	2300      	movs	r3, #0
    5e6c:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e70:	2301      	movs	r3, #1
    5e72:	60ab      	str	r3, [r5, #8]
    5e74:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5e76:	4638      	mov	r0, r7
    5e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    5e7a:	4631      	mov	r1, r6
    5e7c:	4628      	mov	r0, r5
    5e7e:	f7fc fc15 	bl	26ac <endtx_stoptx_ppi_init>
		if (err < 0) {
    5e82:	2800      	cmp	r0, #0
    5e84:	daca      	bge.n	5e1c <uarte_instance_init+0xc0>
			return err;
    5e86:	4607      	mov	r7, r0
    5e88:	e7f5      	b.n	5e76 <uarte_instance_init+0x11a>

00005e8a <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5e8a:	b510      	push	{r4, lr}
    5e8c:	4604      	mov	r4, r0
    5e8e:	2200      	movs	r2, #0
    5e90:	2101      	movs	r1, #1
    5e92:	2002      	movs	r0, #2
    5e94:	f7fb fb20 	bl	14d8 <z_arm_irq_priority_set>
    5e98:	2002      	movs	r0, #2
    5e9a:	f7fb faff 	bl	149c <arch_irq_enable>
    5e9e:	2101      	movs	r1, #1
    5ea0:	4620      	mov	r0, r4
    5ea2:	f7ff ff5b 	bl	5d5c <uarte_instance_init>
    5ea6:	bd10      	pop	{r4, pc}

00005ea8 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    5ea8:	4770      	bx	lr

00005eaa <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5eaa:	4770      	bx	lr

00005eac <counter_sub>:
	return (a - b) & COUNTER_MAX;
    5eac:	1a40      	subs	r0, r0, r1
}
    5eae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5eb2:	4770      	bx	lr

00005eb4 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5eb4:	f100 0350 	add.w	r3, r0, #80	; 0x50
    5eb8:	009b      	lsls	r3, r3, #2
    5eba:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5ebc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5ec0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5ec4:	2200      	movs	r2, #0
    5ec6:	601a      	str	r2, [r3, #0]
    5ec8:	681b      	ldr	r3, [r3, #0]
}
    5eca:	4770      	bx	lr

00005ecc <absolute_time_to_cc>:
}
    5ecc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5ed0:	4770      	bx	lr

00005ed2 <full_int_lock>:
	__asm__ volatile(
    5ed2:	f04f 0320 	mov.w	r3, #32
    5ed6:	f3ef 8011 	mrs	r0, BASEPRI
    5eda:	f383 8812 	msr	BASEPRI_MAX, r3
    5ede:	f3bf 8f6f 	isb	sy
}
    5ee2:	4770      	bx	lr

00005ee4 <full_int_unlock>:
	__asm__ volatile(
    5ee4:	f380 8811 	msr	BASEPRI, r0
    5ee8:	f3bf 8f6f 	isb	sy
}
    5eec:	4770      	bx	lr

00005eee <set_absolute_alarm>:
{
    5eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ef0:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5ef2:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    5ef6:	f7fc fc07 	bl	2708 <get_comparator>
    5efa:	4607      	mov	r7, r0
    5efc:	e019      	b.n	5f32 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    5efe:	2013      	movs	r0, #19
    5f00:	f000 fab6 	bl	6470 <z_impl_k_busy_wait>
}
    5f04:	e022      	b.n	5f4c <set_absolute_alarm+0x5e>
		event_clear(chan);
    5f06:	4630      	mov	r0, r6
    5f08:	f7ff ffd4 	bl	5eb4 <event_clear>
		event_enable(chan);
    5f0c:	4630      	mov	r0, r6
    5f0e:	f7fc fc03 	bl	2718 <event_enable>
		set_comparator(chan, cc_val);
    5f12:	4629      	mov	r1, r5
    5f14:	4630      	mov	r0, r6
    5f16:	f7fc fbed 	bl	26f4 <set_comparator>
		now2 = counter();
    5f1a:	f7fc fc11 	bl	2740 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5f1e:	4284      	cmp	r4, r0
    5f20:	d01e      	beq.n	5f60 <set_absolute_alarm+0x72>
    5f22:	1c81      	adds	r1, r0, #2
    5f24:	4628      	mov	r0, r5
    5f26:	f7ff ffc1 	bl	5eac <counter_sub>
	} while ((now2 != now) &&
    5f2a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5f2e:	d917      	bls.n	5f60 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    5f30:	462f      	mov	r7, r5
		now = counter();
    5f32:	f7fc fc05 	bl	2740 <counter>
    5f36:	4604      	mov	r4, r0
		set_comparator(chan, now);
    5f38:	4601      	mov	r1, r0
    5f3a:	4630      	mov	r0, r6
    5f3c:	f7fc fbda 	bl	26f4 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    5f40:	4621      	mov	r1, r4
    5f42:	4638      	mov	r0, r7
    5f44:	f7ff ffb2 	bl	5eac <counter_sub>
    5f48:	2801      	cmp	r0, #1
    5f4a:	d0d8      	beq.n	5efe <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5f4c:	1ca7      	adds	r7, r4, #2
    5f4e:	4639      	mov	r1, r7
    5f50:	4628      	mov	r0, r5
    5f52:	f7ff ffab 	bl	5eac <counter_sub>
    5f56:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5f5a:	d9d4      	bls.n	5f06 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    5f5c:	463d      	mov	r5, r7
    5f5e:	e7d2      	b.n	5f06 <set_absolute_alarm+0x18>
}
    5f60:	4628      	mov	r0, r5
    5f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005f64 <compare_set>:
{
    5f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f66:	b083      	sub	sp, #12
    5f68:	4604      	mov	r4, r0
    5f6a:	4617      	mov	r7, r2
    5f6c:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    5f6e:	f7fc fbed 	bl	274c <compare_int_lock>
    5f72:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    5f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5f76:	9301      	str	r3, [sp, #4]
    5f78:	9b08      	ldr	r3, [sp, #32]
    5f7a:	9300      	str	r3, [sp, #0]
    5f7c:	463a      	mov	r2, r7
    5f7e:	462b      	mov	r3, r5
    5f80:	4620      	mov	r0, r4
    5f82:	f7fc fcd1 	bl	2928 <compare_set_nolocks>
    5f86:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    5f88:	4631      	mov	r1, r6
    5f8a:	4620      	mov	r0, r4
    5f8c:	f7fc fc42 	bl	2814 <compare_int_unlock>
}
    5f90:	4628      	mov	r0, r5
    5f92:	b003      	add	sp, #12
    5f94:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005f96 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5f96:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    5f98:	2000      	movs	r0, #0
    5f9a:	f7fb fe13 	bl	1bc4 <sys_arch_reboot>

00005f9e <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    5f9e:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    5fa0:	4780      	blx	r0
}
    5fa2:	bd08      	pop	{r3, pc}

00005fa4 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    5fa4:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    5fa6:	f000 fa63 	bl	6470 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    5faa:	bd08      	pop	{r3, pc}

00005fac <nrfx_clock_enable>:
{
    5fac:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5fae:	2000      	movs	r0, #0
    5fb0:	f7fb fa84 	bl	14bc <arch_irq_is_enabled>
    5fb4:	b100      	cbz	r0, 5fb8 <nrfx_clock_enable+0xc>
}
    5fb6:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5fb8:	f7fb fa70 	bl	149c <arch_irq_enable>
    5fbc:	e7fb      	b.n	5fb6 <nrfx_clock_enable+0xa>

00005fbe <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    5fbe:	2301      	movs	r3, #1
    5fc0:	4083      	lsls	r3, r0
    5fc2:	f013 0fff 	tst.w	r3, #255	; 0xff
}
    5fc6:	bf14      	ite	ne
    5fc8:	2001      	movne	r0, #1
    5fca:	2000      	moveq	r0, #0
    5fcc:	4770      	bx	lr

00005fce <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    5fce:	7b0b      	ldrb	r3, [r1, #12]
    5fd0:	2b03      	cmp	r3, #3
    5fd2:	d839      	bhi.n	6048 <xfer_completeness_check+0x7a>
    5fd4:	e8df f003 	tbb	[pc, r3]
    5fd8:	0216312a 	.word	0x0216312a
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    5fdc:	688b      	ldr	r3, [r1, #8]
    5fde:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    5fe2:	d004      	beq.n	5fee <xfer_completeness_check+0x20>
}

NRF_STATIC_INLINE size_t nrf_twim_txd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    5fe4:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    5fe8:	690a      	ldr	r2, [r1, #16]
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    5fea:	429a      	cmp	r2, r3
    5fec:	d10f      	bne.n	600e <xfer_completeness_check+0x40>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    5fee:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    5ff0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    5ff4:	d12a      	bne.n	604c <xfer_completeness_check+0x7e>
    5ff6:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length)))
    5ffa:	694a      	ldr	r2, [r1, #20]
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    5ffc:	429a      	cmp	r2, r3
    5ffe:	d106      	bne.n	600e <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    6000:	2001      	movs	r0, #1
    6002:	4770      	bx	lr
    6004:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    6008:	690a      	ldr	r2, [r1, #16]
    600a:	429a      	cmp	r2, r3
    600c:	d007      	beq.n	601e <xfer_completeness_check+0x50>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    600e:	2300      	movs	r3, #0
    6010:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    6014:	2206      	movs	r2, #6
    6016:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
}
    601a:	4618      	mov	r0, r3
    601c:	4770      	bx	lr
}

NRF_STATIC_INLINE size_t nrf_twim_rxd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    601e:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
                (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length))
    6022:	694a      	ldr	r2, [r1, #20]
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    6024:	429a      	cmp	r2, r3
    6026:	d1f2      	bne.n	600e <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    6028:	2001      	movs	r0, #1
    602a:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    602c:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    6030:	690a      	ldr	r2, [r1, #16]
    6032:	429a      	cmp	r2, r3
    6034:	d1eb      	bne.n	600e <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    6036:	2001      	movs	r0, #1
    6038:	4770      	bx	lr
    return p_reg->RXD.AMOUNT;
    603a:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    603e:	690a      	ldr	r2, [r1, #16]
    6040:	429a      	cmp	r2, r3
    6042:	d1e4      	bne.n	600e <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    6044:	2001      	movs	r0, #1
}
    6046:	4770      	bx	lr
    switch (p_cb->xfer_desc.type)
    6048:	2001      	movs	r0, #1
    604a:	4770      	bx	lr
    bool transfer_complete = true;
    604c:	2001      	movs	r0, #1
    604e:	4770      	bx	lr

00006050 <twim_pins_configure>:
{
    6050:	b410      	push	{r4}
    TWIM_PIN_INIT(p_config->scl, drive);
    6052:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    6054:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    6058:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    605c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6060:	f240 640c 	movw	r4, #1548	; 0x60c
    6064:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda, drive);
    6068:	684b      	ldr	r3, [r1, #4]
    *p_pin = pin_number & 0x1F;
    606a:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    606e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6072:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    6076:	680a      	ldr	r2, [r1, #0]
    6078:	684b      	ldr	r3, [r1, #4]
    p_reg->PSEL.SCL = scl_pin;
    607a:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    607e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    6082:	2001      	movs	r0, #1
    6084:	bc10      	pop	{r4}
    6086:	4770      	bx	lr

00006088 <twim_list_enable_handle>:
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    6088:	f011 0f01 	tst.w	r1, #1
    608c:	d009      	beq.n	60a2 <twim_list_enable_handle+0x1a>
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    608e:	2301      	movs	r3, #1
    6090:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    6094:	f011 0f02 	tst.w	r1, #2
    6098:	d007      	beq.n	60aa <twim_list_enable_handle+0x22>
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    609a:	2301      	movs	r3, #1
    609c:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
    60a0:	4770      	bx	lr
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    60a2:	2300      	movs	r3, #0
    60a4:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
    60a8:	e7f4      	b.n	6094 <twim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    60aa:	2300      	movs	r3, #0
    60ac:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
    60b0:	4770      	bx	lr

000060b2 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    60b2:	b508      	push	{r3, lr}
  _DoInit();
    60b4:	f7fd fccc 	bl	3a50 <_DoInit>
}
    60b8:	bd08      	pop	{r3, pc}

000060ba <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    60ba:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    60bc:	f7ff fff9 	bl	60b2 <SEGGER_RTT_Init>

	return 0;
}
    60c0:	2000      	movs	r0, #0
    60c2:	bd08      	pop	{r3, pc}

000060c4 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    60c4:	b148      	cbz	r0, 60da <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    60c6:	68c3      	ldr	r3, [r0, #12]
    60c8:	8818      	ldrh	r0, [r3, #0]
    60ca:	f3c0 0008 	ubfx	r0, r0, #0, #9
    60ce:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    60d2:	bf14      	ite	ne
    60d4:	2000      	movne	r0, #0
    60d6:	2001      	moveq	r0, #1
    60d8:	4770      	bx	lr
		return false;
    60da:	2000      	movs	r0, #0
}
    60dc:	4770      	bx	lr

000060de <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    60de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60e0:	4605      	mov	r5, r0
    60e2:	460e      	mov	r6, r1
	__asm__ volatile(
    60e4:	f04f 0320 	mov.w	r3, #32
    60e8:	f3ef 8711 	mrs	r7, BASEPRI
    60ec:	f383 8812 	msr	BASEPRI_MAX, r3
    60f0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    60f4:	f7fe fada 	bl	46ac <z_impl_z_current_get>
    60f8:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    60fa:	4631      	mov	r1, r6
    60fc:	4628      	mov	r0, r5
    60fe:	f7ff ff4a 	bl	5f96 <k_sys_fatal_error_handler>
	__asm__ volatile(
    6102:	f387 8811 	msr	BASEPRI, r7
    6106:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    610a:	4620      	mov	r0, r4
    610c:	f7fb fca4 	bl	1a58 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006112 <setup_thread_stack>:
{
    6112:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6114:	3207      	adds	r2, #7
    6116:	f022 0207 	bic.w	r2, r2, #7
    611a:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    611e:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    6122:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    6126:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    612a:	2200      	movs	r2, #0
    612c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    6130:	18c8      	adds	r0, r1, r3
    6132:	bc10      	pop	{r4}
    6134:	4770      	bx	lr

00006136 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6136:	f3ef 8005 	mrs	r0, IPSR
}
    613a:	3800      	subs	r0, #0
    613c:	bf18      	it	ne
    613e:	2001      	movne	r0, #1
    6140:	4770      	bx	lr

00006142 <z_impl_k_thread_start>:
{
    6142:	b508      	push	{r3, lr}
	z_sched_start(thread);
    6144:	f7fe f8e0 	bl	4308 <z_sched_start>
}
    6148:	bd08      	pop	{r3, pc}

0000614a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    614a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    614c:	2400      	movs	r4, #0
    614e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    6150:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    6152:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    6154:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    6156:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    6158:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    615a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    615c:	bc10      	pop	{r4}
    615e:	4770      	bx	lr

00006160 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
    6160:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
    6162:	f7fb f8d9 	bl	1318 <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
    6166:	f7ff fea0 	bl	5eaa <sys_clock_idle_exit>
}
    616a:	bd08      	pop	{r3, pc}

0000616c <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
    616c:	b508      	push	{r3, lr}
	__asm__ volatile(
    616e:	f04f 0220 	mov.w	r2, #32
    6172:	f3ef 8311 	mrs	r3, BASEPRI
    6176:	f382 8812 	msr	BASEPRI_MAX, r2
    617a:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
    617e:	f7fd fedb 	bl	3f38 <pm_save_idle>
    6182:	e7f4      	b.n	616e <idle+0x2>

00006184 <thread_active_elsewhere>:
}
    6184:	2000      	movs	r0, #0
    6186:	4770      	bx	lr

00006188 <pended_on_thread>:
}
    6188:	6880      	ldr	r0, [r0, #8]
    618a:	4770      	bx	lr

0000618c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    618c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    6190:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    6194:	4283      	cmp	r3, r0
    6196:	d001      	beq.n	619c <z_sched_prio_cmp+0x10>
		return b2 - b1;
    6198:	1ac0      	subs	r0, r0, r3
    619a:	4770      	bx	lr
	return 0;
    619c:	2000      	movs	r0, #0
}
    619e:	4770      	bx	lr

000061a0 <z_reschedule_irqlock>:
{
    61a0:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    61a2:	4603      	mov	r3, r0
    61a4:	b920      	cbnz	r0, 61b0 <z_reschedule_irqlock+0x10>
    61a6:	f3ef 8205 	mrs	r2, IPSR
    61aa:	b942      	cbnz	r2, 61be <z_reschedule_irqlock+0x1e>
    61ac:	2201      	movs	r2, #1
    61ae:	e000      	b.n	61b2 <z_reschedule_irqlock+0x12>
    61b0:	2200      	movs	r2, #0
	if (resched(key)) {
    61b2:	b932      	cbnz	r2, 61c2 <z_reschedule_irqlock+0x22>
	__asm__ volatile(
    61b4:	f383 8811 	msr	BASEPRI, r3
    61b8:	f3bf 8f6f 	isb	sy
}
    61bc:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    61be:	2200      	movs	r2, #0
    61c0:	e7f7      	b.n	61b2 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    61c2:	4618      	mov	r0, r3
    61c4:	f7fb f9be 	bl	1544 <arch_swap>
	return ret;
    61c8:	e7f8      	b.n	61bc <z_reschedule_irqlock+0x1c>

000061ca <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    61ca:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    61cc:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    61ce:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    61d0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    61d2:	2300      	movs	r3, #0
    61d4:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    61d6:	604b      	str	r3, [r1, #4]
}
    61d8:	4770      	bx	lr

000061da <z_priq_dumb_best>:
{
    61da:	4603      	mov	r3, r0
	return list->head == list;
    61dc:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    61de:	4283      	cmp	r3, r0
    61e0:	d000      	beq.n	61e4 <z_priq_dumb_best+0xa>
}
    61e2:	4770      	bx	lr
	struct k_thread *thread = NULL;
    61e4:	2000      	movs	r0, #0
	return thread;
    61e6:	e7fc      	b.n	61e2 <z_priq_dumb_best+0x8>

000061e8 <z_ready_thread>:
{
    61e8:	b538      	push	{r3, r4, r5, lr}
    61ea:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    61ec:	2300      	movs	r3, #0
	__asm__ volatile(
    61ee:	f04f 0220 	mov.w	r2, #32
    61f2:	f3ef 8511 	mrs	r5, BASEPRI
    61f6:	f382 8812 	msr	BASEPRI_MAX, r2
    61fa:	f3bf 8f6f 	isb	sy
    61fe:	e007      	b.n	6210 <z_ready_thread+0x28>
			ready_thread(thread);
    6200:	4620      	mov	r0, r4
    6202:	f7fe f841 	bl	4288 <ready_thread>
	__asm__ volatile(
    6206:	f385 8811 	msr	BASEPRI, r5
    620a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    620e:	2301      	movs	r3, #1
    6210:	b92b      	cbnz	r3, 621e <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    6212:	4620      	mov	r0, r4
    6214:	f7ff ffb6 	bl	6184 <thread_active_elsewhere>
    6218:	2800      	cmp	r0, #0
    621a:	d1f4      	bne.n	6206 <z_ready_thread+0x1e>
    621c:	e7f0      	b.n	6200 <z_ready_thread+0x18>
}
    621e:	bd38      	pop	{r3, r4, r5, pc}

00006220 <z_thread_timeout>:
{
    6220:	b570      	push	{r4, r5, r6, lr}
    6222:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    6224:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    6228:	2300      	movs	r3, #0
	__asm__ volatile(
    622a:	f04f 0220 	mov.w	r2, #32
    622e:	f3ef 8611 	mrs	r6, BASEPRI
    6232:	f382 8812 	msr	BASEPRI_MAX, r2
    6236:	f3bf 8f6f 	isb	sy
    623a:	e019      	b.n	6270 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    623c:	4628      	mov	r0, r5
    623e:	f7ff ffa3 	bl	6188 <pended_on_thread>
    6242:	4629      	mov	r1, r5
    6244:	f7ff ffc1 	bl	61ca <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6248:	7b6b      	ldrb	r3, [r5, #13]
    624a:	f023 0302 	bic.w	r3, r3, #2
    624e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    6250:	2300      	movs	r3, #0
    6252:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6254:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6258:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    625c:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6260:	4628      	mov	r0, r5
    6262:	f7fe f811 	bl	4288 <ready_thread>
	__asm__ volatile(
    6266:	f386 8811 	msr	BASEPRI, r6
    626a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    626e:	2301      	movs	r3, #1
    6270:	b94b      	cbnz	r3, 6286 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    6272:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    6276:	f013 0f28 	tst.w	r3, #40	; 0x28
    627a:	d1f4      	bne.n	6266 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    627c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6280:	2b00      	cmp	r3, #0
    6282:	d1db      	bne.n	623c <z_thread_timeout+0x1c>
    6284:	e7e6      	b.n	6254 <z_thread_timeout+0x34>
}
    6286:	bd70      	pop	{r4, r5, r6, pc}

00006288 <add_to_waitq_locked>:
{
    6288:	b570      	push	{r4, r5, r6, lr}
    628a:	4605      	mov	r5, r0
    628c:	460e      	mov	r6, r1
	unready_thread(thread);
    628e:	f7fe f859 	bl	4344 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6292:	7b6b      	ldrb	r3, [r5, #13]
    6294:	f043 0302 	orr.w	r3, r3, #2
    6298:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    629a:	b1b6      	cbz	r6, 62ca <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    629c:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    629e:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    62a0:	42a6      	cmp	r6, r4
    62a2:	d019      	beq.n	62d8 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    62a4:	b164      	cbz	r4, 62c0 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    62a6:	4621      	mov	r1, r4
    62a8:	4628      	mov	r0, r5
    62aa:	f7ff ff6f 	bl	618c <z_sched_prio_cmp>
    62ae:	2800      	cmp	r0, #0
    62b0:	dc0c      	bgt.n	62cc <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    62b2:	b12c      	cbz	r4, 62c0 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    62b4:	6873      	ldr	r3, [r6, #4]
    62b6:	429c      	cmp	r4, r3
    62b8:	d002      	beq.n	62c0 <add_to_waitq_locked+0x38>
    62ba:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    62bc:	2c00      	cmp	r4, #0
    62be:	d1f1      	bne.n	62a4 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    62c0:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    62c2:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    62c4:	606b      	str	r3, [r5, #4]
	tail->next = node;
    62c6:	601d      	str	r5, [r3, #0]
	list->tail = node;
    62c8:	6075      	str	r5, [r6, #4]
}
    62ca:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    62cc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    62ce:	606b      	str	r3, [r5, #4]
	node->next = successor;
    62d0:	602c      	str	r4, [r5, #0]
	prev->next = node;
    62d2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    62d4:	6065      	str	r5, [r4, #4]
}
    62d6:	e7f8      	b.n	62ca <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    62d8:	2400      	movs	r4, #0
    62da:	e7e3      	b.n	62a4 <add_to_waitq_locked+0x1c>

000062dc <pend>:
{
    62dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    62e0:	4605      	mov	r5, r0
    62e2:	460f      	mov	r7, r1
    62e4:	4691      	mov	r9, r2
    62e6:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    62e8:	2400      	movs	r4, #0
	__asm__ volatile(
    62ea:	f04f 0320 	mov.w	r3, #32
    62ee:	f3ef 8611 	mrs	r6, BASEPRI
    62f2:	f383 8812 	msr	BASEPRI_MAX, r3
    62f6:	f3bf 8f6f 	isb	sy
    62fa:	b94c      	cbnz	r4, 6310 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    62fc:	4639      	mov	r1, r7
    62fe:	4628      	mov	r0, r5
    6300:	f7ff ffc2 	bl	6288 <add_to_waitq_locked>
	__asm__ volatile(
    6304:	f386 8811 	msr	BASEPRI, r6
    6308:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    630c:	2401      	movs	r4, #1
    630e:	e7f4      	b.n	62fa <pend+0x1e>
	add_thread_timeout(thread, timeout);
    6310:	464a      	mov	r2, r9
    6312:	4643      	mov	r3, r8
    6314:	4628      	mov	r0, r5
    6316:	f7fd fe6b 	bl	3ff0 <add_thread_timeout>
}
    631a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000631e <z_unpend_first_thread>:
{
    631e:	b570      	push	{r4, r5, r6, lr}
    6320:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    6322:	2300      	movs	r3, #0
	__asm__ volatile(
    6324:	f04f 0220 	mov.w	r2, #32
    6328:	f3ef 8511 	mrs	r5, BASEPRI
    632c:	f382 8812 	msr	BASEPRI_MAX, r2
    6330:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    6334:	461c      	mov	r4, r3
    6336:	e013      	b.n	6360 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6338:	f7ff ff26 	bl	6188 <pended_on_thread>
    633c:	4621      	mov	r1, r4
    633e:	f7ff ff44 	bl	61ca <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6342:	7b63      	ldrb	r3, [r4, #13]
    6344:	f023 0302 	bic.w	r3, r3, #2
    6348:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    634a:	2300      	movs	r3, #0
    634c:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    634e:	f104 0018 	add.w	r0, r4, #24
    6352:	f000 f826 	bl	63a2 <z_abort_timeout>
	__asm__ volatile(
    6356:	f385 8811 	msr	BASEPRI, r5
    635a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    635e:	2301      	movs	r3, #1
    6360:	b933      	cbnz	r3, 6370 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    6362:	4630      	mov	r0, r6
    6364:	f7ff ff39 	bl	61da <z_priq_dumb_best>
		if (thread != NULL) {
    6368:	4604      	mov	r4, r0
    636a:	2800      	cmp	r0, #0
    636c:	d1e4      	bne.n	6338 <z_unpend_first_thread+0x1a>
    636e:	e7f2      	b.n	6356 <z_unpend_first_thread+0x38>
}
    6370:	4620      	mov	r0, r4
    6372:	bd70      	pop	{r4, r5, r6, pc}

00006374 <remove_timeout>:
{
    6374:	b538      	push	{r3, r4, r5, lr}
    6376:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    6378:	f7fe f9ea 	bl	4750 <next>
    637c:	b148      	cbz	r0, 6392 <remove_timeout+0x1e>
    637e:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    6380:	6920      	ldr	r0, [r4, #16]
    6382:	6965      	ldr	r5, [r4, #20]
    6384:	6913      	ldr	r3, [r2, #16]
    6386:	6951      	ldr	r1, [r2, #20]
    6388:	181b      	adds	r3, r3, r0
    638a:	eb45 0101 	adc.w	r1, r5, r1
    638e:	6113      	str	r3, [r2, #16]
    6390:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    6392:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    6394:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    6396:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6398:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    639a:	2300      	movs	r3, #0
    639c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    639e:	6063      	str	r3, [r4, #4]
}
    63a0:	bd38      	pop	{r3, r4, r5, pc}

000063a2 <z_abort_timeout>:
{
    63a2:	b570      	push	{r4, r5, r6, lr}
    63a4:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    63a6:	2300      	movs	r3, #0
	__asm__ volatile(
    63a8:	f04f 0220 	mov.w	r2, #32
    63ac:	f3ef 8611 	mrs	r6, BASEPRI
    63b0:	f382 8812 	msr	BASEPRI_MAX, r2
    63b4:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    63b8:	f06f 0015 	mvn.w	r0, #21
    63bc:	e008      	b.n	63d0 <z_abort_timeout+0x2e>
			remove_timeout(to);
    63be:	4620      	mov	r0, r4
    63c0:	f7ff ffd8 	bl	6374 <remove_timeout>
			ret = 0;
    63c4:	4628      	mov	r0, r5
	__asm__ volatile(
    63c6:	f386 8811 	msr	BASEPRI, r6
    63ca:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    63ce:	2301      	movs	r3, #1
    63d0:	461d      	mov	r5, r3
    63d2:	b91b      	cbnz	r3, 63dc <z_abort_timeout+0x3a>
	return node->next != NULL;
    63d4:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    63d6:	2b00      	cmp	r3, #0
    63d8:	d1f1      	bne.n	63be <z_abort_timeout+0x1c>
    63da:	e7f4      	b.n	63c6 <z_abort_timeout+0x24>
}
    63dc:	bd70      	pop	{r4, r5, r6, pc}

000063de <z_get_next_timeout_expiry>:
{
    63de:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    63e0:	2300      	movs	r3, #0
	__asm__ volatile(
    63e2:	f04f 0220 	mov.w	r2, #32
    63e6:	f3ef 8411 	mrs	r4, BASEPRI
    63ea:	f382 8812 	msr	BASEPRI_MAX, r2
    63ee:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    63f2:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
    63f6:	b93b      	cbnz	r3, 6408 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    63f8:	f7fe f9c2 	bl	4780 <next_timeout>
	__asm__ volatile(
    63fc:	f384 8811 	msr	BASEPRI, r4
    6400:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6404:	2301      	movs	r3, #1
    6406:	e7f6      	b.n	63f6 <z_get_next_timeout_expiry+0x18>
}
    6408:	bd10      	pop	{r4, pc}

0000640a <z_set_timeout_expiry>:
{
    640a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    640c:	4606      	mov	r6, r0
    640e:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    6410:	2300      	movs	r3, #0
	__asm__ volatile(
    6412:	f04f 0220 	mov.w	r2, #32
    6416:	f3ef 8511 	mrs	r5, BASEPRI
    641a:	f382 8812 	msr	BASEPRI_MAX, r2
    641e:	f3bf 8f6f 	isb	sy
    6422:	e00a      	b.n	643a <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    6424:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    6426:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    642a:	2801      	cmp	r0, #1
    642c:	dd00      	ble.n	6430 <z_set_timeout_expiry+0x26>
    642e:	b97c      	cbnz	r4, 6450 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    6430:	f385 8811 	msr	BASEPRI, r5
    6434:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6438:	2301      	movs	r3, #1
    643a:	461c      	mov	r4, r3
    643c:	b97b      	cbnz	r3, 645e <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    643e:	f7fe f99f 	bl	4780 <next_timeout>
			      || (ticks <= next_to);
    6442:	f1b0 3fff 	cmp.w	r0, #4294967295
    6446:	d0ed      	beq.n	6424 <z_set_timeout_expiry+0x1a>
    6448:	42b0      	cmp	r0, r6
    644a:	dbec      	blt.n	6426 <z_set_timeout_expiry+0x1c>
    644c:	2401      	movs	r4, #1
    644e:	e7ea      	b.n	6426 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6450:	4639      	mov	r1, r7
    6452:	42b0      	cmp	r0, r6
    6454:	bfa8      	it	ge
    6456:	4630      	movge	r0, r6
    6458:	f7fc fb64 	bl	2b24 <sys_clock_set_timeout>
    645c:	e7e8      	b.n	6430 <z_set_timeout_expiry+0x26>
}
    645e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006460 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    6460:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6462:	f7fe fabf 	bl	49e4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6466:	bd08      	pop	{r3, pc}

00006468 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    6468:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    646a:	f7fe fabb 	bl	49e4 <sys_clock_tick_get>
}
    646e:	bd08      	pop	{r3, pc}

00006470 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6470:	b900      	cbnz	r0, 6474 <z_impl_k_busy_wait+0x4>
    6472:	4770      	bx	lr
{
    6474:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6476:	f7fb fbbb 	bl	1bf0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    647a:	bd08      	pop	{r3, pc}

0000647c <k_heap_init>:
{
    647c:	b510      	push	{r4, lr}
    647e:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    6482:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    6484:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    6486:	f7fe fd71 	bl	4f6c <sys_heap_init>
}
    648a:	bd10      	pop	{r4, pc}

0000648c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    648c:	4770      	bx	lr
	...

00006490 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    6490:	f7fc bca0 	b.w	2dd4 <SystemInit>
